00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/16 7:50:58 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Dissassembler Integration
00000000                             3  * Written by : Samuel Williams
00000000                             4  * Date       : 5/25/2016
00000000                             5  * Description: The file which includes all files
00000000                             6  *              to create a complete dissassembler 
00000000                             7  *-----------------------------------------------------------
00001000                             8      ORG    $1000
00001000                             9  START:                  ; first instruction of program
00001000                            10      
00001000                            11      *INCLUDE 'TEST_CODE_DAMIAN.X68'
00001000                            12      INCLUDE 'EQU_Data.X68'
00001000                            13  
00001000                            14  
00001000  =00000008                 15  MAX_USER_INPUT  EQU 8 
00001000                            16  
00001000                            17  
00001000  =00000606                 18  example          EQU     %0000011000000110
00001000                            19  
00001000  =0000DE61                 20  example1         EQU     %1101111001100001    * I made up bits 0 to 11      
00001000                            21  
00001000  =0000000C                 22  shift            EQU     12                   * Shift 12 bits 
00001000                            23  
00001000  =00000000                 24  mode_dn          EQU     %000
00001000                            25  
00001000  =00000001                 26  mode_an          EQU     %001
00001000                            27  
00001000  =00000002                 28  mode_ian         EQU     %010
00001000                            29  
00001000  =00000003                 30  mode_pian        EQU     %011
00001000                            31  
00001000  =00000004                 32  mode_pdan        EQU     %100
00001000                            33  
00001000  =00000005                 34  mode_awd         EQU     %101
00001000                            35  
00001000  =00000006                 36  mode_awi         EQU     %110
00001000                            37  
00001000  =00000007                 38  mode_pcwd        EQU     %111
00001000                            39  
00001000  =00000002                 40  xn_pcwd          EQU     %010
00001000                            41  
00001000  =00000007                 42  mode_pcwi        EQU     %111
00001000                            43  
00001000  =00000003                 44  xn_pcwi          EQU     %011
00001000                            45  
00001000  =00000007                 46  mode_as          EQU     %111
00001000                            47  
00001000  =00000000                 48  xn_as            EQU     %000
00001000                            49  
00001000  =00000007                 50  mode_al          EQU     %111
00001000                            51  
00001000  =00000001                 52  xn_al            EQU     %001
00001000                            53  
00001000  =00000007                 54  mode_id          EQU     %111
00001000                            55  
00001000  =00000004                 56  xn_id            EQU     %100
00001000                            57  
00001000  =00000000                 58  size_byte        EQU     %00
00001000                            59  
00001000  =00000001                 60  size_word        EQU     %01
00001000                            61  
00001000  =00000003                 62  size_long        EQU     %11
00001000                            63  
00001000  =00000000                 64  direction_right  EQU     %0
00001000                            65  
00001000  =00000001                 66  direction_left   EQU     %1
00001000                            67  
00001000  =00000000                 68  ro_immedate      EQU     %0
00001000                            69  
00001000  =00000001                 70  ro_register      EQU     %1
00001000                            71  
00001000  =00000000                 72  mode_m_dn        EQU     %0
00001000                            73  
00001000  =00000001                 74  mode_m_pdan      EQU     %1
00001000                            75  
00001000  =0000001F                 76  outputCountMax   EQU     31
00001000                            77  
00001000  =00000000                 78  outputCountCurr  EQU     0
00001000                            79            
00001000  =0000000D                 80  CR  EQU $0D
00001000                            81  
00001000  =0000000A                 82  LF  EQU $0A
00001000                            83  
00001000                            84  
00001000                            85  
00001000                            86  
00001000                            87  
00001000                            88  
00001000                            89  -------------------- end include --------------------
00001000                            90      INCLUDE 'INPUT.X68'
00001000                            91      * I/O 
00001000                            92  START_OF_PROGRAM    
00001000                            93      * Welcome message
00001000  43F9 0000262C             94          LEA WELCOME_MESSAGE, A1
00001006  103C 000E                 95          MOVE.B #14, D0
0000100A  4E4F                      96          TRAP #15
0000100C                            97          
0000100C                            98  STARTING_MESSAGE    
0000100C                            99      * Printing out the Starting address message
0000100C  43F9 0000265D            100          LEA STARTING, A1
00001012  103C 000E                101          MOVE.B #14, D0
00001016  4E4F                     102          TRAP #15
00001018                           103      
00001018                           104      * Code for input
00001018  227C 00000200            105          MOVEA.L #$200, A1 *we have to change this addr later
0000101E  103C 0002                106          MOVE.B #2, D0
00001022  4E4F                     107          TRAP #15
00001024  143C 0008                108          MOVE.B #MAX_USER_INPUT, D2
00001028                           109      
00001028                           110      * JSR to convert string function
00001028  4EB9 0000107E            111          JSR CONVERT_STRING   
0000102E                           112      * check if the address is even number
0000102E  E25C                     113          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001030  65DA                     114          BCS STARTING_MESSAGE   *if carry is set then the user typed in an odd address
00001032  E35C                     115          ROL #1, D4     *PUT D4 BACK
00001034                           116         
00001034                           117      * store hex value of inputted string 
00001034  23C4 00002624            118          MOVE.L D4, STARTING_ADDR 
0000103A                           119      * reset the D4
0000103A  4284                     120          CLR.L  D4
0000103C                           121          
0000103C                           122  ENDING_MESSAGE
0000103C                           123      * message user to input
0000103C  43F9 0000267B            124          LEA ENDING, A1   
00001042  103C 000E                125          MOVE.B #14, D0
00001046  4E4F                     126          TRAP #15
00001048                           127      * read user input
00001048  227C 00000200            128          MOVEA.L #$200, A1 *we have to change this addr later
0000104E  103C 0002                129          MOVE.B #2, D0   
00001052  4E4F                     130          TRAP #15
00001054                           131      * counter for loop
00001054  143C 0008                132          MOVE.B #MAX_USER_INPUT, D2   
00001058                           133      * JSR to convert string function
00001058  4EB9 0000107E            134          JSR CONVERT_STRING 
0000105E                           135          
0000105E                           136      * check if the address is even number
0000105E  E25C                     137          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001060  65DA                     138          BCS ENDING_MESSAGE   *if carry is set then the user typed in an odd address
00001062  E35C                     139          ROL #1, D4     *PUT D4 BACK        
00001064                           140          
00001064                           141      * Check if the starting and ending address is the same
00001064                           142         ; CMP.L #STARTING_ADDR, D4
00001064                           143         * MOVE.L #STARTING_ADDR, D5
00001064  2C39 00002624            144          MOVE.L STARTING_ADDR, D6
0000106A  B886                     145          CMP.L  D6, D4
0000106C  6FCE                     146          BLE   ENDING_MESSAGE
0000106E                           147      * store hex value of inputted string   
0000106E  23C4 00002628            148          MOVE.L D4, ENDING_ADDR   
00001074                           149          
00001074                           150      * clear the unused data in the data and address regisgter
00001074  4280                     151          CLR.L D0
00001076  4284                     152          CLR.L D4
00001078                           153          
00001078                           154          * Do error handling here Sam
00001078                           155          
00001078  4EF9 000010DC            156          JMP GO_THROUGH_MEMORY
0000107E                           157      
0000107E                           158      * Get each char
0000107E                           159  CONVERT_STRING 
0000107E  1219                     160          MOVE.B (A1)+, D1
00001080                           161      
00001080                           162      * Go to next instruction for converting
00001080  B23C 0039                163          CMP.B #$39, D1
00001084  6F00 000A                164          BLE NUMBER
00001088                           165          
00001088  B23C 003A                166          CMP.B #$3A, D1
0000108C  6C00 0012                167          BGE CHAR   
00001090                           168      
00001090                           169      * Convert Ascii numbers to hex
00001090                           170  NUMBER  
00001090  B23C 002F                171          CMP.B #$2F, D1
00001094                           172      * Number is out of range
00001094  6F00 0034                173          BLE ERROR       
00001098  0401 0030                174          SUB.B #48, D1
0000109C                           175          
0000109C                           176      * Need to be changed the name of label
0000109C  6000 001A                177          BRA STORE_ADDR    
000010A0                           178      
000010A0                           179      * Convert Ascii charaters to hex
000010A0                           180  CHAR    
000010A0  B27C 0040                181          CMP #$40, D1
000010A4                           182      * Number is out of range
000010A4  6F00 0024                183          BLE ERROR
000010A8                           184          
000010A8  B27C 0047                185          CMP #$47, D1
000010AC                           186      * Number is out of range
000010AC  6C00 001C                187          BGE ERROR
000010B0                           188          
000010B0  0401 0037                189          SUB.B #55, D1
000010B4  6000 0002                190          BRA STORE_ADDR
000010B8                           191          
000010B8                           192  STORE_ADDR
000010B8                           193      * Add converted nibble to overall number
000010B8  D801                     194          ADD.B D1, D4
000010BA                           195      * Clear D1 for reuse 
000010BA  4201                     196          CLR.B D1
000010BC                           197      * Subtract from counter
000010BC  5342                     198          SUB #1, D2
000010BE                           199      * If counter is 0, we compared all 8 hex numbers
000010BE  B43C 0000                200          CMP.B #0, D2
000010C2  6700 0016                201          BEQ ENDCONV
000010C6                           202      * Shift the overall number to the left by 1 nibble, so it will fit next hex number
000010C6  E98C                     203          LSL.L #4, D4
000010C8  60B4                     204          BRA CONVERT_STRING
000010CA                           205          
000010CA                           206      * Error handling
000010CA                           207  ERROR
000010CA  43F9 000026AA            208      LEA   ERROR_MSG, A1 
000010D0  103C 000E                209      MOVE.B #14, D0
000010D4  4E4F                     210      TRAP #15
000010D6  4EF8 100C                211      JMP   STARTING_MESSAGE
000010DA                           212  
000010DA                           213      
000010DA                           214  ENDCONV * Next instruction starts 
000010DA  4E75                     215          RTS
000010DC                           216         * MOVE.L D4, STARTING_ADDR 
000010DC                           217          
000010DC                           218  GO_THROUGH_MEMORY
000010DC                           219  
000010DC                           220  
000010DC                           221  
000010DC                           222  
000010DC                           223  
000010DC                           224  
000010DC                           225  
000010DC                           226  
000010DC                           227  
000010DC                           228  
000010DC                           229  
000010DC                           230  
000010DC                           231  
000010DC                           232  
000010DC                           233  
000010DC                           234  
000010DC                           235  
000010DC                           236  
000010DC                           237  
000010DC                           238  
000010DC                           239  
000010DC                           240  
000010DC                           241  
000010DC                           242  
000010DC                           243  
000010DC                           244  
000010DC                           245  
000010DC                           246  -------------------- end include --------------------
000010DC                           247      INCLUDE 'MEMORY_PARSER.X68'
000010DC                           248  
000010DC  2A79 00002624            249                  MOVEA.L   STARTING_ADDR, A5
000010E2  2C4D                     250                  MOVEA.L   A5, A6
000010E4  247C 0000001F            251                  MOVEA.L  #outputCountMax, A2
000010EA  267C 00000000            252                  MOVEA.L  #outputCountCurr, A3
000010F0                           253  PARSE_MEMORY      
000010F0  3A4E                     254                  MOVE.W   A6, A5
000010F2  43F9 000026E6            255                  LEA      CR_LF, A1
000010F8  103C 000E                256                  MOVE.B   #14, D0
000010FC  4E4F                     257                  TRAP #15  
000010FE                           258          
000010FE                           259  PARSE_MEMORY_FIRST    
000010FE  BDF9 00002628            260                  CMPA.L   ENDING_ADDR, A6
00001104  6700 14CE                261                  BEQ      ASK_TO_CONTINUE
00001108  301E                     262                  MOVE.W   (A6)+, D0
0000110A                           263                  
0000110A  B7FC 0000001F            264                  CMPA.L   #outputCountMax, A3
00001110  6700 1498                265                  BEQ       PRESS_ENTER_CONTINUE
00001114                           266  CONTINUE_PARSE
00001114  528B                     267                  ADDA.L    #1, A3
00001116                           268                  
00001116                           269  
00001116  3A0D                     270                  MOVE.W      A5, D5
00001118                           271                  
00001118  4EB9 0000231A            272                  JSR      HEX_TO_ASCII
0000111E                           273                  
0000111E  43F9 000027B6            274                  LEA      SPACE, A1
00001124                           275                  
00001124  103C 000E                276                  MOVE.B   #14, D0
00001128                           277                  
00001128  4E4F                     278                  TRAP #15
0000112A                           279                  
0000112A  3015                     280                  MOVE.W   (A5), D0
0000112C                           281                  
0000112C  4EF9 00001132            282                  JMP      NEXT_INSTRUCTION
00001132                           283                      
00001132                           284  NEXT_INSTRUCTION
00001132                           285                  INCLUDE 'JUMPTABLE DAMIAN-V1.X68'
00001132                           286   
00001132                           287  
00001132  3015                     288                   MOVE.W  (A5),D0
00001134                           289  
00001134                           290  
00001134                           291  
00001134  41F9 0000114C            292                   LEA     jmp_table,A0    *Index into the table
0000113A                           293  
0000113A  4280                     294                   CLR.L   D0              *Zero it
0000113C                           295  
0000113C  3015                     296                   MOVE.W  (A5),D0     *We'll play with it here
0000113E                           297  
0000113E  123C 000C                298                   MOVE.B  #shift,D1       *Shift 12 bits to the right  
00001142                           299  
00001142  E268                     300                   LSR.W   D1,D0           *Move the bits
00001144                           301  
00001144                           302  
00001144                           303  
00001144                           304  
00001144                           305   
00001144                           306  
00001144  C0FC 0006                307                 MULU        #6,D0       *Form offset     
00001148                           308  
00001148  4EB0 0000                309                 JSR         0(A0,D0)   *Jump indirect with index
0000114C                           310  
0000114C                           311                      
0000114C                           312  
0000114C  4EF9 000011AC            313  jmp_table      JMP         code0000
00001152                           314  
00001152  4EF9 000011B0            315                 JMP         code0001
00001158                           316  
00001158  4EF9 000011B4            317                 JMP         code0010
0000115E                           318  
0000115E  4EF9 000011B8            319                 JMP         code0011
00001164                           320  
00001164  4EF9 000011BC            321                 JMP         code0100
0000116A                           322  
0000116A  4EF9 000011C0            323                 JMP         code0101
00001170                           324  
00001170  4EF9 000011C4            325                 JMP         code0110
00001176                           326  
00001176  4EF9 000011C8            327                 JMP         code0111
0000117C                           328  
0000117C  4EF9 000011CC            329                 JMP         code1000
00001182                           330  
00001182  4EF9 000011D0            331                 JMP         code1001
00001188                           332  
00001188  4EF9 000011D4            333                 JMP         code1010
0000118E                           334  
0000118E  4EF9 000011D8            335                 JMP         code1011
00001194                           336  
00001194  4EF9 000011DC            337                 JMP         code1100
0000119A                           338  
0000119A  4EF9 000011E0            339                 JMP         code1101
000011A0                           340  
000011A0  4EF9 000011E4            341                 JMP         code1110
000011A6                           342  
000011A6  4EF9 000011E8            343                 JMP         code1111
000011AC                           344  
000011AC                           345          
000011AC                           346  
000011AC                           347   
000011AC                           348  
000011AC                           349  
000011AC                           350   
000011AC                           351  
000011AC                           352   
000011AC                           353  
000011AC  6000 01F0                354  code0000       BRA         ADDI
000011B0                           355  
000011B0  6000 0EAA                356  code0001       BRA         MOVEB
000011B4                           357  
000011B4  6000 0EF8                358  code0010       BRA         MOVEL
000011B8                           359  
000011B8  6000 0EC0                360  code0011       BRA         MOVEW
000011BC                           361  
000011BC  6000 0660                362  code0100       BRA         GROUP_0100_CODE
000011C0                           363  
000011C0  6000 02E2                364  code0101       BRA         ADDQ   * Subroutine for ADDQ
000011C4                           365  
000011C4  6000 0FAC                366  code0110       BRA         BCC
000011C8                           367  
000011C8  6000 0BBA                368  code0111       BRA         MOVEQ
000011CC                           369  
000011CC  6000 059A                370  code1000       BRA         DIVU_OR
000011D0                           371  
000011D0  6000 03DA                372  code1001       BRA         SUB    * Subroutine for SUB
000011D4                           373  
000011D4  4E72 2700                374  code1010       STOP        #$2700
000011D8                           375  
000011D8                           376   
000011D8                           377  
000011D8                           378  
000011D8                           379  
000011D8                           380  
000011D8                           381   * another jump table to the 8 possible op-codes at the next level.
000011D8                           382  
000011D8                           383   
000011D8                           384  
000011D8  6000 039C                385  code1011       BRA        CMP  * Subroutuine for CMP
000011DC                           386  
000011DC  6000 06A2                387  code1100       BRA        MULS_AND
000011E0                           388  
000011E0  6000 000A                389  code1101       BRA         ADD_ADDA       *#$2700
000011E4                           390  
000011E4  6000 0C04                391  code1110       BRA         SHIFTS
000011E8                           392  
000011E8  4E72 2700                393  code1111       STOP        #$2700
000011EC                           394                   
000011EC                           395  
000011EC                           396                      
000011EC                           397              
000011EC                           398  
000011EC                           399  
000011EC                           400  
000011EC                           401  
000011EC                           402  
000011EC                           403  
000011EC                           404  
000011EC                           405  
000011EC                           406  
000011EC                           407  
000011EC                           408  
000011EC                           409  
000011EC                           410  
000011EC                           411  
000011EC                           412  
000011EC                           413  
000011EC                           414  
000011EC                           415  -------------------- end include --------------------
000011EC                           416                  INCLUDE 'ADD_ADDA.X68'
000011EC                           417    
000011EC                           418  
000011EC                           419          
000011EC                           420  
000011EC                           421                  * INCLUDE 'CMP.X68'
000011EC                           422                  * INCLUDE 'SUB.X68'
000011EC                           423                  * INCLUDE 'DIVU_OR.X68'
000011EC                           424                  * INCLUDE 'MULS_AND.X68'
000011EC                           425    
000011EC                           426  ADD_ADDA  *at this point we know the first 4 bits are 1101 -> ADD or ADDA -> compare the destination opmode
000011EC                           427                   
000011EC  4EB9 000012F0            428                   JSR      GET_SIZE_PURPLE
000011F2                           429                                              
000011F2  BA3C 0003                430                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is ADDA
000011F6                           431                   
000011F6  6700 0008                432                   BEQ      ADDA_CODE
000011FA                           433                   
000011FA  4EF9 00001274            434                   JMP      ADD_CODE
00001200                           435                   
00001200                           436  ADDA_CODE 
00001200                           437                   * ADDA opcode message
00001200  43F9 00002780            438                   LEA ADDA_MESSAGE, A1
00001206                           439                   
00001206  103C 000E                440                   MOVE.B #14, D0
0000120A                           441                   
0000120A  4E4F                     442                   TRAP #15
0000120C                           443                   
0000120C  4285                     444                   CLR.L D5         * clear for the size since this is not for the size purple
0000120E                           445                   
0000120E  4280                     446                   CLR.L D0                *clear D0
00001210                           447                   
00001210  4281                     448                   CLR.L D1                *clear D1
00001212                           449                   
00001212  3015                     450                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001214                           451                   
00001214  EF48                     452                   LSL.W   #7, D0
00001216                           453  
00001216  123C 000D                454                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the
0000121A                           455  
0000121A  E268                     456                   LSR.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000121C                           457                   
0000121C  B03C 0003                458                   CMP.B   #%011, D0
00001220                           459                   
00001220  6700 002E                460                   BEQ     PRINTOUT_SIZE_W
00001224                           461                   
00001224  4EF9 00001262            462                   JMP     PRINTOUT_SIZE_L
0000122A                           463                   
0000122A                           464  FINISH_PRINTING_SIZE
0000122A                           465  
0000122A  4EB9 00001374            466                   JSR     Set_Ea
00001230                           467                   
00001230  4EB9 000023B8            468                   JSR     PRINT_EA *by using jmp table
00001236                           469                   
00001236  4EB9 00001352            470                   JSR     PRINT_COMMA
0000123C                           471                   
0000123C                           472                    * for the first Dn 
0000123C  4EB9 00001362            473                   JSR     GET_Data_Register
00001242                           474                   
00001242  1C3C 0001                475                   MOVE.B  #%001, D6 * for mode
00001246                           476  
00001246  4EB9 000023B8            477                   JSR     PRINT_EA *by using jmp table
0000124C                           478  
0000124C  4EF8 10F0                479                   JMP     PARSE_MEMORY
00001250                           480                   
00001250                           481  PRINTOUT_SIZE_W
00001250                           482                   
00001250  3A3C 0001                483                   MOVE    #%01, D5          
00001254                           484                   
00001254  43F9 000027A4            485                   LEA      SIZE_W_PRINT,    A1
0000125A                           486                   
0000125A  103C 000E                487                   MOVE.B   #14,             D0
0000125E                           488          
0000125E  4E4F                     489                   TRAP #15
00001260                           490                   
00001260  60C8                     491                   BRA     FINISH_PRINTING_SIZE
00001262                           492                   
00001262                           493  PRINTOUT_SIZE_L                           
00001262  3A3C 0002                494                   MOVE    #%10, D5          
00001266                           495                   
00001266  43F9 000027AA            496                   LEA      SIZE_L_PRINT,    A1
0000126C                           497                   
0000126C  103C 000E                498                   MOVE.B   #14,             D0 
00001270                           499         
00001270  4E4F                     500                   TRAP #15
00001272                           501                   
00001272  60B6                     502                   BRA     FINISH_PRINTING_SIZE
00001274                           503  
00001274                           504  ADD_CODE
00001274                           505                   * ADD message
00001274  43F9 0000277B            506                   LEA      ADD_MESSAGE,    A1
0000127A  103C 000E                507                   MOVE.B   #14,            D0
0000127E  4E4F                     508                   TRAP #15
00001280                           509                   
00001280  4EB9 00001308            510                   JSR     PRINTOUT_SIZE_PURPLE
00001286                           511                   
00001286                           512                   * check for dn and ea
00001286  4280                     513                   CLR.L D0                *clear D0
00001288                           514                   
00001288  4281                     515                   CLR.L D1                *clear D1
0000128A                           516                   
0000128A  3015                     517                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000128C                           518                   
0000128C                           519                   * check the bit at 7
0000128C  123C 0007                520                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001290                           521  
00001290  E368                     522                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001292                           523                   
00001292  123C 000F                524                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
00001296                           525  
00001296  E268                     526                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
00001298                           527                   
00001298  B03C 0000                528                   CMP.B   #0, D0
0000129C                           529                   
0000129C                           530                 *  BTST    #8, D0 * if the bit at 8 is 1, the ccr of z is set to 0
0000129C                           531                   
0000129C                           532                   
0000129C  6700 002A                533                   BEQ     ADD_FIRST_EA
000012A0                           534                   
000012A0                           535                   * for the first Dn 
000012A0  4EB9 00001362            536                   JSR     GET_Data_Register
000012A6                           537                   
000012A6  4286                     538                   CLR.L   D6
000012A8                           539                   
000012A8  1C3C 0000                540                   MOVE.B  #%000, D6 * for mode
000012AC                           541                   
000012AC  4EB9 000023B8            542                   JSR     PRINT_EA *by using jmp table
000012B2                           543                   
000012B2  4EB9 00001352            544                   JSR     PRINT_COMMA
000012B8                           545                   
000012B8  4EB9 00001374            546                   JSR     Set_Ea
000012BE                           547                   
000012BE  4EB9 000023B8            548                   JSR     PRINT_EA *by using jmp table
000012C4                           549                   
000012C4  4EF8 10F0                550                   JMP     PARSE_MEMORY
000012C8                           551                   
000012C8                           552  ADD_FIRST_EA
000012C8  4EB9 00001374            553                   JSR     Set_Ea
000012CE                           554                   
000012CE  4EB9 000023B8            555                   JSR     PRINT_EA *by using jmp table
000012D4                           556                   
000012D4  4EB9 00001352            557                   JSR     PRINT_COMMA
000012DA                           558                   
000012DA                           559                    * for the first Dn 
000012DA  4EB9 00001362            560                   JSR     GET_Data_Register
000012E0                           561                   
000012E0  4286                     562                   CLR.L   D6
000012E2                           563                   
000012E2  1C3C 0000                564                   MOVE.B  #%000, D6 * for mode
000012E6                           565  
000012E6  4EB9 000023B8            566                   JSR     PRINT_EA *by using jmp table
000012EC                           567                   
000012EC  4EF8 10F0                568                   JMP     PARSE_MEMORY
000012F0                           569                   
000012F0                           570  GET_SIZE_PURPLE * get the op-code 
000012F0                           571  
000012F0  4280                     572                   CLR.L D0                *clear D0
000012F2                           573                   
000012F2  4281                     574                   CLR.L D1                *clear D1
000012F4                           575                   
000012F4  3015                     576                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000012F6                           577  
000012F6  123C 0008                578                   MOVE.B  #8,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000012FA                           579  
000012FA  E368                     580                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000012FC                           581                   
000012FC  123C 000E                582                   MOVE.B  #14,D1          *14 bits is the number of times to shift to hold the mode number
00001300                           583  
00001300  E268                     584                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
00001302                           585                   
00001302  4285                     586                   CLR.L   D5
00001304                           587                   
00001304  1A00                     588                   MOVE.B  D0, D5          *push the size to the Data register 5 for the future use
00001306                           589                   
00001306  4E75                     590                   RTS 
00001308                           591  
00001308                           592  PRINTOUT_SIZE_PURPLE * get the size for ADDI, CLR, ADDQ, OR, SUB, CMP, AND, ADD
00001308                           593                       
00001308  BA7C 0000                594                   CMP    #%00, D5          
0000130C                           595                   
0000130C  6700 0014                596                   BEQ    PRINT_B
00001310                           597                   
00001310  BA7C 0001                598                   CMP    #%01, D5          
00001314                           599                   
00001314  6700 001C                600                   BEQ    PRINT_W
00001318                           601                   
00001318  BA7C 0002                602                   CMP    #%10, D5          
0000131C                           603                   
0000131C  6700 0024                604                   BEQ    PRINT_L
00001320                           605                   
00001320                           606  DONE_PRINTING
00001320  4E75                     607                   RTS 
00001322                           608                   
00001322                           609  PRINT_B          
00001322  43F9 0000279E            610                   LEA      SIZE_B_PRINT,    A1
00001328  103C 000E                611                   MOVE.B   #14,            D0          
0000132C  4E4F                     612                   TRAP #15
0000132E                           613  
0000132E  4EF8 1320                614                   JMP      DONE_PRINTING
00001332                           615                   
00001332                           616  PRINT_W     
00001332  43F9 000027A4            617                   LEA      SIZE_W_PRINT,    A1
00001338  103C 000E                618                   MOVE.B   #14,             D0          
0000133C  4E4F                     619                   TRAP #15
0000133E                           620  
0000133E  4EF8 1320                621                   JMP      DONE_PRINTING
00001342                           622  
00001342                           623  
00001342                           624  PRINT_L          
00001342  43F9 000027AA            625                   LEA      SIZE_L_PRINT,    A1
00001348  103C 000E                626                   MOVE.B   #14,             D0          
0000134C  4E4F                     627                   TRAP #15   
0000134E                           628                      
0000134E  4EF8 1320                629                   JMP    DONE_PRINTING
00001352                           630                   
00001352                           631  PRINT_COMMA
00001352  43F9 000027D0            632                   LEA COMMA, A1
00001358  103C 000E                633                   MOVE.B #14, D0
0000135C  4E4F                     634                   TRAP #15
0000135E                           635                   
0000135E  4EF8 1320                636                   JMP    DONE_PRINTING
00001362                           637                   
00001362                           638  GET_Data_Register
00001362  4280                     639                   CLR.L D0                *clear D0
00001364                           640                   
00001364  4281                     641                   CLR.L D1                *clear D1
00001366                           642                   
00001366  3015                     643                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001368                           644  
00001368  E948                     645                   LSL.W   #4,D0           *Shift the bits 4 times -> D0 now removes the opcode & reg#
0000136A                           646                   
0000136A  123C 000D                647                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
0000136E                           648  
0000136E  E268                     649                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001370                           650  
00001370  1E00                     651                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00001372                           652                   
00001372  4E75                     653                   RTS
00001374                           654                   
00001374                           655  Set_Ea
00001374                           656  
00001374                           657                   * set register
00001374  4280                     658                   CLR.L D0                *clear D0
00001376                           659                   
00001376  4281                     660                   CLR.L D1                *clear D1
00001378                           661                   
00001378  3015                     662                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000137A                           663                 
0000137A  123C 000D                664                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000137E                           665  
0000137E  E368                     666                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001380                           667  
00001380  E268                     668                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001382                           669                   
00001382  4287                     670                   CLR.L D7                *clear D7 
00001384                           671  
00001384  1E00                     672                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00001386                           673                   
00001386                           674                   * set mode
00001386  4280                     675                   CLR.L D0                *clear D0
00001388                           676                   
00001388  4281                     677                   CLR.L D1                *clear D1
0000138A                           678                   
0000138A  3015                     679                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000138C                           680                 
0000138C  123C 000A                681                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001390                           682  
00001390  E368                     683                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001392                           684  
00001392  123C 000D                685                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001396                           686  
00001396  E268                     687                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001398                           688                   
00001398  4286                     689                   CLR.L D6                *clear D6
0000139A                           690  
0000139A  1C00                     691                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
0000139C                           692                   
0000139C  4E75                     693                   RTS
0000139E                           694                   
0000139E                           695                  
0000139E                           696  
0000139E                           697  
0000139E                           698  
0000139E                           699  
0000139E                           700  
0000139E                           701  
0000139E                           702  
0000139E                           703  
0000139E                           704  
0000139E                           705  
0000139E                           706  
0000139E                           707  
0000139E                           708  
0000139E                           709  
0000139E                           710  
0000139E                           711  
0000139E                           712  
0000139E                           713  
0000139E                           714  
0000139E                           715  
0000139E                           716  
0000139E                           717  
0000139E                           718  
0000139E                           719  
0000139E                           720  
0000139E                           721  
0000139E                           722  
0000139E                           723  
0000139E                           724  
0000139E                           725  
0000139E                           726  
0000139E                           727  
0000139E                           728  -------------------- end include --------------------
0000139E                           729                  INCLUDE 'ADDI.X68'
0000139E                           730    
0000139E                           731  ADDI           * first check the first 4 bits after the op-code
0000139E  4280                     732                 CLR.L       D0
000013A0                           733  
000013A0  4281                     734                 CLR.L       D1
000013A2                           735                 
000013A2  3015                     736                 MOVE.W      (A5),D0
000013A4                           737                 
000013A4  123C 0008                738                 MOVE.B      #8, D1 * for shifting to the right by 8 bits
000013A8                           739                 
000013A8  E268                     740                 LSR.W       D1, D0
000013AA                           741                 
000013AA  B07C 0006                742                 CMP.W       #6, D0 * checking the first 4 bits 
000013AE                           743                 
000013AE  6600 FD1A                744                 BNE         ERROR  * go to error 
000013B2                           745                 
000013B2                           746                 * print the op-code 
000013B2  4280                     747                 CLR.L       D0
000013B4                           748  
000013B4  4281                     749                 CLR.L       D1
000013B6                           750                 
000013B6  43F9 000026E9            751                 LEA         ADDI_MESSAGE, A1    * NOTE - how do you know this is of size B ????? 
000013BC                           752                 
000013BC  103C 000E                753                 MOVE.B      #14, D0
000013C0                           754                 
000013C0  4E4F                     755                 TRAP #15
000013C2                           756                                
000013C2                           757                 * print the size
000013C2  4280                     758                 CLR.L       D0
000013C4                           759  
000013C4  4281                     760                 CLR.L       D1
000013C6                           761                 
000013C6  3015                     762                 MOVE.W      (A5),D0
000013C8                           763                
000013C8  E148                     764                 LSL.W       #8, D0
000013CA                           765  
000013CA  123C 000E                766                 MOVE.B      #14, D1 * for shifting to the right by 8 bits
000013CE                           767                 
000013CE  E268                     768                 LSR.W       D1, D0
000013D0                           769                 
000013D0                           770                 * D1 holds the size
000013D0                           771    *             CLR.L       D1
000013D0                           772                 
000013D0                           773    *             MOVE.B      D0, D1
000013D0                           774                   
000013D0  B03C 0000                775                 CMP.B       #%00, D0
000013D4                           776                 
000013D4  6700 0038                777                 BEQ         ADDI_B_SIZE
000013D8                           778                 
000013D8  B03C 0001                779                 CMP.B       #%01, D0
000013DC                           780                 
000013DC  6700 0060                781                 BEQ         ADDI_W_SIZE
000013E0                           782                 
000013E0                           783                 *print size L
000013E0  43F9 000027AA            784                 LEA         SIZE_L_PRINT, A1     
000013E6                           785                 
000013E6  103C 000E                786                 MOVE.B      #14, D0
000013EA                           787                 
000013EA  4E4F                     788                 TRAP #15
000013EC                           789                 
000013EC                           790                * print out pound sign and hex sign
000013EC  43F9 000027B0            791                 LEA     POUND_SIGN, A1
000013F2                           792              
000013F2  103C 000E                793                 MOVE.B  #14, D0
000013F6                           794              
000013F6  4E4F                     795                 TRAP #15
000013F8                           796              
000013F8  43F9 000027B2            797                 LEA     HEX_SIGN, A1
000013FE                           798              
000013FE  4E4F                     799                 TRAP #15
00001400                           800                 
00001400  4285                     801                 CLR.L  D5
00001402                           802          
00001402  2A1E                     803                 MOVE.L (A6)+, D5 * we mimght change it later
00001404                           804          
00001404  4EB9 0000231A            805                 JSR  HEX_TO_ASCII
0000140A                           806                 
0000140A  6000 0062                807                 BRA         ADDI_EA   
0000140E                           808                      
0000140E                           809  ADDI_B_SIZE
0000140E  43F9 0000279E            810                 LEA         SIZE_B_PRINT, A1     
00001414                           811                 
00001414  103C 000E                812                 MOVE.B      #14, D0
00001418                           813                 
00001418  4E4F                     814                 TRAP #15
0000141A                           815                 
0000141A                           816                * print out pound sign and hex sign
0000141A  43F9 000027B0            817                 LEA     POUND_SIGN, A1
00001420                           818              
00001420  103C 000E                819                 MOVE.B  #14, D0
00001424                           820              
00001424  4E4F                     821                 TRAP #15
00001426                           822              
00001426  43F9 000027B2            823                 LEA     HEX_SIGN, A1
0000142C                           824              
0000142C  4E4F                     825                 TRAP #15
0000142E                           826                 
0000142E  4280                     827                 CLR.L D0
00001430                           828  
00001430  301E                     829                 MOVE.W (A6)+, D0 * we mimght change it later
00001432                           830                 
00001432  1A00                     831                 MOVE.B D0, D5
00001434                           832     
00001434  4EB9 0000231A            833                 JSR  HEX_TO_ASCII
0000143A                           834                 
0000143A  6000 0032                835                 BRA         ADDI_EA 
0000143E                           836                  
0000143E                           837  
0000143E                           838  ADDI_W_SIZE
0000143E  43F9 000027A4            839                 LEA         SIZE_W_PRINT, A1     
00001444                           840                 
00001444  103C 000E                841                 MOVE.B      #14, D0
00001448                           842                 
00001448  4E4F                     843                 TRAP #15
0000144A                           844                 
0000144A                           845                 * print out pound sign and hex sign
0000144A  43F9 000027B0            846                 LEA     POUND_SIGN, A1
00001450                           847              
00001450  103C 000E                848                 MOVE.B  #14, D0
00001454                           849              
00001454  4E4F                     850                 TRAP #15
00001456                           851              
00001456  43F9 000027B2            852                 LEA     HEX_SIGN, A1
0000145C                           853              
0000145C  4E4F                     854                 TRAP #15
0000145E                           855  
0000145E  4285                     856                 CLR.L  D5
00001460                           857          
00001460  3A1E                     858                 MOVE.W (A6)+, D5
00001462                           859          
00001462  4EB9 0000231A            860                 JSR  HEX_TO_ASCII
00001468                           861          
00001468  4EF9 0000146E            862                 JMP  ADDI_EA
0000146E                           863  
0000146E                           864  
0000146E                           865  ADDI_EA      
0000146E  4EB8 1352                866                  JSR     PRINT_COMMA
00001472                           867                  
00001472  4280                     868                  CLR.L   D0
00001474                           869                  
00001474  4281                     870                  CLR.L   D1
00001476                           871                  
00001476                           872                  * set register
00001476                           873                   
00001476  3015                     874                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001478                           875                 
00001478  123C 000D                876                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000147C                           877  
0000147C  E368                     878                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000147E                           879  
0000147E  123C 000D                880                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001482                           881  
00001482  E268                     882                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001484                           883  
00001484  1E00                     884                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00001486                           885                   
00001486                           886                   * set mode
00001486  4280                     887                   CLR.L D0                *clear D0
00001488                           888                   
00001488  4281                     889                   CLR.L D1                *clear D1
0000148A                           890                   
0000148A  3015                     891                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000148C                           892                 
0000148C  123C 000A                893                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001490                           894  
00001490  E368                     895                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001492                           896  
00001492  123C 000D                897                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001496                           898  
00001496  E268                     899                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001498                           900  
00001498  1C00                     901                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
0000149A                           902  
0000149A                           903   
0000149A                           904                 * JSR     Set_Ea
0000149A                           905                   
0000149A  4EB9 000023B8            906                  JSR     PRINT_EA *by using jmp table
000014A0                           907                  
000014A0  4EF8 10F0                908                  JMP     PARSE_MEMORY
000014A4                           909                  
000014A4                           910                  
000014A4                           911                   
000014A4                           912                   
000014A4                           913  
000014A4                           914  
000014A4                           915                 
000014A4                           916  
000014A4                           917  
000014A4                           918  
000014A4                           919  
000014A4                           920  
000014A4                           921  
000014A4                           922  
000014A4                           923  
000014A4                           924  
000014A4                           925  
000014A4                           926  
000014A4                           927  
000014A4                           928  
000014A4                           929  
000014A4                           930  
000014A4                           931  
000014A4                           932  
000014A4                           933  
000014A4                           934  
000014A4                           935  
000014A4                           936  
000014A4                           937  
000014A4                           938  
000014A4                           939  
000014A4                           940  
000014A4                           941  -------------------- end include --------------------
000014A4                           942                  INCLUDE 'ADDQ.X68'
000014A4                           943  
000014A4                           944  
000014A4                           945  ADDQ
000014A4                           946  
000014A4  43F9 00002713            947      LEA ADDQ_MESSAGE, A1  *print ADDQ
000014AA                           948                   
000014AA  103C 000E                949      MOVE.B #14, D0
000014AE                           950                   
000014AE  4E4F                     951      TRAP #15
000014B0                           952      
000014B0  3015                     953      MOVE.W (A5), D0
000014B2                           954      
000014B2  123C 0008                955      MOVE.B  #8,D1     
000014B6                           956  
000014B6  E368                     957      LSL.W   D1,D0
000014B8                           958                   
000014B8  123C 000E                959      MOVE.B  #14,D1
000014BC                           960  
000014BC  E268                     961      LSR.W   D1,D0  *DO now holds size
000014BE                           962                                              
000014BE  B03C 0002                963      CMP.B    #$2, D0        *if D0 holds 2, size is L
000014C2                           964      
000014C2  6700 003A                965      BEQ      ADDQL
000014C6                           966                   
000014C6  B03C 0001                967      CMP.B    #$1, D0        *if D0 holds 1, size is W
000014CA                           968                                   
000014CA  6700 001C                969      BEQ      ADDQW
000014CE                           970  
000014CE  6000 0002                971      BRA      ADDQB
000014D2                           972  
000014D2                           973  ADDQB  *Print B
000014D2                           974  
000014D2  43F9 0000279E            975      LEA SIZE_B_PRINT, A1  *print B
000014D8                           976                   
000014D8  103C 000E                977      MOVE.B #14, D0
000014DC                           978                   
000014DC  4E4F                     979      TRAP #15
000014DE                           980      
000014DE  1A3C 0000                981      MOVE.B #%00, D5
000014E2                           982      
000014E2  4EF9 00001514            983      JMP PRINTADDQ
000014E8                           984      
000014E8                           985  ADDQW  *Print W
000014E8                           986  
000014E8  43F9 000027A4            987      LEA SIZE_W_PRINT, A1  *print W
000014EE                           988                   
000014EE  103C 000E                989      MOVE.B #14, D0
000014F2                           990                                    
000014F2  4E4F                     991      TRAP #15
000014F4                           992      
000014F4  1A3C 0001                993      MOVE.B #%01, D5
000014F8                           994  
000014F8  4EF9 00001514            995      JMP PRINTADDQ
000014FE                           996  
000014FE                           997  ADDQL   *Print L
000014FE                           998  
000014FE  43F9 000027AA            999      LEA SIZE_L_PRINT, A1  *print L
00001504                          1000                   
00001504  103C 000E               1001      MOVE.B #14, D0
00001508                          1002                   
00001508  4E4F                    1003      TRAP #15
0000150A                          1004  
0000150A  1A3C 0002               1005      MOVE.B #%10, D5
0000150E                          1006      
0000150E  4EF9 00001514           1007      JMP PRINTADDQ
00001514                          1008      
00001514                          1009  PRINTADDQ
00001514                          1010  
00001514  43F9 000027B0           1011      LEA POUND_SIGN, A1  *print W
0000151A                          1012                   
0000151A  103C 000E               1013      MOVE.B #14, D0
0000151E                          1014                                    
0000151E  4E4F                    1015      TRAP #15
00001520                          1016      
00001520  3015                    1017      MOVE.W (A5), D0
00001522                          1018  
00001522  123C 0004               1019      MOVE.B  #4,D1     
00001526                          1020  
00001526  E368                    1021      LSL.W   D1,D0
00001528                          1022                   
00001528  123C 000D               1023      MOVE.B  #13,D1
0000152C                          1024  
0000152C  E268                    1025      LSR.W   D1,D0  *D0 now holds Dn
0000152E                          1026      
0000152E  4281                    1027      CLR.L D1
00001530                          1028                                              
00001530  3200                    1029      MOVE.W D0, D1 *D6 holds Dn   
00001532                          1030  
00001532  103C 0003               1031      MOVE.B #3, D0
00001536                          1032                 
00001536  4E4F                    1033      TRAP #15
00001538                          1034      
00001538  43F9 000027D0           1035      LEA COMMA, A1  *print W
0000153E                          1036                   
0000153E  103C 000E               1037      MOVE.B #14, D0
00001542                          1038                                    
00001542  4E4F                    1039      TRAP #15
00001544                          1040      
00001544  4286                    1041      CLR.L D6
00001546                          1042      
00001546  4287                    1043      CLR.L D7
00001548                          1044      
00001548  3015                    1045      MOVE.W (A5), D0
0000154A                          1046  
0000154A  123C 000A               1047      MOVE.B  #10,D1     
0000154E                          1048  
0000154E  E368                    1049      LSL.W   D1,D0
00001550                          1050                   
00001550  123C 000D               1051      MOVE.B  #13,D1
00001554                          1052  
00001554  E268                    1053      LSR.W   D1,D0  *D0 now holds MODE
00001556                          1054                                              
00001556  3C00                    1055      MOVE.W D0, D6 *D6 holds mode
00001558                          1056      
00001558  4281                    1057      CLR.L D1
0000155A                          1058      
0000155A  4280                    1059      CLR.L D0
0000155C                          1060      
0000155C  3015                    1061      MOVE.W (A5), D0
0000155E                          1062  
0000155E  123C 000D               1063      MOVE.B  #13,D1     
00001562                          1064  
00001562  E368                    1065      LSL.W   D1,D0
00001564                          1066                   
00001564  123C 000D               1067      MOVE.B  #13,D1
00001568                          1068  
00001568  E268                    1069      LSR.W   D1,D0  *D0 now holds MODE
0000156A                          1070                                              
0000156A  3E00                    1071      MOVE.W D0, D7 *D6 holds Register   
0000156C                          1072      
0000156C  4EB9 000023B8           1073      JSR PRINT_EA
00001572                          1074      
00001572  6000 FB7C               1075      BRA PARSE_MEMORY
00001576                          1076  
00001576                          1077      
00001576                          1078  
00001576                          1079  
00001576                          1080  
00001576                          1081  
00001576                          1082  
00001576                          1083  
00001576                          1084  
00001576                          1085  
00001576                          1086  
00001576                          1087  
00001576                          1088  
00001576                          1089  
00001576                          1090  
00001576                          1091  -------------------- end include --------------------
00001576                          1092                  INCLUDE 'CMP.X68'
00001576                          1093     
00001576                          1094  CMP
00001576                          1095                   * ADD message
00001576  43F9 0000276B           1096                   LEA      CMP_MESSAGE,    A1
0000157C  103C 000E               1097                   MOVE.B   #14,            D0
00001580  4E4F                    1098                   TRAP #15
00001582                          1099                   
00001582  4EB8 12F0               1100                   JSR GET_SIZE_PURPLE
00001586                          1101                   
00001586  4EB8 1308               1102                   JSR     PRINTOUT_SIZE_PURPLE
0000158A                          1103                   
0000158A                          1104                   
0000158A  4EB8 1374               1105                   JSR     Set_Ea
0000158E                          1106                   
0000158E  4EB9 000023B8           1107                   JSR     PRINT_EA *by using jmp table
00001594                          1108                   
00001594  4EB8 1352               1109                   JSR     PRINT_COMMA
00001598                          1110                   
00001598                          1111                    * for the first Dn 
00001598  4EB8 1362               1112                   JSR     GET_Data_Register
0000159C                          1113                   
0000159C  4286                    1114                   CLR.L   D6
0000159E                          1115                   
0000159E  1C3C 0000               1116                   MOVE.B  #%000, D6 * for mode
000015A2                          1117  
000015A2  4EB9 000023B8           1118                   JSR     PRINT_EA *by using jmp table
000015A8                          1119                   
000015A8  4EF8 10F0               1120                   JMP     PARSE_MEMORY
000015AC                          1121  
000015AC                          1122                   
000015AC                          1123   *                JMP     NEXT
000015AC                          1124  
000015AC                          1125  
000015AC                          1126  
000015AC                          1127  
000015AC                          1128  
000015AC                          1129  -------------------- end include --------------------
000015AC                          1130                  INCLUDE 'SUB.X68'
000015AC                          1131  
000015AC                          1132  SUB
000015AC                          1133                   * ADD message
000015AC  43F9 00002766           1134                   LEA      SUB_MESSAGE,    A1
000015B2  103C 000E               1135                   MOVE.B   #14,            D0
000015B6  4E4F                    1136                   TRAP #15
000015B8                          1137                   
000015B8  4EB8 12F0               1138                   JSR    GET_SIZE_PURPLE
000015BC                          1139                   
000015BC  4EB8 1308               1140                   JSR     PRINTOUT_SIZE_PURPLE
000015C0                          1141                   
000015C0                          1142                   
000015C0  4280                    1143                   CLR.L D0                *clear D0
000015C2                          1144                   
000015C2  4281                    1145                   CLR.L D1                *clear D1
000015C4                          1146                   
000015C4  3015                    1147                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000015C6                          1148                   
000015C6                          1149                   * check the bit at 7
000015C6  123C 0007               1150                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000015CA                          1151  
000015CA  E368                    1152                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000015CC                          1153                   
000015CC  123C 000F               1154                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
000015D0                          1155  
000015D0  E268                    1156                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
000015D2                          1157                   
000015D2  B03C 0000               1158                   CMP.B   #0, D0
000015D6                          1159  
000015D6                          1160                   
000015D6                          1161                *   BTST    #8, D0
000015D6                          1162                   
000015D6  6700 0024               1163                   BEQ     SUB_FIRST_EA
000015DA                          1164                   
000015DA                          1165                   * for the first Dn 
000015DA  4EB8 1362               1166                   JSR     GET_Data_Register
000015DE                          1167                   
000015DE  4286                    1168                   CLR.L   D6
000015E0                          1169                   
000015E0  1C3C 0000               1170                   MOVE.B  #%000, D6 * for mode
000015E4                          1171                   
000015E4  4EB9 000023B8           1172                   JSR     PRINT_EA *by using jmp table
000015EA                          1173                   
000015EA  4EB8 1352               1174                   JSR     PRINT_COMMA
000015EE                          1175                   
000015EE  4EB8 1374               1176                   JSR     Set_Ea
000015F2                          1177                   
000015F2  4EB9 000023B8           1178                   JSR     PRINT_EA *by using jmp table
000015F8                          1179                   
000015F8  4EF8 10F0               1180                   JMP     PARSE_MEMORY
000015FC                          1181                   
000015FC                          1182  SUB_FIRST_EA
000015FC  4EB8 1374               1183                   JSR     Set_Ea
00001600                          1184                   
00001600  4EB9 000023B8           1185                   JSR     PRINT_EA *by using jmp table
00001606                          1186                   
00001606  4EB8 1352               1187                   JSR     PRINT_COMMA
0000160A                          1188                   
0000160A                          1189                    * for the first Dn 
0000160A  4EB8 1362               1190                   JSR     GET_Data_Register
0000160E                          1191                   
0000160E  4286                    1192                   CLR.L   D6
00001610                          1193                   
00001610  1C3C 0000               1194                   MOVE.B  #%000, D6 * for mode
00001614                          1195  
00001614  4EB9 000023B8           1196                   JSR     PRINT_EA *by using jmp table
0000161A                          1197                   
0000161A  4EF8 10F0               1198                   JMP     PARSE_MEMORY
0000161E                          1199  
0000161E                          1200  
0000161E                          1201  
0000161E                          1202  
0000161E                          1203  
0000161E                          1204  -------------------- end include --------------------
0000161E                          1205                  INCLUDE 'TRYING_NOP.X68'
0000161E                          1206  LEA_OPCODE
0000161E                          1207      
0000161E  43F9 00002719           1208      LEA         LEA_MESSAGE, A1     * print out message for 'NOP'
00001624                          1209      
00001624  103C 000E               1210      MOVE.B      #14, D0
00001628                          1211      
00001628  4E4F                    1212      TRAP #15  
0000162A                          1213      
0000162A  3015                    1214      MOVE.W  (A5),D0     *D0 is the binary value to decode
0000162C                          1215      
0000162C  123C 000D               1216      MOVE.B  #13,D1     
00001630                          1217  
00001630  E368                    1218      LSL.W   D1,D0
00001632                          1219                   
00001632  123C 000D               1220      MOVE.B  #13,D1
00001636                          1221  
00001636  E268                    1222      LSR.W   D1,D0  *D0 now holds Register
00001638                          1223                                              
00001638  3E00                    1224      MOVE.W D0, D7 *D7 holds Register  
0000163A                          1225  
0000163A  3015                    1226      MOVE.W  (A5),D0     *D0 is the binary value to decode
0000163C                          1227  
0000163C  123C 000A               1228      MOVE.B  #10,D1     
00001640                          1229  
00001640  E368                    1230      LSL.W   D1,D0
00001642                          1231                   
00001642  123C 000D               1232      MOVE.B  #13,D1
00001646                          1233  
00001646  E268                    1234      LSR.W   D1,D0  *D0 now holds MODE
00001648                          1235                                              
00001648  3C00                    1236      MOVE.W D0, D6 *D6 holds MODE  
0000164A                          1237      
0000164A  4EB9 000023B8           1238      JSR PRINT_EA
00001650                          1239  
00001650  43F9 000027D0           1240      LEA         COMMA, A1     * print out message for 'NOP'
00001656                          1241      
00001656  103C 000E               1242      MOVE.B      #14, D0
0000165A                          1243      
0000165A  4E4F                    1244      TRAP #15 
0000165C                          1245                                    
0000165C  3015                    1246      MOVE.W  (A5),D0     *D0 is the binary value to decode 
0000165E                          1247  
0000165E  7C01                    1248      MOVE.L #%001, D6
00001660                          1249  
00001660  123C 0004               1250      MOVE.B  #4,D1     
00001664                          1251  
00001664  E368                    1252      LSL.W   D1,D0
00001666                          1253                   
00001666  123C 000D               1254      MOVE.B  #13,D1
0000166A                          1255  
0000166A  E268                    1256      LSR.W   D1,D0  
0000166C                          1257                                              
0000166C  3E00                    1258      MOVE.W D0, D7 
0000166E                          1259      
0000166E  4EB9 000023B8           1260      JSR PRINT_EA
00001674                          1261      
00001674  4EF8 10F0               1262      JMP     PARSE_MEMORY       
00001678                          1263            
00001678                          1264  NOP_OPCODE
00001678  43F9 000026FC           1265      LEA         NOP_MESSAGE, A1     * print out message for 'NOP'
0000167E                          1266      
0000167E  103C 000E               1267      MOVE.B      #14, D0
00001682                          1268      
00001682  4E4F                    1269      TRAP #15
00001684                          1270      
00001684  6000 FA6A               1271      BRA PARSE_MEMORY
00001688                          1272  RTS_OPCODE 
00001688  43F9 0000270B           1273      LEA         RTS_MESSAGE, A1     * print out message for 'RTS'
0000168E                          1274      
0000168E  103C 000E               1275      MOVE.B      #14, D0
00001692                          1276      
00001692  4E4F                    1277      TRAP #15
00001694                          1278      
00001694  6000 FA5A               1279      BRA PARSE_MEMORY
00001698                          1280      
00001698                          1281  JSR_OPCODE 
00001698  43F9 00002707           1282      LEA         JSR_MESSAGE, A1     * print out message for 'JSR'
0000169E                          1283      
0000169E  103C 000E               1284      MOVE.B      #14, D0
000016A2                          1285      
000016A2  4E4F                    1286      TRAP #15
000016A4                          1287      
000016A4  2015                    1288      MOVE.L (A5), D0
000016A6                          1289  
000016A6  123C 000D               1290      MOVE.B  #13,D1     
000016AA                          1291  
000016AA  E368                    1292      LSL.W   D1,D0
000016AC                          1293                   
000016AC  123C 000D               1294      MOVE.B  #13,D1
000016B0                          1295  
000016B0  E268                    1296      LSR.W   D1,D0  *D0 now holds Register
000016B2                          1297                                              
000016B2  3E00                    1298      MOVE.W D0, D7 *D7 holds Register  
000016B4                          1299  
000016B4  2002                    1300      MOVE.L D2, D0
000016B6                          1301  
000016B6  123C 000A               1302      MOVE.B  #10,D1     
000016BA                          1303  
000016BA  E368                    1304      LSL.W   D1,D0
000016BC                          1305                   
000016BC  123C 000D               1306      MOVE.B  #13,D1
000016C0                          1307  
000016C0  E268                    1308      LSR.W   D1,D0  *D0 now holds MODE
000016C2                          1309                                              
000016C2  3C00                    1310      MOVE.W D0, D6 *D6 holds MODE  
000016C4                          1311      
000016C4  4EB9 000023B8           1312      JSR PRINT_EA
000016CA                          1313      
000016CA  6000 FA24               1314      BRA PARSE_MEMORY
000016CE                          1315         
000016CE                          1316  CLR_OPCODE 
000016CE  43F9 0000270F           1317      LEA         CLR_MESSAGE, A1     * print out message for 'CLR'
000016D4                          1318      
000016D4  103C 000E               1319      MOVE.B      #14, D0
000016D8                          1320      
000016D8  4E4F                    1321      TRAP #15
000016DA                          1322                     
000016DA  43F9 000027B4           1323      LEA      PERIOD, A1
000016E0                          1324      
000016E0  103C 000E               1325      MOVE.B   #14, D0
000016E4                          1326      
000016E4  4E4F                    1327      TRAP #15 
000016E6                          1328                
000016E6  3015                    1329      MOVE.W      (A5), D0
000016E8                          1330               
000016E8  123C 0006               1331      MOVE.B      #6, D1
000016EC                          1332                 
000016EC  E268                    1333      LSR.W       D1, D0  *shift right 6 
000016EE                          1334                 
000016EE  123C 000E               1335      MOVE.B      #14, D1
000016F2                          1336                 
000016F2  E368                    1337      LSL.W       D1, D0  *shift left 15, only size is left
000016F4                          1338      
000016F4  123C 000E               1339      MOVE.B      #14, D1
000016F8                          1340                 
000016F8  E268                    1341      LSR.W       D1, D0  *shift right 15, size is left   
000016FA                          1342      
000016FA  B07C 0000               1343      CMP.W       #00, D0
000016FE                          1344  
000016FE  6700 004A               1345      BEQ         SIZE_B
00001702                          1346      
00001702  B07C 0001               1347      CMP.W       #01, D0
00001706                          1348                 
00001706  6700 004C               1349      BEQ         SIZE_W 
0000170A                          1350      
0000170A  B07C 0002               1351      CMP.W       #2, D0
0000170E                          1352                 
0000170E  6700 004E               1353      BEQ         SIZE_L
00001712                          1354  
00001712                          1355  PRINT_SIZE
00001712                          1356  
00001712  103C 000E               1357      MOVE.B      #14, D0
00001716                          1358      
00001716  4E4F                    1359      TRAP #15
00001718                          1360  
00001718  4280                    1361      CLR.L   D0
0000171A                          1362                  
0000171A  4281                    1363      CLR.L   D1
0000171C                          1364                       * set register
0000171C                          1365                   
0000171C  3015                    1366      MOVE.W  (A5),D0     *D0 is the binary value to decode
0000171E                          1367                 
0000171E  123C 000D               1368      MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001722                          1369  
00001722  E368                    1370      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001724                          1371  
00001724  123C 000D               1372      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001728                          1373  
00001728  E268                    1374      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
0000172A                          1375  
0000172A  1E00                    1376      MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
0000172C                          1377                   
0000172C                          1378                   * set mode
0000172C  4280                    1379      CLR.L D0                *clear D0
0000172E                          1380                   
0000172E  4281                    1381      CLR.L D1                *clear D1
00001730                          1382                   
00001730  3015                    1383      MOVE.W  (A5),D0     *D0 is the binary value to decode
00001732                          1384                 
00001732  123C 000A               1385      MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001736                          1386  
00001736  E368                    1387      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001738                          1388  
00001738  123C 000D               1389      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
0000173C                          1390  
0000173C  E268                    1391      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
0000173E                          1392  
0000173E  2C00                    1393      MOVE.L  D0, D6          *put D0 to data register into D7 for future printing
00001740                          1394                   
00001740  4EB9 000023B8           1395      JSR     PRINT_EA *by using jmp table
00001746                          1396  
00001746  6000 F9A8               1397      BRA PARSE_MEMORY
0000174A                          1398      
0000174A                          1399  SIZE_B 
0000174A                          1400                
0000174A  43F9 0000279E           1401      LEA         SIZE_B_PRINT, A1 
00001750                          1402      
00001750  4EF8 1712               1403      JMP PRINT_SIZE
00001754                          1404      
00001754                          1405  SIZE_W 
00001754                          1406                
00001754  43F9 000027A4           1407      LEA         SIZE_W_PRINT, A1 
0000175A                          1408      
0000175A  4EF8 1712               1409      JMP PRINT_SIZE
0000175E                          1410      
0000175E                          1411  SIZE_L 
0000175E                          1412                
0000175E  43F9 000027AA           1413      LEA         SIZE_L_PRINT, A1 
00001764                          1414      
00001764  4EF8 1712               1415      JMP PRINT_SIZE
00001764  4EF8 1712               1416  -------------------- end include --------------------
00001768                          1417                  INCLUDE 'DIVU_OR.X68'
00001768                          1418      
00001768  4EB8 12F0               1419  DIVU_OR          JSR      GET_SIZE_PURPLE  
0000176C                          1420                                            
0000176C  BA3C 0003               1421                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
00001770                          1422                   
00001770  6700 0008               1423                   BEQ      DIVU_CODE
00001774                          1424                   
00001774  4EF9 000017B0           1425                   JMP      OR_CODE
0000177A                          1426                   
0000177A                          1427  DIVU_CODE  
0000177A                          1428                   * OP_CODE message
0000177A  43F9 0000275C           1429                   LEA      DIVU_MESSAGE, A1
00001780  103C 000E               1430                   MOVE.B   #14, D0
00001784  4E4F                    1431                   TRAP #15
00001786                          1432  
00001786  3A3C 0001               1433                   MOVE    #%01, D5          
0000178A                          1434                   
0000178A                          1435              *     LEA      SIZE_W_PRINT,    A1
0000178A                          1436                   
0000178A                          1437              *     MOVE.B   #14,             D0
0000178A                          1438          
0000178A                          1439              *     TRAP #15
0000178A                          1440                   
0000178A  4EB8 1374               1441                   JSR     Set_Ea
0000178E                          1442                   
0000178E  1A3C 0001               1443                   MOVE.B  #%01, D5
00001792                          1444                   
00001792  4EB9 000023B8           1445                   JSR     PRINT_EA *by using jmp table
00001798                          1446                   
00001798  4EB8 1352               1447                   JSR     PRINT_COMMA
0000179C                          1448                   
0000179C                          1449                    * for the first Dn 
0000179C  4EB8 1362               1450                   JSR     GET_Data_Register
000017A0                          1451                   
000017A0  4286                    1452                   CLR.L   D6
000017A2                          1453                   
000017A2  1C3C 0000               1454                   MOVE.B  #%000, D6 * for mode
000017A6                          1455  
000017A6  4EB9 000023B8           1456                   JSR     PRINT_EA *by using jmp table
000017AC                          1457  
000017AC  4EF8 10F0               1458                   JMP     PARSE_MEMORY
000017B0                          1459  
000017B0                          1460  OR_CODE    
000017B0                          1461                   * OP_CODE message
000017B0  43F9 00002762           1462                   LEA      OR_MESSAGE, A1
000017B6  103C 000E               1463                   MOVE.B   #14, D0
000017BA  4E4F                    1464                   TRAP #15
000017BC                          1465  
000017BC  4EB8 1308               1466                   JSR PRINTOUT_SIZE_PURPLE
000017C0                          1467                   
000017C0                          1468                     * check for dn and ea
000017C0  4280                    1469                   CLR.L D0                *clear D0
000017C2                          1470                   
000017C2  4281                    1471                   CLR.L D1                *clear D1
000017C4                          1472                   
000017C4  3015                    1473                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000017C6                          1474                   
000017C6                          1475                   * check the bit at 7
000017C6  123C 0007               1476                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000017CA                          1477  
000017CA  E368                    1478                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000017CC                          1479                   
000017CC  123C 000F               1480                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
000017D0                          1481  
000017D0  E268                    1482                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
000017D2                          1483                   
000017D2  B03C 0000               1484                   CMP.B   #0, D0
000017D6                          1485                   
000017D6                          1486                  * BTST    #7, D0
000017D6                          1487                   
000017D6  6700 0024               1488                   BEQ     OR_FIRST_EA
000017DA                          1489                   
000017DA                          1490                   * for the first Dn 
000017DA  4EB8 1362               1491                   JSR     GET_Data_Register
000017DE                          1492                   
000017DE  4286                    1493                   CLR.L   D6
000017E0                          1494                   
000017E0  1C3C 0000               1495                   MOVE.B  #%000, D6 * for mode
000017E4                          1496                   
000017E4  4EB9 000023B8           1497                   JSR     PRINT_EA *by using jmp table
000017EA                          1498                   
000017EA  4EB8 1352               1499                   JSR     PRINT_COMMA
000017EE                          1500                   
000017EE  4EB8 1374               1501                   JSR     Set_Ea
000017F2                          1502                   
000017F2  4EB9 000023B8           1503                   JSR     PRINT_EA *by using jmp table
000017F8                          1504                   
000017F8  4EF8 10F0               1505                   JMP     PARSE_MEMORY
000017FC                          1506                   
000017FC                          1507  OR_FIRST_EA
000017FC  4EB8 1374               1508                   JSR     Set_Ea
00001800                          1509                   
00001800  4EB9 000023B8           1510                   JSR     PRINT_EA *by using jmp table
00001806                          1511                   
00001806  4EB8 1352               1512                   JSR     PRINT_COMMA
0000180A                          1513                   
0000180A                          1514                    * for the first Dn 
0000180A  4EB8 1362               1515                   JSR     GET_Data_Register
0000180E                          1516                   
0000180E  4286                    1517                   CLR.L   D6
00001810                          1518                   
00001810  1C3C 0000               1519                   MOVE.B  #%000, D6 * for mode
00001814                          1520  
00001814  4EB9 000023B8           1521                   JSR     PRINT_EA *by using jmp table
0000181A                          1522                   
0000181A  4EF8 10F0               1523                   JMP     PARSE_MEMORY
0000181E                          1524  
0000181E                          1525  
0000181E                          1526  
0000181E                          1527  
0000181E                          1528  
0000181E                          1529  
0000181E                          1530  
0000181E                          1531  
0000181E                          1532  
0000181E                          1533  
0000181E                          1534  
0000181E                          1535  
0000181E                          1536  
0000181E                          1537  -------------------- end include --------------------
0000181E                          1538                  INCLUDE 'GROUP_0100_CODE.X68'
0000181E                          1539  GROUP_0100_CODE          *at this point we know the first 4 bits are 0100 -> NOP, RTS, JSR,  MOVEM, CLR
0000181E                          1540  
0000181E  4280                    1541                   CLR.L D0                *clear D0
00001820                          1542                   
00001820  4281                    1543                   CLR.L D1                *clear D1
00001822                          1544                   
00001822  3015                    1545                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001824                          1546  
00001824  123C 0004               1547                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
00001828                          1548  
00001828  E368                    1549                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
0000182A                          1550                   
0000182A  123C 0004               1551                   MOVE.B  #4,D1           *4 bits is the number of times to shift to hold everything except the opcode
0000182E                          1552  
0000182E  E268                    1553                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds everything except opcode
00001830                          1554                   
00001830                          1555                                              
00001830  B07C 0E71               1556                   CMP.W    #$E71, D0      *if D0 holds E71, the opcode is NOP
00001834                          1557                   
00001834  6700 FE42               1558                   BEQ      NOP_OPCODE       *Branch to NOP_CODE if the opcode is NOP
00001838                          1559                   
00001838                          1560                   
00001838  B07C 0E75               1561                   CMP.W    #$E75, D0      *if D0 holds E75, the opcode is RTS
0000183C                          1562                   
0000183C  6700 FE4A               1563                   BEQ      RTS_OPCODE       *Branch to RTS_CODE if the opcode is RTS
00001840                          1564                   
00001840                          1565                   
00001840  4280                    1566                   CLR.L D0                *clear D0
00001842                          1567                   
00001842                          1568                   
00001842  4281                    1569                   CLR.L D1                *clear D1
00001844                          1570                   
00001844                          1571                   
00001844  3015                    1572                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001846                          1573  
00001846                          1574  
00001846  123C 0004               1575                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
0000184A                          1576  
0000184A                          1577  
0000184A  E368                    1578                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
0000184C                          1579                   
0000184C  123C 000C               1580                   MOVE.B  #12,D1           *12 bits is the number of times to shift to hold the 4th-8th bits (counting left to right, non-inclusive)
00001850                          1581  
00001850  E268                    1582                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds 4th-8th bits (counting left to right, non-inclusive)
00001852                          1583                   
00001852  B07C 0002               1584                   CMP.W    #$2, D0        *if D0 holds #2, the opcode is CLR
00001856                          1585                   
00001856  6700 FE76               1586                   BEQ      CLR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
0000185A                          1587                   
0000185A                          1588          
0000185A  B07C 000E               1589                   CMP.W    #$E, D0        *if D0 holds $E = 14, the opcode is JSR
0000185E                          1590                   
0000185E  6700 FE38               1591                   BEQ      JSR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
00001862                          1592                   
00001862  4280                    1593                   CLR.L D0                *clear D0
00001864                          1594                   
00001864  4281                    1595                   CLR.L D1                *clear D1
00001866                          1596                   
00001866  3015                    1597                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001868                          1598  
00001868  123C 0007               1599                   MOVE.B  #7,D1 
0000186C                          1600  
0000186C  E368                    1601                   LSL.W   D1,D0 
0000186E                          1602                   
0000186E  123C 000D               1603                   MOVE.B  #13,D1 
00001872                          1604  
00001872  E268                    1605                   LSR.W   D1,D0     
00001874                          1606                   
00001874  B07C 0007               1607                   CMP.W    #%111, D0  
00001878                          1608                   
00001878  6700 FDA4               1609                   BEQ LEA_OPCODE
0000187C                          1610                   
0000187C  6000 00B4               1611                   BRA      MOVEM_OPCODE     *else it is a MOVEM
00001880                          1612  
00001880                          1613      
00001880                          1614  
00001880                          1615  
00001880                          1616  
00001880                          1617  
00001880                          1618  
00001880                          1619  -------------------- end include --------------------
00001880                          1620                  INCLUDE 'MULS_AND.X68'
00001880                          1621   
00001880  4EB8 12F0               1622  MULS_AND         JSR      GET_SIZE_PURPLE
00001884                          1623                                              
00001884  BA3C 0003               1624                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
00001888                          1625                   
00001888  6700 0008               1626                   BEQ      MULS_CODE
0000188C                          1627                   
0000188C  4EF9 000018C4           1628                   JMP      AND_CODE
00001892                          1629                   
00001892                          1630  MULS_CODE
00001892                          1631                   * OP_CODE message
00001892  43F9 00002770           1632                   LEA MULS_MESSAGE, A1
00001898                          1633                   
00001898  103C 000E               1634                   MOVE.B #14, D0
0000189C                          1635                   
0000189C  4E4F                    1636                   TRAP #15
0000189E                          1637  
0000189E                          1638             *      LEA      SIZE_W_PRINT,    A1
0000189E                          1639                   
0000189E                          1640             *      MOVE.B   #14,             D0
0000189E                          1641          
0000189E                          1642             *      TRAP #15
0000189E                          1643                   
0000189E  4EB8 1374               1644                   JSR     Set_Ea
000018A2                          1645                   
000018A2  1A3C 0001               1646                   MOVE.B  #%01, D5
000018A6                          1647                   
000018A6  4EB9 000023B8           1648                   JSR     PRINT_EA *by using jmp table
000018AC                          1649                   
000018AC  4EB8 1352               1650                   JSR     PRINT_COMMA
000018B0                          1651                   
000018B0                          1652                    * for the first Dn 
000018B0  4EB8 1362               1653                   JSR     GET_Data_Register
000018B4                          1654                   
000018B4  4286                    1655                   CLR.L   D6
000018B6                          1656                   
000018B6  1C3C 0000               1657                   MOVE.B  #%000, D6 * for mode
000018BA                          1658  
000018BA  4EB9 000023B8           1659                   JSR     PRINT_EA *by using jmp table
000018C0                          1660  
000018C0  4EF8 10F0               1661                   JMP      PARSE_MEMORY
000018C4                          1662  
000018C4                          1663  AND_CODE
000018C4                          1664                   * OP_CODE message
000018C4  43F9 00002776           1665                   LEA AND_MESSAGE, A1
000018CA  103C 000E               1666                   MOVE.B #14, D0
000018CE  4E4F                    1667                   TRAP #15
000018D0                          1668                   
000018D0  4EB8 1308               1669                   JSR PRINTOUT_SIZE_PURPLE
000018D4                          1670                   
000018D4                          1671                     * check for dn and ea
000018D4  4280                    1672                   CLR.L D0                *clear D0
000018D6                          1673                   
000018D6  4281                    1674                   CLR.L D1                *clear D1
000018D8                          1675                   
000018D8  3015                    1676                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000018DA                          1677                   
000018DA                          1678                   * check the bit at 7
000018DA  123C 0007               1679                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000018DE                          1680  
000018DE  E368                    1681                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000018E0                          1682                   
000018E0  123C 000F               1683                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
000018E4                          1684  
000018E4  E268                    1685                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
000018E6                          1686                   
000018E6  B03C 0000               1687                   CMP.B   #0, D0
000018EA                          1688  
000018EA                          1689                *   BTST    #8, D0
000018EA                          1690                   
000018EA  6700 0024               1691                   BEQ     AND_FIRST_EA
000018EE                          1692                   
000018EE                          1693                   * for the first Dn 
000018EE  4EB8 1362               1694                   JSR     GET_Data_Register
000018F2                          1695                   
000018F2  4286                    1696                   CLR.L   D6
000018F4                          1697                   
000018F4  1C3C 0000               1698                   MOVE.B  #%000, D6 * for mode
000018F8                          1699                   
000018F8  4EB9 000023B8           1700                   JSR     PRINT_EA *by using jmp table
000018FE                          1701                   
000018FE  4EB8 1352               1702                   JSR     PRINT_COMMA
00001902                          1703                   
00001902  4EB8 1374               1704                   JSR     Set_Ea
00001906                          1705                   
00001906  4EB9 000023B8           1706                   JSR     PRINT_EA *by using jmp table
0000190C                          1707                   
0000190C  4EF8 10F0               1708                   JMP      PARSE_MEMORY
00001910                          1709                   
00001910                          1710  AND_FIRST_EA
00001910  4EB8 1374               1711                   JSR     Set_Ea
00001914                          1712                   
00001914  4EB9 000023B8           1713                   JSR     PRINT_EA *by using jmp table
0000191A                          1714                   
0000191A  4EB8 1352               1715                   JSR     PRINT_COMMA
0000191E                          1716                   
0000191E                          1717                    * for the first Dn 
0000191E  4EB8 1362               1718                   JSR     GET_Data_Register
00001922                          1719                   
00001922  4286                    1720                   CLR.L   D6
00001924                          1721                   
00001924  1C3C 0000               1722                   MOVE.B  #%000, D6 * for mode
00001928                          1723  
00001928  4EB9 000023B8           1724                   JSR     PRINT_EA *by using jmp table
0000192E                          1725                   
0000192E  4EF8 10F0               1726                   JMP      PARSE_MEMORY
00001932                          1727  
00001932                          1728  
00001932                          1729  
00001932                          1730  
00001932                          1731  
00001932                          1732  
00001932                          1733  
00001932                          1734  
00001932                          1735  
00001932                          1736  
00001932                          1737  
00001932                          1738  
00001932                          1739  -------------------- end include --------------------
00001932                          1740                  INCLUDE 'MOVEM.X68'
00001932                          1741     
00001932                          1742  
00001932                          1743  MOVEM_OPCODE
00001932                          1744  
00001932  4280                    1745     CLR.L       D0               *Zero it
00001934                          1746     
00001934  4286                    1747     CLR.L       D6
00001936                          1748  
00001936  3015                    1749     MOVE.W      (A5), D0     *We'll play with it here
00001938                          1750  
00001938  43F9 00002700           1751     LEA MOVEM_MESSAGE, A1
0000193E                          1752            
0000193E  103C 000E               1753     MOVE.B #14, D0
00001942                          1754                   
00001942  4E4F                    1755     TRAP #15    
00001944                          1756  
00001944  3015                    1757    MOVE.W     (A5), D0
00001946                          1758  
00001946  0800 0006               1759    BTST       #6,  D0      
0000194A                          1760  
0000194A  6600 0012               1761    BNE        PRINT_SIZE_L_MOVEM
0000194E                          1762  
0000194E  43F9 000027A4           1763    LEA SIZE_W_PRINT, A1
00001954                          1764            
00001954  103C 000E               1765    MOVE.B #14, D0
00001958                          1766                   
00001958  4E4F                    1767    TRAP #15    
0000195A                          1768   
0000195A  6000 000E               1769    BRA          DR_FIELD
0000195E                          1770      
0000195E                          1771    * Print out size for W
0000195E                          1772  PRINT_SIZE_L_MOVEM
0000195E                          1773  
0000195E  43F9 000027AA           1774    LEA SIZE_L_PRINT, A1
00001964                          1775            
00001964  103C 000E               1776    MOVE.B #14, D0
00001968                          1777                   
00001968  4E4F                    1778    TRAP #15    
0000196A                          1779  
0000196A                          1780  DR_FIELD
0000196A                          1781                 
0000196A  0800 000A               1782    BTST        #10,  D0    * BIT TEST
0000196E                          1783  
0000196E  6700 000C               1784    BEQ         Regitset_Memory *if D0 holds a 1
00001972                          1785  
00001972  6000 0062               1786    BRA         Memory_Register *If D0 hollds a 0
00001976                          1787  
00001976  4284                    1788    CLR.L D4
00001978                          1789  
00001978  183C 000F               1790    MOVE.B #15, D4
0000197C                          1791  
0000197C                          1792  Regitset_Memory
0000197C  361E                    1793      MOVE.W      (A6)+, D3
0000197E                          1794      
0000197E                          1795      * CHECK IF PRE DECREMEMNT
0000197E  3015                    1796      MOVE.W (A5), D0
00001980                          1797      
00001980  123C 000A               1798      MOVE.B      #10, D1
00001984                          1799      
00001984  E368                    1800      LSL.W       D1, D0
00001986                          1801  
00001986  123C 000D               1802      MOVE.B      #13, D1
0000198A                          1803  
0000198A  E268                    1804      LSR.W       D1, D0
0000198C                          1805  
0000198C  B03C 0004               1806      CMP.B       #%100, D0
00001990                          1807  
00001990  6700 0064               1808      BEQ         OPPOSITE_LOOP 
00001994                          1809      * NOW IT CAN BE IN REGULAR ORDER
00001994                          1810      
00001994  183C 000F               1811      MOVE.B      #15, D4
00001998                          1812      
00001998  4EB9 00001BCC           1813      JSR         LOOP_MOVEM
0000199E                          1814      
0000199E  43F9 000027D0           1815      LEA COMMA, A1
000019A4                          1816      
000019A4  103C 000E               1817      MOVE.B      #14, D0
000019A8                          1818      
000019A8  4E4F                    1819      TRAP #15
000019AA                          1820      
000019AA  4EB9 000019B4           1821      JSR PRINT_ADDRESS
000019B0                          1822      
000019B0  6000 F73E               1823      BRA PARSE_MEMORY
000019B4                          1824  
000019B4                          1825  PRINT_ADDRESS 
000019B4  3015                    1826      MOVE.W      (A5), D0
000019B6                          1827  
000019B6  123C 000A               1828      MOVE.B      #10, D1
000019BA                          1829      
000019BA  E368                    1830      LSL.W       D1, D0
000019BC                          1831      
000019BC  123C 000D               1832      MOVE.B      #13, D1
000019C0                          1833  
000019C0  E268                    1834      LSR.W       D1, D0
000019C2                          1835      
000019C2  1C00                    1836      MOVE.B      D0, D6
000019C4                          1837      
000019C4  3015                    1838      MOVE.W      (A5), D0
000019C6                          1839      
000019C6  E368                    1840      LSL.W       D1, D0
000019C8                          1841      
000019C8  E268                    1842      LSR.W       D1, D0
000019CA                          1843      
000019CA  4287                    1844      CLR.L       D7
000019CC                          1845      
000019CC  1E00                    1846      MOVE.B      D0, D7
000019CE                          1847      
000019CE  4EB9 000023B8           1848      JSR PRINT_EA
000019D4                          1849      
000019D4  4E75                    1850      RTS
000019D6                          1851  
000019D6                          1852  Memory_Register
000019D6  361E                    1853      MOVE.W (A6)+, D3
000019D8                          1854      
000019D8  4EB8 19B4               1855      JSR         PRINT_ADDRESS
000019DC                          1856      
000019DC  43F9 000027D0           1857      LEA         COMMA, A1
000019E2                          1858      
000019E2  103C 000E               1859      MOVE.B      #14, D0
000019E6                          1860      
000019E6  4E4F                    1861      TRAP #15
000019E8                          1862          
000019E8                          1863      *MOVE.W      (A6)+, D3
000019E8                          1864      
000019E8  183C 000F               1865      MOVE.B      #15, D4
000019EC                          1866      
000019EC  4EB9 00001BCC           1867      JSR         LOOP_MOVEM
000019F2                          1868      
000019F2  6000 F6FC               1869      BRA PARSE_MEMORY
000019F6                          1870  
000019F6                          1871  
000019F6                          1872  OPPOSITE_LOOP
000019F6  4241                    1873      CLR         D1
000019F8                          1874  
000019F8                          1875      *MOVE.W      (A6)+, D3
000019F8                          1876      
000019F8  183C 000F               1877      MOVE.B      #15, D4
000019FC                          1878      
000019FC  4EB9 00001A16           1879      JSR OPPOSITE_LOOP_MOVEM
00001A02                          1880      
00001A02  43F9 000027D0           1881      LEA COMMA, A1
00001A08                          1882      
00001A08  103C 000E               1883      MOVE.B      #14, D0
00001A0C                          1884      
00001A0C  4E4F                    1885      TRAP #15
00001A0E                          1886      
00001A0E  4EB8 19B4               1887      JSR PRINT_ADDRESS
00001A12                          1888      
00001A12  6000 F6DC               1889      BRA PARSE_MEMORY
00001A16                          1890  
00001A16                          1891          
00001A16                          1892  OPPOSITE_LOOP_MOVEM
00001A16                          1893          
00001A16  0903                    1894      BTST        D4, D3     * BIT TEST
00001A18                          1895  
00001A18  6600 0020               1896      BNE         OPPOSITE_IS_USED_FIRST
00001A1C                          1897  
00001A1C  5304                    1898      SUB.B       #1, D4
00001A1E                          1899      
00001A1E                          1900  OPPOSITE_CHECK
00001A1E  B83C 00FF               1901      CMP.B       #-1,  D4
00001A22                          1902  
00001A22  6700 0B80               1903      BEQ         DONE
00001A26                          1904  
00001A26  60EE                    1905      BRA         OPPOSITE_LOOP_MOVEM
00001A28                          1906      
00001A28                          1907  OPPOSITE_LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
00001A28  0903                    1908      BTST        D4, D3     * BIT TEST
00001A2A                          1909  
00001A2A  6600 0018               1910      BNE         OPPOSITE_IS_USED
00001A2E                          1911  
00001A2E  5304                    1912      SUB.B       #1, D4
00001A30                          1913      
00001A30                          1914  OPPOSITE_CHECK_SECOND
00001A30  B83C 00FF               1915      CMP.B       #-1,  D4
00001A34                          1916  
00001A34  6700 0B6E               1917      BEQ         DONE
00001A38                          1918  
00001A38  60EE                    1919      BRA         OPPOSITE_LOOP_MOVEM_SECOND
00001A3A                          1920  
00001A3A                          1921  OPPOSITE_IS_USED_FIRST
00001A3A  4EB9 00001A5A           1922      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
00001A40                          1923  
00001A40  5304                    1924      SUB.B       #1, D4
00001A42                          1925  
00001A42  60EC                    1926      BRA         OPPOSITE_CHECK_SECOND
00001A44                          1927  
00001A44                          1928  
00001A44                          1929  OPPOSITE_IS_USED
00001A44  43F9 000027B9           1930      LEA         SLASH, A1
00001A4A                          1931  
00001A4A  103C 000E               1932      MOVE.B      #14, D0
00001A4E                          1933  
00001A4E  4E4F                    1934      TRAP #15
00001A50                          1935      
00001A50  4EB9 00001A5A           1936      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
00001A56                          1937  
00001A56  5304                    1938      SUB.B       #1, D4
00001A58                          1939  
00001A58  60D6                    1940      BRA         OPPOSITE_CHECK_SECOND
00001A5A                          1941  
00001A5A                          1942      
00001A5A                          1943      
00001A5A                          1944  OPPOSITE_PRINT_REGISTER_MOVEM
00001A5A  41F9 00001A6C           1945      LEA        OPPOSITE_jmp_table_MOVEM, A0
00001A60  4242                    1946      CLR        D2
00001A62  143C 0006               1947      MOVE.B     #6, D2
00001A66  C4C4                    1948      MULU       D4, D2                           
00001A68  4EF0 2000               1949      JMP        0(A0,D2)   *Jump indirect with index
00001A6C                          1950                      
00001A6C                          1951  OPPOSITE_jmp_table_MOVEM      
00001A6C  4EF9 00001ACC           1952      JMP         OPPOSITE_bit0
00001A72  4EF9 00001ADC           1953                 JMP         OPPOSITE_bit1
00001A78  4EF9 00001AEC           1954                 JMP         OPPOSITE_bit2
00001A7E  4EF9 00001AFC           1955                 JMP         OPPOSITE_bit3
00001A84  4EF9 00001B0C           1956                 JMP         OPPOSITE_bit4
00001A8A  4EF9 00001B1C           1957                 JMP         OPPOSITE_bit5
00001A90  4EF9 00001B2C           1958                 JMP         OPPOSITE_bit6
00001A96  4EF9 00001B3C           1959                 JMP         OPPOSITE_bit7
00001A9C  4EF9 00001B4C           1960                 JMP         OPPOSITE_bit8
00001AA2  4EF9 00001B5C           1961                 JMP         OPPOSITE_bit9
00001AA8  4EF9 00001B6C           1962                 JMP         OPPOSITE_bit10
00001AAE  4EF9 00001B7C           1963                 JMP         OPPOSITE_bit11
00001AB4  4EF9 00001B8C           1964                 JMP         OPPOSITE_bit12
00001ABA  4EF9 00001B9C           1965                 JMP         OPPOSITE_bit13
00001AC0  4EF9 00001BAC           1966                 JMP         OPPOSITE_bit14
00001AC6  4EF9 00001BBC           1967                 JMP         OPPOSITE_bit15
00001ACC                          1968          
00001ACC                          1969   
00001ACC                          1970   
00001ACC                          1971   
00001ACC                          1972  OPPOSITE_bit0    * D0
00001ACC  1E3C 0007               1973      MOVE.B    #%111, D7    * REGISTER
00001AD0                          1974      
00001AD0  1C3C 0001               1975      MOVE.B    #%001, D6    * MODE
00001AD4                          1976  
00001AD4  4EB9 000023B8           1977      JSR        PRINT_EA
00001ADA                          1978  
00001ADA  4E75                    1979      RTS    
00001ADC                          1980  
00001ADC                          1981  OPPOSITE_bit1    * D1
00001ADC  1E3C 0006               1982      MOVE.B    #%110, D7    * REGISTER
00001AE0                          1983      
00001AE0  1C3C 0001               1984      MOVE.B    #%001, D6    * MODE
00001AE4                          1985  
00001AE4  4EB9 000023B8           1986      JSR        PRINT_EA
00001AEA                          1987  
00001AEA  4E75                    1988      RTS    
00001AEC                          1989  
00001AEC                          1990  OPPOSITE_bit2    * D2
00001AEC  1E3C 0005               1991      MOVE.B    #%101, D7    * REGISTER
00001AF0                          1992      
00001AF0  1C3C 0001               1993      MOVE.B    #%001, D6    * MODE
00001AF4                          1994  
00001AF4  4EB9 000023B8           1995      JSR        PRINT_EA    
00001AFA                          1996  
00001AFA  4E75                    1997      RTS
00001AFC                          1998  
00001AFC                          1999  OPPOSITE_bit3    * D3
00001AFC  1E3C 0004               2000      MOVE.B    #%100, D7    * REGISTER
00001B00                          2001      
00001B00  1C3C 0001               2002      MOVE.B    #%001, D6    * MODE
00001B04                          2003  
00001B04  4EB9 000023B8           2004      JSR        PRINT_EA
00001B0A                          2005  
00001B0A  4E75                    2006      RTS    
00001B0C                          2007  
00001B0C                          2008  OPPOSITE_bit4    * D4
00001B0C  1E3C 0003               2009      MOVE.B    #%011, D7    * REGISTER
00001B10                          2010  
00001B10  1C3C 0001               2011      MOVE.B    #%001, D6    * MODE
00001B14                          2012  
00001B14  4EB9 000023B8           2013      JSR        PRINT_EA
00001B1A                          2014  
00001B1A  4E75                    2015      RTS    
00001B1C                          2016  
00001B1C                          2017  
00001B1C                          2018  OPPOSITE_bit5    * D5
00001B1C  1E3C 0002               2019      MOVE.B    #%010, D7    * REGISTER
00001B20                          2020      
00001B20  1C3C 0001               2021      MOVE.B    #%001, D6    * MODE
00001B24                          2022  
00001B24  4EB9 000023B8           2023      JSR        PRINT_EA
00001B2A                          2024  
00001B2A  4E75                    2025      RTS    
00001B2C                          2026  
00001B2C                          2027  OPPOSITE_bit6    * D6
00001B2C  1E3C 0001               2028      MOVE.B    #%001, D7    * REGISTER
00001B30                          2029      
00001B30  1C3C 0001               2030      MOVE.B    #%001, D6    * MODE
00001B34                          2031  
00001B34  4EB9 000023B8           2032      JSR        PRINT_EA
00001B3A                          2033  
00001B3A  4E75                    2034      RTS    
00001B3C                          2035  
00001B3C                          2036  OPPOSITE_bit7    * D7
00001B3C  1E3C 0000               2037      MOVE.B    #%000, D7    * REGISTER
00001B40                          2038      
00001B40  1C3C 0001               2039      MOVE.B    #%001, D6    * MODE
00001B44                          2040  
00001B44  4EB9 000023B8           2041      JSR        PRINT_EA
00001B4A                          2042  
00001B4A  4E75                    2043      RTS    
00001B4C                          2044  
00001B4C                          2045  OPPOSITE_bit8    * A0
00001B4C  1E3C 0007               2046      MOVE.B    #%111, D7    * REGISTER
00001B50                          2047      
00001B50  1C3C 0000               2048      MOVE.B    #%000, D6    * MODE
00001B54                          2049  
00001B54  4EB9 000023B8           2050      JSR        PRINT_EA
00001B5A                          2051  
00001B5A  4E75                    2052      RTS    
00001B5C                          2053  
00001B5C                          2054  OPPOSITE_bit9    * A1
00001B5C  1E3C 0006               2055      MOVE.B    #%110, D7    * REGISTER
00001B60                          2056      
00001B60  1C3C 0000               2057      MOVE.B    #%000, D6    * MODE
00001B64                          2058  
00001B64  4EB9 000023B8           2059      JSR        PRINT_EA
00001B6A                          2060  
00001B6A  4E75                    2061      RTS    
00001B6C                          2062  
00001B6C                          2063  OPPOSITE_bit10    * A2
00001B6C  1E3C 0005               2064      MOVE.B    #%101, D7    * REGISTER
00001B70                          2065      
00001B70  1C3C 0000               2066      MOVE.B    #%000, D6    * MODE
00001B74                          2067  
00001B74  4EB9 000023B8           2068      JSR        PRINT_EA
00001B7A                          2069  
00001B7A  4E75                    2070      RTS    
00001B7C                          2071  
00001B7C                          2072  
00001B7C                          2073  OPPOSITE_bit11    * A5
00001B7C  1E3C 0002               2074      MOVE.B    #%010, D7    * REGISTER
00001B80                          2075      
00001B80  1C3C 0000               2076      MOVE.B    #%000, D6    * MODE
00001B84                          2077  
00001B84  4EB9 000023B8           2078      JSR        PRINT_EA
00001B8A                          2079  
00001B8A  4E75                    2080      RTS    
00001B8C                          2081  
00001B8C                          2082  OPPOSITE_bit12    * A4
00001B8C  1E3C 0003               2083      MOVE.B    #%011, D7    * REGISTER
00001B90                          2084      
00001B90  1C3C 0000               2085      MOVE.B    #%000, D6    * MODE
00001B94                          2086  
00001B94  4EB9 000023B8           2087      JSR        PRINT_EA
00001B9A                          2088  
00001B9A  4E75                    2089      RTS    
00001B9C                          2090  
00001B9C                          2091  
00001B9C                          2092  OPPOSITE_bit13    * A5
00001B9C  1E3C 0002               2093      MOVE.B    #%010, D7    * REGISTER
00001BA0                          2094      
00001BA0  1C3C 0000               2095      MOVE.B    #%000, D6    * MODE
00001BA4                          2096  
00001BA4  4EB9 000023B8           2097      JSR        PRINT_EA
00001BAA                          2098  
00001BAA  4E75                    2099      RTS    
00001BAC                          2100  
00001BAC                          2101  
00001BAC                          2102  OPPOSITE_bit14     * A6
00001BAC  1E3C 0001               2103      MOVE.B    #%001, D7    * REGISTER
00001BB0                          2104      
00001BB0  1C3C 0000               2105      MOVE.B    #%000, D6    * MODE
00001BB4                          2106  
00001BB4  4EB9 000023B8           2107      JSR        PRINT_EA
00001BBA                          2108  
00001BBA  4E75                    2109      RTS        
00001BBC                          2110  
00001BBC                          2111  
00001BBC                          2112  OPPOSITE_bit15    * A7
00001BBC  1E3C 0000               2113      MOVE.B    #%000, D7    * REGISTER
00001BC0                          2114      
00001BC0  1C3C 0000               2115      MOVE.B    #%000, D6    * MODE
00001BC4                          2116  
00001BC4  4EB9 000023B8           2117      JSR        PRINT_EA
00001BCA                          2118  
00001BCA  4E75                    2119      RTS    
00001BCC                          2120  
00001BCC                          2121  
00001BCC                          2122  
00001BCC                          2123  
00001BCC                          2124  
00001BCC                          2125  LOOP_MOVEM
00001BCC                          2126          
00001BCC  0903                    2127      BTST        D4, D3     * BIT TEST
00001BCE                          2128  
00001BCE  6600 0020               2129      BNE         IS_USED_FIRST
00001BD2                          2130  
00001BD2  5304                    2131      SUB.B       #1, D4
00001BD4                          2132      
00001BD4                          2133  CHECK
00001BD4  B83C 00FF               2134      CMP.B       #-1,  D4
00001BD8                          2135  
00001BD8  6700 09CA               2136      BEQ         DONE
00001BDC                          2137  
00001BDC  60EE                    2138      BRA         LOOP_MOVEM
00001BDE                          2139      
00001BDE                          2140  LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
00001BDE  0903                    2141      BTST        D4, D3     * BIT TEST
00001BE0                          2142  
00001BE0  6600 0018               2143      BNE         IS_USED
00001BE4                          2144  
00001BE4  5304                    2145      SUB.B       #1, D4
00001BE6                          2146      
00001BE6                          2147  CHECK_SECOND
00001BE6  B83C 00FF               2148      CMP.B       #-1,  D4
00001BEA                          2149  
00001BEA  6700 09B8               2150      BEQ         DONE
00001BEE                          2151  
00001BEE  60EE                    2152      BRA         LOOP_MOVEM_SECOND
00001BF0                          2153  
00001BF0                          2154  IS_USED_FIRST
00001BF0  4EB9 00001C10           2155      JSR         PRINT_REGISTER_MOVEM
00001BF6                          2156  
00001BF6  5304                    2157      SUB.B       #1, D4
00001BF8                          2158  
00001BF8  60EC                    2159      BRA         CHECK_SECOND
00001BFA                          2160  
00001BFA                          2161  
00001BFA                          2162  IS_USED
00001BFA  43F9 000027B9           2163      LEA         SLASH, A1
00001C00                          2164  
00001C00  103C 000E               2165      MOVE.B      #14, D0
00001C04                          2166  
00001C04  4E4F                    2167      TRAP #15
00001C06                          2168      
00001C06  4EB9 00001C10           2169      JSR         PRINT_REGISTER_MOVEM
00001C0C                          2170  
00001C0C  5304                    2171      SUB.B       #1, D4
00001C0E                          2172  
00001C0E  60D6                    2173      BRA         CHECK_SECOND
00001C10                          2174  
00001C10                          2175  
00001C10                          2176  
00001C10                          2177  
00001C10                          2178  
00001C10                          2179  PRINT_REGISTER_MOVEM
00001C10  41F9 00001C22           2180      LEA         jmp_table_MOVEM, A0
00001C16  4242                    2181      CLR         D2
00001C18  143C 0006               2182      MOVE.B      #6, D2
00001C1C  C4C4                    2183      MULU        D4, D2                           
00001C1E  4EF0 2000               2184      JMP         0(A0,D2)   *Jump indirect with index
00001C22                          2185                      
00001C22                          2186  jmp_table_MOVEM      
00001C22  4EF9 00001C82           2187      JMP         bit0
00001C28  4EF9 00001C92           2188                 JMP         bit1
00001C2E  4EF9 00001CA2           2189                 JMP         bit2
00001C34  4EF9 00001CB2           2190                 JMP         bit3
00001C3A  4EF9 00001CC2           2191                 JMP         bit4
00001C40  4EF9 00001CD2           2192                 JMP         bit5
00001C46  4EF9 00001CE2           2193                 JMP         bit6
00001C4C  4EF9 00001CF2           2194                 JMP         bit7
00001C52  4EF9 00001D02           2195                 JMP         bit8
00001C58  4EF9 00001D12           2196                 JMP         bit9
00001C5E  4EF9 00001D22           2197                 JMP         bit10
00001C64  4EF9 00001D32           2198                 JMP         bit11
00001C6A  4EF9 00001D42           2199                 JMP         bit12
00001C70  4EF9 00001D52           2200                 JMP         bit13
00001C76  4EF9 00001D62           2201                 JMP         bit14
00001C7C  4EF9 00001D72           2202                 JMP         bit15
00001C82                          2203          
00001C82                          2204   
00001C82                          2205   
00001C82                          2206   
00001C82                          2207  bit0    * D0
00001C82  1E3C 0000               2208      MOVE.B    #%000, D7    * REGISTER
00001C86                          2209      
00001C86  1C3C 0000               2210      MOVE.B    #%000, D6    * MODE
00001C8A                          2211  
00001C8A  4EB9 000023B8           2212      JSR        PRINT_EA
00001C90                          2213  
00001C90  4E75                    2214      RTS    
00001C92                          2215  
00001C92                          2216  bit1    * D1
00001C92  1E3C 0001               2217      MOVE.B    #%001, D7    * REGISTER
00001C96                          2218      
00001C96  1C3C 0000               2219      MOVE.B    #%000, D6    * MODE
00001C9A                          2220  
00001C9A  4EB9 000023B8           2221      JSR        PRINT_EA
00001CA0                          2222  
00001CA0  4E75                    2223      RTS    
00001CA2                          2224  
00001CA2                          2225  bit2    * D2
00001CA2  1E3C 0002               2226      MOVE.B    #%010, D7    * REGISTER
00001CA6                          2227      
00001CA6  1C3C 0000               2228      MOVE.B    #%000, D6    * MODE
00001CAA                          2229  
00001CAA  4EB9 000023B8           2230      JSR        PRINT_EA    
00001CB0                          2231  
00001CB0  4E75                    2232      RTS
00001CB2                          2233  
00001CB2                          2234  bit3    * D3
00001CB2  1E3C 0003               2235      MOVE.B    #%011, D7    * REGISTER
00001CB6                          2236      
00001CB6  1C3C 0000               2237      MOVE.B    #%000, D6    * MODE
00001CBA                          2238  
00001CBA  4EB9 000023B8           2239      JSR        PRINT_EA
00001CC0                          2240  
00001CC0  4E75                    2241      RTS    
00001CC2                          2242  
00001CC2                          2243  bit4    * D4
00001CC2  1E3C 0004               2244      MOVE.B    #%100, D7    * REGISTER
00001CC6                          2245  
00001CC6  1C3C 0000               2246      MOVE.B    #%000, D6    * MODE
00001CCA                          2247  
00001CCA  4EB9 000023B8           2248      JSR        PRINT_EA
00001CD0                          2249  
00001CD0  4E75                    2250      RTS    
00001CD2                          2251  
00001CD2                          2252  
00001CD2                          2253  bit5    * D5
00001CD2  1E3C 0005               2254      MOVE.B    #%101, D7    * REGISTER
00001CD6                          2255      
00001CD6  1C3C 0000               2256      MOVE.B    #%000, D6    * MODE
00001CDA                          2257  
00001CDA  4EB9 000023B8           2258      JSR        PRINT_EA
00001CE0                          2259  
00001CE0  4E75                    2260      RTS    
00001CE2                          2261  
00001CE2                          2262  bit6    * D6
00001CE2  1E3C 0006               2263      MOVE.B    #%110, D7    * REGISTER
00001CE6                          2264      
00001CE6  1C3C 0000               2265      MOVE.B    #%000, D6    * MODE
00001CEA                          2266  
00001CEA  4EB9 000023B8           2267      JSR        PRINT_EA
00001CF0                          2268  
00001CF0  4E75                    2269      RTS    
00001CF2                          2270  
00001CF2                          2271  bit7    * D7
00001CF2  1E3C 0007               2272      MOVE.B    #%111, D7    * REGISTER
00001CF6                          2273      
00001CF6  1C3C 0000               2274      MOVE.B    #%000, D6    * MODE
00001CFA                          2275  
00001CFA  4EB9 000023B8           2276      JSR        PRINT_EA
00001D00                          2277  
00001D00  4E75                    2278      RTS    
00001D02                          2279  
00001D02                          2280  bit8    * A0
00001D02  1E3C 0000               2281      MOVE.B    #%000, D7    * REGISTER
00001D06                          2282      
00001D06  1C3C 0001               2283      MOVE.B    #%001, D6    * MODE
00001D0A                          2284  
00001D0A  4EB9 000023B8           2285      JSR        PRINT_EA
00001D10                          2286  
00001D10  4E75                    2287      RTS    
00001D12                          2288  
00001D12                          2289  bit9    * A1
00001D12  1E3C 0001               2290      MOVE.B    #%001, D7    * REGISTER
00001D16                          2291      
00001D16  1C3C 0001               2292      MOVE.B    #%001, D6    * MODE
00001D1A                          2293  
00001D1A  4EB9 000023B8           2294      JSR        PRINT_EA
00001D20                          2295  
00001D20  4E75                    2296      RTS    
00001D22                          2297  
00001D22                          2298  bit10    * A2
00001D22  1E3C 0002               2299      MOVE.B    #%010, D7    * REGISTER
00001D26                          2300      
00001D26  1C3C 0001               2301      MOVE.B    #%001, D6    * MODE
00001D2A                          2302  
00001D2A  4EB9 000023B8           2303      JSR        PRINT_EA
00001D30                          2304  
00001D30  4E75                    2305      RTS    
00001D32                          2306  
00001D32                          2307  
00001D32                          2308  bit11    * A5
00001D32  1E3C 0003               2309      MOVE.B    #%011, D7    * REGISTER
00001D36                          2310      
00001D36  1C3C 0001               2311      MOVE.B    #%001, D6    * MODE
00001D3A                          2312  
00001D3A  4EB9 000023B8           2313      JSR        PRINT_EA
00001D40                          2314  
00001D40  4E75                    2315      RTS    
00001D42                          2316  
00001D42                          2317  bit12    * A4
00001D42  1E3C 0004               2318      MOVE.B    #%100, D7    * REGISTER
00001D46                          2319      
00001D46  1C3C 0001               2320      MOVE.B    #%001, D6    * MODE
00001D4A                          2321  
00001D4A  4EB9 000023B8           2322      JSR        PRINT_EA
00001D50                          2323  
00001D50  4E75                    2324      RTS    
00001D52                          2325  
00001D52                          2326  
00001D52                          2327  bit13    * A5
00001D52  1E3C 0005               2328      MOVE.B    #%101, D7    * REGISTER
00001D56                          2329      
00001D56  1C3C 0001               2330      MOVE.B    #%001, D6    * MODE
00001D5A                          2331  
00001D5A  4EB9 000023B8           2332      JSR        PRINT_EA
00001D60                          2333  
00001D60  4E75                    2334      RTS    
00001D62                          2335  
00001D62                          2336  
00001D62                          2337  bit14     * A6
00001D62  1E3C 0006               2338      MOVE.B    #%110, D7    * REGISTER
00001D66                          2339      
00001D66  1C3C 0001               2340      MOVE.B    #%001, D6    * MODE
00001D6A                          2341  
00001D6A  4EB9 000023B8           2342      JSR        PRINT_EA
00001D70                          2343  
00001D70  4E75                    2344      RTS        
00001D72                          2345  
00001D72                          2346  
00001D72                          2347  bit15    * A7
00001D72  1E3C 0007               2348      MOVE.B    #%111, D7    * REGISTER
00001D76                          2349      
00001D76  1C3C 0001               2350      MOVE.B    #%001, D6    * MODE
00001D7A                          2351  
00001D7A  4EB9 000023B8           2352      JSR        PRINT_EA
00001D80                          2353  
00001D80  4E75                    2354      RTS    
00001D82                          2355  
00001D82                          2356  DONE_MOVEM_LOOP
00001D82  4E75                    2357      RTS
00001D84                          2358  
00001D84                          2359     * SIMHALT             ; halt simulator
00001D84                          2360      *INCLUDE 'MESSAGE_Data.X68'
00001D84                          2361     * INCLUDE 'JUMPTABLE EA.X68'
00001D84                          2362  
00001D84                          2363  
00001D84                          2364     * END    START        ; last line of source
00001D84                          2365  
00001D84                          2366  
00001D84                          2367  
00001D84                          2368  
00001D84                          2369  
00001D84                          2370  
00001D84                          2371  
00001D84                          2372  
00001D84                          2373  
00001D84                          2374  
00001D84                          2375  
00001D84                          2376  
00001D84                          2377  
00001D84                          2378  
00001D84                          2379  
00001D84                          2380  
00001D84                          2381  
00001D84                          2382  
00001D84                          2383  
00001D84                          2384  
00001D84                          2385  
00001D84                          2386  
00001D84                          2387  
00001D84                          2388  
00001D84                          2389  
00001D84                          2390  
00001D84                          2391  
00001D84                          2392  
00001D84                          2393  
00001D84                          2394  
00001D84                          2395  
00001D84                          2396  
00001D84                          2397  
00001D84                          2398  
00001D84                          2399  
00001D84                          2400  
00001D84                          2401  
00001D84                          2402  
00001D84                          2403  -------------------- end include --------------------
00001D84                          2404                  INCLUDE 'MOVEQ.X68'
00001D84                          2405  
00001D84                          2406  MOVEQ 
00001D84                          2407  
00001D84                          2408                   * ADD message
00001D84  43F9 00002755           2409                   LEA      MOVEQ_MESSAGE,    A1
00001D8A  103C 000E               2410                   MOVE.B   #14,            D0
00001D8E  4E4F                    2411                   TRAP #15
00001D90                          2412                   
00001D90                          2413                   * print out size L
00001D90  43F9 000027AA           2414                   LEA      SIZE_L_PRINT,    A1
00001D96  103C 000E               2415                   MOVE.B   #14,             D0          
00001D9A  4E4F                    2416                   TRAP #15   
00001D9C                          2417                   
00001D9C                          2418                   * print out immediate Data
00001D9C                          2419                   
00001D9C  43F9 000027B0           2420                  LEA     POUND_SIGN, A1
00001DA2                          2421              
00001DA2  103C 000E               2422                  MOVE.B  #14, D0
00001DA6                          2423              
00001DA6  4E4F                    2424                  TRAP #15
00001DA8                          2425              
00001DA8  43F9 000027B2           2426                  LEA     HEX_SIGN, A1
00001DAE                          2427              
00001DAE  4E4F                    2428                  TRAP #15
00001DB0                          2429                  
00001DB0  4280                    2430                  CLR.L       D0              *Zero it
00001DB2                          2431  
00001DB2  3015                    2432                  MOVE.W      (A5),D0     *We'll play with it here
00001DB4                          2433                 
00001DB4  123C 0008               2434                  MOVE.B      #8, D1
00001DB8                          2435                 
00001DB8  E368                    2436                  LSL.W       D1, D0
00001DBA                          2437  
00001DBA  123C 0008               2438                  MOVE.B      #8,D1       *Shift 12 bits to the right  
00001DBE                          2439  
00001DBE  E268                    2440                  LSR.W       D1,D0           *Move the bits -> D0 holds DATA
00001DC0                          2441                      
00001DC0  4285                    2442                  CLR.L D5
00001DC2                          2443                 
00001DC2  3A00                    2444                  MOVE.W D0, D5      
00001DC4                          2445          
00001DC4  4EB9 0000231A           2446                  JSR         HEX_TO_ASCII
00001DCA                          2447                  
00001DCA  43F9 000027D0           2448                  LEA      COMMA,    A1
00001DD0  103C 000E               2449                  MOVE.B   #14,            D0
00001DD4  4E4F                    2450                  TRAP #15
00001DD6                          2451                   
00001DD6                          2452                  * for the first Dn 
00001DD6  4286                    2453                  CLR.L D6
00001DD8                          2454                  
00001DD8  4EB8 1362               2455                  JSR     GET_Data_Register
00001DDC                          2456                  
00001DDC  1C3C 0000               2457                  MOVE.B  #%000, D6 * for mode
00001DE0                          2458                   
00001DE0  4EB9 000023B8           2459                  JSR     PRINT_EA *by using jmp table
00001DE6                          2460                   
00001DE6  6000 F308               2461                  BRA PARSE_MEMORY
00001DEA                          2462          
00001DEA                          2463  
00001DEA                          2464  
00001DEA                          2465  
00001DEA                          2466  
00001DEA                          2467  
00001DEA                          2468  
00001DEA                          2469  
00001DEA                          2470  
00001DEA                          2471  
00001DEA                          2472  
00001DEA                          2473  
00001DEA                          2474  
00001DEA                          2475  -------------------- end include --------------------
00001DEA                          2476                  INCLUDE 'DAMIAN_OP_CODE.X68'
00001DEA  4280                    2477  SHIFTS           CLR.L D0
00001DEC                          2478                      
00001DEC  4286                    2479                   CLR.L D6
00001DEE                          2480  
00001DEE  4281                    2481                   CLR.L D1
00001DF0                          2482                   
00001DF0  3015                    2483                   MOVE.W (A5), D0
00001DF2                          2484                   
00001DF2  E148                    2485                   LSL.W #8, D0
00001DF4                          2486                   
00001DF4  123C 000E               2487                   MOVE.B #14, D1
00001DF8                          2488                   
00001DF8  E268                    2489                   LSR.W D1, D0
00001DFA                          2490                   
00001DFA  B03C 0003               2491                   CMP.B  #%11, D0            * check to see if its memory shift
00001DFE                          2492                   
00001DFE  6700 0024               2493                   BEQ MEMORY_SHIFTS
00001E02                          2494                   
00001E02  3015                    2495                   MOVE.W     (A5), D0
00001E04                          2496                   
00001E04  123C 000B               2497                   MOVE.B     #11, D1
00001E08                          2498                   
00001E08  E368                    2499                   LSL.W      D1, D0
00001E0A                          2500                   
00001E0A  123C 000E               2501                   MOVE.B     #14, D1
00001E0E                          2502                   
00001E0E  E268                    2503                   LSR.W      D1, D0
00001E10                          2504                   
00001E10  B03C 0000               2505                   CMP.B      #%00, D0
00001E14                          2506                   
00001E14  6700 010A               2507                   BEQ        ASD
00001E18                          2508                   
00001E18  B03C 0001               2509                   CMP.B      #%01, D0
00001E1C                          2510                   
00001E1C  6700 0032               2511                   BEQ        LSD
00001E20                          2512                   
00001E20  6000 0096               2513                   BRA        ROD
00001E24                          2514                   
00001E24                          2515                   
00001E24                          2516  MEMORY_SHIFTS
00001E24  3015                    2517                   MOVE.W (A5),D0
00001E26                          2518                   
00001E26  E948                    2519                   LSL.W #4,D0            *shift out the opcode
00001E28                          2520                   
00001E28  123C 000D               2521                   MOVE.B #13,D1          
00001E2C                          2522                   
00001E2C  E268                    2523                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there
00001E2E                          2524                   
00001E2E  B03C 0001               2525                   CMP.B #1,D0            
00001E32                          2526                   
00001E32  6700 001C               2527                   BEQ LSD                *if the bits are 1, it is a logical shift
00001E36                          2528                   
00001E36  B03C 0003               2529                   CMP.B #3,D0
00001E3A                          2530                   
00001E3A  6700 007C               2531                   BEQ ROD                *if the bits are 3, it is a rotation
00001E3E                          2532                   
00001E3E  3015                    2533                   MOVE.W (A5),D0
00001E40                          2534                   
00001E40  E948                    2535                   LSL.W #4,D0            *shift out the opcode
00001E42                          2536                   
00001E42  123C 000D               2537                   MOVE.B #13,D1          
00001E46                          2538                   
00001E46  E268                    2539                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there   
00001E48                          2540                      
00001E48  B03C 0000               2541                   CMP.B  #0, D0
00001E4C                          2542                   
00001E4C  6700 00D2               2543                   BEQ    ASD
00001E50                          2544                   
00001E50                          2545  
00001E50  4280                    2546  LSD              CLR.L D0               *still need to do checks, since an asd shift could still be a possibility
00001E52                          2547                   
00001E52  4281                    2548                   CLR.L D1
00001E54                          2549                                                 
00001E54  3015                    2550                   MOVE.W (A5), D0
00001E56                          2551                   
00001E56  EF48                    2552                   LSL.W  #7, D0
00001E58                          2553                   
00001E58  123C 000F               2554                   MOVE.B #15, D1
00001E5C                          2555                   
00001E5C  E268                    2556                   LSR.W  D1, D0
00001E5E                          2557                   
00001E5E  B03C 0001               2558                   CMP.B  #1, D0
00001E62                          2559                   
00001E62  6700 0006               2560                   BEQ LSL
00001E66                          2561                   
00001E66  6000 0024               2562                   BRA LSR
00001E6A                          2563                   
00001E6A                          2564  
00001E6A                          2565  LSL
00001E6A  43F9 00002786           2566                   LEA LSL_MESSAGE, A1    * print message
00001E70                          2567                   
00001E70  103C 000E               2568                   MOVE.B #14, D0
00001E74                          2569                   
00001E74  4E4F                    2570                   TRAP #15
00001E76                          2571              
00001E76  3015                    2572                   MOVE.W (A5), D0
00001E78                          2573                   
00001E78  E148                    2574                   LSL.W #8, D0
00001E7A                          2575                   
00001E7A  123C 000E               2576                   MOVE.B #14, D1
00001E7E                          2577                   
00001E7E  E268                    2578                   LSR.W D1, D0
00001E80                          2579                   
00001E80  B03C 0003               2580                   CMP.B  #%11, D0        * check to see if it is memory and not register shift
00001E84                          2581                   
00001E84  6700 0028               2582                   BEQ LSD_MEMORY
00001E88                          2583                   
00001E88  6000 00FA               2584                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001E8C                          2585  
00001E8C                          2586  LSR              
00001E8C  43F9 00002792           2587                   LEA LSR_MESSAGE, A1            * print message
00001E92                          2588                   
00001E92  103C 000E               2589                   MOVE.B #14, D0
00001E96                          2590                   
00001E96  4E4F                    2591                   TRAP #15
00001E98                          2592          
00001E98  3015                    2593                   MOVE.W (A5), D0
00001E9A                          2594                   
00001E9A  E148                    2595                   LSL.W #8, D0
00001E9C                          2596                   
00001E9C  123C 000E               2597                   MOVE.B #14, D1
00001EA0                          2598                   
00001EA0  E268                    2599                   LSR.W D1, D0
00001EA2                          2600                   
00001EA2  B03C 0003               2601                   CMP.B  #%11, D0            * check to see if memory shift
00001EA6                          2602                   
00001EA6  6700 0006               2603                   BEQ LSD_MEMORY
00001EAA                          2604                   
00001EAA  6000 00D8               2605                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001EAE                          2606                   
00001EAE                          2607  LSD_MEMORY
00001EAE  4EB9 0000202C           2608                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001EB4                          2609                   
00001EB4  6000 F23A               2610                   BRA PARSE_MEMORY
00001EB8                          2611              
00001EB8                          2612  
00001EB8  4280                    2613  ROD              CLR.L D0               *same check as logical shift, since an arithmetic shift could still be possible
00001EBA                          2614                   
00001EBA  4281                    2615                   CLR.L D1
00001EBC                          2616                   
00001EBC  3015                    2617                   MOVE.W (A5), D0
00001EBE                          2618                   
00001EBE  EF48                    2619                   LSL.W  #7, D0
00001EC0                          2620                   
00001EC0  123C 000F               2621                   MOVE.B #15, D1
00001EC4                          2622                   
00001EC4  E268                    2623                   LSR.W  D1, D0
00001EC6                          2624                   
00001EC6  B03C 0001               2625                   CMP.B  #1, D0
00001ECA                          2626                   
00001ECA  6700 0006               2627                   BEQ ROL
00001ECE                          2628                   
00001ECE  6000 0024               2629                   BRA ROR
00001ED2                          2630  
00001ED2                          2631  ROL              
00001ED2  43F9 0000278E           2632                   LEA ROL_MESSAGE, A1
00001ED8                          2633                   
00001ED8  103C 000E               2634                   MOVE.B #14, D0
00001EDC                          2635                   
00001EDC  4E4F                    2636                   TRAP #15
00001EDE                          2637  
00001EDE  3015                    2638                   MOVE.W (A5), D0
00001EE0                          2639                   
00001EE0  E148                    2640                   LSL.W #8, D0
00001EE2                          2641                   
00001EE2  123C 000E               2642                   MOVE.B #14, D1
00001EE6                          2643                   
00001EE6  E268                    2644                   LSR.W D1, D0
00001EE8                          2645                   
00001EE8  B03C 0003               2646                   CMP.B  #%11, D0            * check to see if its memory shift
00001EEC                          2647                   
00001EEC  6700 0028               2648                   BEQ ROD_MEMORY
00001EF0                          2649                   
00001EF0  6000 0092               2650                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001EF4                          2651  
00001EF4                          2652  ROR       
00001EF4  43F9 0000279A           2653                   LEA ROR_MESSAGE, A1
00001EFA                          2654                   
00001EFA  103C 000E               2655                   MOVE.B #14, D0
00001EFE                          2656                   
00001EFE  4E4F                    2657                   TRAP #15
00001F00                          2658                   
00001F00  3015                    2659                   MOVE.W (A5), D0
00001F02                          2660                   
00001F02  E148                    2661                   LSL.W #8, D0
00001F04                          2662                   
00001F04  123C 000E               2663                   MOVE.B #14, D1
00001F08                          2664                   
00001F08  E268                    2665                   LSR.W D1, D0
00001F0A                          2666                   
00001F0A  B03C 0003               2667                   CMP.B  #%11, D0            * check to see if its memory shift
00001F0E                          2668                   
00001F0E  6700 0006               2669                   BEQ ROD_MEMORY
00001F12                          2670                   
00001F12  6000 0070               2671                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001F16                          2672  
00001F16                          2673  ROD_MEMORY       
00001F16  4EB9 0000202C           2674                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001F1C                          2675                   
00001F1C  6000 F1D2               2676                   BRA PARSE_MEMORY
00001F20                          2677                   
00001F20                          2678                   
00001F20  3015                    2679  ASD              MOVE.W (A5), D0
00001F22                          2680                   
00001F22  EF48                    2681                   LSL.W  #7, D0
00001F24                          2682                   
00001F24  123C 000F               2683                   MOVE.B #15, D1
00001F28                          2684                   
00001F28  E268                    2685                   LSR.W  D1, D0
00001F2A                          2686                   
00001F2A  B03C 0001               2687                   CMP.B  #1, D0
00001F2E                          2688                   
00001F2E  6700 0006               2689                   BEQ ASL
00001F32                          2690                   
00001F32  6000 0024               2691                   BRA ASR
00001F36                          2692                   
00001F36                          2693  ASL
00001F36  43F9 0000278A           2694                   LEA ASL_MESSAGE, A1
00001F3C                          2695                   
00001F3C  103C 000E               2696                   MOVE.B #14, D0
00001F40                          2697                   
00001F40  4E4F                    2698                   TRAP #15
00001F42                          2699                   
00001F42  3015                    2700                   MOVE.W (A5), D0
00001F44                          2701                   
00001F44  E148                    2702                   LSL.W #8, D0
00001F46                          2703                   
00001F46  123C 000E               2704                   MOVE.B #14, D1
00001F4A                          2705                   
00001F4A  E268                    2706                   LSR.W D1, D0
00001F4C                          2707                   
00001F4C  B03C 0003               2708                   CMP.B  #%11, D0            * check to see if its memory shift
00001F50                          2709                   
00001F50  6700 0028               2710                   BEQ ASD_MEMORY
00001F54                          2711                   
00001F54  6000 002E               2712                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001F58                          2713                                    
00001F58                          2714  
00001F58                          2715  ASR              
00001F58  43F9 00002796           2716                   LEA ASR_MESSAGE, A1
00001F5E                          2717                   
00001F5E  103C 000E               2718                   MOVE.B #14, D0
00001F62                          2719                   
00001F62  4E4F                    2720                   TRAP #15
00001F64                          2721                   
00001F64  3015                    2722                   MOVE.W (A5), D0
00001F66                          2723                   
00001F66  E148                    2724                   LSL.W #8, D0
00001F68                          2725                   
00001F68  123C 000E               2726                   MOVE.B #14, D1
00001F6C                          2727                   
00001F6C  E268                    2728                   LSR.W D1, D0
00001F6E                          2729                   
00001F6E  B03C 0003               2730                   CMP.B  #%11, D0            * check to see if its memory shift
00001F72                          2731                   
00001F72  6700 0006               2732                   BEQ ASD_MEMORY
00001F76                          2733                   
00001F76  6000 000C               2734                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001F7A                          2735  
00001F7A                          2736  ASD_MEMORY
00001F7A  4EB9 0000202C           2737                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001F80                          2738                   
00001F80  6000 F16E               2739                   BRA PARSE_MEMORY
00001F84                          2740                   
00001F84                          2741  PRINTOUT_REGISTER_SHIFTS_EA
00001F84  43F9 000027B4           2742                   LEA PERIOD, A1
00001F8A                          2743                   
00001F8A  103C 000E               2744                   MOVE.B #14, D0
00001F8E                          2745                   
00001F8E  4E4F                    2746                   TRAP #15
00001F90                          2747                  
00001F90  4EB8 12F0               2748                   JSR GET_SIZE_PURPLE
00001F94                          2749                   
00001F94  4EB8 1308               2750                   JSR PRINTOUT_SIZE_PURPLE
00001F98                          2751  
00001F98  3015                    2752                   MOVE.W (A5), D0
00001F9A                          2753                   
00001F9A  123C 000A               2754                   MOVE.B #10, D1
00001F9E                          2755                   
00001F9E  E368                    2756                   LSL.W D1, D0
00001FA0                          2757                   
00001FA0  123C 000F               2758                   MOVE.B #15, D1
00001FA4                          2759                   
00001FA4  E268                    2760                   LSR.W D1, D0
00001FA6                          2761                   
00001FA6  B03C 0001               2762                   CMP.B #1, D0
00001FAA                          2763                   
00001FAA  6700 0048               2764                   BEQ PRINTOUT_REGISTER
00001FAE                          2765                   
00001FAE  6000 0002               2766                   BRA PRINTOUT_COUNT
00001FB2                          2767  
00001FB2                          2768                   
00001FB2                          2769  PRINTOUT_COUNT
00001FB2  43F9 000027B0           2770                   LEA POUND_SIGN, A1
00001FB8                          2771  
00001FB8  103C 000E               2772                   MOVE.B #14, D0
00001FBC                          2773  
00001FBC  4E4F                    2774                   TRAP #15     
00001FBE                          2775                 
00001FBE  3015                    2776                   MOVE.W (A5), D0
00001FC0                          2777                   
00001FC0  E948                    2778                   LSL.W #4, D0
00001FC2                          2779                   
00001FC2  123C 000D               2780                   MOVE.B #13, D1
00001FC6                          2781                   
00001FC6  E268                    2782                   LSR.W D1, D0
00001FC8                          2783                   
00001FC8  1200                    2784                   MOVE.B D0, D1
00001FCA                          2785                   
00001FCA  103C 0003               2786                   MOVE.B #3, D0
00001FCE                          2787                   
00001FCE  4E4F                    2788                   TRAP #15                  * print out the amount that the ea is being shifted by
00001FD0                          2789                   
00001FD0  43F9 000027D0           2790                   LEA COMMA, A1
00001FD6                          2791                   
00001FD6  103C 000E               2792                   MOVE.B #14, D0
00001FDA                          2793                   
00001FDA  4E4F                    2794                   TRAP #15
00001FDC                          2795                   
00001FDC  3015                    2796                   MOVE.W (A5), D0
00001FDE                          2797                   
00001FDE  123C 000D               2798                   MOVE.B #13, D1                * to print out the ea that is being shifted
00001FE2                          2799                   
00001FE2  E368                    2800                   LSL.W D1, D0
00001FE4                          2801                   
00001FE4  E268                    2802                   LSR.W D1, D0
00001FE6                          2803                   
00001FE6  1E00                    2804                   MOVE.B D0, D7
00001FE8                          2805                   
00001FE8  7C00                    2806                   MOVE.L #%000, D6              * we know it is a data register
00001FEA                          2807                   
00001FEA  4EB9 000023B8           2808                   JSR PRINT_EA
00001FF0                          2809                   
00001FF0  6000 F0FE               2810                   BRA PARSE_MEMORY
00001FF4                          2811                   
00001FF4                          2812  
00001FF4                          2813  PRINTOUT_REGISTER
00001FF4  3015                    2814                   MOVE.W (A5), D0
00001FF6                          2815                   
00001FF6  E948                    2816                   LSL.W #4, D0
00001FF8                          2817                   
00001FF8  123C 000D               2818                   MOVE.B #13, D1
00001FFC                          2819                   
00001FFC  E268                    2820                   LSR.W D1, D0
00001FFE                          2821                   
00001FFE  1E00                    2822                   MOVE.B D0, D7
00002000                          2823                   
00002000  7C00                    2824                   MOVE.L #%000, D6
00002002                          2825                   
00002002  4EB9 000023B8           2826                   JSR PRINT_EA                  * to print out the data register
00002008                          2827                   
00002008  43F9 000027D0           2828                   LEA COMMA, A1
0000200E                          2829                   
0000200E  103C 000E               2830                   MOVE.B #14, D0
00002012                          2831                   
00002012  4E4F                    2832                   TRAP #15
00002014                          2833                   
00002014  3015                    2834                   MOVE.W (A5), D0
00002016                          2835                   
00002016  123C 000D               2836                   MOVE.B #13, D1                * to print out the ea that is being shifted
0000201A                          2837                   
0000201A  E368                    2838                   LSL.W D1, D0
0000201C                          2839                   
0000201C  E268                    2840                   LSR.W D1, D0
0000201E                          2841                   
0000201E  1E00                    2842                   MOVE.B D0, D7
00002020                          2843                   
00002020  7C00                    2844                   MOVE.L #%000, D6              * we know it is a data register
00002022                          2845                   
00002022  4EB9 000023B8           2846                   JSR PRINT_EA
00002028                          2847                   
00002028  6000 F0C6               2848                   BRA PARSE_MEMORY
0000202C                          2849                                   
0000202C                          2850  
0000202C                          2851  PRINTOUT_MEMORY_SHIFTS_EA   * gets the mode and register of the memory ea, and prints it out
0000202C                          2852                   *JSR GET_SIZE_PURPLE
0000202C                          2853                   
0000202C                          2854                   *JSR PRINTOUT_SIZE_PURPLE
0000202C                          2855                   
0000202C  43F9 000027B6           2856                   LEA SPACE, A1
00002032                          2857                   
00002032  103C 000E               2858                   MOVE.B #14, D0
00002036                          2859                   
00002036  4E4F                    2860                   TRAP #15
00002038                          2861  
00002038  3015                    2862                   MOVE.W (A5), D0
0000203A                          2863                   
0000203A  123C 000A               2864                   MOVE.B #10, D1
0000203E                          2865                   
0000203E  E368                    2866                   LSL.W D1, D0
00002040                          2867                   
00002040  123C 000D               2868                   MOVE.B #13, D1
00002044                          2869                   
00002044  E268                    2870                   LSR.W D1, D0
00002046                          2871                   
00002046  2C00                    2872                   MOVE.L D0, D6
00002048                          2873                   
00002048  3015                    2874                   MOVE.W (A5), D0
0000204A                          2875                   
0000204A  123C 000D               2876                   MOVE.B #13, D1
0000204E                          2877                   
0000204E  E368                    2878                   LSL.W D1, D0
00002050                          2879                   
00002050  E268                    2880                   LSR.W D1, D0
00002052                          2881                   
00002052  2E00                    2882                   MOVE.L D0, D7
00002054                          2883                   
00002054  4EB9 000023B8           2884                   JSR PRINT_EA
0000205A                          2885                   
0000205A  4E75                    2886                   RTS
0000205C                          2887                                   
0000205C                          2888                
0000205C  43F9 000026F6           2889  MOVEB            LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00002062                          2890  
00002062  4280                    2891                   CLR.L  D0
00002064                          2892                   
00002064  103C 000E               2893                   MOVE.B #14, D0
00002068                          2894                   
00002068  4E4F                    2895                   TRAP #15
0000206A                          2896                   
0000206A  43F9 0000279E           2897                   LEA SIZE_B_PRINT, A1
00002070                          2898                   
00002070  4E4F                    2899                   TRAP #15               * done printing opcode and size
00002072                          2900                   
00002072  1A3C 0000               2901                   MOVE.B     #%00, D5
00002076                          2902                   
00002076  6000 00A6               2903                   BRA PRINTOUT_MOVE_EA
0000207A                          2904  
0000207A  4280                    2905  MOVEW            CLR.L D0
0000207C                          2906                   
0000207C  4281                    2907                   CLR.L D1
0000207E                          2908                   
0000207E  3015                    2909                   MOVE.W (A5),D0
00002080                          2910                   
00002080  EF48                    2911                   LSL.W #7,D0
00002082                          2912                   
00002082  123C 000D               2913                   MOVE.B #13,D1
00002086                          2914                   
00002086  E268                    2915                   LSR.W D1,D0
00002088                          2916                   
00002088  B03C 0001               2917                   CMP.B #1,D0            *check to see if the mode of the destination is an address register
0000208C                          2918                   
0000208C  6700 0054               2919                   BEQ MOVEAW             *if the destination is an address, it is MOVEA
00002090                          2920                   
00002090  43F9 000026F6           2921                   LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00002096                          2922                   
00002096  4280                    2923                   CLR.L D0
00002098                          2924                   
00002098  103C 000E               2925                   MOVE.B #14, D0
0000209C                          2926                   
0000209C  4E4F                    2927                   TRAP #15
0000209E                          2928                   
0000209E  43F9 000027A4           2929                   LEA SIZE_W_PRINT, A1
000020A4                          2930                   
000020A4  4E4F                    2931                   TRAP #15               * done printing opcode and size
000020A6                          2932                   
000020A6  1A3C 0001               2933                   MOVE.B     #%01, D5
000020AA                          2934                      
000020AA  6000 0072               2935                   BRA PRINTOUT_MOVE_EA
000020AE                          2936                
000020AE                          2937  
000020AE  4280                    2938  MOVEL            CLR.L D0
000020B0                          2939                   
000020B0  4281                    2940                   CLR.L D1
000020B2                          2941                   
000020B2  3015                    2942                   MOVE.W (A5),D0
000020B4                          2943                   
000020B4  EF48                    2944                   LSL.W #7,D0
000020B6                          2945                   
000020B6  123C 000D               2946                   MOVE.B #13,D1
000020BA                          2947                   
000020BA  E268                    2948                   LSR.W D1,D0
000020BC                          2949                   
000020BC  B03C 0001               2950                   CMP.B #1,D0            *check to see if the mode of the destination is equal to 1
000020C0                          2951                   
000020C0  6700 003E               2952                   BEQ MOVEAL             *if the mode is 1, then it is an address register, and the opcode is MOVEA
000020C4                          2953                   
000020C4  43F9 000026F6           2954                   LEA MOVE_MESSAGE, A1   * printing out opcode and size
000020CA                          2955                   
000020CA  4280                    2956                   CLR.L D0
000020CC                          2957                   
000020CC  103C 000E               2958                   MOVE.B #14, D0
000020D0                          2959                   
000020D0  4E4F                    2960                   TRAP #15
000020D2                          2961                   
000020D2  43F9 000027AA           2962                   LEA SIZE_L_PRINT, A1
000020D8                          2963                   
000020D8  4E4F                    2964                   TRAP #15               * done printing opcode and size
000020DA                          2965                   
000020DA  1A3C 0002               2966                   MOVE.B     #%10, D5
000020DE                          2967                   
000020DE  6000 003E               2968                   BRA PRINTOUT_MOVE_EA
000020E2                          2969                   
000020E2                          2970                   
000020E2  43F9 000026EF           2971  MOVEAW           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
000020E8                          2972  
000020E8  4280                    2973                   CLR.L D0
000020EA                          2974                   
000020EA  103C 000E               2975                   MOVE.B #14, D0
000020EE                          2976                   
000020EE  4E4F                    2977                   TRAP #15
000020F0                          2978                   
000020F0  43F9 000027A4           2979                   LEA SIZE_W_PRINT, A1
000020F6                          2980                   
000020F6  4E4F                    2981                   TRAP #15               * done printing out opcode and size
000020F8                          2982                   
000020F8  1A3C 0001               2983                   MOVE.B     #%01, D5
000020FC                          2984                   
000020FC  6000 0020               2985                   BRA PRINTOUT_MOVE_EA
00002100                          2986  
00002100  43F9 000026EF           2987  MOVEAL           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
00002106                          2988  
00002106  4280                    2989                   CLR.L D0
00002108                          2990                   
00002108  103C 000E               2991                   MOVE.B #14, D0
0000210C                          2992                   
0000210C  4E4F                    2993                   TRAP #15
0000210E                          2994                   
0000210E  43F9 000027AA           2995                   LEA SIZE_L_PRINT, A1
00002114                          2996                   
00002114  4E4F                    2997                   TRAP #15               * done printing out opcode and size
00002116                          2998                   
00002116  1A3C 0002               2999                   MOVE.B     #%10, D5
0000211A                          3000                   
0000211A  6000 0002               3001                   BRA PRINTOUT_MOVE_EA
0000211E                          3002  
0000211E                          3003  PRINTOUT_MOVE_EA
0000211E  4247                    3004                   CLR    D7 
00002120                          3005                   
00002120  4246                    3006                   CLR    D6               
00002122                          3007                   
00002122  3015                    3008                   MOVE.W (A5), D0
00002124                          3009                   
00002124  123C 000A               3010                   MOVE.B #10, D1
00002128                          3011                   
00002128  E368                    3012                   LSL.W D1, D0
0000212A                          3013                   
0000212A  123C 000D               3014                   MOVE.B #13, D1
0000212E                          3015                   
0000212E  E268                    3016                   LSR.W D1, D0
00002130                          3017                   
00002130  1C00                    3018                   MOVE.B D0, D6          * getting the mode of the second ea
00002132                          3019                   
00002132  3015                    3020                   MOVE.W (A5), D0
00002134                          3021                   
00002134  123C 000D               3022                   MOVE.B #13, D1
00002138                          3023                   
00002138  E368                    3024                   LSL.W D1, D0
0000213A                          3025                   
0000213A  E268                    3026                   LSR.W D1, D0
0000213C                          3027                   
0000213C  1E00                    3028                   MOVE.B D0, D7          * getting the register of the second ea
0000213E                          3029                   
0000213E  4EB9 000023B8           3030                   JSR PRINT_EA
00002144                          3031                   
00002144  43F9 000027D0           3032                   LEA COMMA, A1
0000214A                          3033                   
0000214A  103C 000E               3034                   MOVE.B #14, D0
0000214E                          3035                   
0000214E  4E4F                    3036                   TRAP #15
00002150                          3037                   
00002150  3015                    3038                   MOVE.W (A5), D0
00002152                          3039                   
00002152  E948                    3040                   LSL.W #4, D0
00002154                          3041                   
00002154  123C 000D               3042                   MOVE.B #13, D1
00002158                          3043                   
00002158  E268                    3044                   LSR.W D1, D0
0000215A                          3045                   
0000215A  1E00                    3046                   MOVE.B D0, D7          * getting the register of the first ea
0000215C                          3047                   
0000215C  3015                    3048                   MOVE.W (A5), D0
0000215E                          3049                   
0000215E  EF48                    3050                   LSL.W #7, D0
00002160                          3051                   
00002160  123C 000D               3052                   MOVE.B #13, D1
00002164                          3053                   
00002164  E268                    3054                   LSR.W D1, D0
00002166                          3055                   
00002166  1C00                    3056                   MOVE.B D0, D6          * getting the mode of the first ea
00002168                          3057                   
00002168  4EB9 000023B8           3058                   JSR PRINT_EA
0000216E                          3059                   
0000216E  6000 EF80               3060                   BRA PARSE_MEMORY
00002172                          3061  
00002172                          3062  
00002172                          3063  
00002172                          3064  
00002172                          3065  
00002172                          3066  
00002172                          3067  -------------------- end include --------------------
00002172                          3068                  INCLUDE 'BCC.X68'
00002172                          3069  
00002172                          3070  
00002172                          3071  BCC           
00002172  4240                    3072                 CLR       D0              *Zero it
00002174                          3073  
00002174  3015                    3074                 MOVE.W      (A5),D0     *We'll play with it here
00002176                          3075                 
00002176  4241                    3076                 CLR       D1
00002178                          3077  
00002178                          3078                 
00002178  123C 0004               3079                 MOVE.B      #4, D1
0000217C                          3080                 
0000217C  E368                    3081                 LSL.W       D1, D0
0000217E                          3082  
0000217E  123C 000C               3083                 MOVE.B      #12,D1       *Shift 12 bits to the right  
00002182                          3084  
00002182  E268                    3085                 LSR.W       D1,D0           *Move the bi
00002184                          3086                 
00002184  B03C 0004               3087                 CMP.B       #%0100, D0
00002188                          3088                 
00002188  6700 001A               3089                 BEQ         CC
0000218C                          3090                 
0000218C  B03C 000E               3091                 CMP.B       #%1110, D0
00002190                          3092                 
00002190  6700 003A               3093                 BEQ         GT
00002194                          3094                 
00002194  B03C 000F               3095                 CMP.B       #%1111, D0
00002198                          3096                 
00002198  6700 0036               3097                 BEQ         LE
0000219C                          3098                 
0000219C                          3099  
0000219C                          3100                      
0000219C                          3101  
0000219C  6000 0036               3102  HI             BRA         PRINT_BHI 
000021A0                          3103  
000021A0  6000 0042               3104  LS             BRA         PRINT_BLS  
000021A4                          3105  
000021A4  6000 004E               3106  CC             BRA         PRINT_BCC
000021A8                          3107  
000021A8  6000 005A               3108  CS             BRA         PRINT_BCS 
000021AC                          3109  
000021AC  6000 0066               3110  NE             BRA         PRINT_BNE 
000021B0                          3111  
000021B0  6000 0072               3112  EQ             BRA         PRINT_BEQ
000021B4                          3113  
000021B4  6000 007E               3114  VC             BRA         PRINT_BVC
000021B8                          3115  
000021B8  6000 008A               3116  VS             BRA         PRINT_BVS
000021BC                          3117  
000021BC  6000 0096               3118  PL             BRA         PRINT_BPL
000021C0                          3119  
000021C0  6000 00A2               3120  MI             BRA         PRINT_BMI 
000021C4                          3121  
000021C4  6000 00AE               3122  GE             BRA         PRINT_BGE 
000021C8                          3123  
000021C8  6000 00BA               3124  LT             BRA         PRINT_BLT
000021CC                          3125  
000021CC  6000 00C6               3126  GT             BRA         PRINT_BGT      
000021D0                          3127  
000021D0  6000 00D2               3128  LE             BRA         PRINT_BLE 
000021D4                          3129  
000021D4                          3130  
000021D4                          3131  PRINT_BHI      
000021D4  43F9 00002735           3132                 LEA BHI_MESSAGE, A1
000021DA                          3133            
000021DA  103C 000E               3134                 MOVE.B #14, D0
000021DE                          3135                   
000021DE  4E4F                    3136                 TRAP #15    
000021E0                          3137                 
000021E0  6000 00CE               3138                 BRA DISPLACEMENT
000021E4                          3139                 
000021E4                          3140  PRINT_BLS
000021E4  43F9 0000273D           3141                 LEA BLS_MESSAGE, A1
000021EA                          3142                   
000021EA  103C 000E               3143                 MOVE.B #14, D0
000021EE                          3144                   
000021EE  4E4F                    3145                 TRAP #15
000021F0                          3146                 
000021F0  6000 00BE               3147                 BRA DISPLACEMENT
000021F4                          3148  PRINT_BCC
000021F4  43F9 0000271D           3149                 LEA BCC_MESSAGE, A1
000021FA                          3150                   
000021FA  103C 000E               3151                 MOVE.B #14, D0
000021FE                          3152                   
000021FE  4E4F                    3153                 TRAP #15
00002200                          3154                 
00002200  6000 00AE               3155                 BRA DISPLACEMENT
00002204                          3156  PRINT_BCS
00002204  43F9 00002729           3157                 LEA BCS_MESSAGE, A1
0000220A                          3158                   
0000220A  103C 000E               3159                 MOVE.B #14, D0
0000220E                          3160                   
0000220E  4E4F                    3161                 TRAP #15
00002210                          3162                 
00002210  6000 009E               3163                 BRA DISPLACEMENT
00002214                          3164  PRINT_BNE
00002214  43F9 00002725           3165                 LEA BNE_MESSAGE, A1
0000221A                          3166                   
0000221A  103C 000E               3167                 MOVE.B #14, D0
0000221E                          3168                   
0000221E  4E4F                    3169                 TRAP #15
00002220                          3170                 
00002220  6000 008E               3171                 BRA DISPLACEMENT
00002224                          3172  PRINT_BEQ
00002224  43F9 00002721           3173                 LEA BEQ_MESSAGE, A1
0000222A                          3174                   
0000222A  103C 000E               3175                 MOVE.B #14, D0
0000222E                          3176                   
0000222E  4E4F                    3177                 TRAP #15
00002230                          3178                 
00002230  6000 007E               3179                 BRA DISPLACEMENT
00002234                          3180  PRINT_BVC
00002234  43F9 0000274D           3181                 LEA BVC_MESSAGE, A1
0000223A                          3182                   
0000223A  103C 000E               3183                 MOVE.B #14, D0
0000223E                          3184                   
0000223E  4E4F                    3185                 TRAP #15     
00002240                          3186                 
00002240  6000 006E               3187                 BRA DISPLACEMENT
00002244                          3188  PRINT_BVS
00002244  43F9 00002751           3189                 LEA BVS_MESSAGE, A1
0000224A                          3190                   
0000224A  103C 000E               3191                 MOVE.B #14, D0
0000224E                          3192                   
0000224E  4E4F                    3193                 TRAP #15
00002250                          3194                 
00002250  6000 005E               3195                 BRA DISPLACEMENT
00002254                          3196  PRINT_BPL
00002254  43F9 00002749           3197                 LEA BPL_MESSAGE, A1
0000225A                          3198                   
0000225A  103C 000E               3199                 MOVE.B #14, D0
0000225E                          3200                   
0000225E  4E4F                    3201                 TRAP #15
00002260                          3202                 
00002260  6000 004E               3203                 BRA DISPLACEMENT
00002264                          3204  PRINT_BMI
00002264  43F9 00002745           3205                 LEA BMI_MESSAGE, A1
0000226A                          3206                   
0000226A  103C 000E               3207                 MOVE.B #14, D0
0000226E                          3208                   
0000226E  4E4F                    3209                 TRAP #15
00002270                          3210                 
00002270  6000 003E               3211                 BRA DISPLACEMENT
00002274                          3212  PRINT_BGE
00002274  43F9 0000272D           3213                 LEA BGE_MESSAGE, A1
0000227A                          3214                   
0000227A  103C 000E               3215                 MOVE.B #14, D0
0000227E                          3216                   
0000227E  4E4F                    3217                 TRAP #15
00002280                          3218                 
00002280  6000 002E               3219                 BRA DISPLACEMENT
00002284                          3220  PRINT_BLT
00002284  43F9 00002741           3221                 LEA BLT_MESSAGE, A1
0000228A                          3222                   
0000228A  103C 000E               3223                 MOVE.B #14, D0
0000228E                          3224                   
0000228E  4E4F                    3225                 TRAP #15
00002290                          3226                 
00002290  6000 001E               3227                 BRA DISPLACEMENT
00002294                          3228  PRINT_BGT
00002294  43F9 00002731           3229                 LEA BGT_MESSAGE, A1
0000229A                          3230                   
0000229A  103C 000E               3231                 MOVE.B #14, D0
0000229E                          3232                   
0000229E  4E4F                    3233                 TRAP #15
000022A0                          3234                 
000022A0  6000 000E               3235                 BRA DISPLACEMENT
000022A4                          3236  PRINT_BLE
000022A4  43F9 00002739           3237                 LEA BLE_MESSAGE, A1
000022AA                          3238                   
000022AA  103C 000E               3239                 MOVE.B #14, D0
000022AE                          3240                   
000022AE  4E4F                    3241                 TRAP #15
000022B0                          3242                 
000022B0                          3243  DISPLACEMENT   
000022B0                          3244  
000022B0  43F9 000027B6           3245                 LEA     SPACE, A1
000022B6                          3246  
000022B6  103C 000E               3247                 MOVE.B #14, D0
000022BA                          3248  
000022BA  4E4F                    3249                 TRAP #15 
000022BC                          3250  
000022BC  43F9 000027B0           3251                 LEA     POUND_SIGN, A1
000022C2                          3252              
000022C2  103C 000E               3253                 MOVE.B  #14, D0
000022C6                          3254              
000022C6  4E4F                    3255                 TRAP #15
000022C8                          3256              
000022C8  43F9 000027B2           3257                 LEA     HEX_SIGN, A1
000022CE                          3258              
000022CE  4E4F                    3259                 TRAP #15
000022D0                          3260  
000022D0  4280                    3261                 CLR.L       D0              *Zero it
000022D2                          3262  
000022D2  3015                    3263                 MOVE.W      (A5),D0     *We'll play with it here
000022D4                          3264                 
000022D4  123C 0008               3265                 MOVE.B      #8, D1
000022D8                          3266                 
000022D8  E368                    3267                 LSL.W       D1, D0
000022DA                          3268  
000022DA  123C 0008               3269                 MOVE.B      #8,D1       *Shift 12 bits to the right  
000022DE                          3270  
000022DE  E268                    3271                 LSR.W       D1,D0           *Move the bits
000022E0                          3272                 
000022E0                          3273                 *chk the D0 for 8, 16, or 32 but displacement
000022E0                          3274                  
000022E0  B03C 0000               3275                 CMP.B  #$00, D0
000022E4                          3276  
000022E4  6700 0018               3277                 BEQ  a_16_BIT 
000022E8                          3278  
000022E8  B03C 00FF               3279                 CMP.B #$FF, D0   
000022EC                          3280  
000022EC  6700 001E               3281                 BEQ  a_32_BIT
000022F0                          3282                  
000022F0                          3283                  *else 
000022F0                          3284                  
000022F0  4285                    3285                 CLR.L D5
000022F2                          3286                 
000022F2  3A00                    3287                 MOVE.W D0, D5      
000022F4                          3288          
000022F4  4EB9 0000231A           3289                 JSR  HEX_TO_ASCII
000022FA                          3290                 
000022FA  4EF8 10F0               3291                 JMP PARSE_MEMORY
000022FE                          3292                            
000022FE                          3293  a_16_BIT
000022FE  4285                    3294          CLR.L  D5
00002300                          3295          
00002300  3A1E                    3296          MOVE.W (A6)+, D5
00002302                          3297          
00002302  4EB9 0000231A           3298          JSR  HEX_TO_ASCII
00002308                          3299          
00002308  4EF8 10F0               3300          JMP PARSE_MEMORY
0000230C                          3301  a_32_BIT
0000230C                          3302  
0000230C  4285                    3303          CLR.L  D5
0000230E                          3304          
0000230E  2A1E                    3305          MOVE.L (A6)+, D5
00002310                          3306          
00002310  4EB9 0000231A           3307          JSR  HEX_TO_ASCII
00002316                          3308          
00002316  4EF8 10F0               3309          JMP PARSE_MEMORY
0000231A                          3310            
0000231A                          3311  
0000231A                          3312  
0000231A                          3313  
0000231A                          3314  
0000231A                          3315  
0000231A                          3316  
0000231A                          3317  
0000231A                          3318  
0000231A                          3319  
0000231A                          3320  
0000231A                          3321  
0000231A                          3322  -------------------- end include --------------------
0000231A                          3323                  INCLUDE 'HEX_TO_ASCII_V1.X68'
0000231A                          3324      *ORG    $5000
0000231A                          3325  
0000231A                          3326  
0000231A                          3327  HEX_TO_ASCII      
0000231A  4283                    3328       CLR.L      D3
0000231C                          3329       
0000231C  BABC 00000000           3330       CMP.L       #0, D5
00002322                          3331       
00002322  6700 0086               3332       BEQ         PRINT_ZERO
00002326                          3333      
00002326                          3334       *MOVE.L     #$ABCDEF, D5
00002326                          3335       
00002326                          3336  LOOP     
00002326  2C05                    3337       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
00002328                          3338       
00002328  4282                    3339       CLR.L      D2
0000232A                          3340       
0000232A  143C 001C               3341       MOVE.B     #28, D2
0000232E                          3342  
0000232E  E4AE                    3343       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
00002330                          3344       
00002330  BC3C 000A               3345       CMP.B      #10, D6
00002334                          3346       
00002334  6C00 0006               3347       BGE        LETTER_1                  * determine if a letter or a number
00002338                          3348       
00002338  6000 000C               3349       BRA        NUMBER_1
0000233C                          3350       
0000233C                          3351  LETTER_1
0000233C  0606 0037               3352       ADD.B      #55, D6
00002340                          3353       
00002340  1206                    3354       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00002342                          3355       
00002342  6000 000C               3356       BRA        PRINTOUT_NIBBLE
00002346                          3357  
00002346                          3358  NUMBER_1     
00002346  0606 0030               3359       ADD.B      #48, D6
0000234A                          3360       
0000234A  1206                    3361       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
0000234C                          3362       
0000234C  6000 0002               3363       BRA        PRINTOUT_NIBBLE
00002350                          3364  
00002350                          3365  
00002350                          3366  PRINTOUT_NIBBLE
00002350  E98D                    3367      LSL.L      #4, D5                   * shift out the nibble you just read from the source
00002352                          3368      
00002352  5203                    3369      ADD.B      #1, D3
00002354                          3370      
00002354  BC3C 0030               3371      CMP.B      #$30, D6
00002358                          3372  
00002358  67CC                    3373      BEQ        LOOP             
0000235A                          3374      
0000235A  103C 0006               3375      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
0000235E                          3376      
0000235E  4E4F                    3377      TRAP #15
00002360                          3378       
00002360  B63C 0008               3379      CMP.B      #8, D3                   * compare to the counter to check if you are done
00002364                          3380       
00002364  6700 023E               3381      BEQ        DONE
00002368                          3382          
00002368  6000 0002               3383      BRA LOOP_ZERO                            * continue the loop and print next nibble
0000236C                          3384      
0000236C                          3385      
0000236C                          3386  LOOP_ZERO    
0000236C  2C05                    3387       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
0000236E                          3388       
0000236E  4282                    3389       CLR.L      D2
00002370                          3390       
00002370  143C 001C               3391       MOVE.B     #28, D2
00002374                          3392  
00002374  E4AE                    3393       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
00002376                          3394       
00002376  BC3C 000A               3395       CMP.B      #10, D6
0000237A                          3396       
0000237A  6C00 0006               3397       BGE        LETTER_1_ZERO                  * determine if a letter or a number
0000237E                          3398       
0000237E  6000 000C               3399       BRA        NUMBER_1_ZERO
00002382                          3400       
00002382                          3401  LETTER_1_ZERO
00002382  0606 0037               3402       ADD.B      #55, D6
00002386                          3403       
00002386  1206                    3404       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00002388                          3405       
00002388  6000 000C               3406       BRA        PRINTOUT_NIBBLE_ZERO
0000238C                          3407  
0000238C                          3408  NUMBER_1_ZERO    
0000238C  0606 0030               3409       ADD.B      #48, D6
00002390                          3410       
00002390  1206                    3411       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00002392                          3412       
00002392  6000 0002               3413       BRA        PRINTOUT_NIBBLE_ZERO
00002396                          3414  
00002396                          3415  
00002396                          3416  PRINTOUT_NIBBLE_ZERO
00002396  E98D                    3417      LSL.L      #4, D5                   * shift out the nibble you just read from the source
00002398                          3418      
00002398  5203                    3419      ADD.B      #1, D3            
0000239A                          3420      
0000239A  103C 0006               3421      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
0000239E                          3422      
0000239E  4E4F                    3423      TRAP #15
000023A0                          3424       
000023A0  B63C 0008               3425      CMP.B      #8, D3                   * compare to the counter to check if you are done
000023A4                          3426       
000023A4  6700 01FE               3427      BEQ        DONE
000023A8                          3428      
000023A8  60C2                    3429      BRA LOOP_ZERO                            * continue the loop and print next nibble
000023AA                          3430          
000023AA                          3431  
000023AA                          3432       
000023AA                          3433  PRINT_ZERO
000023AA  123C 0030               3434      MOVE.B      #$30, D1
000023AE                          3435  
000023AE  103C 0006               3436      MOVE.B      #6, D0  
000023B2                          3437  
000023B2  4E4F                    3438      TRAP #15 
000023B4                          3439  
000023B4  6000 01EE               3440      BRA DONE  
000023B8                          3441  
000023B8                          3442  
000023B8                          3443      *SIMHALT             ; halt simulator
000023B8                          3444  
000023B8                          3445  
000023B8                          3446      *END    START       ; last line of source
000023B8                          3447  -------------------- end include --------------------
000023B8                          3448                  INCLUDE 'JUMPTABLE-EA.X68'
000023B8                          3449   *ORG     $400
000023B8                          3450  
000023B8                          3451  
000023B8                          3452  
000023B8                          3453  
000023B8                          3454  
000023B8                          3455                 *MOVE.B       #%00, D5         *SIZE
000023B8                          3456                
000023B8                          3457                 *MOVE.B       #%111,D6         *MODE
000023B8                          3458                 
000023B8                          3459                 *MOVE.B       #%100,D7         *REGISTER
000023B8                          3460                 
000023B8                          3461                 *MOVE.L       #$4000, A5
000023B8                          3462  
000023B8                          3463                 *MOVE.B       #$0040, (A5)  
000023B8                          3464  PRINT_EA 
000023B8                          3465                 
000023B8  41F9 000023C6           3466                 LEA     jmp_table_ea,A0      *Index into the table
000023BE                          3467  
000023BE  CCFC 0006               3468                 MULU        #6,D6            *Form offset     
000023C2                          3469  
000023C2  4EF0 6000               3470                 JMP         0(A0,D6)         *Jump indirect with index
000023C6                          3471   
000023C6  4EF9 000023F6           3472  jmp_table_ea   JMP         code000
000023CC                          3473  
000023CC  4EF9 000023FA           3474                 JMP         code001
000023D2                          3475  
000023D2  4EF9 000023FE           3476                 JMP         code010
000023D8                          3477  
000023D8  4EF9 00002402           3478                 JMP         code011
000023DE                          3479  
000023DE  4EF9 00002406           3480                 JMP         code100
000023E4                          3481  
000023E4  4EF9 0000240A           3482                 JMP         code101
000023EA                          3483  
000023EA  4EF9 0000240E           3484                 JMP         code110
000023F0                          3485  
000023F0  4EF9 00002412           3486                 JMP         code111
000023F6                          3487          
000023F6                          3488  
000023F6                          3489   
000023F6                          3490  
000023F6                          3491  
000023F6                          3492   
000023F6                          3493  
000023F6                          3494   
000023F6                          3495  
000023F6  6000 001E               3496  code000       BRA         DATA_REGISTER
000023FA                          3497  
000023FA  6000 0036               3498  code001       BRA         ADDRESS_REGISTER
000023FE                          3499  
000023FE  6000 004E               3500  code010       BRA         INDIRECT_ADDRESS
00002402                          3501  
00002402  6000 0074               3502  code011       BRA         ADDRESS_PI    * post increment
00002406                          3503  
00002406  6000 009A               3504  code100       BRA         ADDRESS_PD    * pre decrement
0000240A                          3505  
0000240A  6000 00C0               3506  code101       BRA         ADDRESS_W_DISPLACEMENT
0000240E                          3507  
0000240E  6000 00C0               3508  code110       BRA         ADDRESS_W_INDEX
00002412                          3509  
00002412  6000 00C0               3510  code111       BRA         GROUP_111
00002416                          3511  
00002416                          3512   
00002416                          3513  DATA_REGISTER
00002416                          3514  
00002416  43F9 000027BB           3515              LEA D_REGISTER, A1
0000241C                          3516              
0000241C  4280                    3517              CLR.L D0
0000241E                          3518              
0000241E  103C 000E               3519              MOVE.B #14, D0
00002422                          3520              
00002422  4E4F                    3521              TRAP #15                * print out 'D' for data register
00002424                          3522              
00002424  4281                    3523              CLR.L D1
00002426                          3524              
00002426  1207                    3525              MOVE.B D7, D1
00002428                          3526              
00002428  103C 0003               3527              MOVE.B #3, D0           * print out the number in the register
0000242C                          3528              
0000242C  4E4F                    3529              TRAP #15
0000242E                          3530              
0000242E  6000 0174               3531              BRA DONE
00002432                          3532              
00002432                          3533  
00002432                          3534  ADDRESS_REGISTER
00002432  43F9 000027BD           3535              LEA A_REGISTER, A1
00002438                          3536              
00002438  4280                    3537              CLR.L D0
0000243A                          3538              
0000243A  103C 000E               3539              MOVE.B #14, D0          * print out the 'A' for address register
0000243E                          3540              
0000243E  4E4F                    3541              TRAP #15
00002440                          3542              
00002440  4281                    3543              CLR.L D1
00002442                          3544              
00002442  1207                    3545              MOVE.B D7, D1
00002444                          3546              
00002444  103C 0003               3547              MOVE.B #3, D0
00002448                          3548              
00002448  4E4F                    3549              TRAP #15                * print out the value in the data register
0000244A                          3550  
0000244A  6000 0158               3551              BRA DONE
0000244E                          3552              
0000244E                          3553  INDIRECT_ADDRESS
0000244E  43F9 000027BF           3554              LEA IA_START, A1
00002454                          3555              
00002454  4280                    3556              CLR.L D0
00002456                          3557              
00002456  103C 000E               3558              MOVE.B #14, D0          * print out the '(A' for start of indirect address register
0000245A                          3559              
0000245A  4E4F                    3560              TRAP #15
0000245C                          3561              
0000245C  4281                    3562              CLR.L D1
0000245E                          3563              
0000245E  1207                    3564              MOVE.B D7, D1
00002460                          3565              
00002460  103C 0003               3566              MOVE.B #3, D0
00002464                          3567              
00002464  4E4F                    3568              TRAP #15                * print out the value in the data register
00002466                          3569              
00002466  43F9 000027C2           3570              LEA IA_END, A1
0000246C                          3571  
0000246C  4280                    3572              CLR.L D0
0000246E                          3573              
0000246E  103C 000E               3574              MOVE.B #14, D0          * print out the ')' for end of post increment address register
00002472                          3575              
00002472  4E4F                    3576              TRAP #15
00002474                          3577              
00002474  6000 012E               3578              BRA DONE
00002478                          3579  
00002478                          3580  ADDRESS_PI
00002478  43F9 000027C4           3581              LEA A_PI_START, A1
0000247E                          3582              
0000247E  4280                    3583              CLR.L D0
00002480                          3584              
00002480  103C 000E               3585              MOVE.B #14, D0          * print out the '(A' for start of post increment address register
00002484                          3586              
00002484  4E4F                    3587              TRAP #15
00002486                          3588              
00002486  4281                    3589              CLR.L D1
00002488                          3590              
00002488  1207                    3591              MOVE.B D7, D1
0000248A                          3592              
0000248A  103C 0003               3593              MOVE.B #3, D0
0000248E                          3594              
0000248E  4E4F                    3595              TRAP #15                * print out the value in the data register
00002490                          3596              
00002490  43F9 000027C7           3597              LEA A_PI_END, A1
00002496                          3598  
00002496  4280                    3599              CLR.L D0
00002498                          3600              
00002498  103C 000E               3601              MOVE.B #14, D0          * print out the ')+' for end of post increment address register
0000249C                          3602     
0000249C  4E4F                    3603              TRAP #15
0000249E                          3604              
0000249E  6000 0104               3605              BRA DONE  
000024A2                          3606         
000024A2                          3607  ADDRESS_PD
000024A2                          3608  
000024A2  43F9 000027CA           3609              LEA A_PD_START, A1
000024A8                          3610              
000024A8  4280                    3611              CLR.L D0
000024AA                          3612              
000024AA  103C 000E               3613              MOVE.B #14, D0          * print out the '-(A' for start of pre decrement address register
000024AE                          3614              
000024AE  4E4F                    3615              TRAP #15
000024B0                          3616              
000024B0  4281                    3617              CLR.L D1
000024B2                          3618              
000024B2  1207                    3619              MOVE.B D7, D1
000024B4                          3620              
000024B4  103C 0003               3621              MOVE.B #3, D0
000024B8                          3622              
000024B8  4E4F                    3623              TRAP #15                * print out the value in the data register
000024BA                          3624              
000024BA  43F9 000027CE           3625              LEA A_PD_END, A1
000024C0                          3626  
000024C0  4280                    3627              CLR.L D0
000024C2                          3628              
000024C2  103C 000E               3629              MOVE.B #14, D0          * print out the ')-' for end of pre decrement
000024C6                          3630  
000024C6  4E4F                    3631              TRAP #15
000024C8                          3632              
000024C8  6000 00DA               3633              BRA DONE
000024CC                          3634              
000024CC                          3635  ADDRESS_W_DISPLACEMENT
000024CC  6000 00D6               3636              BRA DONE
000024D0                          3637  
000024D0                          3638  ADDRESS_W_INDEX
000024D0  6000 00D2               3639              BRA DONE
000024D4                          3640  
000024D4                          3641  GROUP_111
000024D4                          3642  
000024D4  41F9 000024E2           3643                 LEA         jmp_table_ea_111,A0    *Index into the table
000024DA                          3644  
000024DA  CEFC 0006               3645                 MULU        #6,D7       *Form offset     
000024DE                          3646  
000024DE  4EF0 7000               3647                 JMP         0(A0,D7)   *Jump indirect with index
000024E2                          3648                 
000024E2                          3649  jmp_table_ea_111   
000024E2  4EF9 00002508           3650                 JMP         reg000
000024E8                          3651  
000024E8  4EF9 0000250C           3652                 JMP         reg001
000024EE                          3653  
000024EE  4EF9 00002500           3654                 JMP         reg010
000024F4                          3655  
000024F4  4EF9 00002504           3656                 JMP         reg011
000024FA                          3657  
000024FA  4EF9 00002510           3658                 JMP         reg100
00002500                          3659          
00002500                          3660  
00002500  6000 0012               3661  reg010       BRA         PC_W_DISPLACEMENT
00002504                          3662  
00002504  6000 0012               3663  reg011       BRA         PC_W_INDEX
00002508                          3664  
00002508  6000 0012               3665  reg000       BRA         ABSOLUTE_SHORT
0000250C                          3666  
0000250C  6000 002C               3667  reg001       BRA         ABSOLUTE_LONG
00002510                          3668  
00002510  6000 0046               3669  reg100       BRA         IMMEDIATE
00002514                          3670  
00002514                          3671  
00002514                          3672  PC_W_DISPLACEMENT
00002514  6000 008E               3673              BRA DONE
00002518                          3674  
00002518                          3675  PC_W_INDEX
00002518  6000 008A               3676              BRA DONE
0000251C                          3677  
0000251C                          3678  ABSOLUTE_SHORT
0000251C  43F9 000027B2           3679              LEA         HEX_SIGN, A1
00002522                          3680              
00002522  103C 000E               3681              MOVE.B      #14, D0
00002526                          3682              
00002526  4E4F                    3683              TRAP #15
00002528                          3684              
00002528  4281                    3685              CLR.L       D1
0000252A                          3686              
0000252A  321E                    3687              MOVE.W      (A6)+, D1
0000252C                          3688              
0000252C  103C 000F               3689              MOVE.B      #15, D0
00002530                          3690              
00002530  143C 0010               3691              MOVE.B      #16, D2
00002534                          3692              
00002534  4E4F                    3693              TRAP #15
00002536                          3694              
00002536  6000 006C               3695              BRA DONE  
0000253A                          3696  
0000253A                          3697  
0000253A                          3698  ABSOLUTE_LONG
0000253A  43F9 000027B2           3699              LEA         HEX_SIGN, A1
00002540                          3700              
00002540  103C 000E               3701              MOVE.B      #14, D0
00002544                          3702              
00002544  4E4F                    3703              TRAP #15
00002546                          3704              
00002546  4281                    3705              CLR.L       D1
00002548                          3706              
00002548  221E                    3707              MOVE.L      (A6)+, D1
0000254A                          3708              
0000254A  103C 000F               3709              MOVE.B      #15, D0
0000254E                          3710              
0000254E  143C 0010               3711              MOVE.B      #16, D2
00002552                          3712              
00002552  4E4F                    3713              TRAP #15
00002554                          3714                          
00002554  6000 004E               3715              BRA DONE  
00002558                          3716  
00002558                          3717  
00002558                          3718  IMMEDIATE
00002558  43F9 000027B0           3719              LEA     POUND_SIGN, A1
0000255E                          3720              
0000255E  103C 000E               3721              MOVE.B  #14, D0
00002562                          3722              
00002562  4E4F                    3723              TRAP #15
00002564                          3724              
00002564  43F9 000027B2           3725              LEA     HEX_SIGN, A1
0000256A                          3726              
0000256A  4E4F                    3727              TRAP #15
0000256C                          3728              
0000256C  BA3C 0000               3729              CMP.B   #%00, D5
00002570                          3730              
00002570  6700 000E               3731              BEQ     IMMEDIATE_B
00002574                          3732              
00002574  BA3C 0001               3733              CMP.B   #%01, D5
00002578                          3734              
00002578  6700 0012               3735              BEQ     IMMEDIATE_W
0000257C                          3736              
0000257C  6000 001A               3737              BRA     IMMEDIATE_L
00002580                          3738              
00002580                          3739  IMMEDIATE_B
00002580  4285                    3740              CLR.L       D5
00002582                          3741     
00002582  3A1E                    3742              MOVE.W      (A6)+, D5
00002584                          3743              
00002584  4EB8 231A               3744              JSR         HEX_TO_ASCII
00002588                          3745              
00002588  6000 001A               3746              BRA DONE
0000258C                          3747  
0000258C                          3748  IMMEDIATE_W
0000258C  4285                    3749              CLR.L       D5
0000258E                          3750  
0000258E  3A1E                    3751              MOVE.W      (A6)+, D5
00002590                          3752              
00002590  4EB8 231A               3753              JSR         HEX_TO_ASCII
00002594                          3754              
00002594                          3755              *MOVE.B      #15, D0
00002594                          3756              
00002594                          3757              *MOVE.B      #16, D2
00002594                          3758              
00002594                          3759              *TRAP #15 
00002594                          3760              
00002594  6000 000E               3761              BRA DONE        
00002598                          3762  
00002598                          3763  IMMEDIATE_L 
00002598  4285                    3764              CLR.L       D5
0000259A                          3765              
0000259A  2A1E                    3766              MOVE.L      (A6)+, D5
0000259C                          3767      
0000259C  4EB8 231A               3768              JSR         HEX_TO_ASCII
000025A0                          3769              
000025A0  6000 0002               3770              BRA DONE
000025A4                          3771              
000025A4                          3772  DONE 
000025A4  4E75                    3773      RTS
000025A6                          3774      
000025A6                          3775   * INCLUDE 'MESSAGE_Data.X68'
000025A6                          3776   * INCLUDE 'HEX_TO_ASCII_V1.X68'
000025A6                          3777       
000025A6                          3778          
000025A6                          3779  
000025A6                          3780  
000025A6                          3781  
000025A6                          3782  
000025A6                          3783  
000025A6                          3784  
000025A6                          3785  
000025A6                          3786  
000025A6                          3787  -------------------- end include --------------------
000025A6                          3788                  
000025A6  4EF8 10F0               3789                  JMP      PARSE_MEMORY
000025AA                          3790                  
000025AA                          3791  PRESS_ENTER_CONTINUE
000025AA  267C 00000000           3792                   MOVEA.L  #outputCountCurr, A3  *reset to 0
000025B0  43F9 00002697           3793                   LEA ENTER, A1
000025B6  103C 000E               3794                   MOVE.B #14, D0
000025BA  4E4F                    3795                   TRAP #15
000025BC                          3796                   
000025BC  103C 0005               3797                   MOVE.B #5, D0
000025C0  4E4F                    3798                   TRAP #15
000025C2                          3799                   
000025C2  B23C 000D               3800                   CMP.B #$D, D1
000025C6                          3801  
000025C6  103C 000B               3802                   MOVE.B #11, D0   *clear display
000025CA  323C FF00               3803                   MOVE.W #$FF00, D1
000025CE  4E4F                    3804                   TRAP #15
000025D0                          3805  
000025D0  4EF8 1114               3806                   JMP CONTINUE_PARSE
000025D4                          3807                  
000025D4                          3808  ASK_TO_CONTINUE
000025D4  43F9 000027D3           3809      LEA         ASK_TO_CONTINUE_M, A1
000025DA                          3810      
000025DA  103C 000E               3811      MOVE.B      #14, D0
000025DE                          3812  
000025DE  4E4F                    3813      TRAP #15
000025E0                          3814      
000025E0  3278 0100               3815      MOVEA.W     $100, A1
000025E4                          3816      
000025E4  103C 0002               3817      MOVE.B      #2, D0
000025E8                          3818  
000025E8  4E4F                    3819      TRAP #15
000025EA                          3820  
000025EA                          3821      * VALIDATE THE INPUT
000025EA                          3822  
000025EA  4240                    3823      CLR         D0
000025EC                          3824  
000025EC  1011                    3825      MOVE.B      (A1), D0  
000025EE                          3826  
000025EE  B03C 0059               3827      CMP.B       #$59, D0
000025F2                          3828  
000025F2  6700 001C               3829      BEQ         RESTART
000025F6                          3830  
000025F6  B03C 0079               3831      CMP.B       #$79, D0
000025FA                          3832  
000025FA  6700 0014               3833      BEQ         RESTART
000025FE                          3834  
000025FE  B03C 004E               3835      CMP.B       #$4E, D0
00002602                          3836  
00002602  6700 0010               3837      BEQ         STOP
00002606                          3838  
00002606  B03C 006E               3839      CMP.B       #$6E, D0
0000260A                          3840  
0000260A  6700 0008               3841      BEQ         STOP
0000260E                          3842  
0000260E  60C4                    3843      BRA         ASK_TO_CONTINUE   
00002610                          3844      
00002610                          3845  RESTART
00002610                          3846  
00002610  6000 E9EE               3847      BRA         START_OF_PROGRAM   
00002614                          3848  
00002614                          3849                 
00002614                          3850  STOP
00002614                          3851  
00002614  43F9 000027F2           3852      LEA         TERMINATED, A1
0000261A                          3853      
0000261A  103C 000E               3854      MOVE.B      #14, D0
0000261E                          3855      
0000261E  4E4F                    3856      TRAP #15
00002620                          3857  
00002620                          3858  
00002620                          3859  
00002620                          3860  
00002620                          3861  
00002620                          3862  
00002620                          3863  
00002620                          3864  
00002620                          3865  
00002620                          3866  
00002620                          3867  
00002620                          3868  
00002620                          3869  
00002620                          3870  
00002620                          3871  
00002620                          3872  
00002620                          3873  
00002620                          3874  
00002620                          3875  
00002620                          3876  
00002620                          3877  
00002620                          3878  
00002620                          3879  
00002620                          3880  
00002620                          3881  
00002620                          3882  
00002620                          3883  
00002620                          3884  
00002620                          3885  
00002620                          3886  
00002620                          3887  
00002620                          3888  
00002620                          3889  
00002620                          3890  
00002620                          3891  -------------------- end include --------------------
00002620                          3892  
00002620  FFFF FFFF               3893      SIMHALT             ; halt simulator
00002624                          3894  
00002624                          3895      INCLUDE 'DS_Data.X68' * STARTING_ADDR ** ENDING_ADDR
00002624                          3896  
00002624                          3897  STARTING_ADDR   DS.L 1
00002628                          3898  
00002628                          3899  ENDING_ADDR     DS.L 1
00002628                          3900  -------------------- end include --------------------
0000262C                          3901      INCLUDE 'MESSAGE_Data.X68' 
0000262C                          3902  
0000262C  =0000000D               3903  CR  EQU $0D
0000262C  =0000000A               3904  LF  EQU $0A 
0000262C                          3905  
0000262C= 57 65 6C 63 6F 6D ...   3906  WELCOME_MESSAGE DC.B 'Welcome to our Team wild pokemon disassembly!!', CR, LF, 0
0000265D= 45 6E 74 65 72 20 ...   3907  STARTING        DC.B 'Enter the starting location: ', 0
0000267B= 45 6E 74 65 72 20 ...   3908  ENDING          DC.B 'Enter the ending locaiton: ', 0
00002697= 45 6E 74 65 72 20 ...   3909  ENTER           DC.B 'Enter to continue ', 0
000026AA= 49 6E 76 61 6C 69 ...   3910  ERROR_MSG       DC.B 'Invalid Input, must be 8 characters, (0-9), (A-F), re-do ',CR, LF, 0
000026E6= 0D 0A 00                3911  CR_LF           DC.B '', CR, LF, 0
000026E9                          3912      
000026E9= 41 44 44 49 2E 00       3913  ADDI_MESSAGE    DC.B 'ADDI.',0
000026EF= 4D 4F 56 45 41 2E 00    3914  MOVEA_MESSAGE   DC.B 'MOVEA.',0
000026F6= 4D 4F 56 45 2E 00       3915  MOVE_MESSAGE    DC.B 'MOVE.',0
000026FC= 4E 4F 50 00             3916  NOP_MESSAGE     DC.B 'NOP',0
00002700= 4D 4F 56 45 4D 2E 00    3917  MOVEM_MESSAGE   DC.B 'MOVEM.',0
00002707= 4A 53 52 00             3918  JSR_MESSAGE     DC.B 'JSR',0
0000270B= 52 54 53 00             3919  RTS_MESSAGE     DC.B 'RTS',0
0000270F= 43 4C 52 00             3920  CLR_MESSAGE     DC.B 'CLR',0
00002713= 41 44 44 51 2E 00       3921  ADDQ_MESSAGE    DC.B 'ADDQ.',0
00002719= 4C 45 41 00             3922  LEA_MESSAGE     DC.B 'LEA',0
0000271D                          3923  
0000271D                          3924  
0000271D= 42 43 43 00             3925  BCC_MESSAGE     DC.B 'BCC',0   *//
00002721= 42 45 51 00             3926  BEQ_MESSAGE     DC.B 'BEQ',0   *//
00002725= 42 4E 45 00             3927  BNE_MESSAGE     DC.B 'BNE',0   *//
00002729= 42 43 53 00             3928  BCS_MESSAGE     DC.B 'BCS',0   *//
0000272D= 42 47 45 00             3929  BGE_MESSAGE     DC.B 'BGE',0   *//
00002731= 42 47 54 00             3930  BGT_MESSAGE     DC.B 'BGT',0   *//
00002735= 42 48 49 00             3931  BHI_MESSAGE     DC.B 'BHI',0   *//
00002739= 42 4C 45 00             3932  BLE_MESSAGE     DC.B 'BLE',0   *//
0000273D= 42 4C 53 00             3933  BLS_MESSAGE     DC.B 'BLS',0   *//
00002741= 42 4C 54 00             3934  BLT_MESSAGE     DC.B 'BLT',0   *//
00002745= 42 4D 49 00             3935  BMI_MESSAGE     DC.B 'BMI',0   *//
00002749= 42 50 4C 00             3936  BPL_MESSAGE     DC.B 'BPL',0   *//
0000274D= 42 56 43 00             3937  BVC_MESSAGE     DC.B 'BVC',0   *//
00002751= 42 56 53 00             3938  BVS_MESSAGE     DC.B 'BVS',0   *//
00002755                          3939  
00002755= 4D 4F 56 45 51 2E 00    3940  MOVEQ_MESSAGE   DC.B 'MOVEQ.',0
0000275C= 44 49 56 55 20 00       3941  DIVU_MESSAGE    DC.B 'DIVU ',0
00002762= 4F 52 2E 00             3942  OR_MESSAGE      DC.B 'OR.',0
00002766= 53 55 42 2E 00          3943  SUB_MESSAGE     DC.B 'SUB.',0
0000276B= 43 4D 50 2E 00          3944  CMP_MESSAGE     DC.B 'CMP.',0
00002770= 4D 55 4C 53 20 00       3945  MULS_MESSAGE    DC.B 'MULS ',0
00002776= 41 4E 44 2E 00          3946  AND_MESSAGE     DC.B 'AND.',0
0000277B= 41 44 44 2E 00          3947  ADD_MESSAGE     DC.B 'ADD.',0
00002780= 41 44 44 41 2E 00       3948  ADDA_MESSAGE    DC.B 'ADDA.',0
00002786= 4C 53 4C 00             3949  LSL_MESSAGE     DC.B 'LSL',0 *//
0000278A= 41 53 4C 00             3950  ASL_MESSAGE     DC.B 'ASL',0
0000278E= 52 4F 4C 00             3951  ROL_MESSAGE     DC.B 'ROL',0
00002792= 4C 53 52 00             3952  LSR_MESSAGE     DC.B 'LSR',0 *//
00002796= 41 53 52 00             3953  ASR_MESSAGE     DC.B 'ASR',0
0000279A= 52 4F 52 00             3954  ROR_MESSAGE     DC.B 'ROR',0
0000279E= 42 20 20 20 20 00       3955  SIZE_B_PRINT    DC.B 'B    ',0
000027A4= 57 20 20 20 20 00       3956  SIZE_W_PRINT    DC.B 'W    ',0
000027AA= 4C 20 20 20 20 00       3957  SIZE_L_PRINT    DC.B 'L    ',0
000027B0= 23 00                   3958  POUND_SIGN      DC.B '#',0
000027B2= 24 00                   3959  HEX_SIGN        DC.B '$',0
000027B4= 2E 00                   3960  PERIOD          DC.B '.',0
000027B6= 20 20 00                3961  SPACE           DC.B '  ',0
000027B9= 2F 00                   3962  SLASH           DC.B '/', 0
000027BB                          3963  
000027BB= 44 00                   3964  D_REGISTER      DC.B 'D',0
000027BD= 41 00                   3965  A_REGISTER      DC.B 'A',0
000027BF= 28 41 00                3966  IA_START        DC.B '(A',0
000027C2= 29 00                   3967  IA_END          DC.B ')',0
000027C4= 28 41 00                3968  A_PI_START      DC.B '(A',0
000027C7= 29 2B 00                3969  A_PI_END        DC.B ')+',0
000027CA= 2D 28 41 00             3970  A_PD_START      DC.B '-(A',0
000027CE= 29 00                   3971  A_PD_END        DC.B ')',0
000027D0= 2C 20 00                3972  COMMA           DC.B ', ',0
000027D3                          3973  
000027D3                          3974  
000027D3= 64 6F 20 79 6F 75 ...   3975  ASK_TO_CONTINUE_M     DC.B    'do you want to continue? (y/n)', 0
000027F2                          3976  
000027F2= 50 52 4F 47 52 41 ...   3977  TERMINATED          DC.B    'PROGRAM TERMINATED',0
00002805                          3978  
00002805                          3979  
00002805                          3980  
00002805                          3981  
00002805                          3982  
00002805                          3983  
00002805                          3984  
00002805                          3985  
00002805                          3986  
00002805                          3987  
00002805                          3988  
00002805                          3989  
00002805                          3990  
00002805                          3991  
00002805                          3992  
00002805                          3993  
00002805                          3994  
00002805                          3995  
00002805                          3996  
00002805                          3997  
00002805                          3998  -------------------- end include --------------------
00002805                          3999      *MOVE.B    #3, D2
00002805                          4000      *MOVE.B    #0, D5
00002806  307C 0400               4001      MOVEA.W   #$400, A0
0000280A                          4002      
0000280A                          4003      
0000280A                          4004      
0000280A                          4005  
0000280A                          4006      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_LONG       253A
ABSOLUTE_SHORT      251C
ADDA_CODE           1200
ADDA_MESSAGE        2780
ADDI                139E
ADDI_B_SIZE         140E
ADDI_EA             146E
ADDI_MESSAGE        26E9
ADDI_W_SIZE         143E
ADDQ                14A4
ADDQB               14D2
ADDQL               14FE
ADDQW               14E8
ADDQ_MESSAGE        2713
ADDRESS_PD          24A2
ADDRESS_PI          2478
ADDRESS_REGISTER    2432
ADDRESS_W_DISPLACEMENT  24CC
ADDRESS_W_INDEX     24D0
ADD_ADDA            11EC
ADD_CODE            1274
ADD_FIRST_EA        12C8
ADD_MESSAGE         277B
AND_CODE            18C4
AND_FIRST_EA        1910
AND_MESSAGE         2776
ASD                 1F20
ASD_MEMORY          1F7A
ASK_TO_CONTINUE     25D4
ASK_TO_CONTINUE_M   27D3
ASL                 1F36
ASL_MESSAGE         278A
ASR                 1F58
ASR_MESSAGE         2796
A_16_BIT            22FE
A_32_BIT            230C
A_PD_END            27CE
A_PD_START          27CA
A_PI_END            27C7
A_PI_START          27C4
A_REGISTER          27BD
BCC                 2172
BCC_MESSAGE         271D
BCS_MESSAGE         2729
BEQ_MESSAGE         2721
BGE_MESSAGE         272D
BGT_MESSAGE         2731
BHI_MESSAGE         2735
BIT0                1C82
BIT1                1C92
BIT10               1D22
BIT11               1D32
BIT12               1D42
BIT13               1D52
BIT14               1D62
BIT15               1D72
BIT2                1CA2
BIT3                1CB2
BIT4                1CC2
BIT5                1CD2
BIT6                1CE2
BIT7                1CF2
BIT8                1D02
BIT9                1D12
BLE_MESSAGE         2739
BLS_MESSAGE         273D
BLT_MESSAGE         2741
BMI_MESSAGE         2745
BNE_MESSAGE         2725
BPL_MESSAGE         2749
BVC_MESSAGE         274D
BVS_MESSAGE         2751
CC                  21A4
CHAR                10A0
CHECK               1BD4
CHECK_SECOND        1BE6
CLR_MESSAGE         270F
CLR_OPCODE          16CE
CMP                 1576
CMP_MESSAGE         276B
CODE000             23F6
CODE0000            11AC
CODE0001            11B0
CODE001             23FA
CODE0010            11B4
CODE0011            11B8
CODE010             23FE
CODE0100            11BC
CODE0101            11C0
CODE011             2402
CODE0110            11C4
CODE0111            11C8
CODE100             2406
CODE1000            11CC
CODE1001            11D0
CODE101             240A
CODE1010            11D4
CODE1011            11D8
CODE110             240E
CODE1100            11DC
CODE1101            11E0
CODE111             2412
CODE1110            11E4
CODE1111            11E8
COMMA               27D0
CONTINUE_PARSE      1114
CONVERT_STRING      107E
CR                  D
CR_LF               26E6
CS                  21A8
DATA_REGISTER       2416
DIRECTION_LEFT      1
DIRECTION_RIGHT     0
DISPLACEMENT        22B0
DIVU_CODE           177A
DIVU_MESSAGE        275C
DIVU_OR             1768
DONE                25A4
DONE_MOVEM_LOOP     1D82
DONE_PRINTING       1320
DR_FIELD            196A
D_REGISTER          27BB
ENDCONV             10DA
ENDING              267B
ENDING_ADDR         2628
ENDING_MESSAGE      103C
ENTER               2697
EQ                  21B0
ERROR               10CA
ERROR_MSG           26AA
EXAMPLE             606
EXAMPLE1            DE61
FINISH_PRINTING_SIZE  122A
GE                  21C4
GET_DATA_REGISTER   1362
GET_SIZE_PURPLE     12F0
GO_THROUGH_MEMORY   10DC
GROUP_0100_CODE     181E
GROUP_111           24D4
GT                  21CC
HEX_SIGN            27B2
HEX_TO_ASCII        231A
HI                  219C
IA_END              27C2
IA_START            27BF
IMMEDIATE           2558
IMMEDIATE_B         2580
IMMEDIATE_L         2598
IMMEDIATE_W         258C
INDIRECT_ADDRESS    244E
IS_USED             1BFA
IS_USED_FIRST       1BF0
JMP_TABLE           114C
JMP_TABLE_EA        23C6
JMP_TABLE_EA_111    24E2
JMP_TABLE_MOVEM     1C22
JSR_MESSAGE         2707
JSR_OPCODE          1698
LE                  21D0
LEA_MESSAGE         2719
LEA_OPCODE          161E
LETTER_1            233C
LETTER_1_ZERO       2382
LF                  A
LOOP                2326
LOOP_MOVEM          1BCC
LOOP_MOVEM_SECOND   1BDE
LOOP_ZERO           236C
LS                  21A0
LSD                 1E50
LSD_MEMORY          1EAE
LSL                 1E6A
LSL_MESSAGE         2786
LSR                 1E8C
LSR_MESSAGE         2792
LT                  21C8
MAX_USER_INPUT      8
MEMORY_REGISTER     19D6
MEMORY_SHIFTS       1E24
MI                  21C0
MODE_AL             7
MODE_AN             1
MODE_AS             7
MODE_AWD            5
MODE_AWI            6
MODE_DN             0
MODE_IAN            2
MODE_ID             7
MODE_M_DN           0
MODE_M_PDAN         1
MODE_PCWD           7
MODE_PCWI           7
MODE_PDAN           4
MODE_PIAN           3
MOVEAL              2100
MOVEAW              20E2
MOVEA_MESSAGE       26EF
MOVEB               205C
MOVEL               20AE
MOVEM_MESSAGE       2700
MOVEM_OPCODE        1932
MOVEQ               1D84
MOVEQ_MESSAGE       2755
MOVEW               207A
MOVE_MESSAGE        26F6
MULS_AND            1880
MULS_CODE           1892
MULS_MESSAGE        2770
NE                  21AC
NEXT_INSTRUCTION    1132
NOP_MESSAGE         26FC
NOP_OPCODE          1678
NUMBER              1090
NUMBER_1            2346
NUMBER_1_ZERO       238C
OPPOSITE_BIT0       1ACC
OPPOSITE_BIT1       1ADC
OPPOSITE_BIT10      1B6C
OPPOSITE_BIT11      1B7C
OPPOSITE_BIT12      1B8C
OPPOSITE_BIT13      1B9C
OPPOSITE_BIT14      1BAC
OPPOSITE_BIT15      1BBC
OPPOSITE_BIT2       1AEC
OPPOSITE_BIT3       1AFC
OPPOSITE_BIT4       1B0C
OPPOSITE_BIT5       1B1C
OPPOSITE_BIT6       1B2C
OPPOSITE_BIT7       1B3C
OPPOSITE_BIT8       1B4C
OPPOSITE_BIT9       1B5C
OPPOSITE_CHECK      1A1E
OPPOSITE_CHECK_SECOND  1A30
OPPOSITE_IS_USED    1A44
OPPOSITE_IS_USED_FIRST  1A3A
OPPOSITE_JMP_TABLE_MOVEM  1A6C
OPPOSITE_LOOP       19F6
OPPOSITE_LOOP_MOVEM  1A16
OPPOSITE_LOOP_MOVEM_SECOND  1A28
OPPOSITE_PRINT_REGISTER_MOVEM  1A5A
OR_CODE             17B0
OR_FIRST_EA         17FC
OR_MESSAGE          2762
OUTPUTCOUNTCURR     0
OUTPUTCOUNTMAX      1F
PARSE_MEMORY        10F0
PARSE_MEMORY_FIRST  10FE
PC_W_DISPLACEMENT   2514
PC_W_INDEX          2518
PERIOD              27B4
PL                  21BC
POUND_SIGN          27B0
PRESS_ENTER_CONTINUE  25AA
PRINTADDQ           1514
PRINTOUT_COUNT      1FB2
PRINTOUT_MEMORY_SHIFTS_EA  202C
PRINTOUT_MOVE_EA    211E
PRINTOUT_NIBBLE     2350
PRINTOUT_NIBBLE_ZERO  2396
PRINTOUT_REGISTER   1FF4
PRINTOUT_REGISTER_SHIFTS_EA  1F84
PRINTOUT_SIZE_L     1262
PRINTOUT_SIZE_PURPLE  1308
PRINTOUT_SIZE_W     1250
PRINT_ADDRESS       19B4
PRINT_B             1322
PRINT_BCC           21F4
PRINT_BCS           2204
PRINT_BEQ           2224
PRINT_BGE           2274
PRINT_BGT           2294
PRINT_BHI           21D4
PRINT_BLE           22A4
PRINT_BLS           21E4
PRINT_BLT           2284
PRINT_BMI           2264
PRINT_BNE           2214
PRINT_BPL           2254
PRINT_BVC           2234
PRINT_BVS           2244
PRINT_COMMA         1352
PRINT_EA            23B8
PRINT_L             1342
PRINT_REGISTER_MOVEM  1C10
PRINT_SIZE          1712
PRINT_SIZE_L_MOVEM  195E
PRINT_W             1332
PRINT_ZERO          23AA
REG000              2508
REG001              250C
REG010              2500
REG011              2504
REG100              2510
REGITSET_MEMORY     197C
RESTART             2610
ROD                 1EB8
ROD_MEMORY          1F16
ROL                 1ED2
ROL_MESSAGE         278E
ROR                 1EF4
ROR_MESSAGE         279A
RO_IMMEDATE         0
RO_REGISTER         1
RTS_MESSAGE         270B
RTS_OPCODE          1688
SET_EA              1374
SHIFT               C
SHIFTS              1DEA
SIZE_B              174A
SIZE_BYTE           0
SIZE_B_PRINT        279E
SIZE_L              175E
SIZE_LONG           3
SIZE_L_PRINT        27AA
SIZE_W              1754
SIZE_WORD           1
SIZE_W_PRINT        27A4
SLASH               27B9
SPACE               27B6
START               1000
STARTING            265D
STARTING_ADDR       2624
STARTING_MESSAGE    100C
START_OF_PROGRAM    1000
STOP                2614
STORE_ADDR          10B8
SUB                 15AC
SUB_FIRST_EA        15FC
SUB_MESSAGE         2766
TERMINATED          27F2
VC                  21B4
VS                  21B8
WELCOME_MESSAGE     262C
XN_AL               1
XN_AS               0
XN_ID               4
XN_PCWD             2
XN_PCWI             3
