00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/1/16 11:44:03 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Dissassembler Integration
00000000                             3  * Written by : Samuel Williams
00000000                             4  * Date       : 5/25/2016
00000000                             5  * Description: The file which includes all files
00000000                             6  *              to create a complete dissassembler 
00000000                             7  *-----------------------------------------------------------
00001000                             8      ORG    $1000
00001000                             9  START:                  ; first instruction of program
00001000                            10      
00001000                            11      *INCLUDE 'TEST_CODE_DAMIAN.X68'
00001000                            12      INCLUDE 'EQU_Data.X68'
00001000                            13  
00001000                            14  
00001000  =00000008                 15  MAX_USER_INPUT  EQU 8 
00001000                            16  
00001000                            17  
00001000  =00000606                 18  example          EQU     %0000011000000110
00001000                            19  
00001000  =0000DE61                 20  example1         EQU     %1101111001100001    * I made up bits 0 to 11      
00001000                            21  
00001000  =0000000C                 22  shift            EQU     12                   * Shift 12 bits 
00001000                            23  
00001000  =00000000                 24  mode_dn          EQU     %000
00001000                            25  
00001000  =00000001                 26  mode_an          EQU     %001
00001000                            27  
00001000  =00000002                 28  mode_ian         EQU     %010
00001000                            29  
00001000  =00000003                 30  mode_pian        EQU     %011
00001000                            31  
00001000  =00000004                 32  mode_pdan        EQU     %100
00001000                            33  
00001000  =00000005                 34  mode_awd         EQU     %101
00001000                            35  
00001000  =00000006                 36  mode_awi         EQU     %110
00001000                            37  
00001000  =00000007                 38  mode_pcwd        EQU     %111
00001000                            39  
00001000  =00000002                 40  xn_pcwd          EQU     %010
00001000                            41  
00001000  =00000007                 42  mode_pcwi        EQU     %111
00001000                            43  
00001000  =00000003                 44  xn_pcwi          EQU     %011
00001000                            45  
00001000  =00000007                 46  mode_as          EQU     %111
00001000                            47  
00001000  =00000000                 48  xn_as            EQU     %000
00001000                            49  
00001000  =00000007                 50  mode_al          EQU     %111
00001000                            51  
00001000  =00000001                 52  xn_al            EQU     %001
00001000                            53  
00001000  =00000007                 54  mode_id          EQU     %111
00001000                            55  
00001000  =00000004                 56  xn_id            EQU     %100
00001000                            57  
00001000  =00000000                 58  size_byte        EQU     %00
00001000                            59  
00001000  =00000001                 60  size_word        EQU     %01
00001000                            61  
00001000  =00000003                 62  size_long        EQU     %11
00001000                            63  
00001000  =00000000                 64  direction_right  EQU     %0
00001000                            65  
00001000  =00000001                 66  direction_left   EQU     %1
00001000                            67  
00001000  =00000000                 68  ro_immedate      EQU     %0
00001000                            69  
00001000  =00000001                 70  ro_register      EQU     %1
00001000                            71  
00001000  =00000000                 72  mode_m_dn        EQU     %0
00001000                            73  
00001000  =00000001                 74  mode_m_pdan      EQU     %1
00001000                            75  
00001000  =0000001F                 76  outputCountMax   EQU     31
00001000                            77  
00001000  =00000000                 78  outputCountCurr  EQU     0
00001000                            79            
00001000  =0000000D                 80  CR  EQU $0D
00001000                            81  
00001000  =0000000A                 82  LF  EQU $0A
00001000                            83  
00001000                            84  
00001000                            85  
00001000                            86  
00001000                            87  
00001000                            88  
00001000                            89  -------------------- end include --------------------
00001000                            90      INCLUDE 'INPUT.X68'
00001000                            91      * I/O 
00001000                            92      
00001000                            93      * Welcome message
00001000  43F9 0000255E             94          LEA WELCOME_MESSAGE, A1
00001006  103C 000E                 95          MOVE.B #14, D0
0000100A  4E4F                      96          TRAP #15
0000100C                            97          
0000100C                            98  STARTING_MESSAGE    
0000100C                            99      * Printing out the Starting address message
0000100C  43F9 0000258F            100          LEA STARTING, A1
00001012  103C 000E                101          MOVE.B #14, D0
00001016  4E4F                     102          TRAP #15
00001018                           103      
00001018                           104      * Code for input
00001018  227C 00002000            105          MOVEA.L #$2000, A1 *we have to change this addr later
0000101E  103C 0002                106          MOVE.B #2, D0
00001022  4E4F                     107          TRAP #15
00001024  143C 0008                108          MOVE.B #MAX_USER_INPUT, D2
00001028                           109      
00001028                           110      * JSR to convert string function
00001028  4EB9 0000107E            111          JSR CONVERT_STRING   
0000102E                           112      * check if the address is even number
0000102E  E25C                     113          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001030  65DA                     114          BCS STARTING_MESSAGE   *if carry is set then the user typed in an odd address
00001032  E35C                     115          ROL #1, D4     *PUT D4 BACK
00001034                           116         
00001034                           117      * store hex value of inputted string 
00001034  23C4 00002556            118          MOVE.L D4, STARTING_ADDR 
0000103A                           119      * reset the D4
0000103A  4284                     120          CLR.L  D4
0000103C                           121          
0000103C                           122  ENDING_MESSAGE
0000103C                           123      * message user to input
0000103C  43F9 000025AD            124          LEA ENDING, A1   
00001042  103C 000E                125          MOVE.B #14, D0
00001046  4E4F                     126          TRAP #15
00001048                           127      * read user input
00001048  227C 00002000            128          MOVEA.L #$2000, A1 *we have to change this addr later
0000104E  103C 0002                129          MOVE.B #2, D0   
00001052  4E4F                     130          TRAP #15
00001054                           131      * counter for loop
00001054  143C 0008                132          MOVE.B #MAX_USER_INPUT, D2   
00001058                           133      * JSR to convert string function
00001058  4EB9 0000107E            134          JSR CONVERT_STRING 
0000105E                           135          
0000105E                           136      * check if the address is even number
0000105E  E25C                     137          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001060  65DA                     138          BCS ENDING_MESSAGE   *if carry is set then the user typed in an odd address
00001062  E35C                     139          ROL #1, D4     *PUT D4 BACK        
00001064                           140          
00001064                           141      * Check if the starting and ending address is the same
00001064                           142         ; CMP.L #STARTING_ADDR, D4
00001064                           143         * MOVE.L #STARTING_ADDR, D5
00001064  2C39 00002556            144          MOVE.L STARTING_ADDR, D6
0000106A  B886                     145          CMP.L  D6, D4
0000106C  6FCE                     146          BLE   ENDING_MESSAGE
0000106E                           147      * store hex value of inputted string   
0000106E  23C4 0000255A            148          MOVE.L D4, ENDING_ADDR   
00001074                           149          
00001074                           150      * clear the unused data in the data and address regisgter
00001074  4280                     151          CLR.L D0
00001076  4284                     152          CLR.L D4
00001078                           153          
00001078                           154          * Do error handling here Sam
00001078                           155          
00001078  4EF9 000010DC            156          JMP GO_THROUGH_MEMORY
0000107E                           157      
0000107E                           158      * Get each char
0000107E                           159  CONVERT_STRING 
0000107E  1219                     160          MOVE.B (A1)+, D1
00001080                           161      
00001080                           162      * Go to next instruction for converting
00001080  B23C 0039                163          CMP.B #$39, D1
00001084  6F00 000A                164          BLE NUMBER
00001088                           165          
00001088  B23C 003A                166          CMP.B #$3A, D1
0000108C  6C00 0012                167          BGE CHAR   
00001090                           168      
00001090                           169      * Convert Ascii numbers to hex
00001090                           170  NUMBER  
00001090  B23C 002F                171          CMP.B #$2F, D1
00001094                           172      * Number is out of range
00001094  6F00 0034                173          BLE ERROR       
00001098  0401 0030                174          SUB.B #48, D1
0000109C                           175          
0000109C                           176      * Need to be changed the name of label
0000109C  6000 001A                177          BRA STORE_ADDR    
000010A0                           178      
000010A0                           179      * Convert Ascii charaters to hex
000010A0                           180  CHAR    
000010A0  B27C 0040                181          CMP #$40, D1
000010A4                           182      * Number is out of range
000010A4  6F00 0024                183          BLE ERROR
000010A8                           184          
000010A8  B27C 0047                185          CMP #$47, D1
000010AC                           186      * Number is out of range
000010AC  6C00 001C                187          BGE ERROR
000010B0                           188          
000010B0  0401 0037                189          SUB.B #55, D1
000010B4  6000 0002                190          BRA STORE_ADDR
000010B8                           191          
000010B8                           192  STORE_ADDR
000010B8                           193      * Add converted nibble to overall number
000010B8  D801                     194          ADD.B D1, D4
000010BA                           195      * Clear D1 for reuse 
000010BA  4201                     196          CLR.B D1
000010BC                           197      * Subtract from counter
000010BC  5342                     198          SUB #1, D2
000010BE                           199      * If counter is 0, we compared all 8 hex numbers
000010BE  B43C 0000                200          CMP.B #0, D2
000010C2  6700 0016                201          BEQ ENDCONV
000010C6                           202      * Shift the overall number to the left by 1 nibble, so it will fit next hex number
000010C6  E98C                     203          LSL.L #4, D4
000010C8  60B4                     204          BRA CONVERT_STRING
000010CA                           205          
000010CA                           206      * Error handling
000010CA                           207  ERROR
000010CA  43F9 000025DC            208      LEA   ERROR_MSG, A1 
000010D0  103C 000E                209      MOVE.B #14, D0
000010D4  4E4F                     210      TRAP #15
000010D6  4EF8 100C                211      JMP   STARTING_MESSAGE
000010DA                           212  
000010DA                           213      
000010DA                           214  ENDCONV * Next instruction starts 
000010DA  4E75                     215          RTS
000010DC                           216         * MOVE.L D4, STARTING_ADDR 
000010DC                           217          
000010DC                           218  GO_THROUGH_MEMORY
000010DC                           219  
000010DC                           220  
000010DC                           221  
000010DC                           222  
000010DC                           223  
000010DC                           224  
000010DC                           225  
000010DC                           226  
000010DC                           227  
000010DC                           228  
000010DC                           229  
000010DC                           230  
000010DC                           231  
000010DC                           232  
000010DC                           233  
000010DC                           234  
000010DC                           235  
000010DC                           236  
000010DC                           237  
000010DC                           238  
000010DC                           239  
000010DC                           240  
000010DC                           241  
000010DC                           242  
000010DC                           243  
000010DC                           244  -------------------- end include --------------------
000010DC                           245      INCLUDE 'MEMORY_PARSER.X68'
000010DC                           246  
000010DC  2A79 00002556            247                  MOVEA.L   STARTING_ADDR, A5
000010E2  2C4D                     248                  MOVEA.L   A5, A6
000010E4  247C 0000001F            249                  MOVEA.L  #outputCountMax, A2
000010EA  267C 00000000            250                  MOVEA.L  #outputCountCurr, A3
000010F0                           251  PARSE_MEMORY      
000010F0  3A4E                     252                  MOVE.W   A6, A5
000010F2  43F9 00002601            253                  LEA      CR_LF, A1
000010F8  103C 000E                254                  MOVE.B   #14, D0
000010FC  4E4F                     255                  TRAP #15  
000010FE                           256          
000010FE                           257  PARSE_MEMORY_FIRST    
000010FE  BBF9 0000255A            258                  CMPA.L   ENDING_ADDR, A5
00001104  6700 144C                259                  BEQ      STOP
00001108  301E                     260                  MOVE.W   (A6)+, D0
0000110A                           261                  
0000110A  B7FC 0000001F            262                  CMPA.L   #outputCountMax, A3
00001110  6700 1416                263                  BEQ       PRESS_ENTER_CONTINUE
00001114                           264  CONTINUE_PARSE
00001114  528B                     265                  ADDA.L    #1, A3
00001116                           266                  
00001116  4EF9 0000111C            267                  JMP      NEXT_INSTRUCTION
0000111C                           268                      
0000111C                           269  NEXT_INSTRUCTION
0000111C                           270                  INCLUDE 'JUMPTABLE DAMIAN-V1.X68'
0000111C                           271   
0000111C                           272  
0000111C  3015                     273                   MOVE.W  (A5),D0
0000111E                           274  
0000111E                           275  
0000111E                           276  
0000111E  41F9 00001136            277                   LEA     jmp_table,A0    *Index into the table
00001124                           278  
00001124  4280                     279                   CLR.L   D0              *Zero it
00001126                           280  
00001126  3015                     281                   MOVE.W  (A5),D0     *We'll play with it here
00001128                           282  
00001128  123C 000C                283                   MOVE.B  #shift,D1       *Shift 12 bits to the right  
0000112C                           284  
0000112C  E268                     285                   LSR.W   D1,D0           *Move the bits
0000112E                           286  
0000112E                           287  
0000112E                           288  
0000112E                           289  
0000112E                           290   
0000112E                           291  
0000112E  C0FC 0006                292                 MULU        #6,D0       *Form offset     
00001132                           293  
00001132  4EB0 0000                294                 JSR         0(A0,D0)   *Jump indirect with index
00001136                           295  
00001136                           296                      
00001136                           297  
00001136  4EF9 00001196            298  jmp_table      JMP         code0000
0000113C                           299  
0000113C  4EF9 0000119A            300                 JMP         code0001
00001142                           301  
00001142  4EF9 0000119E            302                 JMP         code0010
00001148                           303  
00001148  4EF9 000011A2            304                 JMP         code0011
0000114E                           305  
0000114E  4EF9 000011A6            306                 JMP         code0100
00001154                           307  
00001154  4EF9 000011AA            308                 JMP         code0101
0000115A                           309  
0000115A  4EF9 000011AE            310                 JMP         code0110
00001160                           311  
00001160  4EF9 000011B2            312                 JMP         code0111
00001166                           313  
00001166  4EF9 000011B6            314                 JMP         code1000
0000116C                           315  
0000116C  4EF9 000011BA            316                 JMP         code1001
00001172                           317  
00001172  4EF9 000011BE            318                 JMP         code1010
00001178                           319  
00001178  4EF9 000011C2            320                 JMP         code1011
0000117E                           321  
0000117E  4EF9 000011C6            322                 JMP         code1100
00001184                           323  
00001184  4EF9 000011CA            324                 JMP         code1101
0000118A                           325  
0000118A  4EF9 000011CE            326                 JMP         code1110
00001190                           327  
00001190  4EF9 000011D2            328                 JMP         code1111
00001196                           329  
00001196                           330          
00001196                           331  
00001196                           332   
00001196                           333  
00001196                           334  
00001196                           335   
00001196                           336  
00001196                           337   
00001196                           338  
00001196  6000 003E                339  code0000       BRA         ADDI
0000119A                           340  
0000119A  6000 0C70                341  code0001       BRA         MOVEB
0000119E                           342  
0000119E  6000 0CB6                343  code0010       BRA         MOVEL
000011A2                           344  
000011A2  6000 0C82                345  code0011       BRA         MOVEW
000011A6                           346  
000011A6  6000 0470                347  code0100       BRA         GROUP_0100_CODE
000011AA                           348  
000011AA  6000 0208                349  code0101       BRA         ADDQ   * Subroutine for ADDQ
000011AE                           350  
000011AE  4E72 2700                351  code0110       STOP        #$2700
000011B2                           352  
000011B2  4E72 2700                353  code0111       STOP        #$2700
000011B6                           354  
000011B6  4E72 2700                355  code1000       STOP        #$2700
000011BA                           356  
000011BA  6000 0122                357  code1001       BRA         SUB    * Subroutine for SUB
000011BE                           358  
000011BE  4E72 2700                359  code1010       STOP        #$2700
000011C2                           360  
000011C2                           361   
000011C2                           362  
000011C2                           363  
000011C2                           364  
000011C2                           365  
000011C2                           366   * another jump table to the 8 possible op-codes at the next level.
000011C2                           367  
000011C2                           368   
000011C2                           369  
000011C2  6000 012C                370  code1011       BRA        CMP  * Subroutuine for CMP
000011C6                           371  
000011C6  4E72 2700                372  code1100       STOP        #$2700
000011CA                           373  
000011CA  6000 0D42                374  code1101       BRA         ADD_ADDA       *#$2700
000011CE                           375  
000011CE  6000 09EC                376  code1110       BRA         SHIFTS
000011D2                           377  
000011D2  4E72 2700                378  code1111       STOP        #$2700
000011D6                           379                   
000011D6                           380  
000011D6                           381                      
000011D6                           382              
000011D6                           383  
000011D6                           384  
000011D6                           385  
000011D6                           386  
000011D6                           387  
000011D6                           388  
000011D6                           389  
000011D6                           390  
000011D6                           391  
000011D6                           392  
000011D6                           393  
000011D6                           394  
000011D6                           395  
000011D6                           396  
000011D6                           397  
000011D6                           398  -------------------- end include --------------------
000011D6                           399                  INCLUDE 'ADDI.X68'
000011D6                           400    
000011D6                           401  ADDI           * first check the first 4 bits after the op-code
000011D6  4280                     402                 CLR.L       D0
000011D8                           403  
000011D8  4281                     404                 CLR.L       D1
000011DA                           405                 
000011DA  3015                     406                 MOVE.W      (A5),D0
000011DC                           407                 
000011DC  123C 0008                408                 MOVE.B      #8, D1 * for shifting to the right by 8 bits
000011E0                           409                 
000011E0  E268                     410                 LSR.W       D1, D0
000011E2                           411                 
000011E2  B07C 0006                412                 CMP.W       #6, D0 * checking the first 4 bits 
000011E6                           413                 
000011E6  6600 FEE2                414                 BNE         ERROR  * go to error 
000011EA                           415                 
000011EA                           416                 * print the op-code 
000011EA  4280                     417                 CLR.L       D0
000011EC                           418  
000011EC  4281                     419                 CLR.L       D1
000011EE                           420                 
000011EE  43F9 00002604            421                 LEA         ADDI_MESSAGE, A1    * NOTE - how do you know this is of size B ????? 
000011F4                           422                 
000011F4  103C 000E                423                 MOVE.B      #14, D0
000011F8                           424                 
000011F8  4E4F                     425                 TRAP #15
000011FA                           426                                
000011FA                           427                 * print the size
000011FA  4280                     428                 CLR.L       D0
000011FC                           429  
000011FC  4281                     430                 CLR.L       D1
000011FE                           431                 
000011FE  3015                     432                 MOVE.W      (A5),D0
00001200                           433                
00001200  E148                     434                 LSL.W       #8, D0
00001202                           435  
00001202  123C 000E                436                 MOVE.B      #14, D1 * for shifting to the right by 8 bits
00001206                           437                 
00001206  E268                     438                 LSR.W       D1, D0
00001208                           439                 
00001208                           440                 * D1 holds the size
00001208                           441    *             CLR.L       D1
00001208                           442                 
00001208                           443    *             MOVE.B      D0, D1
00001208                           444                   
00001208  B03C 0000                445                 CMP.B       #%00, D0
0000120C                           446                 
0000120C  6700 0038                447                 BEQ         ADDI_B_SIZE
00001210                           448                 
00001210  B03C 0001                449                 CMP.B       #%01, D0
00001214                           450                 
00001214  6700 0060                451                 BEQ         ADDI_W_SIZE
00001218                           452                 
00001218                           453                 *print size L
00001218  43F9 000026C7            454                 LEA         SIZE_L_PRINT, A1     
0000121E                           455                 
0000121E  103C 000E                456                 MOVE.B      #14, D0
00001222                           457                 
00001222  4E4F                     458                 TRAP #15
00001224                           459                 
00001224                           460                * print out pound sign and hex sign
00001224  43F9 000026CD            461                 LEA     POUND_SIGN, A1
0000122A                           462              
0000122A  103C 000E                463                 MOVE.B  #14, D0
0000122E                           464              
0000122E  4E4F                     465                 TRAP #15
00001230                           466              
00001230  43F9 000026CF            467                 LEA     HEX_SIGN, A1
00001236                           468              
00001236  4E4F                     469                 TRAP #15
00001238                           470                 
00001238  4285                     471                 CLR.L  D5
0000123A                           472          
0000123A  2A1E                     473                 MOVE.L (A6)+, D5 * we mimght change it later
0000123C                           474          
0000123C  4EB9 00002298            475                 JSR  HEX_TO_ASCII
00001242                           476                 
00001242  6000 0062                477                 BRA         ADDI_EA   
00001246                           478                      
00001246                           479  ADDI_B_SIZE
00001246  43F9 000026BB            480                 LEA         SIZE_B_PRINT, A1     
0000124C                           481                 
0000124C  103C 000E                482                 MOVE.B      #14, D0
00001250                           483                 
00001250  4E4F                     484                 TRAP #15
00001252                           485                 
00001252                           486                * print out pound sign and hex sign
00001252  43F9 000026CD            487                 LEA     POUND_SIGN, A1
00001258                           488              
00001258  103C 000E                489                 MOVE.B  #14, D0
0000125C                           490              
0000125C  4E4F                     491                 TRAP #15
0000125E                           492              
0000125E  43F9 000026CF            493                 LEA     HEX_SIGN, A1
00001264                           494              
00001264  4E4F                     495                 TRAP #15
00001266                           496                 
00001266  4280                     497                 CLR.L D0
00001268                           498  
00001268  301E                     499                 MOVE.W (A6)+, D0 * we mimght change it later
0000126A                           500                 
0000126A  1A00                     501                 MOVE.B D0, D5
0000126C                           502     
0000126C  4EB9 00002298            503                 JSR  HEX_TO_ASCII
00001272                           504                 
00001272  6000 0032                505                 BRA         ADDI_EA 
00001276                           506                  
00001276                           507  
00001276                           508  ADDI_W_SIZE
00001276  43F9 000026C1            509                 LEA         SIZE_W_PRINT, A1     
0000127C                           510                 
0000127C  103C 000E                511                 MOVE.B      #14, D0
00001280                           512                 
00001280  4E4F                     513                 TRAP #15
00001282                           514                 
00001282                           515                 * print out pound sign and hex sign
00001282  43F9 000026CD            516                 LEA     POUND_SIGN, A1
00001288                           517              
00001288  103C 000E                518                 MOVE.B  #14, D0
0000128C                           519              
0000128C  4E4F                     520                 TRAP #15
0000128E                           521              
0000128E  43F9 000026CF            522                 LEA     HEX_SIGN, A1
00001294                           523              
00001294  4E4F                     524                 TRAP #15
00001296                           525  
00001296  4285                     526                 CLR.L  D5
00001298                           527          
00001298  3A1E                     528                 MOVE.W (A6)+, D5
0000129A                           529          
0000129A  4EB9 00002298            530                 JSR  HEX_TO_ASCII
000012A0                           531          
000012A0  4EF9 000012A6            532                 JMP  ADDI_EA
000012A6                           533  
000012A6                           534  
000012A6                           535  ADDI_EA      
000012A6  4EB9 00002056            536                  JSR     PRINT_COMMA
000012AC                           537                  
000012AC  4280                     538                  CLR.L   D0
000012AE                           539                  
000012AE  4281                     540                  CLR.L   D1
000012B0                           541                  
000012B0                           542                  * set register
000012B0                           543                   
000012B0  3015                     544                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000012B2                           545                 
000012B2  123C 000D                546                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000012B6                           547  
000012B6  E368                     548                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000012B8                           549  
000012B8  123C 000D                550                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000012BC                           551  
000012BC  E268                     552                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000012BE                           553  
000012BE  1E00                     554                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
000012C0                           555                   
000012C0                           556                   * set mode
000012C0  4280                     557                   CLR.L D0                *clear D0
000012C2                           558                   
000012C2  4281                     559                   CLR.L D1                *clear D1
000012C4                           560                   
000012C4  3015                     561                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000012C6                           562                 
000012C6  123C 000A                563                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000012CA                           564  
000012CA  E368                     565                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000012CC                           566  
000012CC  123C 000D                567                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000012D0                           568  
000012D0  E268                     569                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000012D2                           570  
000012D2  1C00                     571                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
000012D4                           572  
000012D4                           573   
000012D4                           574                 * JSR     Set_Ea
000012D4                           575                   
000012D4  4EB9 00002336            576                  JSR     PRINT_EA *by using jmp table
000012DA                           577                  
000012DA  4EF8 10F0                578                  JMP     PARSE_MEMORY
000012DE                           579                  
000012DE                           580                  
000012DE                           581                   
000012DE                           582                   
000012DE                           583  
000012DE                           584  
000012DE                           585                 
000012DE                           586  
000012DE                           587  
000012DE                           588  
000012DE                           589  
000012DE                           590  
000012DE                           591  
000012DE                           592  
000012DE                           593  
000012DE                           594  
000012DE                           595  
000012DE                           596  
000012DE                           597  
000012DE                           598  
000012DE                           599  
000012DE                           600  
000012DE                           601  
000012DE                           602  
000012DE                           603  
000012DE                           604  
000012DE                           605  
000012DE                           606  
000012DE                           607  
000012DE                           608  
000012DE                           609  
000012DE                           610  -------------------- end include --------------------
000012DE                           611                  INCLUDE 'ADDQ_SUB_CMP.X68'
000012DE                           612  SUB
000012DE                           613  
000012DE  43F9 0000267D            614      LEA SUB_MESSAGE, A1  *print SUB
000012E4                           615                   
000012E4  103C 000E                616      MOVE.B #14, D0
000012E8                           617                   
000012E8  4E4F                     618      TRAP #15
000012EA                           619      
000012EA  4EF9 00001302            620      JMP SUB_CMP
000012F0                           621  
000012F0                           622  CMP
000012F0  43F9 00002682            623      LEA CMP_MESSAGE, A1  *print CMP
000012F6                           624                   
000012F6  103C 000E                625      MOVE.B #14, D0
000012FA                           626                   
000012FA  4E4F                     627      TRAP #15
000012FC                           628      
000012FC  4EF9 00001302            629      JMP SUB_CMP
00001302                           630  
00001302                           631  SUB_CMP
00001302                           632  
00001302  3015                     633      MOVE.W (A5), D0
00001304                           634      
00001304  123C 0008                635      MOVE.B  #8,D1     
00001308                           636  
00001308  E368                     637      LSL.W   D1,D0
0000130A                           638                   
0000130A  123C 000E                639      MOVE.B  #14,D1
0000130E                           640  
0000130E  E268                     641      LSR.W   D1,D0  *DO now holds size
00001310                           642                                              
00001310  B03C 0002                643      CMP.B    #$2, D0        *if D0 holds 3, size is L
00001314                           644      
00001314  4EF9 00001356            645      JMP      SUB_CMP_L
0000131A                           646                   
0000131A  B03C 0001                647      CMP.B    #$1, D0        *if D0 holds 3, size is W
0000131E                           648                                   
0000131E  4EF9 00001340            649      JMP      SUB_CMP_W
00001324                           650  
00001324  4EF9 0000132A            651      JMP      SUB_CMP_B
0000132A                           652  
0000132A                           653  SUB_CMP_B  *Print B
0000132A                           654  
0000132A  43F9 000026BB            655      LEA SIZE_B_PRINT, A1  *print B
00001330                           656                   
00001330  103C 000E                657      MOVE.B #14, D0
00001334                           658                   
00001334  4E4F                     659      TRAP #15
00001336                           660      
00001336  1A3C 0000                661      MOVE.B #%00, D5
0000133A                           662      
0000133A  4EF9 0000136C            663      JMP PRINT_SUB_CMP
00001340                           664      
00001340                           665  SUB_CMP_W  *Print W
00001340                           666  
00001340  43F9 000026C1            667      LEA SIZE_W_PRINT, A1  *print W
00001346                           668                   
00001346  103C 000E                669      MOVE.B #14, D0
0000134A                           670                   
0000134A  4E4F                     671      TRAP #15
0000134C                           672      
0000134C  1A3C 0001                673      MOVE.B #%01, D5
00001350                           674  
00001350  4EF9 0000136C            675      JMP PRINT_SUB_CMP
00001356                           676  
00001356                           677  SUB_CMP_L   *Print L
00001356                           678  
00001356  43F9 000026C7            679      LEA SIZE_L_PRINT, A1  *print L
0000135C                           680                   
0000135C  103C 000E                681      MOVE.B #14, D0
00001360                           682                   
00001360  4E4F                     683      TRAP #15
00001362                           684  
00001362  1A3C 0002                685      MOVE.B #%10, D5
00001366                           686      
00001366  4EF9 0000136C            687      JMP PRINT_SUB_CMP
0000136C                           688      
0000136C                           689  PRINT_SUB_CMP
0000136C                           690  
0000136C  3C3C 0000                691      MOVE.W #$000, D6
00001370                           692     
00001370  3015                     693      MOVE.W (A5), D0
00001372                           694  
00001372  123C 0004                695      MOVE.B  #4,D1     
00001376                           696  
00001376  E368                     697      LSL.W   D1,D0
00001378                           698                   
00001378  123C 000D                699      MOVE.B  #13,D1
0000137C                           700  
0000137C  E268                     701      LSR.W   D1,D0  *D0 now holds Dn
0000137E                           702                                              
0000137E  3E00                     703      MOVE.W D0, D7 *D6 holds Dn
00001380                           704      
00001380  4EB9 00002336            705      JSR PRINT_EA
00001386                           706      
00001386  4286                     707      CLR.L D6
00001388                           708      
00001388  4287                     709      CLR.L D7
0000138A                           710      
0000138A  3015                     711      MOVE.W (A5), D0
0000138C                           712  
0000138C  123C 000A                713      MOVE.B  #10,D1     
00001390                           714  
00001390  E368                     715      LSL.W   D1,D0
00001392                           716                   
00001392  123C 000D                717      MOVE.B  #13,D1
00001396                           718  
00001396  E268                     719      LSR.W   D1,D0  *D0 now holds MODE
00001398                           720                                              
00001398  3C00                     721      MOVE.W D0, D6 *D6 holds mode
0000139A                           722      
0000139A  3015                     723      MOVE.W (A5), D0
0000139C                           724  
0000139C  123C 000D                725      MOVE.B  #13,D1     
000013A0                           726  
000013A0  E368                     727      LSL.W   D1,D0
000013A2                           728                   
000013A2  123C 000D                729      MOVE.B  #13,D1
000013A6                           730  
000013A6  E268                     731      LSR.W   D1,D0  *D0 now holds Register
000013A8                           732                                              
000013A8  3E00                     733      MOVE.W D0, D7 *D6 holds Register   
000013AA                           734      
000013AA  4EB9 00002336            735      JSR PRINT_EA
000013B0                           736  
000013B0  6000 FD3E                737      BRA PARSE_MEMORY
000013B4                           738  
000013B4                           739  
000013B4                           740  ADDQ
000013B4                           741  
000013B4  43F9 0000262E            742      LEA ADDQ_MESSAGE, A1  *print ADDQ
000013BA                           743                   
000013BA  103C 000E                744      MOVE.B #14, D0
000013BE                           745                   
000013BE  4E4F                     746      TRAP #15
000013C0                           747      
000013C0  3015                     748      MOVE.W (A5), D0
000013C2                           749      
000013C2  123C 0008                750      MOVE.B  #8,D1     
000013C6                           751  
000013C6  E368                     752      LSL.W   D1,D0
000013C8                           753                   
000013C8  123C 000E                754      MOVE.B  #14,D1
000013CC                           755  
000013CC  E268                     756      LSR.W   D1,D0  *DO now holds size
000013CE                           757                                              
000013CE  B03C 0002                758      CMP.B    #$2, D0        *if D0 holds 3, size is L
000013D2                           759      
000013D2  4EF9 00001414            760      JMP      ADDQL
000013D8                           761                   
000013D8  B03C 0001                762      CMP.B    #$1, D0        *if D0 holds 3, size is W
000013DC                           763                                   
000013DC  4EF9 000013FE            764      JMP      ADDQW
000013E2                           765  
000013E2  4EF9 000013E8            766      JMP      ADDQB
000013E8                           767  
000013E8                           768  ADDQB  *Print B
000013E8                           769  
000013E8  43F9 000026BB            770      LEA SIZE_B_PRINT, A1  *print B
000013EE                           771                   
000013EE  103C 000E                772      MOVE.B #14, D0
000013F2                           773                   
000013F2  4E4F                     774      TRAP #15
000013F4                           775      
000013F4  1A3C 0000                776      MOVE.B #%00, D5
000013F8                           777      
000013F8  4EF9 0000142A            778      JMP PRINTADDQ
000013FE                           779      
000013FE                           780  ADDQW  *Print W
000013FE                           781  
000013FE  43F9 000026C1            782      LEA SIZE_W_PRINT, A1  *print W
00001404                           783                   
00001404  103C 000E                784      MOVE.B #14, D0
00001408                           785                   
00001408  4E4F                     786      TRAP #15
0000140A                           787      
0000140A  1A3C 0001                788      MOVE.B #%01, D5
0000140E                           789  
0000140E  4EF9 0000142A            790      JMP PRINTADDQ
00001414                           791  
00001414                           792  ADDQL   *Print L
00001414                           793  
00001414  43F9 000026C7            794      LEA SIZE_L_PRINT, A1  *print L
0000141A                           795                   
0000141A  103C 000E                796      MOVE.B #14, D0
0000141E                           797                   
0000141E  4E4F                     798      TRAP #15
00001420                           799  
00001420  1A3C 0002                800      MOVE.B #%10, D5
00001424                           801      
00001424  4EF9 0000142A            802      JMP PRINTADDQ
0000142A                           803      
0000142A                           804  PRINTADDQ
0000142A                           805  
0000142A  3C3C 0111                806      MOVE.W #$111, D6
0000142E                           807      
0000142E  3E3C 0100                808      MOVE.W #$100, D7
00001432                           809  
00001432  4EB9 00002336            810      JSR PRINT_EA
00001438                           811      
00001438  4286                     812      CLR.L D6
0000143A                           813      
0000143A  4287                     814      CLR.L D7
0000143C                           815      
0000143C  3015                     816      MOVE.W (A5), D0
0000143E                           817  
0000143E  123C 000A                818      MOVE.B  #10,D1     
00001442                           819  
00001442  E368                     820      LSL.W   D1,D0
00001444                           821                   
00001444  123C 000D                822      MOVE.B  #13,D1
00001448                           823  
00001448  E268                     824      LSR.W   D1,D0  *D0 now holds MODE
0000144A                           825                                              
0000144A  3C00                     826      MOVE.W D0, D6 *D6 holds mode
0000144C                           827      
0000144C  3015                     828      MOVE.W (A5), D0
0000144E                           829  
0000144E  123C 000D                830      MOVE.B  #13,D1     
00001452                           831  
00001452  E368                     832      LSL.W   D1,D0
00001454                           833                   
00001454  123C 000D                834      MOVE.B  #13,D1
00001458                           835  
00001458  E268                     836      LSR.W   D1,D0  *D0 now holds MODE
0000145A                           837                                              
0000145A  3E00                     838      MOVE.W D0, D7 *D6 holds Register   
0000145C                           839      
0000145C  4EB9 00002336            840      JSR PRINT_EA
00001462                           841  
00001462  6000 FC8C                842      BRA PARSE_MEMORY
00001466                           843  
00001466                           844      
00001466                           845  
00001466                           846  
00001466                           847  
00001466                           848  
00001466                           849  
00001466                           850  
00001466                           851  
00001466                           852  -------------------- end include --------------------
00001466                           853                  INCLUDE 'TRYING_NOP.X68'
00001466                           854  
00001466                           855      
00001466                           856   
00001466                           857      *MOVE.W  #$4E75, D2          * hardcodiing nop
00001466                           858  
00001466                           859     * CMP.L       #$4E71, D2      * has to be NOP
00001466                           860      *
00001466                           861     * BEQ         NOP_OPCODE
00001466                           862      
00001466                           863     * CMP.L       #$4E75, D2      * has to be RTS
00001466                           864      
00001466                           865    *  BEQ         RTS_OPCODE
00001466                           866     *BRA CLR_OPCODE  
00001466                           867  
00001466                           868  NOP_OPCODE
00001466  43F9 00002617            869      LEA         NOP_MESSAGE, A1     * print out message for 'NOP'
0000146C                           870      
0000146C  103C 000E                871      MOVE.B      #14, D0
00001470                           872      
00001470  4E4F                     873      TRAP #15
00001472                           874      
00001472  6000 FC7C                875      BRA PARSE_MEMORY
00001476                           876  RTS_OPCODE 
00001476  43F9 00002626            877      LEA         RTS_MESSAGE, A1     * print out message for 'RTS'
0000147C                           878      
0000147C  103C 000E                879      MOVE.B      #14, D0
00001480                           880      
00001480  4E4F                     881      TRAP #15
00001482                           882      
00001482  6000 FC6C                883      BRA PARSE_MEMORY
00001486                           884      
00001486                           885  JSR_OPCODE 
00001486  43F9 00002622            886      LEA         JSR_MESSAGE, A1     * print out message for 'JSR'
0000148C                           887      
0000148C  103C 000E                888      MOVE.B      #14, D0
00001490                           889      
00001490  4E4F                     890      TRAP #15
00001492                           891      
00001492  2002                     892      MOVE.L D2, D0
00001494                           893  
00001494  123C 000D                894      MOVE.B  #13,D1     
00001498                           895  
00001498  E368                     896      LSL.W   D1,D0
0000149A                           897                   
0000149A  123C 000D                898      MOVE.B  #13,D1
0000149E                           899  
0000149E  E268                     900      LSR.W   D1,D0  *D0 now holds Register
000014A0                           901                                              
000014A0  3E00                     902      MOVE.W D0, D7 *D7 holds Register  
000014A2                           903  
000014A2  2002                     904      MOVE.L D2, D0
000014A4                           905  
000014A4  123C 000A                906      MOVE.B  #10,D1     
000014A8                           907  
000014A8  E368                     908      LSL.W   D1,D0
000014AA                           909                   
000014AA  123C 000D                910      MOVE.B  #13,D1
000014AE                           911  
000014AE  E268                     912      LSR.W   D1,D0  *D0 now holds MODE
000014B0                           913                                              
000014B0  3C00                     914      MOVE.W D0, D6 *D6 holds MODE  
000014B2                           915      
000014B2  4EB9 00002336            916      JSR PRINT_EA
000014B8                           917      
000014B8  6000 FC36                918      BRA PARSE_MEMORY
000014BC                           919         
000014BC                           920  CLR_OPCODE 
000014BC  43F9 0000262A            921      LEA         CLR_MESSAGE, A1     * print out message for 'CLR'
000014C2                           922      
000014C2  103C 000E                923      MOVE.B      #14, D0
000014C6                           924      
000014C6  4E4F                     925      TRAP #15
000014C8                           926                     
000014C8  43F9 000026D1            927      LEA      PERIOD, A1
000014CE                           928      
000014CE  103C 000E                929      MOVE.B   #14, D0
000014D2                           930      
000014D2  4E4F                     931      TRAP #15 
000014D4                           932                
000014D4  3015                     933      MOVE.W      (A5), D0
000014D6                           934               
000014D6  123C 0006                935      MOVE.B      #6, D1
000014DA                           936                 
000014DA  E268                     937      LSR.W       D1, D0  *shift right 6 
000014DC                           938                 
000014DC  123C 000E                939      MOVE.B      #14, D1
000014E0                           940                 
000014E0  E368                     941      LSL.W       D1, D0  *shift left 15, only size is left
000014E2                           942      
000014E2  123C 000E                943      MOVE.B      #14, D1
000014E6                           944                 
000014E6  E268                     945      LSR.W       D1, D0  *shift right 15, size is left   
000014E8                           946      
000014E8  B07C 0000                947      CMP.W       #00, D0
000014EC                           948  
000014EC  6700 004A                949      BEQ         SIZE_B
000014F0                           950      
000014F0  B07C 0001                951      CMP.W       #01, D0
000014F4                           952                 
000014F4  6700 004C                953      BEQ         SIZE_W 
000014F8                           954      
000014F8  B07C 0002                955      CMP.W       #2, D0
000014FC                           956                 
000014FC  6700 004E                957      BEQ         SIZE_L
00001500                           958  
00001500                           959  PRINT_SIZE
00001500                           960  
00001500  103C 000E                961      MOVE.B      #14, D0
00001504                           962      
00001504  4E4F                     963      TRAP #15
00001506                           964  
00001506  4280                     965      CLR.L   D0
00001508                           966                  
00001508  4281                     967      CLR.L   D1
0000150A                           968                       * set register
0000150A                           969                   
0000150A  3015                     970      MOVE.W  (A5),D0     *D0 is the binary value to decode
0000150C                           971                 
0000150C  123C 000D                972      MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001510                           973  
00001510  E368                     974      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001512                           975  
00001512  123C 000D                976      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001516                           977  
00001516  E268                     978      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001518                           979  
00001518  1E00                     980      MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
0000151A                           981                   
0000151A                           982                   * set mode
0000151A  4280                     983      CLR.L D0                *clear D0
0000151C                           984                   
0000151C  4281                     985      CLR.L D1                *clear D1
0000151E                           986                   
0000151E  3015                     987      MOVE.W  (A5),D0     *D0 is the binary value to decode
00001520                           988                 
00001520  123C 000A                989      MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001524                           990  
00001524  E368                     991      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001526                           992  
00001526  123C 000D                993      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
0000152A                           994  
0000152A  E268                     995      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
0000152C                           996  
0000152C  2C00                     997      MOVE.L  D0, D6          *put D0 to data register into D7 for future printing
0000152E                           998                   
0000152E  4EB9 00002336            999      JSR     PRINT_EA *by using jmp table
00001534                          1000  
00001534  6000 FBBA               1001      BRA PARSE_MEMORY
00001538                          1002      
00001538                          1003  SIZE_B 
00001538                          1004                
00001538  43F9 000026BB           1005      LEA         SIZE_B_PRINT, A1 
0000153E                          1006      
0000153E  4EF8 1500               1007      JMP PRINT_SIZE
00001542                          1008      
00001542                          1009  SIZE_W 
00001542                          1010                
00001542  43F9 000026C1           1011      LEA         SIZE_W_PRINT, A1 
00001548                          1012      
00001548  4EF8 1500               1013      JMP PRINT_SIZE
0000154C                          1014      
0000154C                          1015  SIZE_L 
0000154C                          1016                
0000154C  43F9 000026C7           1017      LEA         SIZE_L_PRINT, A1 
00001552                          1018      
00001552  4EF8 1500               1019      JMP PRINT_SIZE
00001556                          1020      
00001556                          1021  
00001556                          1022   *   END    START        ; last line of source
00001556                          1023  
00001556                          1024  
00001556                          1025  
00001556                          1026  
00001556                          1027  
00001556                          1028  
00001556                          1029  
00001556                          1030  
00001556                          1031  
00001556                          1032  
00001556                          1033  
00001556                          1034  
00001556                          1035  -------------------- end include --------------------
00001556                          1036                  INCLUDE 'DIVU_OR.X68'
00001556                          1037      
00001556  4EB9 00001FF6           1038  DIVU_OR          JSR      GET_SIZE_PURPLE  
0000155C                          1039                                            
0000155C  BA3C 0003               1040                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
00001560                          1041                   
00001560  6700 0008               1042                   BEQ      DIVU_CODE
00001564                          1043                   
00001564  4EF9 000015AC           1044                   JMP      OR_CODE
0000156A                          1045                   
0000156A                          1046  DIVU_CODE  
0000156A                          1047                   * OP_CODE message
0000156A  43F9 00002673           1048                   LEA      DIVU_MESSAGE, A1
00001570  103C 000E               1049                   MOVE.B   #14, D0
00001574  4E4F                    1050                   TRAP #15
00001576                          1051  
00001576  3A3C 0001               1052                   MOVE    #%01, D5          
0000157A                          1053                   
0000157A  43F9 000026C1           1054                   LEA      SIZE_W_PRINT,    A1
00001580                          1055                   
00001580  103C 000E               1056                   MOVE.B   #14,             D0
00001584                          1057          
00001584  4E4F                    1058                   TRAP #15
00001586                          1059                   
00001586  4EB9 00002076           1060                   JSR     Set_Ea
0000158C                          1061                   
0000158C  4EB9 00002336           1062                   JSR     PRINT_EA *by using jmp table
00001592                          1063                   
00001592  4EB9 00002056           1064                   JSR     PRINT_COMMA
00001598                          1065                   
00001598                          1066                    * for the first Dn 
00001598  4EB9 00002064           1067                   JSR     GET_Data_Register
0000159E                          1068                   
0000159E  1C3C 0000               1069                   MOVE.B  #%000, D6 * for mode
000015A2                          1070  
000015A2  4EB9 00002336           1071                   JSR     PRINT_EA *by using jmp table
000015A8                          1072  
000015A8  4EF8 10F0               1073                   JMP     PARSE_MEMORY
000015AC                          1074  
000015AC                          1075  OR_CODE    
000015AC                          1076                   * OP_CODE message
000015AC  43F9 00002679           1077                   LEA      OR_MESSAGE, A1
000015B2  103C 000E               1078                   MOVE.B   #14, D0
000015B6  4E4F                    1079                   TRAP #15
000015B8                          1080  
000015B8  4EB9 0000200C           1081                   JSR PRINTOUT_SIZE_PURPLE
000015BE                          1082                   
000015BE                          1083                     * check for dn and ea
000015BE  4280                    1084                   CLR.L D0                *clear D0
000015C0                          1085                   
000015C0  4281                    1086                   CLR.L D1                *clear D1
000015C2                          1087                   
000015C2  3015                    1088                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000015C4                          1089                   
000015C4  0800 0008               1090                   BTST    #8, D0
000015C8                          1091                   
000015C8  6700 0028               1092                   BEQ     OR_FIRST_EA
000015CC                          1093                   
000015CC                          1094                   * for the first Dn 
000015CC  4EB9 00002064           1095                   JSR     GET_Data_Register
000015D2                          1096                   
000015D2  1C3C 0000               1097                   MOVE.B  #%000, D6 * for mode
000015D6                          1098                   
000015D6  4EB9 00002336           1099                   JSR     PRINT_EA *by using jmp table
000015DC                          1100                   
000015DC  4EB9 00002056           1101                   JSR     PRINT_COMMA
000015E2                          1102                   
000015E2  4EB9 00002076           1103                   JSR     Set_Ea
000015E8                          1104                   
000015E8  4EB9 00002336           1105                   JSR     PRINT_EA *by using jmp table
000015EE                          1106                   
000015EE  4EF8 10F0               1107                   JMP     PARSE_MEMORY
000015F2                          1108                   
000015F2                          1109  OR_FIRST_EA
000015F2  4EB9 00002076           1110                   JSR     Set_Ea
000015F8                          1111                   
000015F8  4EB9 00002336           1112                   JSR     PRINT_EA *by using jmp table
000015FE                          1113                   
000015FE  4EB9 00002056           1114                   JSR     PRINT_COMMA
00001604                          1115                   
00001604                          1116                    * for the first Dn 
00001604  4EB9 00002064           1117                   JSR     GET_Data_Register
0000160A                          1118                   
0000160A  1C3C 0000               1119                   MOVE.B  #%000, D6 * for mode
0000160E                          1120  
0000160E  4EB9 00002336           1121                   JSR     PRINT_EA *by using jmp table
00001614                          1122                   
00001614  4EF8 10F0               1123                   JMP     PARSE_MEMORY
00001618                          1124  
00001618                          1125  
00001618                          1126  
00001618                          1127  
00001618                          1128  
00001618                          1129  
00001618                          1130  
00001618                          1131  
00001618                          1132  -------------------- end include --------------------
00001618                          1133                  INCLUDE 'GROUP_0100_CODE.X68'
00001618                          1134  GROUP_0100_CODE          *at this point we know the first 4 bits are 0100 -> NOP, RTS, JSR,  MOVEM, CLR
00001618                          1135  
00001618  4280                    1136                   CLR.L D0                *clear D0
0000161A                          1137                   
0000161A  4281                    1138                   CLR.L D1                *clear D1
0000161C                          1139                   
0000161C  3015                    1140                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000161E                          1141  
0000161E  123C 0004               1142                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
00001622                          1143  
00001622  E368                    1144                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
00001624                          1145                   
00001624  123C 0004               1146                   MOVE.B  #4,D1           *4 bits is the number of times to shift to hold everything except the opcode
00001628                          1147  
00001628  E268                    1148                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds everything except opcode
0000162A                          1149                   
0000162A                          1150                                              
0000162A  B07C 0E71               1151                   CMP.W    #$E71, D0      *if D0 holds E71, the opcode is NOP
0000162E                          1152                   
0000162E  6700 FE36               1153                   BEQ      NOP_OPCODE       *Branch to NOP_CODE if the opcode is NOP
00001632                          1154                   
00001632                          1155                   
00001632  B07C 0E75               1156                   CMP.W    #$E75, D0      *if D0 holds E75, the opcode is RTS
00001636                          1157                   
00001636  6700 FE3E               1158                   BEQ      RTS_OPCODE       *Branch to RTS_CODE if the opcode is RTS
0000163A                          1159                   
0000163A                          1160                   
0000163A  4280                    1161                   CLR.L D0                *clear D0
0000163C                          1162                   
0000163C                          1163                   
0000163C  4281                    1164                   CLR.L D1                *clear D1
0000163E                          1165                   
0000163E                          1166                   
0000163E  3015                    1167                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001640                          1168  
00001640                          1169  
00001640  123C 0004               1170                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
00001644                          1171  
00001644                          1172  
00001644  E368                    1173                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
00001646                          1174                   
00001646  123C 000C               1175                   MOVE.B  #12,D1           *12 bits is the number of times to shift to hold the 4th-8th bits (counting left to right, non-inclusive)
0000164A                          1176  
0000164A  E268                    1177                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds 4th-8th bits (counting left to right, non-inclusive)
0000164C                          1178                   
0000164C  B07C 0002               1179                   CMP.W    #$2, D0        *if D0 holds #2, the opcode is CLR
00001650                          1180                   
00001650  6700 FE6A               1181                   BEQ      CLR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
00001654                          1182                   
00001654                          1183          
00001654  B07C 000E               1184                   CMP.W    #$E, D0        *if D0 holds $E = 14, the opcode is JSR
00001658                          1185                   
00001658  6700 FE2C               1186                   BEQ      JSR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
0000165C                          1187                   
0000165C                          1188                   
0000165C  6000 00C0               1189                   BRA      MOVEM_OPCODE     *else it is a MOVEM
00001660                          1190  
00001660                          1191      
00001660                          1192  
00001660                          1193  
00001660                          1194  
00001660                          1195  -------------------- end include --------------------
00001660                          1196                  INCLUDE 'MULS_AND.X68'
00001660                          1197   
00001660  4EB9 00001FF6           1198  MULS_AND         JSR      GET_SIZE_PURPLE
00001666                          1199                                              
00001666  BA3C 0003               1200                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
0000166A                          1201                   
0000166A  6700 0008               1202                   BEQ      MULS_CODE
0000166E                          1203                   
0000166E  4EF9 000016B2           1204                   JMP      AND_CODE
00001674                          1205                   
00001674                          1206  MULS_CODE
00001674                          1207                   * OP_CODE message
00001674  43F9 00002687           1208                   LEA MULS_MESSAGE, A1
0000167A                          1209                   
0000167A  103C 000E               1210                   MOVE.B #14, D0
0000167E                          1211                   
0000167E  4E4F                    1212                   TRAP #15
00001680                          1213  
00001680  43F9 000026C1           1214                   LEA      SIZE_W_PRINT,    A1
00001686                          1215                   
00001686  103C 000E               1216                   MOVE.B   #14,             D0
0000168A                          1217          
0000168A  4E4F                    1218                   TRAP #15
0000168C                          1219                   
0000168C  4EB9 00002076           1220                   JSR     Set_Ea
00001692                          1221                   
00001692  4EB9 00002336           1222                   JSR     PRINT_EA *by using jmp table
00001698                          1223                   
00001698  4EB9 00002056           1224                   JSR     PRINT_COMMA
0000169E                          1225                   
0000169E                          1226                    * for the first Dn 
0000169E  4EB9 00002064           1227                   JSR     GET_Data_Register
000016A4                          1228                   
000016A4  1C3C 0000               1229                   MOVE.B  #%000, D6 * for mode
000016A8                          1230  
000016A8  4EB9 00002336           1231                   JSR     PRINT_EA *by using jmp table
000016AE                          1232  
000016AE  4EF8 10F0               1233                   JMP      PARSE_MEMORY
000016B2                          1234  
000016B2                          1235  AND_CODE
000016B2                          1236                   * OP_CODE message
000016B2  43F9 0000268D           1237                   LEA AND_MESSAGE, A1
000016B8  103C 000E               1238                   MOVE.B #14, D0
000016BC  4E4F                    1239                   TRAP #15
000016BE                          1240                   
000016BE  4EB9 0000200C           1241                   JSR PRINTOUT_SIZE_PURPLE
000016C4                          1242                   
000016C4                          1243                     * check for dn and ea
000016C4  4280                    1244                   CLR.L D0                *clear D0
000016C6                          1245                   
000016C6  4281                    1246                   CLR.L D1                *clear D1
000016C8                          1247                   
000016C8  3015                    1248                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000016CA                          1249                   
000016CA  0800 0008               1250                   BTST    #8, D0
000016CE                          1251                   
000016CE  6700 0028               1252                   BEQ     AND_FIRST_EA
000016D2                          1253                   
000016D2                          1254                   * for the first Dn 
000016D2  4EB9 00002064           1255                   JSR     GET_Data_Register
000016D8                          1256                   
000016D8  1C3C 0000               1257                   MOVE.B  #%000, D6 * for mode
000016DC                          1258                   
000016DC  4EB9 00002336           1259                   JSR     PRINT_EA *by using jmp table
000016E2                          1260                   
000016E2  4EB9 00002056           1261                   JSR     PRINT_COMMA
000016E8                          1262                   
000016E8  4EB9 00002076           1263                   JSR     Set_Ea
000016EE                          1264                   
000016EE  4EB9 00002336           1265                   JSR     PRINT_EA *by using jmp table
000016F4                          1266                   
000016F4  4EF8 10F0               1267                   JMP      PARSE_MEMORY
000016F8                          1268                   
000016F8                          1269  AND_FIRST_EA
000016F8  4EB9 00002076           1270                   JSR     Set_Ea
000016FE                          1271                   
000016FE  4EB9 00002336           1272                   JSR     PRINT_EA *by using jmp table
00001704                          1273                   
00001704  4EB9 00002056           1274                   JSR     PRINT_COMMA
0000170A                          1275                   
0000170A                          1276                    * for the first Dn 
0000170A  4EB9 00002064           1277                   JSR     GET_Data_Register
00001710                          1278                   
00001710  1C3C 0000               1279                   MOVE.B  #%000, D6 * for mode
00001714                          1280  
00001714  4EB9 00002336           1281                   JSR     PRINT_EA *by using jmp table
0000171A                          1282                   
0000171A  4EF8 10F0               1283                   JMP      PARSE_MEMORY
0000171E                          1284  
0000171E                          1285  
0000171E                          1286  
0000171E                          1287  
0000171E                          1288  
0000171E                          1289  
0000171E                          1290  
0000171E                          1291  
0000171E                          1292  
0000171E                          1293  -------------------- end include --------------------
0000171E                          1294                  INCLUDE 'MOVEM.X68'
0000171E                          1295     
0000171E                          1296  
0000171E                          1297  MOVEM_OPCODE
0000171E                          1298  
0000171E  4280                    1299     CLR.L       D0               *Zero it
00001720                          1300  
00001720  3015                    1301     MOVE.W      (A5), D0     *We'll play with it here
00001722                          1302  
00001722  43F9 0000261B           1303     LEA MOVEM_MESSAGE, A1
00001728                          1304            
00001728  103C 000E               1305     MOVE.B #14, D0
0000172C                          1306                   
0000172C  4E4F                    1307     TRAP #15    
0000172E                          1308  
0000172E  3015                    1309    MOVE.W     (A5), D0
00001730                          1310  
00001730  0800 0006               1311    BTST       #6,  D0      
00001734                          1312  
00001734  6600 0012               1313    BNE        PRINT_SIZE_L_MOVEM
00001738                          1314  
00001738  43F9 000026C1           1315    LEA SIZE_W_PRINT, A1
0000173E                          1316            
0000173E  103C 000E               1317    MOVE.B #14, D0
00001742                          1318                   
00001742  4E4F                    1319    TRAP #15    
00001744                          1320   
00001744  6000 000E               1321    BRA          DR_FIELD
00001748                          1322      
00001748                          1323    * Print out size for W
00001748                          1324  PRINT_SIZE_L_MOVEM
00001748                          1325  
00001748  43F9 000026C7           1326    LEA SIZE_L_PRINT, A1
0000174E                          1327            
0000174E  103C 000E               1328    MOVE.B #14, D0
00001752                          1329                   
00001752  4E4F                    1330    TRAP #15    
00001754                          1331  
00001754                          1332  DR_FIELD
00001754                          1333                 
00001754  0800 000A               1334    BTST        #10,  D0    * BIT TEST
00001758                          1335  
00001758  6700 000C               1336    BEQ         Regitset_Memory *if D0 holds a 1
0000175C                          1337  
0000175C  6000 0050               1338    BRA         Memory_Register *If D0 hollds a 0
00001760                          1339  
00001760  4284                    1340    CLR.L D4
00001762                          1341  
00001762  183C 000F               1342    MOVE.B #15, D4
00001766                          1343  
00001766                          1344  Regitset_Memory
00001766  361D                    1345      MOVE.W      (A5)+, D3
00001768                          1346      
00001768  183C 000F               1347      MOVE.B      #15, D4
0000176C                          1348      
0000176C  4EB9 000019AC           1349      JSR         LOOP_MOVEM
00001772                          1350      
00001772  43F9 000026ED           1351      LEA COMMA, A1
00001778                          1352      
00001778  103C 000E               1353      MOVE.B      #14, D0
0000177C                          1354      
0000177C  4E4F                    1355      TRAP #15
0000177E                          1356      
0000177E  4EB9 00001788           1357      JSR PRINT_ADDRESS
00001784                          1358      
00001784  6000 F96A               1359      BRA PARSE_MEMORY
00001788                          1360  
00001788                          1361  PRINT_ADDRESS 
00001788  303C 0606               1362      MOVE.W      #example, D0
0000178C                          1363  
0000178C  123C 000A               1364      MOVE.B      #10, D1
00001790                          1365      
00001790  E368                    1366      LSL.W       D1, D0
00001792                          1367      
00001792  123C 000D               1368      MOVE.B      #13, D1
00001796                          1369  
00001796  E268                    1370      LSR.W       D1, D0
00001798                          1371      
00001798  1C00                    1372      MOVE.B      D0, D6
0000179A                          1373      
0000179A  203C 00000606           1374      MOVE.L      #example, D0
000017A0                          1375      
000017A0  E368                    1376      LSL.W       D1, D0
000017A2                          1377      
000017A2  E268                    1378      LSR.W       D1, D0
000017A4                          1379      
000017A4  1E00                    1380      MOVE.B      D0, D7
000017A6                          1381      
000017A6  4EB9 00002336           1382      JSR PRINT_EA
000017AC                          1383      
000017AC  4E75                    1384      RTS
000017AE                          1385  
000017AE                          1386  Memory_Register
000017AE  4EB8 1788               1387      JSR         PRINT_ADDRESS
000017B2                          1388      
000017B2  43F9 000026ED           1389      LEA         COMMA, A1
000017B8                          1390      
000017B8  103C 000E               1391      MOVE.B      #14, D0
000017BC                          1392      
000017BC  4E4F                    1393      TRAP #15
000017BE                          1394      
000017BE  203C 00000606           1395      MOVE.L #example, D0
000017C4                          1396      
000017C4  123C 000A               1397      MOVE.B      #10, D1
000017C8                          1398      
000017C8  E368                    1399      LSL.W       D1, D0
000017CA                          1400  
000017CA  123C 000D               1401      MOVE.B      #13, D1
000017CE                          1402  
000017CE  E268                    1403      LSR.W       D1, D0
000017D0                          1404  
000017D0  B03C 0004               1405      CMP.B       #%100, D0
000017D4                          1406  
000017D4  6700 0012               1407      BEQ         OPPOSITE_LOOP 
000017D8                          1408      
000017D8  361D                    1409      MOVE.W      (A5)+, D3
000017DA                          1410      
000017DA  183C 000F               1411      MOVE.B      #15, D4
000017DE                          1412      
000017DE  4EB9 000019AC           1413      JSR         LOOP_MOVEM
000017E4                          1414      
000017E4  6000 F90A               1415      BRA PARSE_MEMORY
000017E8                          1416  
000017E8                          1417  
000017E8                          1418  OPPOSITE_LOOP
000017E8  4241                    1419      CLR         D1
000017EA                          1420  
000017EA  361D                    1421      MOVE.W      (A5)+, D3
000017EC                          1422      
000017EC  183C 000F               1423      MOVE.B      #15, D4
000017F0                          1424      
000017F0  4EB9 000017F6           1425      JSR OPPOSITE_LOOP_MOVEM
000017F6                          1426          
000017F6                          1427  OPPOSITE_LOOP_MOVEM
000017F6                          1428          
000017F6  0903                    1429      BTST        D4, D3     * BIT TEST
000017F8                          1430  
000017F8  6600 0020               1431      BNE         OPPOSITE_IS_USED_FIRST
000017FC                          1432  
000017FC  5304                    1433      SUB.B       #1, D4
000017FE                          1434      
000017FE                          1435  OPPOSITE_CHECK
000017FE  B83C 0000               1436      CMP.B       #0,  D4
00001802                          1437  
00001802  6700 F8EC               1438      BEQ         PARSE_MEMORY
00001806                          1439  
00001806  60EE                    1440      BRA         OPPOSITE_LOOP_MOVEM
00001808                          1441      
00001808                          1442  OPPOSITE_LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
00001808  0903                    1443      BTST        D4, D3     * BIT TEST
0000180A                          1444  
0000180A  6600 0018               1445      BNE         OPPOSITE_IS_USED
0000180E                          1446  
0000180E  5304                    1447      SUB.B       #1, D4
00001810                          1448      
00001810                          1449  OPPOSITE_CHECK_SECOND
00001810  B83C 0000               1450      CMP.B       #0,  D4
00001814                          1451  
00001814  6700 F8DA               1452      BEQ         PARSE_MEMORY
00001818                          1453  
00001818  60EE                    1454      BRA         OPPOSITE_LOOP_MOVEM_SECOND
0000181A                          1455  
0000181A                          1456  OPPOSITE_IS_USED_FIRST
0000181A  4EB9 0000183A           1457      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
00001820                          1458  
00001820  5304                    1459      SUB.B       #1, D4
00001822                          1460  
00001822  60EC                    1461      BRA         OPPOSITE_CHECK_SECOND
00001824                          1462  
00001824                          1463  
00001824                          1464  OPPOSITE_IS_USED
00001824  43F9 000026D6           1465      LEA         SLASH, A1
0000182A                          1466  
0000182A  103C 000E               1467      MOVE.B      #14, D0
0000182E                          1468  
0000182E  4E4F                    1469      TRAP #15
00001830                          1470      
00001830  4EB9 0000183A           1471      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
00001836                          1472  
00001836  5304                    1473      SUB.B       #1, D4
00001838                          1474  
00001838  60D6                    1475      BRA         OPPOSITE_CHECK_SECOND
0000183A                          1476  
0000183A                          1477      
0000183A                          1478      
0000183A                          1479  OPPOSITE_PRINT_REGISTER_MOVEM
0000183A  41F9 0000184C           1480      LEA        OPPOSITE_jmp_table_MOVEM, A0
00001840  4242                    1481      CLR        D2
00001842  143C 0006               1482      MOVE.B     #6, D2
00001846  C4C4                    1483      MULU       D4, D2                           
00001848  4EF0 2000               1484      JMP        0(A0,D2)   *Jump indirect with index
0000184C                          1485                      
0000184C                          1486  OPPOSITE_jmp_table_MOVEM      
0000184C  4EF9 000018AC           1487      JMP         OPPOSITE_bit0
00001852  4EF9 000018BC           1488                 JMP         OPPOSITE_bit1
00001858  4EF9 000018CC           1489                 JMP         OPPOSITE_bit2
0000185E  4EF9 000018DC           1490                 JMP         OPPOSITE_bit3
00001864  4EF9 000018EC           1491                 JMP         OPPOSITE_bit4
0000186A  4EF9 000018FC           1492                 JMP         OPPOSITE_bit5
00001870  4EF9 0000190C           1493                 JMP         OPPOSITE_bit6
00001876  4EF9 0000191C           1494                 JMP         OPPOSITE_bit7
0000187C  4EF9 0000192C           1495                 JMP         OPPOSITE_bit8
00001882  4EF9 0000193C           1496                 JMP         OPPOSITE_bit9
00001888  4EF9 0000194C           1497                 JMP         OPPOSITE_bit10
0000188E  4EF9 0000195C           1498                 JMP         OPPOSITE_bit11
00001894  4EF9 0000196C           1499                 JMP         OPPOSITE_bit12
0000189A  4EF9 0000197C           1500                 JMP         OPPOSITE_bit13
000018A0  4EF9 0000198C           1501                 JMP         OPPOSITE_bit14
000018A6  4EF9 0000199C           1502                 JMP         OPPOSITE_bit15
000018AC                          1503          
000018AC                          1504   
000018AC                          1505   
000018AC                          1506   
000018AC                          1507  OPPOSITE_bit0    * D0
000018AC  1E3C 0007               1508      MOVE.B    #%111, D7    * REGISTER
000018B0                          1509      
000018B0  1C3C 0001               1510      MOVE.B    #%001, D6    * MODE
000018B4                          1511  
000018B4  4EB9 00002336           1512      JSR        PRINT_EA
000018BA                          1513  
000018BA  4E75                    1514      RTS    
000018BC                          1515  
000018BC                          1516  OPPOSITE_bit1    * D1
000018BC  1E3C 0006               1517      MOVE.B    #%110, D7    * REGISTER
000018C0                          1518      
000018C0  1C3C 0001               1519      MOVE.B    #%001, D6    * MODE
000018C4                          1520  
000018C4  4EB9 00002336           1521      JSR        PRINT_EA
000018CA                          1522  
000018CA  4E75                    1523      RTS    
000018CC                          1524  
000018CC                          1525  OPPOSITE_bit2    * D2
000018CC  1E3C 0005               1526      MOVE.B    #%101, D7    * REGISTER
000018D0                          1527      
000018D0  1C3C 0001               1528      MOVE.B    #%001, D6    * MODE
000018D4                          1529  
000018D4  4EB9 00002336           1530      JSR        PRINT_EA    
000018DA                          1531  
000018DA  4E75                    1532      RTS
000018DC                          1533  
000018DC                          1534  OPPOSITE_bit3    * D3
000018DC  1E3C 0004               1535      MOVE.B    #%100, D7    * REGISTER
000018E0                          1536      
000018E0  1C3C 0001               1537      MOVE.B    #%001, D6    * MODE
000018E4                          1538  
000018E4  4EB9 00002336           1539      JSR        PRINT_EA
000018EA                          1540  
000018EA  4E75                    1541      RTS    
000018EC                          1542  
000018EC                          1543  OPPOSITE_bit4    * D4
000018EC  1E3C 0003               1544      MOVE.B    #%011, D7    * REGISTER
000018F0                          1545  
000018F0  1C3C 0001               1546      MOVE.B    #%001, D6    * MODE
000018F4                          1547  
000018F4  4EB9 00002336           1548      JSR        PRINT_EA
000018FA                          1549  
000018FA  4E75                    1550      RTS    
000018FC                          1551  
000018FC                          1552  
000018FC                          1553  OPPOSITE_bit5    * D5
000018FC  1E3C 0002               1554      MOVE.B    #%010, D7    * REGISTER
00001900                          1555      
00001900  1C3C 0001               1556      MOVE.B    #%001, D6    * MODE
00001904                          1557  
00001904  4EB9 00002336           1558      JSR        PRINT_EA
0000190A                          1559  
0000190A  4E75                    1560      RTS    
0000190C                          1561  
0000190C                          1562  OPPOSITE_bit6    * D6
0000190C  1E3C 0001               1563      MOVE.B    #%001, D7    * REGISTER
00001910                          1564      
00001910  1C3C 0001               1565      MOVE.B    #%001, D6    * MODE
00001914                          1566  
00001914  4EB9 00002336           1567      JSR        PRINT_EA
0000191A                          1568  
0000191A  4E75                    1569      RTS    
0000191C                          1570  
0000191C                          1571  OPPOSITE_bit7    * D7
0000191C  1E3C 0000               1572      MOVE.B    #%000, D7    * REGISTER
00001920                          1573      
00001920  1C3C 0001               1574      MOVE.B    #%001, D6    * MODE
00001924                          1575  
00001924  4EB9 00002336           1576      JSR        PRINT_EA
0000192A                          1577  
0000192A  4E75                    1578      RTS    
0000192C                          1579  
0000192C                          1580  OPPOSITE_bit8    * A0
0000192C  1E3C 0007               1581      MOVE.B    #%111, D7    * REGISTER
00001930                          1582      
00001930  1C3C 0000               1583      MOVE.B    #%000, D6    * MODE
00001934                          1584  
00001934  4EB9 00002336           1585      JSR        PRINT_EA
0000193A                          1586  
0000193A  4E75                    1587      RTS    
0000193C                          1588  
0000193C                          1589  OPPOSITE_bit9    * A1
0000193C  1E3C 0006               1590      MOVE.B    #%110, D7    * REGISTER
00001940                          1591      
00001940  1C3C 0000               1592      MOVE.B    #%000, D6    * MODE
00001944                          1593  
00001944  4EB9 00002336           1594      JSR        PRINT_EA
0000194A                          1595  
0000194A  4E75                    1596      RTS    
0000194C                          1597  
0000194C                          1598  OPPOSITE_bit10    * A2
0000194C  1E3C 0005               1599      MOVE.B    #%101, D7    * REGISTER
00001950                          1600      
00001950  1C3C 0000               1601      MOVE.B    #%000, D6    * MODE
00001954                          1602  
00001954  4EB9 00002336           1603      JSR        PRINT_EA
0000195A                          1604  
0000195A  4E75                    1605      RTS    
0000195C                          1606  
0000195C                          1607  
0000195C                          1608  OPPOSITE_bit11    * A5
0000195C  1E3C 0002               1609      MOVE.B    #%010, D7    * REGISTER
00001960                          1610      
00001960  1C3C 0000               1611      MOVE.B    #%000, D6    * MODE
00001964                          1612  
00001964  4EB9 00002336           1613      JSR        PRINT_EA
0000196A                          1614  
0000196A  4E75                    1615      RTS    
0000196C                          1616  
0000196C                          1617  OPPOSITE_bit12    * A4
0000196C  1E3C 0003               1618      MOVE.B    #%011, D7    * REGISTER
00001970                          1619      
00001970  1C3C 0000               1620      MOVE.B    #%000, D6    * MODE
00001974                          1621  
00001974  4EB9 00002336           1622      JSR        PRINT_EA
0000197A                          1623  
0000197A  4E75                    1624      RTS    
0000197C                          1625  
0000197C                          1626  
0000197C                          1627  OPPOSITE_bit13    * A5
0000197C  1E3C 0002               1628      MOVE.B    #%010, D7    * REGISTER
00001980                          1629      
00001980  1C3C 0000               1630      MOVE.B    #%000, D6    * MODE
00001984                          1631  
00001984  4EB9 00002336           1632      JSR        PRINT_EA
0000198A                          1633  
0000198A  4E75                    1634      RTS    
0000198C                          1635  
0000198C                          1636  
0000198C                          1637  OPPOSITE_bit14     * A6
0000198C  1E3C 0001               1638      MOVE.B    #%001, D7    * REGISTER
00001990                          1639      
00001990  1C3C 0000               1640      MOVE.B    #%000, D6    * MODE
00001994                          1641  
00001994  4EB9 00002336           1642      JSR        PRINT_EA
0000199A                          1643  
0000199A  4E75                    1644      RTS        
0000199C                          1645  
0000199C                          1646  
0000199C                          1647  OPPOSITE_bit15    * A7
0000199C  1E3C 0000               1648      MOVE.B    #%000, D7    * REGISTER
000019A0                          1649      
000019A0  1C3C 0000               1650      MOVE.B    #%000, D6    * MODE
000019A4                          1651  
000019A4  4EB9 00002336           1652      JSR        PRINT_EA
000019AA                          1653  
000019AA  4E75                    1654      RTS    
000019AC                          1655  
000019AC                          1656  
000019AC                          1657  
000019AC                          1658  
000019AC                          1659  
000019AC                          1660  LOOP_MOVEM
000019AC                          1661          
000019AC  0903                    1662      BTST        D4, D3     * BIT TEST
000019AE                          1663  
000019AE  6600 0020               1664      BNE         IS_USED_FIRST
000019B2                          1665  
000019B2  5304                    1666      SUB.B       #1, D4
000019B4                          1667      
000019B4                          1668  CHECK
000019B4  B83C 0000               1669      CMP.B       #0,  D4
000019B8                          1670  
000019B8  6700 F736               1671      BEQ         PARSE_MEMORY
000019BC                          1672  
000019BC  60EE                    1673      BRA         LOOP_MOVEM
000019BE                          1674      
000019BE                          1675  LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
000019BE  0903                    1676      BTST        D4, D3     * BIT TEST
000019C0                          1677  
000019C0  6600 0018               1678      BNE         IS_USED
000019C4                          1679  
000019C4  5304                    1680      SUB.B       #1, D4
000019C6                          1681      
000019C6                          1682  CHECK_SECOND
000019C6  B83C 0000               1683      CMP.B       #0,  D4
000019CA                          1684  
000019CA  6700 F724               1685      BEQ         PARSE_MEMORY
000019CE                          1686  
000019CE  60EE                    1687      BRA         LOOP_MOVEM_SECOND
000019D0                          1688  
000019D0                          1689  IS_USED_FIRST
000019D0  4EB9 000019F0           1690      JSR         PRINT_REGISTER_MOVEM
000019D6                          1691  
000019D6  5304                    1692      SUB.B       #1, D4
000019D8                          1693  
000019D8  60EC                    1694      BRA         CHECK_SECOND
000019DA                          1695  
000019DA                          1696  
000019DA                          1697  IS_USED
000019DA  43F9 000026D6           1698      LEA         SLASH, A1
000019E0                          1699  
000019E0  103C 000E               1700      MOVE.B      #14, D0
000019E4                          1701  
000019E4  4E4F                    1702      TRAP #15
000019E6                          1703      
000019E6  4EB9 000019F0           1704      JSR         PRINT_REGISTER_MOVEM
000019EC                          1705  
000019EC  5304                    1706      SUB.B       #1, D4
000019EE                          1707  
000019EE  60D6                    1708      BRA         CHECK_SECOND
000019F0                          1709  
000019F0                          1710  
000019F0                          1711  
000019F0                          1712  
000019F0                          1713  
000019F0                          1714  PRINT_REGISTER_MOVEM
000019F0  41F9 00001A02           1715      LEA         jmp_table_MOVEM, A0
000019F6  4242                    1716      CLR         D2
000019F8  143C 0006               1717      MOVE.B      #6, D2
000019FC  C4C4                    1718      MULU        D4, D2                           
000019FE  4EF0 2000               1719      JMP         0(A0,D2)   *Jump indirect with index
00001A02                          1720                      
00001A02                          1721  jmp_table_MOVEM      
00001A02  4EF9 00001A62           1722      JMP         bit0
00001A08  4EF9 00001A72           1723                 JMP         bit1
00001A0E  4EF9 00001A80           1724                 JMP         bit2
00001A14  4EF9 00001A90           1725                 JMP         bit3
00001A1A  4EF9 00001AA0           1726                 JMP         bit4
00001A20  4EF9 00001AB0           1727                 JMP         bit5
00001A26  4EF9 00001AC0           1728                 JMP         bit6
00001A2C  4EF9 00001AD0           1729                 JMP         bit7
00001A32  4EF9 00001AE0           1730                 JMP         bit8
00001A38  4EF9 00001AF0           1731                 JMP         bit9
00001A3E  4EF9 00001B00           1732                 JMP         bit10
00001A44  4EF9 00001B10           1733                 JMP         bit11
00001A4A  4EF9 00001B20           1734                 JMP         bit12
00001A50  4EF9 00001B30           1735                 JMP         bit13
00001A56  4EF9 00001B40           1736                 JMP         bit14
00001A5C  4EF9 00001B50           1737                 JMP         bit15
00001A62                          1738          
00001A62                          1739   
00001A62                          1740   
00001A62                          1741   
00001A62                          1742  bit0    * D0
00001A62  1E3C 0000               1743      MOVE.B    #%000, D7    * REGISTER
00001A66                          1744      
00001A66  1C3C 0000               1745      MOVE.B    #%000, D6    * MODE
00001A6A                          1746  
00001A6A  4EB9 00002336           1747      JSR        PRINT_EA
00001A70                          1748  
00001A70  4E75                    1749      RTS    
00001A72                          1750  
00001A72                          1751  bit1    * D1
00001A72  1E3C 0001               1752      MOVE.B    #%001, D7    * REGISTER
00001A76                          1753      
00001A76  1C3C 0000               1754      MOVE.B    #%000, D6    * MODE
00001A7A                          1755  
00001A7A  4EB9 00002336           1756      JSR        PRINT_EA
00001A80                          1757  
00001A80                          1758  RTS    
00001A80                          1759  
00001A80                          1760  bit2    * D2
00001A80  1E3C 0002               1761      MOVE.B    #%010, D7    * REGISTER
00001A84                          1762      
00001A84  1C3C 0000               1763      MOVE.B    #%000, D6    * MODE
00001A88                          1764  
00001A88  4EB9 00002336           1765      JSR        PRINT_EA    
00001A8E                          1766  
00001A8E  4E75                    1767      RTS
00001A90                          1768  
00001A90                          1769  bit3    * D3
00001A90  1E3C 0003               1770      MOVE.B    #%011, D7    * REGISTER
00001A94                          1771      
00001A94  1C3C 0000               1772      MOVE.B    #%000, D6    * MODE
00001A98                          1773  
00001A98  4EB9 00002336           1774      JSR        PRINT_EA
00001A9E                          1775  
00001A9E  4E75                    1776      RTS    
00001AA0                          1777  
00001AA0                          1778  bit4    * D4
00001AA0  1E3C 0007               1779      MOVE.B    #%111, D7    * REGISTER
00001AA4                          1780  
00001AA4  1C3C 0000               1781      MOVE.B    #%000, D6    * MODE
00001AA8                          1782  
00001AA8  4EB9 00002336           1783      JSR        PRINT_EA
00001AAE                          1784  
00001AAE  4E75                    1785      RTS    
00001AB0                          1786  
00001AB0                          1787  
00001AB0                          1788  bit5    * D5
00001AB0  1E3C 0005               1789      MOVE.B    #%101, D7    * REGISTER
00001AB4                          1790      
00001AB4  1C3C 0000               1791      MOVE.B    #%000, D6    * MODE
00001AB8                          1792  
00001AB8  4EB9 00002336           1793      JSR        PRINT_EA
00001ABE                          1794  
00001ABE  4E75                    1795      RTS    
00001AC0                          1796  
00001AC0                          1797  bit6    * D6
00001AC0  1E3C 0006               1798      MOVE.B    #%110, D7    * REGISTER
00001AC4                          1799      
00001AC4  1C3C 0000               1800      MOVE.B    #%000, D6    * MODE
00001AC8                          1801  
00001AC8  4EB9 00002336           1802      JSR        PRINT_EA
00001ACE                          1803  
00001ACE  4E75                    1804      RTS    
00001AD0                          1805  
00001AD0                          1806  bit7    * D7
00001AD0  1E3C 0007               1807      MOVE.B    #%111, D7    * REGISTER
00001AD4                          1808      
00001AD4  1C3C 0000               1809      MOVE.B    #%000, D6    * MODE
00001AD8                          1810  
00001AD8  4EB9 00002336           1811      JSR        PRINT_EA
00001ADE                          1812  
00001ADE  4E75                    1813      RTS    
00001AE0                          1814  
00001AE0                          1815  bit8    * A0
00001AE0  1E3C 0000               1816      MOVE.B    #%000, D7    * REGISTER
00001AE4                          1817      
00001AE4  1C3C 0001               1818      MOVE.B    #%001, D6    * MODE
00001AE8                          1819  
00001AE8  4EB9 00002336           1820      JSR        PRINT_EA
00001AEE                          1821  
00001AEE  4E75                    1822      RTS    
00001AF0                          1823  
00001AF0                          1824  bit9    * A1
00001AF0  1E3C 0001               1825      MOVE.B    #%001, D7    * REGISTER
00001AF4                          1826      
00001AF4  1C3C 0001               1827      MOVE.B    #%001, D6    * MODE
00001AF8                          1828  
00001AF8  4EB9 00002336           1829      JSR        PRINT_EA
00001AFE                          1830  
00001AFE  4E75                    1831      RTS    
00001B00                          1832  
00001B00                          1833  bit10    * A2
00001B00  1E3C 0002               1834      MOVE.B    #%010, D7    * REGISTER
00001B04                          1835      
00001B04  1C3C 0001               1836      MOVE.B    #%001, D6    * MODE
00001B08                          1837  
00001B08  4EB9 00002336           1838      JSR        PRINT_EA
00001B0E                          1839  
00001B0E  4E75                    1840      RTS    
00001B10                          1841  
00001B10                          1842  
00001B10                          1843  bit11    * A5
00001B10  1E3C 0003               1844      MOVE.B    #%011, D7    * REGISTER
00001B14                          1845      
00001B14  1C3C 0001               1846      MOVE.B    #%001, D6    * MODE
00001B18                          1847  
00001B18  4EB9 00002336           1848      JSR        PRINT_EA
00001B1E                          1849  
00001B1E  4E75                    1850      RTS    
00001B20                          1851  
00001B20                          1852  bit12    * A4
00001B20  1E3C 0004               1853      MOVE.B    #%100, D7    * REGISTER
00001B24                          1854      
00001B24  1C3C 0001               1855      MOVE.B    #%001, D6    * MODE
00001B28                          1856  
00001B28  4EB9 00002336           1857      JSR        PRINT_EA
00001B2E                          1858  
00001B2E  4E75                    1859      RTS    
00001B30                          1860  
00001B30                          1861  
00001B30                          1862  bit13    * A5
00001B30  1E3C 0005               1863      MOVE.B    #%101, D7    * REGISTER
00001B34                          1864      
00001B34  1C3C 0001               1865      MOVE.B    #%001, D6    * MODE
00001B38                          1866  
00001B38  4EB9 00002336           1867      JSR        PRINT_EA
00001B3E                          1868  
00001B3E  4E75                    1869      RTS    
00001B40                          1870  
00001B40                          1871  
00001B40                          1872  bit14     * A6
00001B40  1E3C 0006               1873      MOVE.B    #%110, D7    * REGISTER
00001B44                          1874      
00001B44  1C3C 0001               1875      MOVE.B    #%001, D6    * MODE
00001B48                          1876  
00001B48  4EB9 00002336           1877      JSR        PRINT_EA
00001B4E                          1878  
00001B4E  4E75                    1879      RTS        
00001B50                          1880  
00001B50                          1881  
00001B50                          1882  bit15    * A7
00001B50  1E3C 0007               1883      MOVE.B    #%111, D7    * REGISTER
00001B54                          1884      
00001B54  1C3C 0001               1885      MOVE.B    #%001, D6    * MODE
00001B58                          1886  
00001B58  4EB9 00002336           1887      JSR        PRINT_EA
00001B5E                          1888  
00001B5E  4E75                    1889      RTS    
00001B60                          1890  
00001B60                          1891  DONE_MOVEM_LOOP
00001B60  4E75                    1892      RTS
00001B62                          1893  
00001B62                          1894     * SIMHALT             ; halt simulator
00001B62                          1895      *INCLUDE 'MESSAGE_Data.X68'
00001B62                          1896     * INCLUDE 'JUMPTABLE EA.X68'
00001B62                          1897  
00001B62                          1898  
00001B62                          1899     * END    START        ; last line of source
00001B62                          1900  
00001B62                          1901  
00001B62                          1902  
00001B62                          1903  
00001B62                          1904  
00001B62                          1905  
00001B62                          1906  
00001B62                          1907  
00001B62                          1908  
00001B62                          1909  
00001B62                          1910  
00001B62                          1911  
00001B62                          1912  
00001B62                          1913  
00001B62                          1914  
00001B62                          1915  
00001B62                          1916  
00001B62                          1917  
00001B62                          1918  
00001B62                          1919  
00001B62                          1920  
00001B62                          1921  
00001B62                          1922  
00001B62                          1923  
00001B62                          1924  
00001B62                          1925  
00001B62                          1926  
00001B62                          1927  
00001B62                          1928  
00001B62                          1929  
00001B62                          1930  
00001B62                          1931  
00001B62                          1932  
00001B62                          1933  
00001B62                          1934  
00001B62                          1935  
00001B62                          1936  
00001B62                          1937  -------------------- end include --------------------
00001B62                          1938                  INCLUDE 'MOVEQ.X68'
00001B62                          1939  
00001B62                          1940  MOVEQ 
00001B62                          1941  
00001B62                          1942                   * ADD message
00001B62  43F9 0000266C           1943                   LEA      MOVEQ_MESSAGE,    A1
00001B68  103C 000E               1944                   MOVE.B   #14,            D0
00001B6C  4E4F                    1945                   TRAP #15
00001B6E                          1946                   
00001B6E                          1947                   * print out size L
00001B6E  43F9 000026C7           1948                   LEA      SIZE_L_PRINT,    A1
00001B74  103C 000E               1949                   MOVE.B   #14,             D0          
00001B78  4E4F                    1950                   TRAP #15   
00001B7A                          1951                   
00001B7A                          1952                   * print out immediate Data
00001B7A                          1953                   
00001B7A  43F9 000026CD           1954                  LEA     POUND_SIGN, A1
00001B80                          1955              
00001B80  103C 000E               1956                  MOVE.B  #14, D0
00001B84                          1957              
00001B84  4E4F                    1958                  TRAP #15
00001B86                          1959              
00001B86  43F9 000026CF           1960                  LEA     HEX_SIGN, A1
00001B8C                          1961              
00001B8C  4E4F                    1962                  TRAP #15
00001B8E                          1963  
00001B8E                          1964                   
00001B8E  4280                    1965                  CLR.L       D0              *Zero it
00001B90                          1966  
00001B90  303C 0606               1967                  MOVE.W      #example,D0     *We'll play with it here
00001B94                          1968                 
00001B94  123C 0008               1969                  MOVE.B      #8, D1
00001B98                          1970                 
00001B98  E368                    1971                  LSL.W       D1, D0
00001B9A                          1972  
00001B9A  123C 0008               1973                  MOVE.B      #8,D1       *Shift 12 bits to the right  
00001B9E                          1974  
00001B9E  E268                    1975                  LSR.W       D1,D0           *Move the bits
00001BA0                          1976  
00001BA0  4285                    1977                  CLR.L D5
00001BA2                          1978                 
00001BA2  3A00                    1979                  MOVE.W D0, D5      
00001BA4                          1980          
00001BA4  4EB9 00002298           1981                  JSR         HEX_TO_ASCII
00001BAA                          1982  
00001BAA                          1983                   
00001BAA                          1984                  * for the first Dn 
00001BAA  4286                    1985                  CLR.L D6
00001BAC  4EB9 00002064           1986                  JSR     GET_Data_Register
00001BB2  1C3C 0000               1987                  MOVE.B  #%000, D6 * for mode
00001BB6                          1988                   
00001BB6  4EB9 00002336           1989                  JSR     PRINT_EA *by using jmp table
00001BBC                          1990                   
00001BBC                          1991          
00001BBC                          1992  
00001BBC                          1993  
00001BBC                          1994  
00001BBC                          1995  
00001BBC                          1996  
00001BBC                          1997  
00001BBC                          1998  
00001BBC                          1999  
00001BBC                          2000  
00001BBC                          2001  
00001BBC                          2002  -------------------- end include --------------------
00001BBC                          2003                  INCLUDE 'DAMIAN_OP_CODE.X68'
00001BBC  4280                    2004  SHIFTS           CLR.L D0
00001BBE                          2005  
00001BBE  4281                    2006                   CLR.L D1
00001BC0                          2007                   
00001BC0  3015                    2008                   MOVE.W (A5),D0
00001BC2                          2009                   
00001BC2  E948                    2010                   LSL.W #4,D0            *shift out the opcode
00001BC4                          2011                   
00001BC4  123C 000D               2012                   MOVE.B #13,D1          
00001BC8                          2013                   
00001BC8  E268                    2014                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there
00001BCA                          2015                   
00001BCA  B03C 0001               2016                   CMP.B #1,D0            
00001BCE                          2017                   
00001BCE  6700 000E               2018                   BEQ LSD                *if the bits are 1, it is a logical shift
00001BD2                          2019                   
00001BD2  B03C 0003               2020                   CMP.B #3,D0
00001BD6                          2021                   
00001BD6  6700 0080               2022                   BEQ ROD                *if the bits are 3, it is a rotation
00001BDA                          2023                   
00001BDA  6000 00F6               2024                   BRA ASD                *if it is not equal to 1 or 3, it is arithmetic shift
00001BDE                          2025                   
00001BDE                          2026  
00001BDE  4280                    2027  LSD              CLR.L D0               *still need to do checks, since an asd shift could still be a possibility
00001BE0                          2028                   
00001BE0  4281                    2029                   CLR.L D1
00001BE2                          2030                   
00001BE2  3015                    2031                   MOVE.W (A5),D0
00001BE4                          2032                   
00001BE4  E148                    2033                   LSL.W #8,D0
00001BE6                          2034                   
00001BE6  123C 000E               2035                   MOVE.B #14,D1
00001BEA                          2036                   
00001BEA  E268                    2037                   LSR.W D1,D0
00001BEC                          2038                   
00001BEC  B03C 0003               2039                   CMP.B #3,D0            *need to check the two bits after the direction 
00001BF0                          2040                   
00001BF0  6600 00E0               2041                   BNE ASD                *if the two bits are not 3, it is an arithmetic shift
00001BF4                          2042                   
00001BF4  3015                    2043                   MOVE.W (A5), D0
00001BF6                          2044                   
00001BF6  EF48                    2045                   LSL.W  #7, D0
00001BF8                          2046                   
00001BF8  123C 000F               2047                   MOVE.B #15, D1
00001BFC                          2048                   
00001BFC  E268                    2049                   LSR.W  D1, D0
00001BFE                          2050                   
00001BFE  B03C 0001               2051                   CMP.B  #1, D0
00001C02                          2052                   
00001C02  6700 0006               2053                   BEQ LSL
00001C06                          2054                   
00001C06  6000 0024               2055                   BRA LSR
00001C0A                          2056                   
00001C0A                          2057  
00001C0A                          2058  LSL
00001C0A  43F9 0000269D           2059                   LEA LSL_MESSAGE, A1    * print message
00001C10                          2060                   
00001C10  103C 000E               2061                   MOVE.B #14, D0
00001C14                          2062                   
00001C14  4E4F                    2063                   TRAP #15
00001C16                          2064              
00001C16  2015                    2065                   MOVE.L (A5), D0
00001C18                          2066                   
00001C18  E148                    2067                   LSL.W #8, D0
00001C1A                          2068                   
00001C1A  123C 000E               2069                   MOVE.B #14, D1
00001C1E                          2070                   
00001C1E  E268                    2071                   LSR.W D1, D0
00001C20                          2072                   
00001C20  B03C 0003               2073                   CMP.B  #%11, D0        * check to see if it is memory and not register shift
00001C24                          2074                   
00001C24  6700 0028               2075                   BEQ LSD_MEMORY
00001C28                          2076                   
00001C28  6000 010C               2077                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001C2C                          2078  
00001C2C                          2079  LSR              
00001C2C  43F9 000026AC           2080                   LEA LSR_MESSAGE, A1            * print message
00001C32                          2081                   
00001C32  103C 000E               2082                   MOVE.B #14, D0
00001C36                          2083                   
00001C36  4E4F                    2084                   TRAP #15
00001C38                          2085          
00001C38  2015                    2086                   MOVE.L (A5), D0
00001C3A                          2087                   
00001C3A  E148                    2088                   LSL.W #8, D0
00001C3C                          2089                   
00001C3C  123C 000E               2090                   MOVE.B #14, D1
00001C40                          2091                   
00001C40  E268                    2092                   LSR.W D1, D0
00001C42                          2093                   
00001C42  B03C 0003               2094                   CMP.B  #%11, D0            * check to see if memory shift
00001C46                          2095                   
00001C46  6700 0006               2096                   BEQ LSD_MEMORY
00001C4A                          2097                   
00001C4A  6000 00EA               2098                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001C4E                          2099                   
00001C4E                          2100  LSD_MEMORY
00001C4E  4EB9 00001DDC           2101                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001C54                          2102                   
00001C54  6000 F49A               2103                   BRA PARSE_MEMORY
00001C58                          2104              
00001C58                          2105  
00001C58  4280                    2106  ROD              CLR.L D0               *same check as logical shift, since an arithmetic shift could still be possible
00001C5A                          2107                   
00001C5A  4281                    2108                   CLR.L D1
00001C5C                          2109                   
00001C5C  3015                    2110                   MOVE.W (A5),D0
00001C5E                          2111                   
00001C5E  E148                    2112                   LSL.W #8,D0
00001C60                          2113                   
00001C60  123C 000E               2114                   MOVE.B #14,D1
00001C64                          2115                   
00001C64  E268                    2116                   LSR.W D1,D0
00001C66                          2117                   
00001C66  B03C 0003               2118                   CMP.B #3,D0
00001C6A                          2119                   
00001C6A  6600 0066               2120                   BNE ASD
00001C6E                          2121                   
00001C6E  2015                    2122                   MOVE.L (A5), D0
00001C70                          2123                   
00001C70  EF48                    2124                   LSL.W  #7, D0
00001C72                          2125                   
00001C72  123C 000F               2126                   MOVE.B #15, D1
00001C76                          2127                   
00001C76  E268                    2128                   LSR.W  D1, D0
00001C78                          2129                   
00001C78  B03C 0001               2130                   CMP.B  #1, D0
00001C7C                          2131                   
00001C7C  6700 0006               2132                   BEQ ROL
00001C80                          2133                   
00001C80  6000 0024               2134                   BRA ROR
00001C84                          2135  
00001C84                          2136  ROL              
00001C84  43F9 000026A7           2137                   LEA ROL_MESSAGE, A1
00001C8A                          2138                   
00001C8A  103C 000E               2139                   MOVE.B #14, D0
00001C8E                          2140                   
00001C8E  4E4F                    2141                   TRAP #15
00001C90                          2142  
00001C90  2015                    2143                   MOVE.L (A5), D0
00001C92                          2144                   
00001C92  E148                    2145                   LSL.W #8, D0
00001C94                          2146                   
00001C94  123C 000E               2147                   MOVE.B #14, D1
00001C98                          2148                   
00001C98  E268                    2149                   LSR.W D1, D0
00001C9A                          2150                   
00001C9A  B03C 0003               2151                   CMP.B  #%11, D0            * check to see if its memory shift
00001C9E                          2152                   
00001C9E  6700 0028               2153                   BEQ ROD_MEMORY
00001CA2                          2154                   
00001CA2  6000 0092               2155                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001CA6                          2156  
00001CA6                          2157  ROR       
00001CA6  43F9 000026B6           2158                   LEA ROR_MESSAGE, A1
00001CAC                          2159                   
00001CAC  103C 000E               2160                   MOVE.B #14, D0
00001CB0                          2161                   
00001CB0  4E4F                    2162                   TRAP #15
00001CB2                          2163                   
00001CB2  2015                    2164                   MOVE.L (A5), D0
00001CB4                          2165                   
00001CB4  E148                    2166                   LSL.W #8, D0
00001CB6                          2167                   
00001CB6  123C 000E               2168                   MOVE.B #14, D1
00001CBA                          2169                   
00001CBA  E268                    2170                   LSR.W D1, D0
00001CBC                          2171                   
00001CBC  B03C 0003               2172                   CMP.B  #%11, D0            * check to see if its memory shift
00001CC0                          2173                   
00001CC0  6700 0006               2174                   BEQ ROD_MEMORY
00001CC4                          2175                   
00001CC4  6000 0070               2176                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001CC8                          2177  
00001CC8                          2178  ROD_MEMORY       
00001CC8  4EB9 00001DDC           2179                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001CCE                          2180                   
00001CCE  6000 F420               2181                   BRA PARSE_MEMORY
00001CD2                          2182                   
00001CD2                          2183                   
00001CD2  2015                    2184  ASD              MOVE.L (A5), D0
00001CD4                          2185                   
00001CD4  EF48                    2186                   LSL.W  #7, D0
00001CD6                          2187                   
00001CD6  123C 000F               2188                   MOVE.B #15, D1
00001CDA                          2189                   
00001CDA  E268                    2190                   LSR.W  D1, D0
00001CDC                          2191                   
00001CDC  B03C 0001               2192                   CMP.B  #1, D0
00001CE0                          2193                   
00001CE0  6700 0006               2194                   BEQ ASL
00001CE4                          2195                   
00001CE4  6000 0024               2196                   BRA ASR
00001CE8                          2197                   
00001CE8                          2198  ASL
00001CE8  43F9 000026A2           2199                   LEA ASL_MESSAGE, A1
00001CEE                          2200                   
00001CEE  103C 000E               2201                   MOVE.B #14, D0
00001CF2                          2202                   
00001CF2  4E4F                    2203                   TRAP #15
00001CF4                          2204                   
00001CF4  2015                    2205                   MOVE.L (A5), D0
00001CF6                          2206                   
00001CF6  E148                    2207                   LSL.W #8, D0
00001CF8                          2208                   
00001CF8  123C 000E               2209                   MOVE.B #14, D1
00001CFC                          2210                   
00001CFC  E268                    2211                   LSR.W D1, D0
00001CFE                          2212                   
00001CFE  B03C 0003               2213                   CMP.B  #%11, D0            * check to see if its memory shift
00001D02                          2214                   
00001D02  6700 0028               2215                   BEQ ASD_MEMORY
00001D06                          2216                   
00001D06  6000 002E               2217                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001D0A                          2218                                    
00001D0A                          2219  
00001D0A                          2220  ASR              
00001D0A  43F9 000026B1           2221                   LEA ASR_MESSAGE, A1
00001D10                          2222                   
00001D10  103C 000E               2223                   MOVE.B #14, D0
00001D14                          2224                   
00001D14  4E4F                    2225                   TRAP #15
00001D16                          2226                   
00001D16  2015                    2227                   MOVE.L (A5), D0
00001D18                          2228                   
00001D18  E148                    2229                   LSL.W #8, D0
00001D1A                          2230                   
00001D1A  123C 000E               2231                   MOVE.B #14, D1
00001D1E                          2232                   
00001D1E  E268                    2233                   LSR.W D1, D0
00001D20                          2234                   
00001D20  B03C 0003               2235                   CMP.B  #%11, D0            * check to see if its memory shift
00001D24                          2236                   
00001D24  6700 0006               2237                   BEQ ASD_MEMORY
00001D28                          2238                   
00001D28  6000 000C               2239                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001D2C                          2240  
00001D2C                          2241  ASD_MEMORY
00001D2C  4EB9 00001DDC           2242                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001D32                          2243                   
00001D32  6000 F3BC               2244                   BRA PARSE_MEMORY
00001D36                          2245                   
00001D36                          2246  PRINTOUT_REGISTER_SHIFTS_EA
00001D36  43F9 000026D1           2247                   LEA PERIOD, A1
00001D3C                          2248                   
00001D3C  103C 000E               2249                   MOVE.B #14, D0
00001D40                          2250                   
00001D40  4E4F                    2251                   TRAP #15
00001D42                          2252  
00001D42  2015                    2253                   MOVE.L (A5), D0
00001D44                          2254                   
00001D44  123C 000A               2255                   MOVE.B #10, D1
00001D48                          2256                   
00001D48  E368                    2257                   LSL.W D1, D0
00001D4A                          2258                   
00001D4A  123C 000F               2259                   MOVE.B #15, D1
00001D4E                          2260                   
00001D4E  E268                    2261                   LSR.W D1, D0
00001D50                          2262                   
00001D50  B03C 0001               2263                   CMP.B #1, D0
00001D54                          2264                   
00001D54  6700 004A               2265                   BEQ PRINTOUT_REGISTER
00001D58                          2266                   
00001D58  6000 0002               2267                   BRA PRINTOUT_COUNT
00001D5C                          2268  
00001D5C                          2269                   
00001D5C                          2270  PRINTOUT_COUNT
00001D5C  43F9 000026CD           2271                   LEA POUND_SIGN, A1
00001D62                          2272  
00001D62  103C 000E               2273                   MOVE.B #14, D0
00001D66                          2274  
00001D66  4E4F                    2275                   TRAP #15     
00001D68                          2276                 
00001D68  2015                    2277                   MOVE.L (A5), D0
00001D6A                          2278                   
00001D6A  E948                    2279                   LSL.W #4, D0
00001D6C                          2280                   
00001D6C  123C 000D               2281                   MOVE.B #13, D1
00001D70                          2282                   
00001D70  E268                    2283                   LSR.W D1, D0
00001D72                          2284                   
00001D72  1200                    2285                   MOVE.B D0, D1
00001D74                          2286                   
00001D74  103C 0003               2287                   MOVE.B #3, D0
00001D78                          2288                   
00001D78  4E4F                    2289                   TRAP #15                  * print out the amount that the ea is being shifted by
00001D7A                          2290                   
00001D7A  43F9 000026ED           2291                   LEA COMMA, A1
00001D80                          2292                   
00001D80  103C 000E               2293                   MOVE.B #14, D0
00001D84                          2294                   
00001D84  4E4F                    2295                   TRAP #15
00001D86                          2296                   
00001D86  2015                    2297                   MOVE.L (A5), D0
00001D88                          2298                   
00001D88  123C 000D               2299                   MOVE.B #13, D1                * to print out the ea that is being shifted
00001D8C                          2300                   
00001D8C  E368                    2301                   LSL.W D1, D0
00001D8E                          2302                   
00001D8E  E268                    2303                   LSR.W D1, D0
00001D90                          2304                   
00001D90  1E00                    2305                   MOVE.B D0, D7
00001D92                          2306                   
00001D92  1C3C 0000               2307                   MOVE.B #%000, D6              * we know it is a data register
00001D96                          2308                   
00001D96  4EB9 00002336           2309                   JSR PRINT_EA
00001D9C                          2310                   
00001D9C  6000 F352               2311                   BRA PARSE_MEMORY
00001DA0                          2312                   
00001DA0                          2313  
00001DA0                          2314  PRINTOUT_REGISTER
00001DA0  2015                    2315                   MOVE.L (A5), D0
00001DA2                          2316                   
00001DA2  E948                    2317                   LSL.W #4, D0
00001DA4                          2318                   
00001DA4  123C 000D               2319                   MOVE.B #13, D1
00001DA8                          2320                   
00001DA8  E268                    2321                   LSR.W D1, D0
00001DAA                          2322                   
00001DAA  1E00                    2323                   MOVE.B D0, D7
00001DAC                          2324                   
00001DAC  1C3C 0000               2325                   MOVE.B #%000, D6
00001DB0                          2326                   
00001DB0  4EB9 00002336           2327                   JSR PRINT_EA                  * to print out the data register
00001DB6                          2328                   
00001DB6  43F9 000026ED           2329                   LEA COMMA, A1
00001DBC                          2330                   
00001DBC  103C 000E               2331                   MOVE.B #14, D0
00001DC0                          2332                   
00001DC0  4E4F                    2333                   TRAP #15
00001DC2                          2334                   
00001DC2  2015                    2335                   MOVE.L (A5), D0
00001DC4                          2336                   
00001DC4  123C 000D               2337                   MOVE.B #13, D1                * to print out the ea that is being shifted
00001DC8                          2338                   
00001DC8  E368                    2339                   LSL.W D1, D0
00001DCA                          2340                   
00001DCA  E268                    2341                   LSR.W D1, D0
00001DCC                          2342                   
00001DCC  1E00                    2343                   MOVE.B D0, D7
00001DCE                          2344                   
00001DCE  1C3C 0000               2345                   MOVE.B #%000, D6              * we know it is a data register
00001DD2                          2346                   
00001DD2  4EB9 00002336           2347                   JSR PRINT_EA
00001DD8                          2348                   
00001DD8  6000 F316               2349                   BRA PARSE_MEMORY
00001DDC                          2350                                   
00001DDC                          2351  
00001DDC                          2352  PRINTOUT_MEMORY_SHIFTS_EA   * gets the mode and register of the memory ea, and prints it out
00001DDC  43F9 000026D1           2353                   LEA PERIOD, A1
00001DE2                          2354                   
00001DE2  103C 000E               2355                   MOVE.B #14, D0
00001DE6                          2356                   
00001DE6  4E4F                    2357                   TRAP #15
00001DE8                          2358  
00001DE8  2015                    2359                   MOVE.L (A5), D0
00001DEA                          2360                   
00001DEA  123C 000A               2361                   MOVE.B #10, D1
00001DEE                          2362                   
00001DEE  E368                    2363                   LSL.W D1, D0
00001DF0                          2364                   
00001DF0  123C 000D               2365                   MOVE.B #13, D1
00001DF4                          2366                   
00001DF4  E268                    2367                   LSR.W D1, D0
00001DF6                          2368                   
00001DF6  1C00                    2369                   MOVE.B D0, D6
00001DF8                          2370                   
00001DF8  2015                    2371                   MOVE.L (A5), D0
00001DFA                          2372                   
00001DFA  123C 000D               2373                   MOVE.B #13, D1
00001DFE                          2374                   
00001DFE  E368                    2375                   LSL.W D1, D0
00001E00                          2376                   
00001E00  E268                    2377                   LSR.W D1, D0
00001E02                          2378                   
00001E02  1E00                    2379                   MOVE.B D0, D7
00001E04                          2380                   
00001E04  4EB9 00002336           2381                   JSR PRINT_EA
00001E0A                          2382                   
00001E0A  4E75                    2383                   RTS
00001E0C                          2384                  
00001E0C                          2385                
00001E0C  43F9 00002611           2386  MOVEB            LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00001E12                          2387  
00001E12  4280                    2388                   CLR.L  D0
00001E14                          2389                   
00001E14  103C 000E               2390                   MOVE.B #14, D0
00001E18                          2391                   
00001E18  4E4F                    2392                   TRAP #15
00001E1A                          2393                   
00001E1A  43F9 000026BB           2394                   LEA SIZE_B_PRINT, A1
00001E20                          2395                   
00001E20  4E4F                    2396                   TRAP #15               * done printing opcode and size
00001E22                          2397                   
00001E22  6000 0096               2398                   BRA PRINTOUT_MOVE_EA
00001E26                          2399  
00001E26  4280                    2400  MOVEW            CLR.L D0
00001E28                          2401                   
00001E28  4281                    2402                   CLR.L D1
00001E2A                          2403                   
00001E2A  3015                    2404                   MOVE.W (A5),D0
00001E2C                          2405                   
00001E2C  EF48                    2406                   LSL.W #7,D0
00001E2E                          2407                   
00001E2E  123C 000D               2408                   MOVE.B #13,D1
00001E32                          2409                   
00001E32  E268                    2410                   LSR.W D1,D0
00001E34                          2411                   
00001E34  B03C 0001               2412                   CMP.B #1,D0            *check to see if the mode of the destination is an address register
00001E38                          2413                   
00001E38  6700 004C               2414                   BEQ MOVEAW             *if the destination is an address, it is MOVEA
00001E3C                          2415                   
00001E3C  43F9 00002611           2416                   LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00001E42                          2417                   
00001E42  4280                    2418                   CLR.L D0
00001E44                          2419                   
00001E44  103C 000E               2420                   MOVE.B #14, D0
00001E48                          2421                   
00001E48  4E4F                    2422                   TRAP #15
00001E4A                          2423                   
00001E4A  43F9 000026C1           2424                   LEA SIZE_W_PRINT, A1
00001E50                          2425                   
00001E50  4E4F                    2426                   TRAP #15               * done printing opcode and size
00001E52                          2427                      
00001E52  6000 0066               2428                   BRA PRINTOUT_MOVE_EA
00001E56                          2429                
00001E56                          2430  
00001E56  4280                    2431  MOVEL            CLR.L D0
00001E58                          2432                   
00001E58  4281                    2433                   CLR.L D1
00001E5A                          2434                   
00001E5A  3015                    2435                   MOVE.W (A5),D0
00001E5C                          2436                   
00001E5C  EF48                    2437                   LSL.W #7,D0
00001E5E                          2438                   
00001E5E  123C 000D               2439                   MOVE.B #13,D1
00001E62                          2440                   
00001E62  E268                    2441                   LSR.W D1,D0
00001E64                          2442                   
00001E64  B03C 0001               2443                   CMP.B #1,D0            *check to see if the mode of the destination is equal to 1
00001E68                          2444                   
00001E68  6700 0036               2445                   BEQ MOVEAL             *if the mode is 1, then it is an address register, and the opcode is MOVEA
00001E6C                          2446                   
00001E6C  43F9 00002611           2447                   LEA MOVE_MESSAGE, A1   * printing out opcode and size
00001E72                          2448                   
00001E72  4280                    2449                   CLR.L D0
00001E74                          2450                   
00001E74  103C 000E               2451                   MOVE.B #14, D0
00001E78                          2452                   
00001E78  4E4F                    2453                   TRAP #15
00001E7A                          2454                   
00001E7A  43F9 000026C7           2455                   LEA SIZE_L_PRINT, A1
00001E80                          2456                   
00001E80  4E4F                    2457                   TRAP #15               * done printing opcode and size
00001E82                          2458                   
00001E82  6000 0036               2459                   BRA PRINTOUT_MOVE_EA
00001E86                          2460                   
00001E86                          2461                   
00001E86  43F9 0000260A           2462  MOVEAW           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
00001E8C                          2463  
00001E8C  4280                    2464                   CLR.L D0
00001E8E                          2465                   
00001E8E  103C 000E               2466                   MOVE.B #14, D0
00001E92                          2467                   
00001E92  4E4F                    2468                   TRAP #15
00001E94                          2469                   
00001E94  43F9 000026C1           2470                   LEA SIZE_W_PRINT, A1
00001E9A                          2471                   
00001E9A  4E4F                    2472                   TRAP #15               * done printing out opcode and size
00001E9C                          2473                   
00001E9C  6000 001C               2474                   BRA PRINTOUT_MOVE_EA
00001EA0                          2475  
00001EA0  43F9 0000260A           2476  MOVEAL           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
00001EA6                          2477  
00001EA6  4280                    2478                   CLR.L D0
00001EA8                          2479                   
00001EA8  103C 000E               2480                   MOVE.B #14, D0
00001EAC                          2481                   
00001EAC  4E4F                    2482                   TRAP #15
00001EAE                          2483                   
00001EAE  43F9 000026C7           2484                   LEA SIZE_L_PRINT, A1
00001EB4                          2485                   
00001EB4  4E4F                    2486                   TRAP #15               * done printing out opcode and size
00001EB6                          2487                   
00001EB6  6000 0002               2488                   BRA PRINTOUT_MOVE_EA
00001EBA                          2489  
00001EBA                          2490  PRINTOUT_MOVE_EA
00001EBA  4247                    2491                   CLR    D7 
00001EBC                          2492                   
00001EBC  4246                    2493                   CLR    D6               
00001EBE                          2494                   
00001EBE  3015                    2495                   MOVE.W (A5), D0
00001EC0                          2496                   
00001EC0  123C 000A               2497                   MOVE.B #10, D1
00001EC4                          2498                   
00001EC4  E368                    2499                   LSL.W D1, D0
00001EC6                          2500                   
00001EC6  123C 000D               2501                   MOVE.B #13, D1
00001ECA                          2502                   
00001ECA  E268                    2503                   LSR.W D1, D0
00001ECC                          2504                   
00001ECC  1C00                    2505                   MOVE.B D0, D6          * getting the mode of the second ea
00001ECE                          2506                   
00001ECE  3015                    2507                   MOVE.W (A5), D0
00001ED0                          2508                   
00001ED0  123C 000D               2509                   MOVE.B #13, D1
00001ED4                          2510                   
00001ED4  E368                    2511                   LSL.W D1, D0
00001ED6                          2512                   
00001ED6  E268                    2513                   LSR.W D1, D0
00001ED8                          2514                   
00001ED8  1E00                    2515                   MOVE.B D0, D7          * getting the register of the second ea
00001EDA                          2516                   
00001EDA  4EB9 00002336           2517                   JSR PRINT_EA
00001EE0                          2518                   
00001EE0  43F9 000026ED           2519                   LEA COMMA, A1
00001EE6                          2520                   
00001EE6  103C 000E               2521                   MOVE.B #14, D0
00001EEA                          2522                   
00001EEA  4E4F                    2523                   TRAP #15
00001EEC                          2524                   
00001EEC  3015                    2525                   MOVE.W (A5), D0
00001EEE                          2526                   
00001EEE  E948                    2527                   LSL.W #4, D0
00001EF0                          2528                   
00001EF0  123C 000D               2529                   MOVE.B #13, D1
00001EF4                          2530                   
00001EF4  E268                    2531                   LSR.W D1, D0
00001EF6                          2532                   
00001EF6  1E00                    2533                   MOVE.B D0, D7          * getting the register of the first ea
00001EF8                          2534                   
00001EF8  3015                    2535                   MOVE.W (A5), D0
00001EFA                          2536                   
00001EFA  EF48                    2537                   LSL.W #7, D0
00001EFC                          2538                   
00001EFC  123C 000D               2539                   MOVE.B #13, D1
00001F00                          2540                   
00001F00  E268                    2541                   LSR.W D1, D0
00001F02                          2542                   
00001F02  1C00                    2543                   MOVE.B D0, D6          * getting the mode of the first ea
00001F04                          2544                   
00001F04  4EB9 00002336           2545                   JSR PRINT_EA
00001F0A                          2546                   
00001F0A  6000 F1E4               2547                   BRA PARSE_MEMORY
00001F0E                          2548  
00001F0E                          2549  
00001F0E                          2550  
00001F0E                          2551  
00001F0E                          2552  
00001F0E                          2553  -------------------- end include --------------------
00001F0E                          2554                  INCLUDE 'ADD_ADDA.X68'
00001F0E                          2555    
00001F0E                          2556  
00001F0E                          2557          
00001F0E                          2558  
00001F0E                          2559                  * INCLUDE 'CMP.X68'
00001F0E                          2560                  * INCLUDE 'SUB.X68'
00001F0E                          2561                  * INCLUDE 'DIVU_OR.X68'
00001F0E                          2562                  * INCLUDE 'MULS_AND.X68'
00001F0E                          2563    
00001F0E                          2564  ADD_ADDA  *at this point we know the first 4 bits are 1101 -> ADD or ADDA -> compare the destination opmode
00001F0E                          2565                   
00001F0E  4EB9 00001FF6           2566                   JSR      GET_SIZE_PURPLE
00001F14                          2567                                              
00001F14  BA3C 0003               2568                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is ADDA
00001F18                          2569                   
00001F18  6700 0008               2570                   BEQ      ADDA_CODE
00001F1C                          2571                   
00001F1C  4EF9 00001F8E           2572                   JMP      ADD_CODE
00001F22                          2573                   
00001F22                          2574  ADDA_CODE 
00001F22                          2575                   * ADDA opcode message
00001F22  43F9 00002697           2576                   LEA ADDA_MESSAGE, A1
00001F28                          2577                   
00001F28  103C 000E               2578                   MOVE.B #14, D0
00001F2C                          2579                   
00001F2C  4E4F                    2580                   TRAP #15
00001F2E                          2581                   
00001F2E  4285                    2582                   CLR.L   D5         * clear for the size since this is not for the size purple
00001F30                          2583                   
00001F30  4280                    2584                   CLR.L D0                *clear D0
00001F32                          2585                   
00001F32  4281                    2586                   CLR.L D1                *clear D1
00001F34                          2587                   
00001F34  3010                    2588                   MOVE.W  (A0),D0     *D0 is the binary value to decode
00001F36                          2589                   
00001F36  0800 0008               2590                   BTST    #8, D0
00001F3A                          2591                   
00001F3A  6700 002E               2592                   BEQ     PRINTOUT_SIZE_W
00001F3E                          2593                   
00001F3E  4EF9 00001F7C           2594                   JMP     PRINTOUT_SIZE_L
00001F44                          2595                   
00001F44                          2596  FINISH_PRINTING_SIZE
00001F44                          2597  
00001F44  4EB9 00002076           2598                   JSR     Set_Ea
00001F4A                          2599                   
00001F4A  4EB9 00002336           2600                   JSR     PRINT_EA *by using jmp table
00001F50                          2601                   
00001F50  4EB9 00002056           2602                   JSR     PRINT_COMMA
00001F56                          2603                   
00001F56                          2604                    * for the first Dn 
00001F56  4EB9 00002064           2605                   JSR     GET_Data_Register
00001F5C                          2606                   
00001F5C  1C3C 0001               2607                   MOVE.B  #%001, D6 * for mode
00001F60                          2608  
00001F60  4EB9 00002336           2609                   JSR     PRINT_EA *by using jmp table
00001F66                          2610  
00001F66  4EF8 10F0               2611                   JMP     PARSE_MEMORY
00001F6A                          2612                   
00001F6A                          2613  PRINTOUT_SIZE_W
00001F6A                          2614                   
00001F6A  3A3C 0001               2615                   MOVE    #%01, D5          
00001F6E                          2616                   
00001F6E  43F9 000026C1           2617                   LEA      SIZE_W_PRINT,    A1
00001F74                          2618                   
00001F74  103C 000E               2619                   MOVE.B   #14,             D0
00001F78                          2620          
00001F78  4E4F                    2621                   TRAP #15
00001F7A                          2622                   
00001F7A  60C8                    2623                   BRA     FINISH_PRINTING_SIZE
00001F7C                          2624                   
00001F7C                          2625  PRINTOUT_SIZE_L                           
00001F7C  3A3C 0002               2626                   MOVE    #%10, D5          
00001F80                          2627                   
00001F80  43F9 000026C7           2628                   LEA      SIZE_L_PRINT,    A1
00001F86                          2629                   
00001F86  103C 000E               2630                   MOVE.B   #14,             D0 
00001F8A                          2631         
00001F8A  4E4F                    2632                   TRAP #15
00001F8C                          2633                   
00001F8C  60B6                    2634                   BRA     FINISH_PRINTING_SIZE
00001F8E                          2635  
00001F8E                          2636  ADD_CODE
00001F8E                          2637                   * ADD message
00001F8E  43F9 00002692           2638                   LEA      ADD_MESSAGE,    A1
00001F94  103C 000E               2639                   MOVE.B   #14,            D0
00001F98  4E4F                    2640                   TRAP #15
00001F9A                          2641                   
00001F9A  4EB9 0000200C           2642                   JSR     PRINTOUT_SIZE_PURPLE
00001FA0                          2643                   
00001FA0                          2644                   * check for dn and ea
00001FA0  4280                    2645                   CLR.L D0                *clear D0
00001FA2                          2646                   
00001FA2  4281                    2647                   CLR.L D1                *clear D1
00001FA4                          2648                   
00001FA4  3015                    2649                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001FA6                          2650                   
00001FA6  0800 0008               2651                   BTST    #8, D0
00001FAA                          2652                   
00001FAA  6700 0028               2653                   BEQ     ADD_FIRST_EA
00001FAE                          2654                   
00001FAE                          2655                   * for the first Dn 
00001FAE  4EB9 00002064           2656                   JSR     GET_Data_Register
00001FB4                          2657                   
00001FB4  1C3C 0000               2658                   MOVE.B  #%000, D6 * for mode
00001FB8                          2659                   
00001FB8  4EB9 00002336           2660                   JSR     PRINT_EA *by using jmp table
00001FBE                          2661                   
00001FBE  4EB9 00002056           2662                   JSR     PRINT_COMMA
00001FC4                          2663                   
00001FC4  4EB9 00002076           2664                   JSR     Set_Ea
00001FCA                          2665                   
00001FCA  4EB9 00002336           2666                   JSR     PRINT_EA *by using jmp table
00001FD0                          2667                   
00001FD0  4EF8 10F0               2668                   JMP     PARSE_MEMORY
00001FD4                          2669                   
00001FD4                          2670  ADD_FIRST_EA
00001FD4  4EB9 00002076           2671                   JSR     Set_Ea
00001FDA                          2672                   
00001FDA  4EB9 00002336           2673                   JSR     PRINT_EA *by using jmp table
00001FE0                          2674                   
00001FE0  4EB9 00002056           2675                   JSR     PRINT_COMMA
00001FE6                          2676                   
00001FE6                          2677                    * for the first Dn 
00001FE6  4EB9 00002064           2678                   JSR     GET_Data_Register
00001FEC                          2679                   
00001FEC  1C3C 0000               2680                   MOVE.B  #%000, D6 * for mode
00001FF0                          2681  
00001FF0  4EB9 00002336           2682                   JSR     PRINT_EA *by using jmp table
00001FF6                          2683                   
00001FF6                          2684                   
00001FF6                          2685  GET_SIZE_PURPLE * get the op-code 
00001FF6                          2686  
00001FF6  4280                    2687                   CLR.L D0                *clear D0
00001FF8                          2688                   
00001FF8  4281                    2689                   CLR.L D1                *clear D1
00001FFA                          2690                   
00001FFA  3015                    2691                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001FFC                          2692  
00001FFC  123C 0008               2693                   MOVE.B  #8,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002000                          2694  
00002000  E368                    2695                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002002                          2696                   
00002002  123C 000E               2697                   MOVE.B  #14,D1          *14 bits is the number of times to shift to hold the mode number
00002006                          2698  
00002006  E268                    2699                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
00002008                          2700                   
00002008  1A00                    2701                   MOVE.B  D0, D5          *push the size to the Data register 5 for the future use
0000200A                          2702                   
0000200A  4E75                    2703                   RTS 
0000200C                          2704  
0000200C                          2705  PRINTOUT_SIZE_PURPLE * get the size for ADDI, CLR, ADDQ, OR, SUB, CMP, AND, ADD
0000200C                          2706                       
0000200C  BA7C 0000               2707                   CMP    #%00, D5          
00002010                          2708                   
00002010  6700 0014               2709                   BEQ    PRINT_B
00002014                          2710                   
00002014  BA7C 0001               2711                   CMP    #%01, D5          
00002018                          2712                   
00002018  6700 001C               2713                   BEQ    PRINT_W
0000201C                          2714                   
0000201C  BA7C 0002               2715                   CMP    #%10, D5          
00002020                          2716                   
00002020  6700 0024               2717                   BEQ    PRINT_L
00002024                          2718                   
00002024                          2719  DONE_PRINTING
00002024  4E75                    2720                   RTS 
00002026                          2721                   
00002026                          2722  PRINT_B          
00002026  43F9 000026BB           2723                   LEA      SIZE_B_PRINT,    A1
0000202C  103C 000E               2724                   MOVE.B   #14,            D0          
00002030  4E4F                    2725                   TRAP #15
00002032                          2726  
00002032  4EF8 2024               2727                   JMP      DONE_PRINTING
00002036                          2728                   
00002036                          2729  PRINT_W     
00002036  43F9 000026C1           2730                   LEA      SIZE_W_PRINT,    A1
0000203C  103C 000E               2731                   MOVE.B   #14,             D0          
00002040  4E4F                    2732                   TRAP #15
00002042                          2733  
00002042  4EF8 2024               2734                   JMP      DONE_PRINTING
00002046                          2735  
00002046                          2736  
00002046                          2737  PRINT_L          
00002046  43F9 000026C7           2738                   LEA      SIZE_L_PRINT,    A1
0000204C  103C 000E               2739                   MOVE.B   #14,             D0          
00002050  4E4F                    2740                   TRAP #15   
00002052                          2741                      
00002052  4EF8 2024               2742                   JMP    DONE_PRINTING
00002056                          2743                   
00002056                          2744  PRINT_COMMA
00002056                          2745  
00002056  43F9 000026ED           2746                   LEA COMMA, A1
0000205C  103C 000E               2747                   MOVE.B #14, D0
00002060  4E4F                    2748                   TRAP #15
00002062                          2749                   
00002062  4E75                    2750                   RTS
00002064                          2751                   
00002064                          2752  GET_Data_Register
00002064  4280                    2753                   CLR.L D0                *clear D0
00002066                          2754                   
00002066  4281                    2755                   CLR.L D1                *clear D1
00002068                          2756                   
00002068  3015                    2757                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000206A                          2758  
0000206A  E948                    2759                   LSL.W   #4,D0           *Shift the bits 4 times -> D0 now removes the opcode & reg#
0000206C                          2760                   
0000206C  123C 000D               2761                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00002070                          2762  
00002070  E268                    2763                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00002072                          2764  
00002072  1E00                    2765                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00002074                          2766                   
00002074  4E75                    2767                   RTS
00002076                          2768                   
00002076                          2769  Set_Ea
00002076                          2770  
00002076                          2771                   * set register
00002076  4280                    2772                   CLR.L D0                *clear D0
00002078                          2773                   
00002078  4281                    2774                   CLR.L D1                *clear D1
0000207A                          2775                   
0000207A  3015                    2776                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000207C                          2777                 
0000207C  123C 000D               2778                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002080                          2779  
00002080  E368                    2780                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002082                          2781  
00002082  123C 000D               2782                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00002086                          2783  
00002086  E268                    2784                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00002088                          2785  
00002088  1E00                    2786                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
0000208A                          2787                   
0000208A                          2788                   * set mode
0000208A  4280                    2789                   CLR.L D0                *clear D0
0000208C                          2790                   
0000208C  4281                    2791                   CLR.L D1                *clear D1
0000208E                          2792                   
0000208E  3015                    2793                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002090                          2794                 
00002090  123C 000A               2795                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002094                          2796  
00002094  E368                    2797                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002096                          2798  
00002096  123C 000D               2799                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
0000209A                          2800  
0000209A  E268                    2801                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
0000209C                          2802  
0000209C  1C00                    2803                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
0000209E                          2804                   
0000209E  4E75                    2805                   RTS
000020A0                          2806                   
000020A0                          2807                  
000020A0                          2808  
000020A0                          2809  
000020A0                          2810  
000020A0                          2811  
000020A0                          2812  
000020A0                          2813  
000020A0                          2814  
000020A0                          2815  
000020A0                          2816  
000020A0                          2817  
000020A0                          2818  
000020A0                          2819  
000020A0                          2820  
000020A0                          2821  
000020A0                          2822  
000020A0                          2823  
000020A0                          2824  
000020A0                          2825  -------------------- end include --------------------
000020A0                          2826                  INCLUDE 'BCC.X68'
000020A0                          2827  
000020A0                          2828  
000020A0                          2829  
000020A0                          2830  
000020A0  41F9 000020C0           2831                 LEA         jmp_table_bcc,A0    *Index into the table
000020A6                          2832  
000020A6  4280                    2833                 CLR.L       D0              *Zero it
000020A8                          2834  
000020A8  303C 0606               2835                 MOVE.W      #example,D0     *We'll play with it here
000020AC                          2836                 
000020AC  123C 0004               2837                 MOVE.B      #4, D1
000020B0                          2838                 
000020B0  E368                    2839                 LSL.W       D1, D0
000020B2                          2840  
000020B2  123C 000C               2841                 MOVE.B      #12,D1       *Shift 12 bits to the right  
000020B6                          2842  
000020B6  E268                    2843                 LSR.W       D1,D0           *Move the bits
000020B8                          2844             
000020B8  C0FC 0006               2845                 MULU        #6,D0       *Form offset     
000020BC                          2846  
000020BC  4EF0 0000               2847                 JMP         0(A0,D0)   *Jump indirect with index
000020C0                          2848  
000020C0                          2849                      
000020C0  4EF9 00002120           2850  jmp_table_bcc  JMP         NOT_EXIST
000020C6                          2851  
000020C6  4EF9 00002120           2852                 JMP         NOT_EXIST
000020CC                          2853  
000020CC  4EF9 00002124           2854                 JMP         HI
000020D2                          2855  
000020D2  4EF9 00002128           2856                 JMP         LS
000020D8                          2857  
000020D8  4EF9 0000212C           2858                 JMP         CC
000020DE                          2859  
000020DE  4EF9 00002130           2860                 JMP         CS
000020E4                          2861  
000020E4  4EF9 00002134           2862                 JMP         NE
000020EA                          2863  
000020EA  4EF9 00002138           2864                 JMP         EQ
000020F0                          2865  
000020F0  4EF9 0000213C           2866                 JMP         VC
000020F6                          2867  
000020F6  4EF9 00002140           2868                 JMP         VS
000020FC                          2869  
000020FC  4EF9 00002144           2870                 JMP         PL
00002102                          2871                 
00002102  4EF9 00002148           2872                 JMP         MI
00002108                          2873  
00002108  4EF9 0000214C           2874                 JMP         GE
0000210E                          2875  
0000210E  4EF9 00002150           2876                 JMP         LT
00002114                          2877  
00002114  4EF9 00002154           2878                 JMP         GT
0000211A                          2879  
0000211A  4EF9 00002158           2880                 JMP         LE
00002120                          2881  
00002120                          2882          
00002120  4E72 2700               2883  NOT_EXIST      STOP        #$2700
00002124                          2884  
00002124                          2885  
00002124  6000 0036               2886  HI             BRA         PRINT_BHI 
00002128                          2887  
00002128  6000 0042               2888  LS             BRA         PRINT_BLS  
0000212C                          2889  
0000212C  6000 004E               2890  CC             BRA         PRINT_BCC
00002130                          2891  
00002130  6000 005A               2892  CS             BRA         PRINT_BCS 
00002134                          2893  
00002134  6000 0066               2894  NE             BRA         PRINT_BNE 
00002138                          2895  
00002138  6000 0072               2896  EQ             BRA         PRINT_BEQ
0000213C                          2897  
0000213C  6000 007E               2898  VC             BRA         PRINT_BVC
00002140                          2899  
00002140  6000 008A               2900  VS             BRA         PRINT_BVS
00002144                          2901  
00002144  6000 0096               2902  PL             BRA         PRINT_BPL
00002148                          2903  
00002148  6000 00A2               2904  MI             BRA         PRINT_BMI 
0000214C                          2905  
0000214C  6000 00AE               2906  GE             BRA         PRINT_BGE 
00002150                          2907  
00002150  6000 00BA               2908  LT             BRA         PRINT_BLT
00002154                          2909  
00002154  6000 00C6               2910  GT             BRA         PRINT_BGT      
00002158                          2911  
00002158  6000 00D2               2912  LE             BRA         PRINT_BLE 
0000215C                          2913  
0000215C                          2914  
0000215C                          2915  PRINT_BHI      
0000215C  43F9 0000264C           2916                 LEA BHI_MESSAGE, A1
00002162                          2917            
00002162  103C 000E               2918                 MOVE.B #14, D0
00002166                          2919                   
00002166  4E4F                    2920                 TRAP #15    
00002168                          2921                 
00002168  6000 00CE               2922                 BRA DISPLACEMENT
0000216C                          2923                 
0000216C                          2924  PRINT_BLS
0000216C  43F9 00002654           2925                 LEA BLS_MESSAGE, A1
00002172                          2926                   
00002172  103C 000E               2927                 MOVE.B #14, D0
00002176                          2928                   
00002176  4E4F                    2929                 TRAP #15
00002178                          2930                 
00002178  6000 00BE               2931                 BRA DISPLACEMENT
0000217C                          2932  PRINT_BCC
0000217C  43F9 00002634           2933                 LEA BCC_MESSAGE, A1
00002182                          2934                   
00002182  103C 000E               2935                 MOVE.B #14, D0
00002186                          2936                   
00002186  4E4F                    2937                 TRAP #15
00002188                          2938                 
00002188  6000 00AE               2939                 BRA DISPLACEMENT
0000218C                          2940  PRINT_BCS
0000218C  43F9 00002640           2941                 LEA BCS_MESSAGE, A1
00002192                          2942                   
00002192  103C 000E               2943                 MOVE.B #14, D0
00002196                          2944                   
00002196  4E4F                    2945                 TRAP #15
00002198                          2946                 
00002198  6000 009E               2947                 BRA DISPLACEMENT
0000219C                          2948  PRINT_BNE
0000219C  43F9 0000263C           2949                 LEA BNE_MESSAGE, A1
000021A2                          2950                   
000021A2  103C 000E               2951                 MOVE.B #14, D0
000021A6                          2952                   
000021A6  4E4F                    2953                 TRAP #15
000021A8                          2954                 
000021A8  6000 008E               2955                 BRA DISPLACEMENT
000021AC                          2956  PRINT_BEQ
000021AC  43F9 00002638           2957                 LEA BEQ_MESSAGE, A1
000021B2                          2958                   
000021B2  103C 000E               2959                 MOVE.B #14, D0
000021B6                          2960                   
000021B6  4E4F                    2961                 TRAP #15
000021B8                          2962                 
000021B8  6000 007E               2963                 BRA DISPLACEMENT
000021BC                          2964  PRINT_BVC
000021BC  43F9 00002664           2965                 LEA BVC_MESSAGE, A1
000021C2                          2966                   
000021C2  103C 000E               2967                 MOVE.B #14, D0
000021C6                          2968                   
000021C6  4E4F                    2969                 TRAP #15     
000021C8                          2970                 
000021C8  6000 006E               2971                 BRA DISPLACEMENT
000021CC                          2972  PRINT_BVS
000021CC  43F9 00002668           2973                 LEA BVS_MESSAGE, A1
000021D2                          2974                   
000021D2  103C 000E               2975                 MOVE.B #14, D0
000021D6                          2976                   
000021D6  4E4F                    2977                 TRAP #15
000021D8                          2978                 
000021D8  6000 005E               2979                 BRA DISPLACEMENT
000021DC                          2980  PRINT_BPL
000021DC  43F9 00002660           2981                 LEA BPL_MESSAGE, A1
000021E2                          2982                   
000021E2  103C 000E               2983                 MOVE.B #14, D0
000021E6                          2984                   
000021E6  4E4F                    2985                 TRAP #15
000021E8                          2986                 
000021E8  6000 004E               2987                 BRA DISPLACEMENT
000021EC                          2988  PRINT_BMI
000021EC  43F9 0000265C           2989                 LEA BMI_MESSAGE, A1
000021F2                          2990                   
000021F2  103C 000E               2991                 MOVE.B #14, D0
000021F6                          2992                   
000021F6  4E4F                    2993                 TRAP #15
000021F8                          2994                 
000021F8  6000 003E               2995                 BRA DISPLACEMENT
000021FC                          2996  PRINT_BGE
000021FC  43F9 00002644           2997                 LEA BGE_MESSAGE, A1
00002202                          2998                   
00002202  103C 000E               2999                 MOVE.B #14, D0
00002206                          3000                   
00002206  4E4F                    3001                 TRAP #15
00002208                          3002                 
00002208  6000 002E               3003                 BRA DISPLACEMENT
0000220C                          3004  PRINT_BLT
0000220C  43F9 00002658           3005                 LEA BLT_MESSAGE, A1
00002212                          3006                   
00002212  103C 000E               3007                 MOVE.B #14, D0
00002216                          3008                   
00002216  4E4F                    3009                 TRAP #15
00002218                          3010                 
00002218  6000 001E               3011                 BRA DISPLACEMENT
0000221C                          3012  PRINT_BGT
0000221C  43F9 00002648           3013                 LEA BGT_MESSAGE, A1
00002222                          3014                   
00002222  103C 000E               3015                 MOVE.B #14, D0
00002226                          3016                   
00002226  4E4F                    3017                 TRAP #15
00002228                          3018                 
00002228  6000 000E               3019                 BRA DISPLACEMENT
0000222C                          3020  PRINT_BLE
0000222C  43F9 00002650           3021                 LEA BLE_MESSAGE, A1
00002232                          3022                   
00002232  103C 000E               3023                 MOVE.B #14, D0
00002236                          3024                   
00002236  4E4F                    3025                 TRAP #15
00002238                          3026                 
00002238  43F9 000026CD           3027  DISPLACEMENT   LEA     POUND_SIGN, A1
0000223E                          3028              
0000223E  103C 000E               3029                 MOVE.B  #14, D0
00002242                          3030              
00002242  4E4F                    3031                 TRAP #15
00002244                          3032              
00002244  43F9 000026CF           3033                 LEA     HEX_SIGN, A1
0000224A                          3034              
0000224A  4E4F                    3035                 TRAP #15
0000224C                          3036  
0000224C  4280                    3037                 CLR.L       D0              *Zero it
0000224E                          3038  
0000224E  303C 0606               3039                 MOVE.W      #example,D0     *We'll play with it here
00002252                          3040                 
00002252  123C 0008               3041                 MOVE.B      #8, D1
00002256                          3042                 
00002256  E368                    3043                 LSL.W       D1, D0
00002258                          3044  
00002258  123C 0008               3045                 MOVE.B      #8,D1       *Shift 12 bits to the right  
0000225C                          3046  
0000225C  E268                    3047                 LSR.W       D1,D0           *Move the bits
0000225E                          3048                 
0000225E                          3049                 *chk the D0 for 8, 16, or 32 but displacement
0000225E                          3050                  
0000225E  B03C 0000               3051                 CMP.B  #$00, D0
00002262                          3052  
00002262  6700 0018               3053                 BEQ  a_16_BIT 
00002266                          3054  
00002266  B03C 00FF               3055                 CMP.B #$FF, D0   
0000226A                          3056  
0000226A  6700 001E               3057                 BEQ  a_32_BIT
0000226E                          3058                  
0000226E                          3059                  *else 
0000226E                          3060                  
0000226E  4285                    3061                 CLR.L D5
00002270                          3062                 
00002270  3A00                    3063                 MOVE.W D0, D5      
00002272                          3064          
00002272  4EB9 00002298           3065                 JSR  HEX_TO_ASCII
00002278                          3066                 
00002278  4EF8 10F0               3067                 JMP PARSE_MEMORY
0000227C                          3068                            
0000227C                          3069  a_16_BIT
0000227C  4285                    3070          CLR.L  D5
0000227E                          3071          
0000227E  3A1E                    3072          MOVE.W (A6)+, D5
00002280                          3073          
00002280  4EB9 00002298           3074          JSR  HEX_TO_ASCII
00002286                          3075          
00002286  4EF8 10F0               3076          JMP PARSE_MEMORY
0000228A                          3077  a_32_BIT
0000228A                          3078  
0000228A  4285                    3079          CLR.L  D5
0000228C                          3080          
0000228C  2A1E                    3081          MOVE.L (A6)+, D5
0000228E                          3082          
0000228E  4EB9 00002298           3083          JSR  HEX_TO_ASCII
00002294                          3084          
00002294  4EF8 10F0               3085          JMP PARSE_MEMORY
00002298                          3086                   
00002298                          3087  
00002298                          3088  
00002298                          3089  
00002298                          3090  
00002298                          3091  
00002298                          3092  
00002298                          3093  
00002298                          3094  
00002298                          3095  
00002298                          3096  
00002298                          3097  -------------------- end include --------------------
00002298                          3098                  INCLUDE 'HEX_TO_ASCII_V1.X68'
00002298                          3099      *ORG    $5000
00002298                          3100  
00002298                          3101  
00002298                          3102  HEX_TO_ASCII      
00002298  4283                    3103       CLR.L      D3
0000229A                          3104       
0000229A  BABC 00000000           3105       CMP.L       #0, D5
000022A0                          3106       
000022A0  6700 0086               3107       BEQ         PRINT_ZERO
000022A4                          3108      
000022A4                          3109       *MOVE.L     #$ABCDEF, D5
000022A4                          3110       
000022A4                          3111  LOOP     
000022A4  2C05                    3112       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
000022A6                          3113       
000022A6  4282                    3114       CLR.L      D2
000022A8                          3115       
000022A8  143C 001C               3116       MOVE.B     #28, D2
000022AC                          3117  
000022AC  E4AE                    3118       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
000022AE                          3119       
000022AE  BC3C 000A               3120       CMP.B      #10, D6
000022B2                          3121       
000022B2  6C00 0006               3122       BGE        LETTER_1                  * determine if a letter or a number
000022B6                          3123       
000022B6  6000 000C               3124       BRA        NUMBER_1
000022BA                          3125       
000022BA                          3126  LETTER_1
000022BA  0606 0037               3127       ADD.B      #55, D6
000022BE                          3128       
000022BE  1206                    3129       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000022C0                          3130       
000022C0  6000 000C               3131       BRA        PRINTOUT_NIBBLE
000022C4                          3132  
000022C4                          3133  NUMBER_1     
000022C4  0606 0030               3134       ADD.B      #48, D6
000022C8                          3135       
000022C8  1206                    3136       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000022CA                          3137       
000022CA  6000 0002               3138       BRA        PRINTOUT_NIBBLE
000022CE                          3139  
000022CE                          3140  
000022CE                          3141  PRINTOUT_NIBBLE
000022CE  E98D                    3142      LSL.L      #4, D5                   * shift out the nibble you just read from the source
000022D0                          3143      
000022D0  5203                    3144      ADD.B      #1, D3
000022D2                          3145      
000022D2  BC3C 0030               3146      CMP.B      #$30, D6
000022D6                          3147  
000022D6  67CC                    3148      BEQ        LOOP             
000022D8                          3149      
000022D8  103C 0006               3150      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
000022DC                          3151      
000022DC  4E4F                    3152      TRAP #15
000022DE                          3153       
000022DE  B63C 0008               3154      CMP.B      #8, D3                   * compare to the counter to check if you are done
000022E2                          3155       
000022E2  6700 023E               3156      BEQ        DONE
000022E6                          3157          
000022E6  6000 0002               3158      BRA LOOP_ZERO                            * continue the loop and print next nibble
000022EA                          3159      
000022EA                          3160      
000022EA                          3161  LOOP_ZERO    
000022EA  2C05                    3162       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
000022EC                          3163       
000022EC  4282                    3164       CLR.L      D2
000022EE                          3165       
000022EE  143C 001C               3166       MOVE.B     #28, D2
000022F2                          3167  
000022F2  E4AE                    3168       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
000022F4                          3169       
000022F4  BC3C 000A               3170       CMP.B      #10, D6
000022F8                          3171       
000022F8  6C00 0006               3172       BGE        LETTER_1_ZERO                  * determine if a letter or a number
000022FC                          3173       
000022FC  6000 000C               3174       BRA        NUMBER_1_ZERO
00002300                          3175       
00002300                          3176  LETTER_1_ZERO
00002300  0606 0037               3177       ADD.B      #55, D6
00002304                          3178       
00002304  1206                    3179       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00002306                          3180       
00002306  6000 000C               3181       BRA        PRINTOUT_NIBBLE_ZERO
0000230A                          3182  
0000230A                          3183  NUMBER_1_ZERO    
0000230A  0606 0030               3184       ADD.B      #48, D6
0000230E                          3185       
0000230E  1206                    3186       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00002310                          3187       
00002310  6000 0002               3188       BRA        PRINTOUT_NIBBLE_ZERO
00002314                          3189  
00002314                          3190  
00002314                          3191  PRINTOUT_NIBBLE_ZERO
00002314  E98D                    3192      LSL.L      #4, D5                   * shift out the nibble you just read from the source
00002316                          3193      
00002316  5203                    3194      ADD.B      #1, D3            
00002318                          3195      
00002318  103C 0006               3196      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
0000231C                          3197      
0000231C  4E4F                    3198      TRAP #15
0000231E                          3199       
0000231E  B63C 0008               3200      CMP.B      #8, D3                   * compare to the counter to check if you are done
00002322                          3201       
00002322  6700 01FE               3202      BEQ        DONE
00002326                          3203      
00002326  60C2                    3204      BRA LOOP_ZERO                            * continue the loop and print next nibble
00002328                          3205          
00002328                          3206  
00002328                          3207       
00002328                          3208  PRINT_ZERO
00002328  123C 0030               3209      MOVE.B      #$30, D1
0000232C                          3210  
0000232C  103C 0006               3211      MOVE.B      #6, D0  
00002330                          3212  
00002330  4E4F                    3213      TRAP #15 
00002332                          3214  
00002332  6000 01EE               3215      BRA DONE  
00002336                          3216  
00002336                          3217  
00002336                          3218      *SIMHALT             ; halt simulator
00002336                          3219  
00002336                          3220  
00002336                          3221      *END    START       ; last line of source
00002336                          3222  -------------------- end include --------------------
00002336                          3223                  INCLUDE 'JUMPTABLE-EA.X68'
00002336                          3224   *ORG     $400
00002336                          3225  
00002336                          3226  
00002336                          3227  
00002336                          3228  
00002336                          3229  
00002336                          3230                 *MOVE.B       #%00, D5         *SIZE
00002336                          3231                
00002336                          3232                 *MOVE.B       #%111,D6         *MODE
00002336                          3233                 
00002336                          3234                 *MOVE.B       #%100,D7         *REGISTER
00002336                          3235                 
00002336                          3236                 *MOVE.L       #$4000, A5
00002336                          3237  
00002336                          3238                 *MOVE.B       #$0040, (A5)  
00002336                          3239  PRINT_EA 
00002336                          3240                 
00002336  41F9 00002344           3241                 LEA     jmp_table_ea,A0      *Index into the table
0000233C                          3242  
0000233C  CCFC 0006               3243                 MULU        #6,D6            *Form offset     
00002340                          3244  
00002340  4EF0 6000               3245                 JMP         0(A0,D6)         *Jump indirect with index
00002344                          3246   
00002344  4EF9 00002374           3247  jmp_table_ea   JMP         code000
0000234A                          3248  
0000234A  4EF9 00002378           3249                 JMP         code001
00002350                          3250  
00002350  4EF9 0000237C           3251                 JMP         code010
00002356                          3252  
00002356  4EF9 00002380           3253                 JMP         code011
0000235C                          3254  
0000235C  4EF9 00002384           3255                 JMP         code100
00002362                          3256  
00002362  4EF9 00002388           3257                 JMP         code101
00002368                          3258  
00002368  4EF9 0000238C           3259                 JMP         code110
0000236E                          3260  
0000236E  4EF9 00002390           3261                 JMP         code111
00002374                          3262          
00002374                          3263  
00002374                          3264   
00002374                          3265  
00002374                          3266  
00002374                          3267   
00002374                          3268  
00002374                          3269   
00002374                          3270  
00002374  6000 001E               3271  code000       BRA         DATA_REGISTER
00002378                          3272  
00002378  6000 0036               3273  code001       BRA         ADDRESS_REGISTER
0000237C                          3274  
0000237C  6000 004E               3275  code010       BRA         INDIRECT_ADDRESS
00002380                          3276  
00002380  6000 0074               3277  code011       BRA         ADDRESS_PI    * post increment
00002384                          3278  
00002384  6000 009A               3279  code100       BRA         ADDRESS_PD    * pre decrement
00002388                          3280  
00002388  6000 00C0               3281  code101       BRA         ADDRESS_W_DISPLACEMENT
0000238C                          3282  
0000238C  6000 00C0               3283  code110       BRA         ADDRESS_W_INDEX
00002390                          3284  
00002390  6000 00C0               3285  code111       BRA         GROUP_111
00002394                          3286  
00002394                          3287   
00002394                          3288  DATA_REGISTER
00002394                          3289  
00002394  43F9 000026D8           3290              LEA D_REGISTER, A1
0000239A                          3291              
0000239A  4280                    3292              CLR.L D0
0000239C                          3293              
0000239C  103C 000E               3294              MOVE.B #14, D0
000023A0                          3295              
000023A0  4E4F                    3296              TRAP #15                * print out 'D' for data register
000023A2                          3297              
000023A2  4281                    3298              CLR.L D1
000023A4                          3299              
000023A4  1207                    3300              MOVE.B D7, D1
000023A6                          3301              
000023A6  103C 0003               3302              MOVE.B #3, D0           * print out the number in the register
000023AA                          3303              
000023AA  4E4F                    3304              TRAP #15
000023AC                          3305              
000023AC  6000 0174               3306              BRA DONE
000023B0                          3307              
000023B0                          3308  
000023B0                          3309  ADDRESS_REGISTER
000023B0  43F9 000026DA           3310              LEA A_REGISTER, A1
000023B6                          3311              
000023B6  4280                    3312              CLR.L D0
000023B8                          3313              
000023B8  103C 000E               3314              MOVE.B #14, D0          * print out the 'A' for address register
000023BC                          3315              
000023BC  4E4F                    3316              TRAP #15
000023BE                          3317              
000023BE  4281                    3318              CLR.L D1
000023C0                          3319              
000023C0  1207                    3320              MOVE.B D7, D1
000023C2                          3321              
000023C2  103C 0003               3322              MOVE.B #3, D0
000023C6                          3323              
000023C6  4E4F                    3324              TRAP #15                * print out the value in the data register
000023C8                          3325  
000023C8  6000 0158               3326              BRA DONE
000023CC                          3327              
000023CC                          3328  INDIRECT_ADDRESS
000023CC  43F9 000026DC           3329              LEA IA_START, A1
000023D2                          3330              
000023D2  4280                    3331              CLR.L D0
000023D4                          3332              
000023D4  103C 000E               3333              MOVE.B #14, D0          * print out the '(A' for start of indirect address register
000023D8                          3334              
000023D8  4E4F                    3335              TRAP #15
000023DA                          3336              
000023DA  4281                    3337              CLR.L D1
000023DC                          3338              
000023DC  1207                    3339              MOVE.B D7, D1
000023DE                          3340              
000023DE  103C 0003               3341              MOVE.B #3, D0
000023E2                          3342              
000023E2  4E4F                    3343              TRAP #15                * print out the value in the data register
000023E4                          3344              
000023E4  43F9 000026DF           3345              LEA IA_END, A1
000023EA                          3346  
000023EA  4280                    3347              CLR.L D0
000023EC                          3348              
000023EC  103C 000E               3349              MOVE.B #14, D0          * print out the ')' for end of post increment address register
000023F0                          3350              
000023F0  4E4F                    3351              TRAP #15
000023F2                          3352              
000023F2  6000 012E               3353              BRA DONE
000023F6                          3354  
000023F6                          3355  ADDRESS_PI
000023F6  43F9 000026E1           3356              LEA A_PI_START, A1
000023FC                          3357              
000023FC  4280                    3358              CLR.L D0
000023FE                          3359              
000023FE  103C 000E               3360              MOVE.B #14, D0          * print out the '(A' for start of post increment address register
00002402                          3361              
00002402  4E4F                    3362              TRAP #15
00002404                          3363              
00002404  4281                    3364              CLR.L D1
00002406                          3365              
00002406  1207                    3366              MOVE.B D7, D1
00002408                          3367              
00002408  103C 0003               3368              MOVE.B #3, D0
0000240C                          3369              
0000240C  4E4F                    3370              TRAP #15                * print out the value in the data register
0000240E                          3371              
0000240E  43F9 000026E4           3372              LEA A_PI_END, A1
00002414                          3373  
00002414  4280                    3374              CLR.L D0
00002416                          3375              
00002416  103C 000E               3376              MOVE.B #14, D0          * print out the ')+' for end of post increment address register
0000241A                          3377     
0000241A  4E4F                    3378              TRAP #15
0000241C                          3379              
0000241C  6000 0104               3380              BRA DONE  
00002420                          3381         
00002420                          3382  ADDRESS_PD
00002420                          3383  
00002420  43F9 000026E7           3384              LEA A_PD_START, A1
00002426                          3385              
00002426  4280                    3386              CLR.L D0
00002428                          3387              
00002428  103C 000E               3388              MOVE.B #14, D0          * print out the '-(A' for start of pre decrement address register
0000242C                          3389              
0000242C  4E4F                    3390              TRAP #15
0000242E                          3391              
0000242E  4281                    3392              CLR.L D1
00002430                          3393              
00002430  1207                    3394              MOVE.B D7, D1
00002432                          3395              
00002432  103C 0003               3396              MOVE.B #3, D0
00002436                          3397              
00002436  4E4F                    3398              TRAP #15                * print out the value in the data register
00002438                          3399              
00002438  43F9 000026EB           3400              LEA A_PD_END, A1
0000243E                          3401  
0000243E  4280                    3402              CLR.L D0
00002440                          3403              
00002440  103C 000E               3404              MOVE.B #14, D0          * print out the ')-' for end of pre decrement
00002444                          3405  
00002444  4E4F                    3406              TRAP #15
00002446                          3407              
00002446  6000 00DA               3408              BRA DONE
0000244A                          3409              
0000244A                          3410  ADDRESS_W_DISPLACEMENT
0000244A  6000 00D6               3411              BRA DONE
0000244E                          3412  
0000244E                          3413  ADDRESS_W_INDEX
0000244E  6000 00D2               3414              BRA DONE
00002452                          3415  
00002452                          3416  GROUP_111
00002452                          3417  
00002452  41F9 00002460           3418                 LEA         jmp_table_ea_111,A0    *Index into the table
00002458                          3419  
00002458  CEFC 0006               3420                 MULU        #6,D7       *Form offset     
0000245C                          3421  
0000245C  4EF0 7000               3422                 JMP         0(A0,D7)   *Jump indirect with index
00002460                          3423                 
00002460                          3424  jmp_table_ea_111   
00002460  4EF9 00002486           3425                 JMP         reg000
00002466                          3426  
00002466  4EF9 0000248A           3427                 JMP         reg001
0000246C                          3428  
0000246C  4EF9 0000247E           3429                 JMP         reg010
00002472                          3430  
00002472  4EF9 00002482           3431                 JMP         reg011
00002478                          3432  
00002478  4EF9 0000248E           3433                 JMP         reg100
0000247E                          3434          
0000247E                          3435  
0000247E  6000 0012               3436  reg010       BRA         PC_W_DISPLACEMENT
00002482                          3437  
00002482  6000 0012               3438  reg011       BRA         PC_W_INDEX
00002486                          3439  
00002486  6000 0012               3440  reg000       BRA         ABSOLUTE_SHORT
0000248A                          3441  
0000248A  6000 002C               3442  reg001       BRA         ABSOLUTE_LONG
0000248E                          3443  
0000248E  6000 0046               3444  reg100       BRA         IMMEDIATE
00002492                          3445  
00002492                          3446  
00002492                          3447  PC_W_DISPLACEMENT
00002492  6000 008E               3448              BRA DONE
00002496                          3449  
00002496                          3450  PC_W_INDEX
00002496  6000 008A               3451              BRA DONE
0000249A                          3452  
0000249A                          3453  ABSOLUTE_SHORT
0000249A  43F9 000026CF           3454              LEA         HEX_SIGN, A1
000024A0                          3455              
000024A0  103C 000E               3456              MOVE.B      #14, D0
000024A4                          3457              
000024A4  4E4F                    3458              TRAP #15
000024A6                          3459              
000024A6  4281                    3460              CLR.L       D1
000024A8                          3461              
000024A8  321E                    3462              MOVE.W      (A6)+, D1
000024AA                          3463              
000024AA  103C 000F               3464              MOVE.B      #15, D0
000024AE                          3465              
000024AE  143C 0010               3466              MOVE.B      #16, D2
000024B2                          3467              
000024B2  4E4F                    3468              TRAP #15
000024B4                          3469              
000024B4  6000 006C               3470              BRA DONE  
000024B8                          3471  
000024B8                          3472  
000024B8                          3473  ABSOLUTE_LONG
000024B8  43F9 000026CF           3474              LEA         HEX_SIGN, A1
000024BE                          3475              
000024BE  103C 000E               3476              MOVE.B      #14, D0
000024C2                          3477              
000024C2  4E4F                    3478              TRAP #15
000024C4                          3479              
000024C4  4281                    3480              CLR.L       D1
000024C6                          3481              
000024C6  221E                    3482              MOVE.L      (A6)+, D1
000024C8                          3483              
000024C8  103C 000F               3484              MOVE.B      #15, D0
000024CC                          3485              
000024CC  143C 0010               3486              MOVE.B      #16, D2
000024D0                          3487              
000024D0  4E4F                    3488              TRAP #15
000024D2                          3489                          
000024D2  6000 004E               3490              BRA DONE  
000024D6                          3491  
000024D6                          3492  
000024D6                          3493  IMMEDIATE
000024D6  43F9 000026CD           3494              LEA     POUND_SIGN, A1
000024DC                          3495              
000024DC  103C 000E               3496              MOVE.B  #14, D0
000024E0                          3497              
000024E0  4E4F                    3498              TRAP #15
000024E2                          3499              
000024E2  43F9 000026CF           3500              LEA     HEX_SIGN, A1
000024E8                          3501              
000024E8  4E4F                    3502              TRAP #15
000024EA                          3503              
000024EA  BA3C 0000               3504              CMP.B   #%00, D5
000024EE                          3505              
000024EE  6700 000E               3506              BEQ     IMMEDIATE_B
000024F2                          3507              
000024F2  BA3C 0001               3508              CMP.B   #%01, D5
000024F6                          3509              
000024F6  6700 0012               3510              BEQ     IMMEDIATE_W
000024FA                          3511              
000024FA  6000 001A               3512              BRA     IMMEDIATE_L
000024FE                          3513              
000024FE                          3514  IMMEDIATE_B
000024FE  4285                    3515              CLR.L       D5
00002500                          3516     
00002500  3A1E                    3517              MOVE.W      (A6)+, D5
00002502                          3518              
00002502  4EB8 2298               3519              JSR         HEX_TO_ASCII
00002506                          3520              
00002506  6000 001A               3521              BRA DONE
0000250A                          3522  
0000250A                          3523  IMMEDIATE_W
0000250A  4285                    3524              CLR.L       D5
0000250C                          3525  
0000250C  3A1E                    3526              MOVE.W      (A6)+, D5
0000250E                          3527              
0000250E  4EB8 2298               3528              JSR         HEX_TO_ASCII
00002512                          3529              
00002512                          3530              *MOVE.B      #15, D0
00002512                          3531              
00002512                          3532              *MOVE.B      #16, D2
00002512                          3533              
00002512                          3534              *TRAP #15 
00002512                          3535              
00002512  6000 000E               3536              BRA DONE        
00002516                          3537  
00002516                          3538  IMMEDIATE_L 
00002516  4285                    3539              CLR.L       D5
00002518                          3540              
00002518  2A1E                    3541              MOVE.L      (A6)+, D5
0000251A                          3542      
0000251A  4EB8 2298               3543              JSR         HEX_TO_ASCII
0000251E                          3544              
0000251E  6000 0002               3545              BRA DONE
00002522                          3546              
00002522                          3547  DONE 
00002522  4E75                    3548      RTS
00002524                          3549      
00002524                          3550   * INCLUDE 'MESSAGE_Data.X68'
00002524                          3551   * INCLUDE 'HEX_TO_ASCII_V1.X68'
00002524                          3552       
00002524                          3553          
00002524                          3554  
00002524                          3555  
00002524                          3556  
00002524                          3557  
00002524                          3558  
00002524                          3559  
00002524                          3560  
00002524                          3561  
00002524                          3562  -------------------- end include --------------------
00002524                          3563                  
00002524  4EF8 10F0               3564                  JMP      PARSE_MEMORY
00002528                          3565                  
00002528                          3566  PRESS_ENTER_CONTINUE
00002528  267C 00000000           3567                   MOVEA.L  #outputCountCurr, A3  *reset to 0
0000252E  43F9 000025C9           3568                   LEA ENTER, A1
00002534  103C 000E               3569                   MOVE.B #14, D0
00002538  4E4F                    3570                   TRAP #15
0000253A                          3571                   
0000253A  103C 0005               3572                   MOVE.B #5, D0
0000253E  4E4F                    3573                   TRAP #15
00002540                          3574                   
00002540  B23C 000D               3575                   CMP.B #$D, D1
00002544                          3576  
00002544  103C 000B               3577                   MOVE.B #11, D0   *clear display
00002548  323C FF00               3578                   MOVE.W #$FF00, D1
0000254C  4E4F                    3579                   TRAP #15
0000254E                          3580  
0000254E  4EF8 1114               3581                   JMP CONTINUE_PARSE
00002552                          3582                  
00002552                          3583                 
00002552                          3584                  
00002552                          3585  STOP
00002552                          3586  
00002552                          3587  
00002552                          3588  
00002552                          3589  
00002552                          3590  
00002552                          3591  
00002552                          3592  
00002552                          3593  
00002552                          3594  
00002552                          3595  
00002552                          3596  
00002552                          3597  
00002552                          3598  
00002552                          3599  
00002552                          3600  
00002552                          3601  
00002552                          3602  
00002552                          3603  
00002552                          3604  
00002552                          3605  
00002552                          3606  
00002552                          3607  
00002552                          3608  
00002552                          3609  -------------------- end include --------------------
00002552                          3610  
00002552  FFFF FFFF               3611      SIMHALT             ; halt simulator
00002556                          3612  
00002556                          3613      INCLUDE 'DS_Data.X68' * STARTING_ADDR ** ENDING_ADDR
00002556                          3614  
00002556                          3615  STARTING_ADDR   DS.L 1
0000255A                          3616  
0000255A                          3617  ENDING_ADDR     DS.L 1
0000255A                          3618  -------------------- end include --------------------
0000255E                          3619      INCLUDE 'MESSAGE_Data.X68' 
0000255E                          3620  
0000255E  =0000000D               3621  CR  EQU $0D
0000255E  =0000000A               3622  LF  EQU $0A 
0000255E                          3623  
0000255E= 57 65 6C 63 6F 6D ...   3624  WELCOME_MESSAGE DC.B 'Welcome to our Team wild pokemon disassembly!!', CR, LF, 0
0000258F= 45 6E 74 65 72 20 ...   3625  STARTING        DC.B 'Enter the starting location: ', 0
000025AD= 45 6E 74 65 72 20 ...   3626  ENDING          DC.B 'Enter the ending locaiton: ', 0
000025C9= 45 6E 74 65 72 20 ...   3627  ENTER           DC.B 'Enter to continue ', 0
000025DC= 49 6E 76 61 6C 69 ...   3628  ERROR_MSG       DC.B 'Invalid Input, must be 0-9 or A-F ',CR, LF, 0
00002601= 0D 0A 00                3629  CR_LF           DC.B '', CR, LF, 0
00002604                          3630      
00002604= 41 44 44 49 2E 00       3631  ADDI_MESSAGE    DC.B 'ADDI.',0
0000260A= 4D 4F 56 45 41 2E 00    3632  MOVEA_MESSAGE   DC.B 'MOVEA.',0
00002611= 4D 4F 56 45 2E 00       3633  MOVE_MESSAGE    DC.B 'MOVE.',0
00002617= 4E 4F 50 00             3634  NOP_MESSAGE     DC.B 'NOP',0
0000261B= 4D 4F 56 45 4D 2E 00    3635  MOVEM_MESSAGE   DC.B 'MOVEM.',0
00002622= 4A 53 52 00             3636  JSR_MESSAGE     DC.B 'JSR',0
00002626= 52 54 53 00             3637  RTS_MESSAGE     DC.B 'RTS',0
0000262A= 43 4C 52 00             3638  CLR_MESSAGE     DC.B 'CLR',0
0000262E= 41 44 44 51 2E 00       3639  ADDQ_MESSAGE    DC.B 'ADDQ.',0
00002634                          3640  
00002634= 42 43 43 00             3641  BCC_MESSAGE     DC.B 'BCC',0   *//
00002638= 42 45 51 00             3642  BEQ_MESSAGE     DC.B 'BEQ',0   *//
0000263C= 42 4E 45 00             3643  BNE_MESSAGE     DC.B 'BNE',0   *//
00002640= 42 43 53 00             3644  BCS_MESSAGE     DC.B 'BCS',0   *//
00002644= 42 47 45 00             3645  BGE_MESSAGE     DC.B 'BGE',0   *//
00002648= 42 47 54 00             3646  BGT_MESSAGE     DC.B 'BGT',0   *//
0000264C= 42 48 49 00             3647  BHI_MESSAGE     DC.B 'BHI',0   *//
00002650= 42 4C 45 00             3648  BLE_MESSAGE     DC.B 'BLE',0   *//
00002654= 42 4C 53 00             3649  BLS_MESSAGE     DC.B 'BLS',0   *//
00002658= 42 4C 54 00             3650  BLT_MESSAGE     DC.B 'BLT',0   *//
0000265C= 42 4D 49 00             3651  BMI_MESSAGE     DC.B 'BMI',0   *//
00002660= 42 50 4C 00             3652  BPL_MESSAGE     DC.B 'BPL',0   *//
00002664= 42 56 43 00             3653  BVC_MESSAGE     DC.B 'BVC',0   *//
00002668= 42 56 53 00             3654  BVS_MESSAGE     DC.B 'BVS',0   *//
0000266C                          3655  
0000266C= 4D 4F 56 45 51 2E 00    3656  MOVEQ_MESSAGE   DC.B 'MOVEQ.',0
00002673= 44 49 56 55 2E 00       3657  DIVU_MESSAGE    DC.B 'DIVU.',0
00002679= 4F 52 2E 00             3658  OR_MESSAGE      DC.B 'OR.',0
0000267D= 53 55 42 2E 00          3659  SUB_MESSAGE     DC.B 'SUB.',0
00002682= 43 4D 50 2E 00          3660  CMP_MESSAGE     DC.B 'CMP.',0
00002687= 4D 55 4C 53 2E 00       3661  MULS_MESSAGE    DC.B 'MULS.',0
0000268D= 41 4E 44 2E 00          3662  AND_MESSAGE     DC.B 'AND.',0
00002692= 41 44 44 2E 00          3663  ADD_MESSAGE     DC.B 'ADD.',0
00002697= 41 44 44 41 2E 00       3664  ADDA_MESSAGE    DC.B 'ADDA.',0
0000269D= 4C 53 4C 2E 00          3665  LSL_MESSAGE     DC.B 'LSL.',0 *//
000026A2= 41 53 4C 2E 00          3666  ASL_MESSAGE     DC.B 'ASL.',0
000026A7= 52 4F 4C 2E 00          3667  ROL_MESSAGE     DC.B 'ROL.',0
000026AC= 4C 53 52 2E 00          3668  LSR_MESSAGE     DC.B 'LSR.',0 *//
000026B1= 41 53 52 2E 00          3669  ASR_MESSAGE     DC.B 'ASR.',0
000026B6= 52 4F 52 2E 00          3670  ROR_MESSAGE     DC.B 'ROR.',0
000026BB= 42 20 20 20 20 00       3671  SIZE_B_PRINT    DC.B 'B    ',0
000026C1= 57 20 20 20 20 00       3672  SIZE_W_PRINT    DC.B 'W    ',0
000026C7= 4C 20 20 20 20 00       3673  SIZE_L_PRINT    DC.B 'L    ',0
000026CD= 23 00                   3674  POUND_SIGN      DC.B '#',0
000026CF= 24 00                   3675  HEX_SIGN        DC.B '$',0
000026D1= 2E 00                   3676  PERIOD          DC.B '.',0
000026D3= 20 20 00                3677  SPACE           DC.B '  ',0
000026D6= 2F 00                   3678  SLASH           DC.B '/', 0
000026D8                          3679  
000026D8= 44 00                   3680  D_REGISTER      DC.B 'D',0
000026DA= 41 00                   3681  A_REGISTER      DC.B 'A',0
000026DC= 28 41 00                3682  IA_START        DC.B '(A',0
000026DF= 29 00                   3683  IA_END          DC.B ')',0
000026E1= 28 41 00                3684  A_PI_START      DC.B '(A',0
000026E4= 29 2B 00                3685  A_PI_END        DC.B ')+',0
000026E7= 2D 28 41 00             3686  A_PD_START      DC.B '-(A',0
000026EB= 29 00                   3687  A_PD_END        DC.B ')',0
000026ED= 2C 20 00                3688  COMMA           DC.B ', ',0
000026F0                          3689  
000026F0                          3690  
000026F0                          3691  
000026F0                          3692  
000026F0                          3693  
000026F0                          3694  
000026F0                          3695  
000026F0                          3696  
000026F0                          3697  
000026F0                          3698  
000026F0                          3699  
000026F0                          3700  
000026F0                          3701  
000026F0                          3702  
000026F0                          3703  
000026F0                          3704  
000026F0                          3705  
000026F0                          3706  -------------------- end include --------------------
000026F0                          3707      *MOVE.B    #3, D2
000026F0                          3708      *MOVE.B    #0, D5
000026F0  307C 0400               3709      MOVEA.W   #$400, A0
000026F4                          3710      
000026F4                          3711      
000026F4                          3712      
000026F4                          3713  
000026F4                          3714      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_LONG       24B8
ABSOLUTE_SHORT      249A
ADDA_CODE           1F22
ADDA_MESSAGE        2697
ADDI                11D6
ADDI_B_SIZE         1246
ADDI_EA             12A6
ADDI_MESSAGE        2604
ADDI_W_SIZE         1276
ADDQ                13B4
ADDQB               13E8
ADDQL               1414
ADDQW               13FE
ADDQ_MESSAGE        262E
ADDRESS_PD          2420
ADDRESS_PI          23F6
ADDRESS_REGISTER    23B0
ADDRESS_W_DISPLACEMENT  244A
ADDRESS_W_INDEX     244E
ADD_ADDA            1F0E
ADD_CODE            1F8E
ADD_FIRST_EA        1FD4
ADD_MESSAGE         2692
AND_CODE            16B2
AND_FIRST_EA        16F8
AND_MESSAGE         268D
ASD                 1CD2
ASD_MEMORY          1D2C
ASL                 1CE8
ASL_MESSAGE         26A2
ASR                 1D0A
ASR_MESSAGE         26B1
A_16_BIT            227C
A_32_BIT            228A
A_PD_END            26EB
A_PD_START          26E7
A_PI_END            26E4
A_PI_START          26E1
A_REGISTER          26DA
BCC_MESSAGE         2634
BCS_MESSAGE         2640
BEQ_MESSAGE         2638
BGE_MESSAGE         2644
BGT_MESSAGE         2648
BHI_MESSAGE         264C
BIT0                1A62
BIT1                1A72
BIT10               1B00
BIT11               1B10
BIT12               1B20
BIT13               1B30
BIT14               1B40
BIT15               1B50
BIT2                1A80
BIT3                1A90
BIT4                1AA0
BIT5                1AB0
BIT6                1AC0
BIT7                1AD0
BIT8                1AE0
BIT9                1AF0
BLE_MESSAGE         2650
BLS_MESSAGE         2654
BLT_MESSAGE         2658
BMI_MESSAGE         265C
BNE_MESSAGE         263C
BPL_MESSAGE         2660
BVC_MESSAGE         2664
BVS_MESSAGE         2668
CC                  212C
CHAR                10A0
CHECK               19B4
CHECK_SECOND        19C6
CLR_MESSAGE         262A
CLR_OPCODE          14BC
CMP                 12F0
CMP_MESSAGE         2682
CODE000             2374
CODE0000            1196
CODE0001            119A
CODE001             2378
CODE0010            119E
CODE0011            11A2
CODE010             237C
CODE0100            11A6
CODE0101            11AA
CODE011             2380
CODE0110            11AE
CODE0111            11B2
CODE100             2384
CODE1000            11B6
CODE1001            11BA
CODE101             2388
CODE1010            11BE
CODE1011            11C2
CODE110             238C
CODE1100            11C6
CODE1101            11CA
CODE111             2390
CODE1110            11CE
CODE1111            11D2
COMMA               26ED
CONTINUE_PARSE      1114
CONVERT_STRING      107E
CR                  D
CR_LF               2601
CS                  2130
DATA_REGISTER       2394
DIRECTION_LEFT      1
DIRECTION_RIGHT     0
DISPLACEMENT        2238
DIVU_CODE           156A
DIVU_MESSAGE        2673
DIVU_OR             1556
DONE                2522
DONE_MOVEM_LOOP     1B60
DONE_PRINTING       2024
DR_FIELD            1754
D_REGISTER          26D8
ENDCONV             10DA
ENDING              25AD
ENDING_ADDR         255A
ENDING_MESSAGE      103C
ENTER               25C9
EQ                  2138
ERROR               10CA
ERROR_MSG           25DC
EXAMPLE             606
EXAMPLE1            DE61
FINISH_PRINTING_SIZE  1F44
GE                  214C
GET_DATA_REGISTER   2064
GET_SIZE_PURPLE     1FF6
GO_THROUGH_MEMORY   10DC
GROUP_0100_CODE     1618
GROUP_111           2452
GT                  2154
HEX_SIGN            26CF
HEX_TO_ASCII        2298
HI                  2124
IA_END              26DF
IA_START            26DC
IMMEDIATE           24D6
IMMEDIATE_B         24FE
IMMEDIATE_L         2516
IMMEDIATE_W         250A
INDIRECT_ADDRESS    23CC
IS_USED             19DA
IS_USED_FIRST       19D0
JMP_TABLE           1136
JMP_TABLE_BCC       20C0
JMP_TABLE_EA        2344
JMP_TABLE_EA_111    2460
JMP_TABLE_MOVEM     1A02
JSR_MESSAGE         2622
JSR_OPCODE          1486
LE                  2158
LETTER_1            22BA
LETTER_1_ZERO       2300
LF                  A
LOOP                22A4
LOOP_MOVEM          19AC
LOOP_MOVEM_SECOND   19BE
LOOP_ZERO           22EA
LS                  2128
LSD                 1BDE
LSD_MEMORY          1C4E
LSL                 1C0A
LSL_MESSAGE         269D
LSR                 1C2C
LSR_MESSAGE         26AC
LT                  2150
MAX_USER_INPUT      8
MEMORY_REGISTER     17AE
MI                  2148
MODE_AL             7
MODE_AN             1
MODE_AS             7
MODE_AWD            5
MODE_AWI            6
MODE_DN             0
MODE_IAN            2
MODE_ID             7
MODE_M_DN           0
MODE_M_PDAN         1
MODE_PCWD           7
MODE_PCWI           7
MODE_PDAN           4
MODE_PIAN           3
MOVEAL              1EA0
MOVEAW              1E86
MOVEA_MESSAGE       260A
MOVEB               1E0C
MOVEL               1E56
MOVEM_MESSAGE       261B
MOVEM_OPCODE        171E
MOVEQ               1B62
MOVEQ_MESSAGE       266C
MOVEW               1E26
MOVE_MESSAGE        2611
MULS_AND            1660
MULS_CODE           1674
MULS_MESSAGE        2687
NE                  2134
NEXT_INSTRUCTION    111C
NOP_MESSAGE         2617
NOP_OPCODE          1466
NOT_EXIST           2120
NUMBER              1090
NUMBER_1            22C4
NUMBER_1_ZERO       230A
OPPOSITE_BIT0       18AC
OPPOSITE_BIT1       18BC
OPPOSITE_BIT10      194C
OPPOSITE_BIT11      195C
OPPOSITE_BIT12      196C
OPPOSITE_BIT13      197C
OPPOSITE_BIT14      198C
OPPOSITE_BIT15      199C
OPPOSITE_BIT2       18CC
OPPOSITE_BIT3       18DC
OPPOSITE_BIT4       18EC
OPPOSITE_BIT5       18FC
OPPOSITE_BIT6       190C
OPPOSITE_BIT7       191C
OPPOSITE_BIT8       192C
OPPOSITE_BIT9       193C
OPPOSITE_CHECK      17FE
OPPOSITE_CHECK_SECOND  1810
OPPOSITE_IS_USED    1824
OPPOSITE_IS_USED_FIRST  181A
OPPOSITE_JMP_TABLE_MOVEM  184C
OPPOSITE_LOOP       17E8
OPPOSITE_LOOP_MOVEM  17F6
OPPOSITE_LOOP_MOVEM_SECOND  1808
OPPOSITE_PRINT_REGISTER_MOVEM  183A
OR_CODE             15AC
OR_FIRST_EA         15F2
OR_MESSAGE          2679
OUTPUTCOUNTCURR     0
OUTPUTCOUNTMAX      1F
PARSE_MEMORY        10F0
PARSE_MEMORY_FIRST  10FE
PC_W_DISPLACEMENT   2492
PC_W_INDEX          2496
PERIOD              26D1
PL                  2144
POUND_SIGN          26CD
PRESS_ENTER_CONTINUE  2528
PRINTADDQ           142A
PRINTOUT_COUNT      1D5C
PRINTOUT_MEMORY_SHIFTS_EA  1DDC
PRINTOUT_MOVE_EA    1EBA
PRINTOUT_NIBBLE     22CE
PRINTOUT_NIBBLE_ZERO  2314
PRINTOUT_REGISTER   1DA0
PRINTOUT_REGISTER_SHIFTS_EA  1D36
PRINTOUT_SIZE_L     1F7C
PRINTOUT_SIZE_PURPLE  200C
PRINTOUT_SIZE_W     1F6A
PRINT_ADDRESS       1788
PRINT_B             2026
PRINT_BCC           217C
PRINT_BCS           218C
PRINT_BEQ           21AC
PRINT_BGE           21FC
PRINT_BGT           221C
PRINT_BHI           215C
PRINT_BLE           222C
PRINT_BLS           216C
PRINT_BLT           220C
PRINT_BMI           21EC
PRINT_BNE           219C
PRINT_BPL           21DC
PRINT_BVC           21BC
PRINT_BVS           21CC
PRINT_COMMA         2056
PRINT_EA            2336
PRINT_L             2046
PRINT_REGISTER_MOVEM  19F0
PRINT_SIZE          1500
PRINT_SIZE_L_MOVEM  1748
PRINT_SUB_CMP       136C
PRINT_W             2036
PRINT_ZERO          2328
REG000              2486
REG001              248A
REG010              247E
REG011              2482
REG100              248E
REGITSET_MEMORY     1766
ROD                 1C58
ROD_MEMORY          1CC8
ROL                 1C84
ROL_MESSAGE         26A7
ROR                 1CA6
ROR_MESSAGE         26B6
RO_IMMEDATE         0
RO_REGISTER         1
RTS                 1A80
RTS_MESSAGE         2626
RTS_OPCODE          1476
SET_EA              2076
SHIFT               C
SHIFTS              1BBC
SIZE_B              1538
SIZE_BYTE           0
SIZE_B_PRINT        26BB
SIZE_L              154C
SIZE_LONG           3
SIZE_L_PRINT        26C7
SIZE_W              1542
SIZE_WORD           1
SIZE_W_PRINT        26C1
SLASH               26D6
SPACE               26D3
START               1000
STARTING            258F
STARTING_ADDR       2556
STARTING_MESSAGE    100C
STOP                2552
STORE_ADDR          10B8
SUB                 12DE
SUB_CMP             1302
SUB_CMP_B           132A
SUB_CMP_L           1356
SUB_CMP_W           1340
SUB_MESSAGE         267D
VC                  213C
VS                  2140
WELCOME_MESSAGE     255E
XN_AL               1
XN_AS               0
XN_ID               4
XN_PCWD             2
XN_PCWI             3
