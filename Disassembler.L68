00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/16 4:52:58 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Dissassembler Integration
00000000                             3  * Written by : Samuel Williams
00000000                             4  * Date       : 5/25/2016
00000000                             5  * Description: The file which includes all files
00000000                             6  *              to create a complete dissassembler 
00000000                             7  *-----------------------------------------------------------
00001000                             8      ORG    $1000
00001000                             9  START:                  ; first instruction of program
00001000                            10      
00001000                            11      *INCLUDE 'TEST_CODE_DAMIAN.X68'
00001000                            12      INCLUDE 'EQU_Data.X68'
00001000                            13  
00001000                            14  
00001000  =00000008                 15  MAX_USER_INPUT  EQU 8 
00001000                            16  
00001000                            17  
00001000  =00000606                 18  example          EQU     %0000011000000110
00001000                            19  
00001000  =0000DE61                 20  example1         EQU     %1101111001100001    * I made up bits 0 to 11      
00001000                            21  
00001000  =0000000C                 22  shift            EQU     12                   * Shift 12 bits 
00001000                            23  
00001000  =00000000                 24  mode_dn          EQU     %000
00001000                            25  
00001000  =00000001                 26  mode_an          EQU     %001
00001000                            27  
00001000  =00000002                 28  mode_ian         EQU     %010
00001000                            29  
00001000  =00000003                 30  mode_pian        EQU     %011
00001000                            31  
00001000  =00000004                 32  mode_pdan        EQU     %100
00001000                            33  
00001000  =00000005                 34  mode_awd         EQU     %101
00001000                            35  
00001000  =00000006                 36  mode_awi         EQU     %110
00001000                            37  
00001000  =00000007                 38  mode_pcwd        EQU     %111
00001000                            39  
00001000  =00000002                 40  xn_pcwd          EQU     %010
00001000                            41  
00001000  =00000007                 42  mode_pcwi        EQU     %111
00001000                            43  
00001000  =00000003                 44  xn_pcwi          EQU     %011
00001000                            45  
00001000  =00000007                 46  mode_as          EQU     %111
00001000                            47  
00001000  =00000000                 48  xn_as            EQU     %000
00001000                            49  
00001000  =00000007                 50  mode_al          EQU     %111
00001000                            51  
00001000  =00000001                 52  xn_al            EQU     %001
00001000                            53  
00001000  =00000007                 54  mode_id          EQU     %111
00001000                            55  
00001000  =00000004                 56  xn_id            EQU     %100
00001000                            57  
00001000  =00000000                 58  size_byte        EQU     %00
00001000                            59  
00001000  =00000001                 60  size_word        EQU     %01
00001000                            61  
00001000  =00000003                 62  size_long        EQU     %11
00001000                            63  
00001000  =00000000                 64  direction_right  EQU     %0
00001000                            65  
00001000  =00000001                 66  direction_left   EQU     %1
00001000                            67  
00001000  =00000000                 68  ro_immedate      EQU     %0
00001000                            69  
00001000  =00000001                 70  ro_register      EQU     %1
00001000                            71  
00001000  =00000000                 72  mode_m_dn        EQU     %0
00001000                            73  
00001000  =00000001                 74  mode_m_pdan      EQU     %1
00001000                            75  
00001000  =0000001F                 76  outputCountMax   EQU     31
00001000                            77  
00001000  =00000000                 78  outputCountCurr  EQU     0
00001000                            79            
00001000  =0000000D                 80  CR  EQU $0D
00001000                            81  
00001000  =0000000A                 82  LF  EQU $0A
00001000                            83  
00001000                            84  
00001000                            85  
00001000                            86  
00001000                            87  
00001000                            88  
00001000                            89  -------------------- end include --------------------
00001000                            90      INCLUDE 'INPUT.X68'
00001000                            91      * I/O 
00001000                            92      
00001000                            93      * Welcome message
00001000  43F9 00002600             94          LEA WELCOME_MESSAGE, A1
00001006  103C 000E                 95          MOVE.B #14, D0
0000100A  4E4F                      96          TRAP #15
0000100C                            97          
0000100C                            98  STARTING_MESSAGE    
0000100C                            99      * Printing out the Starting address message
0000100C  43F9 00002631            100          LEA STARTING, A1
00001012  103C 000E                101          MOVE.B #14, D0
00001016  4E4F                     102          TRAP #15
00001018                           103      
00001018                           104      * Code for input
00001018  227C 00000200            105          MOVEA.L #$200, A1 *we have to change this addr later
0000101E  103C 0002                106          MOVE.B #2, D0
00001022  4E4F                     107          TRAP #15
00001024  143C 0008                108          MOVE.B #MAX_USER_INPUT, D2
00001028                           109      
00001028                           110      * JSR to convert string function
00001028  4EB9 0000107E            111          JSR CONVERT_STRING   
0000102E                           112      * check if the address is even number
0000102E  E25C                     113          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001030  65DA                     114          BCS STARTING_MESSAGE   *if carry is set then the user typed in an odd address
00001032  E35C                     115          ROL #1, D4     *PUT D4 BACK
00001034                           116         
00001034                           117      * store hex value of inputted string 
00001034  23C4 000025F8            118          MOVE.L D4, STARTING_ADDR 
0000103A                           119      * reset the D4
0000103A  4284                     120          CLR.L  D4
0000103C                           121          
0000103C                           122  ENDING_MESSAGE
0000103C                           123      * message user to input
0000103C  43F9 0000264F            124          LEA ENDING, A1   
00001042  103C 000E                125          MOVE.B #14, D0
00001046  4E4F                     126          TRAP #15
00001048                           127      * read user input
00001048  227C 00000200            128          MOVEA.L #$200, A1 *we have to change this addr later
0000104E  103C 0002                129          MOVE.B #2, D0   
00001052  4E4F                     130          TRAP #15
00001054                           131      * counter for loop
00001054  143C 0008                132          MOVE.B #MAX_USER_INPUT, D2   
00001058                           133      * JSR to convert string function
00001058  4EB9 0000107E            134          JSR CONVERT_STRING 
0000105E                           135          
0000105E                           136      * check if the address is even number
0000105E  E25C                     137          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001060  65DA                     138          BCS ENDING_MESSAGE   *if carry is set then the user typed in an odd address
00001062  E35C                     139          ROL #1, D4     *PUT D4 BACK        
00001064                           140          
00001064                           141      * Check if the starting and ending address is the same
00001064                           142         ; CMP.L #STARTING_ADDR, D4
00001064                           143         * MOVE.L #STARTING_ADDR, D5
00001064  2C39 000025F8            144          MOVE.L STARTING_ADDR, D6
0000106A  B886                     145          CMP.L  D6, D4
0000106C  6FCE                     146          BLE   ENDING_MESSAGE
0000106E                           147      * store hex value of inputted string   
0000106E  23C4 000025FC            148          MOVE.L D4, ENDING_ADDR   
00001074                           149          
00001074                           150      * clear the unused data in the data and address regisgter
00001074  4280                     151          CLR.L D0
00001076  4284                     152          CLR.L D4
00001078                           153          
00001078                           154          * Do error handling here Sam
00001078                           155          
00001078  4EF9 000010DC            156          JMP GO_THROUGH_MEMORY
0000107E                           157      
0000107E                           158      * Get each char
0000107E                           159  CONVERT_STRING 
0000107E  1219                     160          MOVE.B (A1)+, D1
00001080                           161      
00001080                           162      * Go to next instruction for converting
00001080  B23C 0039                163          CMP.B #$39, D1
00001084  6F00 000A                164          BLE NUMBER
00001088                           165          
00001088  B23C 003A                166          CMP.B #$3A, D1
0000108C  6C00 0012                167          BGE CHAR   
00001090                           168      
00001090                           169      * Convert Ascii numbers to hex
00001090                           170  NUMBER  
00001090  B23C 002F                171          CMP.B #$2F, D1
00001094                           172      * Number is out of range
00001094  6F00 0034                173          BLE ERROR       
00001098  0401 0030                174          SUB.B #48, D1
0000109C                           175          
0000109C                           176      * Need to be changed the name of label
0000109C  6000 001A                177          BRA STORE_ADDR    
000010A0                           178      
000010A0                           179      * Convert Ascii charaters to hex
000010A0                           180  CHAR    
000010A0  B27C 0040                181          CMP #$40, D1
000010A4                           182      * Number is out of range
000010A4  6F00 0024                183          BLE ERROR
000010A8                           184          
000010A8  B27C 0047                185          CMP #$47, D1
000010AC                           186      * Number is out of range
000010AC  6C00 001C                187          BGE ERROR
000010B0                           188          
000010B0  0401 0037                189          SUB.B #55, D1
000010B4  6000 0002                190          BRA STORE_ADDR
000010B8                           191          
000010B8                           192  STORE_ADDR
000010B8                           193      * Add converted nibble to overall number
000010B8  D801                     194          ADD.B D1, D4
000010BA                           195      * Clear D1 for reuse 
000010BA  4201                     196          CLR.B D1
000010BC                           197      * Subtract from counter
000010BC  5342                     198          SUB #1, D2
000010BE                           199      * If counter is 0, we compared all 8 hex numbers
000010BE  B43C 0000                200          CMP.B #0, D2
000010C2  6700 0016                201          BEQ ENDCONV
000010C6                           202      * Shift the overall number to the left by 1 nibble, so it will fit next hex number
000010C6  E98C                     203          LSL.L #4, D4
000010C8  60B4                     204          BRA CONVERT_STRING
000010CA                           205          
000010CA                           206      * Error handling
000010CA                           207  ERROR
000010CA  43F9 0000267E            208      LEA   ERROR_MSG, A1 
000010D0  103C 000E                209      MOVE.B #14, D0
000010D4  4E4F                     210      TRAP #15
000010D6  4EF8 100C                211      JMP   STARTING_MESSAGE
000010DA                           212  
000010DA                           213      
000010DA                           214  ENDCONV * Next instruction starts 
000010DA  4E75                     215          RTS
000010DC                           216         * MOVE.L D4, STARTING_ADDR 
000010DC                           217          
000010DC                           218  GO_THROUGH_MEMORY
000010DC                           219  
000010DC                           220  
000010DC                           221  
000010DC                           222  
000010DC                           223  
000010DC                           224  
000010DC                           225  
000010DC                           226  
000010DC                           227  
000010DC                           228  
000010DC                           229  
000010DC                           230  
000010DC                           231  
000010DC                           232  
000010DC                           233  
000010DC                           234  
000010DC                           235  
000010DC                           236  
000010DC                           237  
000010DC                           238  
000010DC                           239  
000010DC                           240  
000010DC                           241  
000010DC                           242  
000010DC                           243  
000010DC                           244  
000010DC                           245  -------------------- end include --------------------
000010DC                           246      INCLUDE 'MEMORY_PARSER.X68'
000010DC                           247  
000010DC  2A79 000025F8            248                  MOVEA.L   STARTING_ADDR, A5
000010E2  2C4D                     249                  MOVEA.L   A5, A6
000010E4  247C 0000001F            250                  MOVEA.L  #outputCountMax, A2
000010EA  267C 00000000            251                  MOVEA.L  #outputCountCurr, A3
000010F0                           252  PARSE_MEMORY      
000010F0  3A4E                     253                  MOVE.W   A6, A5
000010F2  43F9 000026BA            254                  LEA      CR_LF, A1
000010F8  103C 000E                255                  MOVE.B   #14, D0
000010FC  4E4F                     256                  TRAP #15  
000010FE                           257          
000010FE                           258  PARSE_MEMORY_FIRST    
000010FE  BBF9 000025FC            259                  CMPA.L   ENDING_ADDR, A5
00001104  6700 14EE                260                  BEQ      STOP
00001108  301E                     261                  MOVE.W   (A6)+, D0
0000110A                           262                  
0000110A  B7FC 0000001F            263                  CMPA.L   #outputCountMax, A3
00001110  6700 14B8                264                  BEQ       PRESS_ENTER_CONTINUE
00001114                           265  CONTINUE_PARSE
00001114  528B                     266                  ADDA.L    #1, A3
00001116                           267                  
00001116  4EF9 0000111C            268                  JMP      NEXT_INSTRUCTION
0000111C                           269                      
0000111C                           270  NEXT_INSTRUCTION
0000111C                           271                  INCLUDE 'JUMPTABLE DAMIAN-V1.X68'
0000111C                           272   
0000111C                           273  
0000111C  3015                     274                   MOVE.W  (A5),D0
0000111E                           275  
0000111E                           276  
0000111E                           277  
0000111E  41F9 00001136            278                   LEA     jmp_table,A0    *Index into the table
00001124                           279  
00001124  4280                     280                   CLR.L   D0              *Zero it
00001126                           281  
00001126  3015                     282                   MOVE.W  (A5),D0     *We'll play with it here
00001128                           283  
00001128  123C 000C                284                   MOVE.B  #shift,D1       *Shift 12 bits to the right  
0000112C                           285  
0000112C  E268                     286                   LSR.W   D1,D0           *Move the bits
0000112E                           287  
0000112E                           288  
0000112E                           289  
0000112E                           290  
0000112E                           291   
0000112E                           292  
0000112E  C0FC 0006                293                 MULU        #6,D0       *Form offset     
00001132                           294  
00001132  4EB0 0000                295                 JSR         0(A0,D0)   *Jump indirect with index
00001136                           296  
00001136                           297                      
00001136                           298  
00001136  4EF9 00001196            299  jmp_table      JMP         code0000
0000113C                           300  
0000113C  4EF9 0000119A            301                 JMP         code0001
00001142                           302  
00001142  4EF9 0000119E            303                 JMP         code0010
00001148                           304  
00001148  4EF9 000011A2            305                 JMP         code0011
0000114E                           306  
0000114E  4EF9 000011A6            307                 JMP         code0100
00001154                           308  
00001154  4EF9 000011AA            309                 JMP         code0101
0000115A                           310  
0000115A  4EF9 000011AE            311                 JMP         code0110
00001160                           312  
00001160  4EF9 000011B2            313                 JMP         code0111
00001166                           314  
00001166  4EF9 000011B6            315                 JMP         code1000
0000116C                           316  
0000116C  4EF9 000011BA            317                 JMP         code1001
00001172                           318  
00001172  4EF9 000011BE            319                 JMP         code1010
00001178                           320  
00001178  4EF9 000011C2            321                 JMP         code1011
0000117E                           322  
0000117E  4EF9 000011C6            323                 JMP         code1100
00001184                           324  
00001184  4EF9 000011CA            325                 JMP         code1101
0000118A                           326  
0000118A  4EF9 000011CE            327                 JMP         code1110
00001190                           328  
00001190  4EF9 000011D2            329                 JMP         code1111
00001196                           330  
00001196                           331          
00001196                           332  
00001196                           333   
00001196                           334  
00001196                           335  
00001196                           336   
00001196                           337  
00001196                           338   
00001196                           339  
00001196  6000 003E                340  code0000       BRA         ADDI
0000119A                           341  
0000119A  6000 0D4C                342  code0001       BRA         MOVEB
0000119E                           343  
0000119E  6000 0D9A                344  code0010       BRA         MOVEL
000011A2                           345  
000011A2  6000 0D62                346  code0011       BRA         MOVEW
000011A6                           347  
000011A6  6000 04F0                348  code0100       BRA         GROUP_0100_CODE
000011AA                           349  
000011AA  6000 020E                350  code0101       BRA         ADDQ   * Subroutine for ADDQ
000011AE                           351  
000011AE  4E72 2700                352  code0110       STOP        #$2700
000011B2                           353  
000011B2  6000 0A56                354  code0111       BRA         MOVEQ
000011B6                           355  
000011B6  4E72 2700                356  code1000       STOP        #$2700
000011BA                           357  
000011BA  6000 0122                358  code1001       BRA         SUB    * Subroutine for SUB
000011BE                           359  
000011BE  4E72 2700                360  code1010       STOP        #$2700
000011C2                           361  
000011C2                           362   
000011C2                           363  
000011C2                           364  
000011C2                           365  
000011C2                           366  
000011C2                           367   * another jump table to the 8 possible op-codes at the next level.
000011C2                           368  
000011C2                           369   
000011C2                           370  
000011C2  6000 012C                371  code1011       BRA        CMP  * Subroutuine for CMP
000011C6                           372  
000011C6  4E72 2700                373  code1100       STOP        #$2700
000011CA                           374  
000011CA  6000 0E32                375  code1101       BRA         ADD_ADDA       *#$2700
000011CE                           376  
000011CE  6000 0AA2                377  code1110       BRA         SHIFTS
000011D2                           378  
000011D2  4E72 2700                379  code1111       STOP        #$2700
000011D6                           380                   
000011D6                           381  
000011D6                           382                      
000011D6                           383              
000011D6                           384  
000011D6                           385  
000011D6                           386  
000011D6                           387  
000011D6                           388  
000011D6                           389  
000011D6                           390  
000011D6                           391  
000011D6                           392  
000011D6                           393  
000011D6                           394  
000011D6                           395  
000011D6                           396  
000011D6                           397  
000011D6                           398  
000011D6                           399  
000011D6                           400  -------------------- end include --------------------
000011D6                           401                  INCLUDE 'ADDI.X68'
000011D6                           402    
000011D6                           403  ADDI           * first check the first 4 bits after the op-code
000011D6  4280                     404                 CLR.L       D0
000011D8                           405  
000011D8  4281                     406                 CLR.L       D1
000011DA                           407                 
000011DA  3015                     408                 MOVE.W      (A5),D0
000011DC                           409                 
000011DC  123C 0008                410                 MOVE.B      #8, D1 * for shifting to the right by 8 bits
000011E0                           411                 
000011E0  E268                     412                 LSR.W       D1, D0
000011E2                           413                 
000011E2  B07C 0006                414                 CMP.W       #6, D0 * checking the first 4 bits 
000011E6                           415                 
000011E6  6600 FEE2                416                 BNE         ERROR  * go to error 
000011EA                           417                 
000011EA                           418                 * print the op-code 
000011EA  4280                     419                 CLR.L       D0
000011EC                           420  
000011EC  4281                     421                 CLR.L       D1
000011EE                           422                 
000011EE  43F9 000026BD            423                 LEA         ADDI_MESSAGE, A1    * NOTE - how do you know this is of size B ????? 
000011F4                           424                 
000011F4  103C 000E                425                 MOVE.B      #14, D0
000011F8                           426                 
000011F8  4E4F                     427                 TRAP #15
000011FA                           428                                
000011FA                           429                 * print the size
000011FA  4280                     430                 CLR.L       D0
000011FC                           431  
000011FC  4281                     432                 CLR.L       D1
000011FE                           433                 
000011FE  3015                     434                 MOVE.W      (A5),D0
00001200                           435                
00001200  E148                     436                 LSL.W       #8, D0
00001202                           437  
00001202  123C 000E                438                 MOVE.B      #14, D1 * for shifting to the right by 8 bits
00001206                           439                 
00001206  E268                     440                 LSR.W       D1, D0
00001208                           441                 
00001208                           442                 * D1 holds the size
00001208                           443    *             CLR.L       D1
00001208                           444                 
00001208                           445    *             MOVE.B      D0, D1
00001208                           446                   
00001208  B03C 0000                447                 CMP.B       #%00, D0
0000120C                           448                 
0000120C  6700 0038                449                 BEQ         ADDI_B_SIZE
00001210                           450                 
00001210  B03C 0001                451                 CMP.B       #%01, D0
00001214                           452                 
00001214  6700 0060                453                 BEQ         ADDI_W_SIZE
00001218                           454                 
00001218                           455                 *print size L
00001218  43F9 00002784            456                 LEA         SIZE_L_PRINT, A1     
0000121E                           457                 
0000121E  103C 000E                458                 MOVE.B      #14, D0
00001222                           459                 
00001222  4E4F                     460                 TRAP #15
00001224                           461                 
00001224                           462                * print out pound sign and hex sign
00001224  43F9 0000278A            463                 LEA     POUND_SIGN, A1
0000122A                           464              
0000122A  103C 000E                465                 MOVE.B  #14, D0
0000122E                           466              
0000122E  4E4F                     467                 TRAP #15
00001230                           468              
00001230  43F9 0000278C            469                 LEA     HEX_SIGN, A1
00001236                           470              
00001236  4E4F                     471                 TRAP #15
00001238                           472                 
00001238  4285                     473                 CLR.L  D5
0000123A                           474          
0000123A  2A1E                     475                 MOVE.L (A6)+, D5 * we mimght change it later
0000123C                           476          
0000123C  4EB9 0000233A            477                 JSR  HEX_TO_ASCII
00001242                           478                 
00001242  6000 0062                479                 BRA         ADDI_EA   
00001246                           480                      
00001246                           481  ADDI_B_SIZE
00001246  43F9 00002778            482                 LEA         SIZE_B_PRINT, A1     
0000124C                           483                 
0000124C  103C 000E                484                 MOVE.B      #14, D0
00001250                           485                 
00001250  4E4F                     486                 TRAP #15
00001252                           487                 
00001252                           488                * print out pound sign and hex sign
00001252  43F9 0000278A            489                 LEA     POUND_SIGN, A1
00001258                           490              
00001258  103C 000E                491                 MOVE.B  #14, D0
0000125C                           492              
0000125C  4E4F                     493                 TRAP #15
0000125E                           494              
0000125E  43F9 0000278C            495                 LEA     HEX_SIGN, A1
00001264                           496              
00001264  4E4F                     497                 TRAP #15
00001266                           498                 
00001266  4280                     499                 CLR.L D0
00001268                           500  
00001268  301E                     501                 MOVE.W (A6)+, D0 * we mimght change it later
0000126A                           502                 
0000126A  1A00                     503                 MOVE.B D0, D5
0000126C                           504     
0000126C  4EB9 0000233A            505                 JSR  HEX_TO_ASCII
00001272                           506                 
00001272  6000 0032                507                 BRA         ADDI_EA 
00001276                           508                  
00001276                           509  
00001276                           510  ADDI_W_SIZE
00001276  43F9 0000277E            511                 LEA         SIZE_W_PRINT, A1     
0000127C                           512                 
0000127C  103C 000E                513                 MOVE.B      #14, D0
00001280                           514                 
00001280  4E4F                     515                 TRAP #15
00001282                           516                 
00001282                           517                 * print out pound sign and hex sign
00001282  43F9 0000278A            518                 LEA     POUND_SIGN, A1
00001288                           519              
00001288  103C 000E                520                 MOVE.B  #14, D0
0000128C                           521              
0000128C  4E4F                     522                 TRAP #15
0000128E                           523              
0000128E  43F9 0000278C            524                 LEA     HEX_SIGN, A1
00001294                           525              
00001294  4E4F                     526                 TRAP #15
00001296                           527  
00001296  4285                     528                 CLR.L  D5
00001298                           529          
00001298  3A1E                     530                 MOVE.W (A6)+, D5
0000129A                           531          
0000129A  4EB9 0000233A            532                 JSR  HEX_TO_ASCII
000012A0                           533          
000012A0  4EF9 000012A6            534                 JMP  ADDI_EA
000012A6                           535  
000012A6                           536  
000012A6                           537  ADDI_EA      
000012A6  4EB9 00002148            538                  JSR     PRINT_COMMA
000012AC                           539                  
000012AC  4280                     540                  CLR.L   D0
000012AE                           541                  
000012AE  4281                     542                  CLR.L   D1
000012B0                           543                  
000012B0                           544                  * set register
000012B0                           545                   
000012B0  3015                     546                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000012B2                           547                 
000012B2  123C 000D                548                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000012B6                           549  
000012B6  E368                     550                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000012B8                           551  
000012B8  123C 000D                552                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000012BC                           553  
000012BC  E268                     554                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000012BE                           555  
000012BE  1E00                     556                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
000012C0                           557                   
000012C0                           558                   * set mode
000012C0  4280                     559                   CLR.L D0                *clear D0
000012C2                           560                   
000012C2  4281                     561                   CLR.L D1                *clear D1
000012C4                           562                   
000012C4  3015                     563                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000012C6                           564                 
000012C6  123C 000A                565                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000012CA                           566  
000012CA  E368                     567                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000012CC                           568  
000012CC  123C 000D                569                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000012D0                           570  
000012D0  E268                     571                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000012D2                           572  
000012D2  1C00                     573                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
000012D4                           574  
000012D4                           575   
000012D4                           576                 * JSR     Set_Ea
000012D4                           577                   
000012D4  4EB9 000023D8            578                  JSR     PRINT_EA *by using jmp table
000012DA                           579                  
000012DA  4EF8 10F0                580                  JMP     PARSE_MEMORY
000012DE                           581                  
000012DE                           582                  
000012DE                           583                   
000012DE                           584                   
000012DE                           585  
000012DE                           586  
000012DE                           587                 
000012DE                           588  
000012DE                           589  
000012DE                           590  
000012DE                           591  
000012DE                           592  
000012DE                           593  
000012DE                           594  
000012DE                           595  
000012DE                           596  
000012DE                           597  
000012DE                           598  
000012DE                           599  
000012DE                           600  
000012DE                           601  
000012DE                           602  
000012DE                           603  
000012DE                           604  
000012DE                           605  
000012DE                           606  
000012DE                           607  
000012DE                           608  
000012DE                           609  
000012DE                           610  
000012DE                           611  
000012DE                           612  
000012DE                           613  -------------------- end include --------------------
000012DE                           614                  INCLUDE 'ADDQ_SUB_CMP.X68'
000012DE                           615  SUB
000012DE                           616  
000012DE  43F9 0000273A            617      LEA SUB_MESSAGE, A1  *print SUB
000012E4                           618                   
000012E4  103C 000E                619      MOVE.B #14, D0
000012E8                           620                   
000012E8  4E4F                     621      TRAP #15
000012EA                           622      
000012EA  4EF9 00001302            623      JMP SUB_CMP
000012F0                           624  
000012F0                           625  CMP
000012F0  43F9 0000273F            626      LEA CMP_MESSAGE, A1  *print CMP
000012F6                           627                   
000012F6  103C 000E                628      MOVE.B #14, D0
000012FA                           629                   
000012FA  4E4F                     630      TRAP #15
000012FC                           631      
000012FC  4EF9 00001302            632      JMP SUB_CMP
00001302                           633  
00001302                           634  SUB_CMP
00001302                           635  
00001302  3015                     636      MOVE.W (A5), D0
00001304                           637      
00001304  123C 0008                638      MOVE.B  #8,D1     
00001308                           639  
00001308  E368                     640      LSL.W   D1,D0
0000130A                           641                   
0000130A  123C 000E                642      MOVE.B  #14,D1
0000130E                           643  
0000130E  E268                     644      LSR.W   D1,D0  *DO now holds size
00001310                           645                                              
00001310  B03C 0002                646      CMP.B    #$2, D0        *if D0 holds 3, size is L
00001314                           647      
00001314  6700 003A                648      BEQ      SUB_CMP_L
00001318                           649                   
00001318  B03C 0001                650      CMP.B    #$1, D0        *if D0 holds 3, size is W
0000131C                           651                                   
0000131C  6700 001C                652      BEQ      SUB_CMP_W
00001320                           653  
00001320  6000 0002                654      BRA      SUB_CMP_B
00001324                           655  
00001324                           656  SUB_CMP_B  *Print B
00001324                           657  
00001324  43F9 00002778            658      LEA SIZE_B_PRINT, A1  *print B
0000132A                           659                   
0000132A  103C 000E                660      MOVE.B #14, D0
0000132E                           661                   
0000132E  4E4F                     662      TRAP #15
00001330                           663      
00001330  1A3C 0000                664      MOVE.B #%00, D5
00001334                           665      
00001334  4EF9 00001366            666      JMP PRINT_SUB_CMP
0000133A                           667      
0000133A                           668  SUB_CMP_W  *Print W
0000133A                           669  
0000133A  43F9 0000277E            670      LEA SIZE_W_PRINT, A1  *print W
00001340                           671                   
00001340  103C 000E                672      MOVE.B #14, D0
00001344                           673                   
00001344  4E4F                     674      TRAP #15
00001346                           675      
00001346  1A3C 0001                676      MOVE.B #%01, D5
0000134A                           677  
0000134A  4EF9 00001366            678      JMP PRINT_SUB_CMP
00001350                           679  
00001350                           680  SUB_CMP_L   *Print L
00001350                           681  
00001350  43F9 00002784            682      LEA SIZE_L_PRINT, A1  *print L
00001356                           683                   
00001356  103C 000E                684      MOVE.B #14, D0
0000135A                           685                   
0000135A  4E4F                     686      TRAP #15
0000135C                           687  
0000135C  1A3C 0002                688      MOVE.B #%10, D5
00001360                           689      
00001360  4EF9 00001366            690      JMP PRINT_SUB_CMP
00001366                           691      
00001366                           692  PRINT_SUB_CMP
00001366                           693  
00001366  3C3C 0000                694      MOVE.W #$000, D6
0000136A                           695     
0000136A  3015                     696      MOVE.W (A5), D0
0000136C                           697  
0000136C  123C 0004                698      MOVE.B  #4,D1     
00001370                           699  
00001370  E368                     700      LSL.W   D1,D0
00001372                           701                   
00001372  123C 000D                702      MOVE.B  #13,D1
00001376                           703  
00001376  E268                     704      LSR.W   D1,D0  *D0 now holds Dn
00001378                           705                                              
00001378  3E00                     706      MOVE.W D0, D7 *D6 holds Dn
0000137A                           707      
0000137A  4EB9 000023D8            708      JSR PRINT_EA
00001380                           709  
00001380  43F9 000027AA            710      LEA COMMA, A1
00001386                           711  
00001386  103C 000E                712      MOVE.B #14, D0
0000138A                           713                   
0000138A  4E4F                     714      TRAP #15
0000138C                           715          
0000138C  4286                     716      CLR.L D6
0000138E                           717      
0000138E  4287                     718      CLR.L D7
00001390                           719      
00001390  3015                     720      MOVE.W (A5), D0
00001392                           721  
00001392  123C 000A                722      MOVE.B  #10,D1     
00001396                           723  
00001396  E368                     724      LSL.W   D1,D0
00001398                           725                   
00001398  123C 000D                726      MOVE.B  #13,D1
0000139C                           727  
0000139C  E268                     728      LSR.W   D1,D0  *D0 now holds MODE
0000139E                           729                                              
0000139E  3C00                     730      MOVE.W D0, D6 *D6 holds mode
000013A0                           731      
000013A0  3015                     732      MOVE.W (A5), D0
000013A2                           733  
000013A2  123C 000D                734      MOVE.B  #13,D1     
000013A6                           735  
000013A6  E368                     736      LSL.W   D1,D0
000013A8                           737                   
000013A8  123C 000D                738      MOVE.B  #13,D1
000013AC                           739  
000013AC  E268                     740      LSR.W   D1,D0  *D0 now holds Register
000013AE                           741                                              
000013AE  3E00                     742      MOVE.W D0, D7 *D6 holds Register   
000013B0                           743      
000013B0  4EB9 000023D8            744      JSR PRINT_EA
000013B6                           745  
000013B6  6000 FD38                746      BRA PARSE_MEMORY
000013BA                           747  
000013BA                           748  
000013BA                           749  ADDQ
000013BA                           750  
000013BA  43F9 000026E7            751      LEA ADDQ_MESSAGE, A1  *print ADDQ
000013C0                           752                   
000013C0  103C 000E                753      MOVE.B #14, D0
000013C4                           754                   
000013C4  4E4F                     755      TRAP #15
000013C6                           756      
000013C6  3015                     757      MOVE.W (A5), D0
000013C8                           758      
000013C8  123C 0008                759      MOVE.B  #8,D1     
000013CC                           760  
000013CC  E368                     761      LSL.W   D1,D0
000013CE                           762                   
000013CE  123C 000E                763      MOVE.B  #14,D1
000013D2                           764  
000013D2  E268                     765      LSR.W   D1,D0  *DO now holds size
000013D4                           766                                              
000013D4  B03C 0002                767      CMP.B    #$2, D0        *if D0 holds 2, size is L
000013D8                           768      
000013D8  6700 003A                769      BEQ      ADDQL
000013DC                           770                   
000013DC  B03C 0001                771      CMP.B    #$1, D0        *if D0 holds 1, size is W
000013E0                           772                                   
000013E0  6700 001C                773      BEQ      ADDQW
000013E4                           774  
000013E4  6000 0002                775      BRA      ADDQB
000013E8                           776  
000013E8                           777  ADDQB  *Print B
000013E8                           778  
000013E8  43F9 00002778            779      LEA SIZE_B_PRINT, A1  *print B
000013EE                           780                   
000013EE  103C 000E                781      MOVE.B #14, D0
000013F2                           782                   
000013F2  4E4F                     783      TRAP #15
000013F4                           784      
000013F4  1A3C 0000                785      MOVE.B #%00, D5
000013F8                           786      
000013F8  4EF9 0000142A            787      JMP PRINTADDQ
000013FE                           788      
000013FE                           789  ADDQW  *Print W
000013FE                           790  
000013FE  43F9 0000277E            791      LEA SIZE_W_PRINT, A1  *print W
00001404                           792                   
00001404  103C 000E                793      MOVE.B #14, D0
00001408                           794                                    
00001408  4E4F                     795      TRAP #15
0000140A                           796      
0000140A  1A3C 0001                797      MOVE.B #%01, D5
0000140E                           798  
0000140E  4EF9 0000142A            799      JMP PRINTADDQ
00001414                           800  
00001414                           801  ADDQL   *Print L
00001414                           802  
00001414  43F9 00002784            803      LEA SIZE_L_PRINT, A1  *print L
0000141A                           804                   
0000141A  103C 000E                805      MOVE.B #14, D0
0000141E                           806                   
0000141E  4E4F                     807      TRAP #15
00001420                           808  
00001420  1A3C 0002                809      MOVE.B #%10, D5
00001424                           810      
00001424  4EF9 0000142A            811      JMP PRINTADDQ
0000142A                           812      
0000142A                           813  PRINTADDQ
0000142A                           814  
0000142A  43F9 0000278A            815      LEA POUND_SIGN, A1  *print W
00001430                           816                   
00001430  103C 000E                817      MOVE.B #14, D0
00001434                           818                                    
00001434  4E4F                     819      TRAP #15
00001436                           820      
00001436  3015                     821      MOVE.W (A5), D0
00001438                           822  
00001438  123C 0004                823      MOVE.B  #4,D1     
0000143C                           824  
0000143C  E368                     825      LSL.W   D1,D0
0000143E                           826                   
0000143E  123C 000D                827      MOVE.B  #13,D1
00001442                           828  
00001442  E268                     829      LSR.W   D1,D0  *D0 now holds Dn
00001444                           830      
00001444  4281                     831      CLR.L D1
00001446                           832                                              
00001446  3200                     833      MOVE.W D0, D1 *D6 holds Dn   
00001448                           834  
00001448  103C 0003                835      MOVE.B #3, D0
0000144C                           836                 
0000144C  4E4F                     837      TRAP #15
0000144E                           838      
0000144E  43F9 000027AA            839      LEA COMMA, A1  *print W
00001454                           840                   
00001454  103C 000E                841      MOVE.B #14, D0
00001458                           842                                    
00001458  4E4F                     843      TRAP #15
0000145A                           844      
0000145A  4286                     845      CLR.L D6
0000145C                           846      
0000145C  4287                     847      CLR.L D7
0000145E                           848      
0000145E  3015                     849      MOVE.W (A5), D0
00001460                           850  
00001460  123C 000A                851      MOVE.B  #10,D1     
00001464                           852  
00001464  E368                     853      LSL.W   D1,D0
00001466                           854                   
00001466  123C 000D                855      MOVE.B  #13,D1
0000146A                           856  
0000146A  E268                     857      LSR.W   D1,D0  *D0 now holds MODE
0000146C                           858                                              
0000146C  3C00                     859      MOVE.W D0, D6 *D6 holds mode
0000146E                           860      
0000146E  4281                     861      CLR.L D1
00001470                           862      
00001470  4280                     863      CLR.L D0
00001472                           864      
00001472  3015                     865      MOVE.W (A5), D0
00001474                           866  
00001474  123C 000D                867      MOVE.B  #13,D1     
00001478                           868  
00001478  E368                     869      LSL.W   D1,D0
0000147A                           870                   
0000147A  123C 000D                871      MOVE.B  #13,D1
0000147E                           872  
0000147E  E268                     873      LSR.W   D1,D0  *D0 now holds MODE
00001480                           874                                              
00001480  3E00                     875      MOVE.W D0, D7 *D6 holds Register   
00001482                           876      
00001482  4EB9 000023D8            877      JSR PRINT_EA
00001488                           878      
00001488  6000 FC66                879      BRA PARSE_MEMORY
0000148C                           880  
0000148C                           881      
0000148C                           882  
0000148C                           883  
0000148C                           884  
0000148C                           885  
0000148C                           886  
0000148C                           887  
0000148C                           888  
0000148C                           889  
0000148C                           890  
0000148C                           891  
0000148C                           892  
0000148C                           893  
0000148C                           894  -------------------- end include --------------------
0000148C                           895                  INCLUDE 'TRYING_NOP.X68'
0000148C                           896  
0000148C                           897      
0000148C                           898   
0000148C                           899      *MOVE.W  #$4E75, D2          * hardcodiing nop
0000148C                           900  
0000148C                           901     * CMP.L       #$4E71, D2      * has to be NOP
0000148C                           902      *
0000148C                           903     * BEQ         NOP_OPCODE
0000148C                           904      
0000148C                           905     * CMP.L       #$4E75, D2      * has to be RTS
0000148C                           906      
0000148C                           907    *  BEQ         RTS_OPCODE
0000148C                           908     *BRA CLR_OPCODE  
0000148C                           909  LEA_OPCODE
0000148C                           910      
0000148C  43F9 000026ED            911      LEA         LEA_MESSAGE, A1     * print out message for 'NOP'
00001492                           912      
00001492  103C 000E                913      MOVE.B      #14, D0
00001496                           914      
00001496  4E4F                     915      TRAP #15  
00001498                           916      
00001498  3015                     917      MOVE.W  (A5),D0     *D0 is the binary value to decode
0000149A                           918      
0000149A  123C 000D                919      MOVE.B  #13,D1     
0000149E                           920  
0000149E  E368                     921      LSL.W   D1,D0
000014A0                           922                   
000014A0  123C 000D                923      MOVE.B  #13,D1
000014A4                           924  
000014A4  E268                     925      LSR.W   D1,D0  *D0 now holds Register
000014A6                           926                                              
000014A6  3E00                     927      MOVE.W D0, D7 *D7 holds Register  
000014A8                           928  
000014A8  3015                     929      MOVE.W  (A5),D0     *D0 is the binary value to decode
000014AA                           930  
000014AA  123C 000A                931      MOVE.B  #10,D1     
000014AE                           932  
000014AE  E368                     933      LSL.W   D1,D0
000014B0                           934                   
000014B0  123C 000D                935      MOVE.B  #13,D1
000014B4                           936  
000014B4  E268                     937      LSR.W   D1,D0  *D0 now holds MODE
000014B6                           938                                              
000014B6  3C00                     939      MOVE.W D0, D6 *D6 holds MODE  
000014B8                           940      
000014B8  4EB9 000023D8            941      JSR PRINT_EA
000014BE                           942  
000014BE  43F9 000027AA            943      LEA         COMMA, A1     * print out message for 'NOP'
000014C4                           944      
000014C4  103C 000E                945      MOVE.B      #14, D0
000014C8                           946      
000014C8  4E4F                     947      TRAP #15 
000014CA                           948                                    
000014CA  3015                     949      MOVE.W  (A5),D0     *D0 is the binary value to decode 
000014CC                           950  
000014CC  7C01                     951      MOVE.L #%001, D6
000014CE                           952  
000014CE  123C 0004                953      MOVE.B  #4,D1     
000014D2                           954  
000014D2  E368                     955      LSL.W   D1,D0
000014D4                           956                   
000014D4  123C 000D                957      MOVE.B  #13,D1
000014D8                           958  
000014D8  E268                     959      LSR.W   D1,D0  
000014DA                           960                                              
000014DA  3E00                     961      MOVE.W D0, D7 
000014DC                           962      
000014DC  4EB9 000023D8            963      JSR PRINT_EA
000014E2                           964      
000014E2  4EF8 10F0                965      JMP     PARSE_MEMORY       
000014E6                           966            
000014E6                           967  NOP_OPCODE
000014E6  43F9 000026D0            968      LEA         NOP_MESSAGE, A1     * print out message for 'NOP'
000014EC                           969      
000014EC  103C 000E                970      MOVE.B      #14, D0
000014F0                           971      
000014F0  4E4F                     972      TRAP #15
000014F2                           973      
000014F2  6000 FBFC                974      BRA PARSE_MEMORY
000014F6                           975  RTS_OPCODE 
000014F6  43F9 000026DF            976      LEA         RTS_MESSAGE, A1     * print out message for 'RTS'
000014FC                           977      
000014FC  103C 000E                978      MOVE.B      #14, D0
00001500                           979      
00001500  4E4F                     980      TRAP #15
00001502                           981      
00001502  6000 FBEC                982      BRA PARSE_MEMORY
00001506                           983      
00001506                           984  JSR_OPCODE 
00001506  43F9 000026DB            985      LEA         JSR_MESSAGE, A1     * print out message for 'JSR'
0000150C                           986      
0000150C  103C 000E                987      MOVE.B      #14, D0
00001510                           988      
00001510  4E4F                     989      TRAP #15
00001512                           990      
00001512  2002                     991      MOVE.L D2, D0
00001514                           992  
00001514  123C 000D                993      MOVE.B  #13,D1     
00001518                           994  
00001518  E368                     995      LSL.W   D1,D0
0000151A                           996                   
0000151A  123C 000D                997      MOVE.B  #13,D1
0000151E                           998  
0000151E  E268                     999      LSR.W   D1,D0  *D0 now holds Register
00001520                          1000                                              
00001520  3E00                    1001      MOVE.W D0, D7 *D7 holds Register  
00001522                          1002  
00001522  2002                    1003      MOVE.L D2, D0
00001524                          1004  
00001524  123C 000A               1005      MOVE.B  #10,D1     
00001528                          1006  
00001528  E368                    1007      LSL.W   D1,D0
0000152A                          1008                   
0000152A  123C 000D               1009      MOVE.B  #13,D1
0000152E                          1010  
0000152E  E268                    1011      LSR.W   D1,D0  *D0 now holds MODE
00001530                          1012                                              
00001530  3C00                    1013      MOVE.W D0, D6 *D6 holds MODE  
00001532                          1014      
00001532  4EB9 000023D8           1015      JSR PRINT_EA
00001538                          1016      
00001538  6000 FBB6               1017      BRA PARSE_MEMORY
0000153C                          1018         
0000153C                          1019  CLR_OPCODE 
0000153C  43F9 000026E3           1020      LEA         CLR_MESSAGE, A1     * print out message for 'CLR'
00001542                          1021      
00001542  103C 000E               1022      MOVE.B      #14, D0
00001546                          1023      
00001546  4E4F                    1024      TRAP #15
00001548                          1025                     
00001548  43F9 0000278E           1026      LEA      PERIOD, A1
0000154E                          1027      
0000154E  103C 000E               1028      MOVE.B   #14, D0
00001552                          1029      
00001552  4E4F                    1030      TRAP #15 
00001554                          1031                
00001554  3015                    1032      MOVE.W      (A5), D0
00001556                          1033               
00001556  123C 0006               1034      MOVE.B      #6, D1
0000155A                          1035                 
0000155A  E268                    1036      LSR.W       D1, D0  *shift right 6 
0000155C                          1037                 
0000155C  123C 000E               1038      MOVE.B      #14, D1
00001560                          1039                 
00001560  E368                    1040      LSL.W       D1, D0  *shift left 15, only size is left
00001562                          1041      
00001562  123C 000E               1042      MOVE.B      #14, D1
00001566                          1043                 
00001566  E268                    1044      LSR.W       D1, D0  *shift right 15, size is left   
00001568                          1045      
00001568  B07C 0000               1046      CMP.W       #00, D0
0000156C                          1047  
0000156C  6700 004A               1048      BEQ         SIZE_B
00001570                          1049      
00001570  B07C 0001               1050      CMP.W       #01, D0
00001574                          1051                 
00001574  6700 004C               1052      BEQ         SIZE_W 
00001578                          1053      
00001578  B07C 0002               1054      CMP.W       #2, D0
0000157C                          1055                 
0000157C  6700 004E               1056      BEQ         SIZE_L
00001580                          1057  
00001580                          1058  PRINT_SIZE
00001580                          1059  
00001580  103C 000E               1060      MOVE.B      #14, D0
00001584                          1061      
00001584  4E4F                    1062      TRAP #15
00001586                          1063  
00001586  4280                    1064      CLR.L   D0
00001588                          1065                  
00001588  4281                    1066      CLR.L   D1
0000158A                          1067                       * set register
0000158A                          1068                   
0000158A  3015                    1069      MOVE.W  (A5),D0     *D0 is the binary value to decode
0000158C                          1070                 
0000158C  123C 000D               1071      MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001590                          1072  
00001590  E368                    1073      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001592                          1074  
00001592  123C 000D               1075      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001596                          1076  
00001596  E268                    1077      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001598                          1078  
00001598  1E00                    1079      MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
0000159A                          1080                   
0000159A                          1081                   * set mode
0000159A  4280                    1082      CLR.L D0                *clear D0
0000159C                          1083                   
0000159C  4281                    1084      CLR.L D1                *clear D1
0000159E                          1085                   
0000159E  3015                    1086      MOVE.W  (A5),D0     *D0 is the binary value to decode
000015A0                          1087                 
000015A0  123C 000A               1088      MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000015A4                          1089  
000015A4  E368                    1090      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000015A6                          1091  
000015A6  123C 000D               1092      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000015AA                          1093  
000015AA  E268                    1094      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000015AC                          1095  
000015AC  2C00                    1096      MOVE.L  D0, D6          *put D0 to data register into D7 for future printing
000015AE                          1097                   
000015AE  4EB9 000023D8           1098      JSR     PRINT_EA *by using jmp table
000015B4                          1099  
000015B4  6000 FB3A               1100      BRA PARSE_MEMORY
000015B8                          1101      
000015B8                          1102  SIZE_B 
000015B8                          1103                
000015B8  43F9 00002778           1104      LEA         SIZE_B_PRINT, A1 
000015BE                          1105      
000015BE  4EF8 1580               1106      JMP PRINT_SIZE
000015C2                          1107      
000015C2                          1108  SIZE_W 
000015C2                          1109                
000015C2  43F9 0000277E           1110      LEA         SIZE_W_PRINT, A1 
000015C8                          1111      
000015C8  4EF8 1580               1112      JMP PRINT_SIZE
000015CC                          1113      
000015CC                          1114  SIZE_L 
000015CC                          1115                
000015CC  43F9 00002784           1116      LEA         SIZE_L_PRINT, A1 
000015D2                          1117      
000015D2  4EF8 1580               1118      JMP PRINT_SIZE
000015D6                          1119      
000015D6                          1120  
000015D6                          1121   *   END    START        ; last line of source
000015D6                          1122  
000015D6                          1123  
000015D6                          1124  
000015D6                          1125  
000015D6                          1126  
000015D6                          1127  
000015D6                          1128  
000015D6                          1129  
000015D6                          1130  
000015D6                          1131  
000015D6                          1132  
000015D6                          1133  
000015D6                          1134  
000015D6                          1135  
000015D6                          1136  -------------------- end include --------------------
000015D6                          1137                  INCLUDE 'DIVU_OR.X68'
000015D6                          1138      
000015D6  4EB9 000020E8           1139  DIVU_OR          JSR      GET_SIZE_PURPLE  
000015DC                          1140                                            
000015DC  BA3C 0003               1141                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
000015E0                          1142                   
000015E0  6700 0008               1143                   BEQ      DIVU_CODE
000015E4                          1144                   
000015E4  4EF9 0000162C           1145                   JMP      OR_CODE
000015EA                          1146                   
000015EA                          1147  DIVU_CODE  
000015EA                          1148                   * OP_CODE message
000015EA  43F9 00002730           1149                   LEA      DIVU_MESSAGE, A1
000015F0  103C 000E               1150                   MOVE.B   #14, D0
000015F4  4E4F                    1151                   TRAP #15
000015F6                          1152  
000015F6  3A3C 0001               1153                   MOVE    #%01, D5          
000015FA                          1154                   
000015FA  43F9 0000277E           1155                   LEA      SIZE_W_PRINT,    A1
00001600                          1156                   
00001600  103C 000E               1157                   MOVE.B   #14,             D0
00001604                          1158          
00001604  4E4F                    1159                   TRAP #15
00001606                          1160                   
00001606  4EB9 00002168           1161                   JSR     Set_Ea
0000160C                          1162                   
0000160C  4EB9 000023D8           1163                   JSR     PRINT_EA *by using jmp table
00001612                          1164                   
00001612  4EB9 00002148           1165                   JSR     PRINT_COMMA
00001618                          1166                   
00001618                          1167                    * for the first Dn 
00001618  4EB9 00002156           1168                   JSR     GET_Data_Register
0000161E                          1169                   
0000161E  1C3C 0000               1170                   MOVE.B  #%000, D6 * for mode
00001622                          1171  
00001622  4EB9 000023D8           1172                   JSR     PRINT_EA *by using jmp table
00001628                          1173  
00001628  4EF8 10F0               1174                   JMP     PARSE_MEMORY
0000162C                          1175  
0000162C                          1176  OR_CODE    
0000162C                          1177                   * OP_CODE message
0000162C  43F9 00002736           1178                   LEA      OR_MESSAGE, A1
00001632  103C 000E               1179                   MOVE.B   #14, D0
00001636  4E4F                    1180                   TRAP #15
00001638                          1181  
00001638  4EB9 000020FE           1182                   JSR PRINTOUT_SIZE_PURPLE
0000163E                          1183                   
0000163E                          1184                     * check for dn and ea
0000163E  4280                    1185                   CLR.L D0                *clear D0
00001640                          1186                   
00001640  4281                    1187                   CLR.L D1                *clear D1
00001642                          1188                   
00001642  3015                    1189                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001644                          1190                   
00001644  0800 0008               1191                   BTST    #8, D0
00001648                          1192                   
00001648  6700 0028               1193                   BEQ     OR_FIRST_EA
0000164C                          1194                   
0000164C                          1195                   * for the first Dn 
0000164C  4EB9 00002156           1196                   JSR     GET_Data_Register
00001652                          1197                   
00001652  1C3C 0000               1198                   MOVE.B  #%000, D6 * for mode
00001656                          1199                   
00001656  4EB9 000023D8           1200                   JSR     PRINT_EA *by using jmp table
0000165C                          1201                   
0000165C  4EB9 00002148           1202                   JSR     PRINT_COMMA
00001662                          1203                   
00001662  4EB9 00002168           1204                   JSR     Set_Ea
00001668                          1205                   
00001668  4EB9 000023D8           1206                   JSR     PRINT_EA *by using jmp table
0000166E                          1207                   
0000166E  4EF8 10F0               1208                   JMP     PARSE_MEMORY
00001672                          1209                   
00001672                          1210  OR_FIRST_EA
00001672  4EB9 00002168           1211                   JSR     Set_Ea
00001678                          1212                   
00001678  4EB9 000023D8           1213                   JSR     PRINT_EA *by using jmp table
0000167E                          1214                   
0000167E  4EB9 00002148           1215                   JSR     PRINT_COMMA
00001684                          1216                   
00001684                          1217                    * for the first Dn 
00001684  4EB9 00002156           1218                   JSR     GET_Data_Register
0000168A                          1219                   
0000168A  1C3C 0000               1220                   MOVE.B  #%000, D6 * for mode
0000168E                          1221  
0000168E  4EB9 000023D8           1222                   JSR     PRINT_EA *by using jmp table
00001694                          1223                   
00001694  4EF8 10F0               1224                   JMP     PARSE_MEMORY
00001698                          1225  
00001698                          1226  
00001698                          1227  
00001698                          1228  
00001698                          1229  
00001698                          1230  
00001698                          1231  
00001698                          1232  
00001698                          1233  -------------------- end include --------------------
00001698                          1234                  INCLUDE 'GROUP_0100_CODE.X68'
00001698                          1235  GROUP_0100_CODE          *at this point we know the first 4 bits are 0100 -> NOP, RTS, JSR,  MOVEM, CLR
00001698                          1236  
00001698  4280                    1237                   CLR.L D0                *clear D0
0000169A                          1238                   
0000169A  4281                    1239                   CLR.L D1                *clear D1
0000169C                          1240                   
0000169C  3015                    1241                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000169E                          1242  
0000169E  123C 0004               1243                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
000016A2                          1244  
000016A2  E368                    1245                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
000016A4                          1246                   
000016A4  123C 0004               1247                   MOVE.B  #4,D1           *4 bits is the number of times to shift to hold everything except the opcode
000016A8                          1248  
000016A8  E268                    1249                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds everything except opcode
000016AA                          1250                   
000016AA                          1251                                              
000016AA  B07C 0E71               1252                   CMP.W    #$E71, D0      *if D0 holds E71, the opcode is NOP
000016AE                          1253                   
000016AE  6700 FE36               1254                   BEQ      NOP_OPCODE       *Branch to NOP_CODE if the opcode is NOP
000016B2                          1255                   
000016B2                          1256                   
000016B2  B07C 0E75               1257                   CMP.W    #$E75, D0      *if D0 holds E75, the opcode is RTS
000016B6                          1258                   
000016B6  6700 FE3E               1259                   BEQ      RTS_OPCODE       *Branch to RTS_CODE if the opcode is RTS
000016BA                          1260                   
000016BA                          1261                   
000016BA  4280                    1262                   CLR.L D0                *clear D0
000016BC                          1263                   
000016BC                          1264                   
000016BC  4281                    1265                   CLR.L D1                *clear D1
000016BE                          1266                   
000016BE                          1267                   
000016BE  3015                    1268                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000016C0                          1269  
000016C0                          1270  
000016C0  123C 0004               1271                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
000016C4                          1272  
000016C4                          1273  
000016C4  E368                    1274                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
000016C6                          1275                   
000016C6  123C 000C               1276                   MOVE.B  #12,D1           *12 bits is the number of times to shift to hold the 4th-8th bits (counting left to right, non-inclusive)
000016CA                          1277  
000016CA  E268                    1278                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds 4th-8th bits (counting left to right, non-inclusive)
000016CC                          1279                   
000016CC  B07C 0002               1280                   CMP.W    #$2, D0        *if D0 holds #2, the opcode is CLR
000016D0                          1281                   
000016D0  6700 FE6A               1282                   BEQ      CLR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
000016D4                          1283                   
000016D4                          1284          
000016D4  B07C 000E               1285                   CMP.W    #$E, D0        *if D0 holds $E = 14, the opcode is JSR
000016D8                          1286                   
000016D8  6700 FE2C               1287                   BEQ      JSR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
000016DC                          1288                   
000016DC  4280                    1289                   CLR.L D0                *clear D0
000016DE                          1290                   
000016DE  4281                    1291                   CLR.L D1                *clear D1
000016E0                          1292                   
000016E0  3015                    1293                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000016E2                          1294  
000016E2  123C 0007               1295                   MOVE.B  #7,D1 
000016E6                          1296  
000016E6  E368                    1297                   LSL.W   D1,D0 
000016E8                          1298                   
000016E8  123C 000D               1299                   MOVE.B  #13,D1 
000016EC                          1300  
000016EC  E268                    1301                   LSR.W   D1,D0     
000016EE                          1302                   
000016EE  B07C 0007               1303                   CMP.W    #%111, D0  
000016F2                          1304                   
000016F2  6700 FD98               1305                   BEQ LEA_OPCODE
000016F6                          1306                   
000016F6  6000 00C0               1307                   BRA      MOVEM_OPCODE     *else it is a MOVEM
000016FA                          1308  
000016FA                          1309      
000016FA                          1310  
000016FA                          1311  
000016FA                          1312  
000016FA                          1313  
000016FA                          1314  
000016FA                          1315  -------------------- end include --------------------
000016FA                          1316                  INCLUDE 'MULS_AND.X68'
000016FA                          1317   
000016FA  4EB9 000020E8           1318  MULS_AND         JSR      GET_SIZE_PURPLE
00001700                          1319                                              
00001700  BA3C 0003               1320                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
00001704                          1321                   
00001704  6700 0008               1322                   BEQ      MULS_CODE
00001708                          1323                   
00001708  4EF9 0000174C           1324                   JMP      AND_CODE
0000170E                          1325                   
0000170E                          1326  MULS_CODE
0000170E                          1327                   * OP_CODE message
0000170E  43F9 00002744           1328                   LEA MULS_MESSAGE, A1
00001714                          1329                   
00001714  103C 000E               1330                   MOVE.B #14, D0
00001718                          1331                   
00001718  4E4F                    1332                   TRAP #15
0000171A                          1333  
0000171A  43F9 0000277E           1334                   LEA      SIZE_W_PRINT,    A1
00001720                          1335                   
00001720  103C 000E               1336                   MOVE.B   #14,             D0
00001724                          1337          
00001724  4E4F                    1338                   TRAP #15
00001726                          1339                   
00001726  4EB9 00002168           1340                   JSR     Set_Ea
0000172C                          1341                   
0000172C  4EB9 000023D8           1342                   JSR     PRINT_EA *by using jmp table
00001732                          1343                   
00001732  4EB9 00002148           1344                   JSR     PRINT_COMMA
00001738                          1345                   
00001738                          1346                    * for the first Dn 
00001738  4EB9 00002156           1347                   JSR     GET_Data_Register
0000173E                          1348                   
0000173E  1C3C 0000               1349                   MOVE.B  #%000, D6 * for mode
00001742                          1350  
00001742  4EB9 000023D8           1351                   JSR     PRINT_EA *by using jmp table
00001748                          1352  
00001748  4EF8 10F0               1353                   JMP      PARSE_MEMORY
0000174C                          1354  
0000174C                          1355  AND_CODE
0000174C                          1356                   * OP_CODE message
0000174C  43F9 0000274A           1357                   LEA AND_MESSAGE, A1
00001752  103C 000E               1358                   MOVE.B #14, D0
00001756  4E4F                    1359                   TRAP #15
00001758                          1360                   
00001758  4EB9 000020FE           1361                   JSR PRINTOUT_SIZE_PURPLE
0000175E                          1362                   
0000175E                          1363                     * check for dn and ea
0000175E  4280                    1364                   CLR.L D0                *clear D0
00001760                          1365                   
00001760  4281                    1366                   CLR.L D1                *clear D1
00001762                          1367                   
00001762  3015                    1368                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001764                          1369                   
00001764  0800 0008               1370                   BTST    #8, D0
00001768                          1371                   
00001768  6700 0028               1372                   BEQ     AND_FIRST_EA
0000176C                          1373                   
0000176C                          1374                   * for the first Dn 
0000176C  4EB9 00002156           1375                   JSR     GET_Data_Register
00001772                          1376                   
00001772  1C3C 0000               1377                   MOVE.B  #%000, D6 * for mode
00001776                          1378                   
00001776  4EB9 000023D8           1379                   JSR     PRINT_EA *by using jmp table
0000177C                          1380                   
0000177C  4EB9 00002148           1381                   JSR     PRINT_COMMA
00001782                          1382                   
00001782  4EB9 00002168           1383                   JSR     Set_Ea
00001788                          1384                   
00001788  4EB9 000023D8           1385                   JSR     PRINT_EA *by using jmp table
0000178E                          1386                   
0000178E  4EF8 10F0               1387                   JMP      PARSE_MEMORY
00001792                          1388                   
00001792                          1389  AND_FIRST_EA
00001792  4EB9 00002168           1390                   JSR     Set_Ea
00001798                          1391                   
00001798  4EB9 000023D8           1392                   JSR     PRINT_EA *by using jmp table
0000179E                          1393                   
0000179E  4EB9 00002148           1394                   JSR     PRINT_COMMA
000017A4                          1395                   
000017A4                          1396                    * for the first Dn 
000017A4  4EB9 00002156           1397                   JSR     GET_Data_Register
000017AA                          1398                   
000017AA  1C3C 0000               1399                   MOVE.B  #%000, D6 * for mode
000017AE                          1400  
000017AE  4EB9 000023D8           1401                   JSR     PRINT_EA *by using jmp table
000017B4                          1402                   
000017B4  4EF8 10F0               1403                   JMP      PARSE_MEMORY
000017B8                          1404  
000017B8                          1405  
000017B8                          1406  
000017B8                          1407  
000017B8                          1408  
000017B8                          1409  
000017B8                          1410  
000017B8                          1411  
000017B8                          1412  
000017B8                          1413  -------------------- end include --------------------
000017B8                          1414                  INCLUDE 'MOVEM.X68'
000017B8                          1415     
000017B8                          1416  
000017B8                          1417  MOVEM_OPCODE
000017B8                          1418  
000017B8  4280                    1419     CLR.L       D0               *Zero it
000017BA                          1420     
000017BA  4286                    1421     CLR.L       D6
000017BC                          1422  
000017BC  3015                    1423     MOVE.W      (A5), D0     *We'll play with it here
000017BE                          1424  
000017BE  43F9 000026D4           1425     LEA MOVEM_MESSAGE, A1
000017C4                          1426            
000017C4  103C 000E               1427     MOVE.B #14, D0
000017C8                          1428                   
000017C8  4E4F                    1429     TRAP #15    
000017CA                          1430  
000017CA  3015                    1431    MOVE.W     (A5), D0
000017CC                          1432  
000017CC  0800 0006               1433    BTST       #6,  D0      
000017D0                          1434  
000017D0  6600 0012               1435    BNE        PRINT_SIZE_L_MOVEM
000017D4                          1436  
000017D4  43F9 0000277E           1437    LEA SIZE_W_PRINT, A1
000017DA                          1438            
000017DA  103C 000E               1439    MOVE.B #14, D0
000017DE                          1440                   
000017DE  4E4F                    1441    TRAP #15    
000017E0                          1442   
000017E0  6000 000E               1443    BRA          DR_FIELD
000017E4                          1444      
000017E4                          1445    * Print out size for W
000017E4                          1446  PRINT_SIZE_L_MOVEM
000017E4                          1447  
000017E4  43F9 00002784           1448    LEA SIZE_L_PRINT, A1
000017EA                          1449            
000017EA  103C 000E               1450    MOVE.B #14, D0
000017EE                          1451                   
000017EE  4E4F                    1452    TRAP #15    
000017F0                          1453  
000017F0                          1454  DR_FIELD
000017F0                          1455                 
000017F0  0800 000A               1456    BTST        #10,  D0    * BIT TEST
000017F4                          1457  
000017F4  6700 000C               1458    BEQ         Regitset_Memory *if D0 holds a 1
000017F8                          1459  
000017F8  6000 0062               1460    BRA         Memory_Register *If D0 hollds a 0
000017FC                          1461  
000017FC  4284                    1462    CLR.L D4
000017FE                          1463  
000017FE  183C 000F               1464    MOVE.B #15, D4
00001802                          1465  
00001802                          1466  Regitset_Memory
00001802  361E                    1467      MOVE.W      (A6)+, D3
00001804                          1468      
00001804                          1469      * CHECK IF PRE DECREMEMNT
00001804  3015                    1470      MOVE.W (A5), D0
00001806                          1471      
00001806  123C 000A               1472      MOVE.B      #10, D1
0000180A                          1473      
0000180A  E368                    1474      LSL.W       D1, D0
0000180C                          1475  
0000180C  123C 000D               1476      MOVE.B      #13, D1
00001810                          1477  
00001810  E268                    1478      LSR.W       D1, D0
00001812                          1479  
00001812  B03C 0004               1480      CMP.B       #%100, D0
00001816                          1481  
00001816  6700 0064               1482      BEQ         OPPOSITE_LOOP 
0000181A                          1483      * NOW IT CAN BE IN REGULAR ORDER
0000181A                          1484      
0000181A  183C 000F               1485      MOVE.B      #15, D4
0000181E                          1486      
0000181E  4EB9 00001A52           1487      JSR         LOOP_MOVEM
00001824                          1488      
00001824  43F9 000027AA           1489      LEA COMMA, A1
0000182A                          1490      
0000182A  103C 000E               1491      MOVE.B      #14, D0
0000182E                          1492      
0000182E  4E4F                    1493      TRAP #15
00001830                          1494      
00001830  4EB9 0000183A           1495      JSR PRINT_ADDRESS
00001836                          1496      
00001836  6000 F8B8               1497      BRA PARSE_MEMORY
0000183A                          1498  
0000183A                          1499  PRINT_ADDRESS 
0000183A  3015                    1500      MOVE.W      (A5), D0
0000183C                          1501  
0000183C  123C 000A               1502      MOVE.B      #10, D1
00001840                          1503      
00001840  E368                    1504      LSL.W       D1, D0
00001842                          1505      
00001842  123C 000D               1506      MOVE.B      #13, D1
00001846                          1507  
00001846  E268                    1508      LSR.W       D1, D0
00001848                          1509      
00001848  1C00                    1510      MOVE.B      D0, D6
0000184A                          1511      
0000184A  3015                    1512      MOVE.W      (A5), D0
0000184C                          1513      
0000184C  E368                    1514      LSL.W       D1, D0
0000184E                          1515      
0000184E  E268                    1516      LSR.W       D1, D0
00001850                          1517      
00001850  4287                    1518      CLR.L       D7
00001852                          1519      
00001852  1E00                    1520      MOVE.B      D0, D7
00001854                          1521      
00001854  4EB9 000023D8           1522      JSR PRINT_EA
0000185A                          1523      
0000185A  4E75                    1524      RTS
0000185C                          1525  
0000185C                          1526  Memory_Register
0000185C  361E                    1527      MOVE.W (A6)+, D3
0000185E                          1528      
0000185E  4EB8 183A               1529      JSR         PRINT_ADDRESS
00001862                          1530      
00001862  43F9 000027AA           1531      LEA         COMMA, A1
00001868                          1532      
00001868  103C 000E               1533      MOVE.B      #14, D0
0000186C                          1534      
0000186C  4E4F                    1535      TRAP #15
0000186E                          1536          
0000186E                          1537      *MOVE.W      (A6)+, D3
0000186E                          1538      
0000186E  183C 000F               1539      MOVE.B      #15, D4
00001872                          1540      
00001872  4EB9 00001A52           1541      JSR         LOOP_MOVEM
00001878                          1542      
00001878  6000 F876               1543      BRA PARSE_MEMORY
0000187C                          1544  
0000187C                          1545  
0000187C                          1546  OPPOSITE_LOOP
0000187C  4241                    1547      CLR         D1
0000187E                          1548  
0000187E                          1549      *MOVE.W      (A6)+, D3
0000187E                          1550      
0000187E  183C 000F               1551      MOVE.B      #15, D4
00001882                          1552      
00001882  4EB9 0000189C           1553      JSR OPPOSITE_LOOP_MOVEM
00001888                          1554      
00001888  43F9 000027AA           1555      LEA COMMA, A1
0000188E                          1556      
0000188E  103C 000E               1557      MOVE.B      #14, D0
00001892                          1558      
00001892  4E4F                    1559      TRAP #15
00001894                          1560      
00001894  4EB8 183A               1561      JSR PRINT_ADDRESS
00001898                          1562      
00001898  6000 F856               1563      BRA PARSE_MEMORY
0000189C                          1564  
0000189C                          1565          
0000189C                          1566  OPPOSITE_LOOP_MOVEM
0000189C                          1567          
0000189C  0903                    1568      BTST        D4, D3     * BIT TEST
0000189E                          1569  
0000189E  6600 0020               1570      BNE         OPPOSITE_IS_USED_FIRST
000018A2                          1571  
000018A2  5304                    1572      SUB.B       #1, D4
000018A4                          1573      
000018A4                          1574  OPPOSITE_CHECK
000018A4  B83C 00FF               1575      CMP.B       #-1,  D4
000018A8                          1576  
000018A8  6700 0D1A               1577      BEQ         DONE
000018AC                          1578  
000018AC  60EE                    1579      BRA         OPPOSITE_LOOP_MOVEM
000018AE                          1580      
000018AE                          1581  OPPOSITE_LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
000018AE  0903                    1582      BTST        D4, D3     * BIT TEST
000018B0                          1583  
000018B0  6600 0018               1584      BNE         OPPOSITE_IS_USED
000018B4                          1585  
000018B4  5304                    1586      SUB.B       #1, D4
000018B6                          1587      
000018B6                          1588  OPPOSITE_CHECK_SECOND
000018B6  B83C 00FF               1589      CMP.B       #-1,  D4
000018BA                          1590  
000018BA  6700 0D08               1591      BEQ         DONE
000018BE                          1592  
000018BE  60EE                    1593      BRA         OPPOSITE_LOOP_MOVEM_SECOND
000018C0                          1594  
000018C0                          1595  OPPOSITE_IS_USED_FIRST
000018C0  4EB9 000018E0           1596      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
000018C6                          1597  
000018C6  5304                    1598      SUB.B       #1, D4
000018C8                          1599  
000018C8  60EC                    1600      BRA         OPPOSITE_CHECK_SECOND
000018CA                          1601  
000018CA                          1602  
000018CA                          1603  OPPOSITE_IS_USED
000018CA  43F9 00002793           1604      LEA         SLASH, A1
000018D0                          1605  
000018D0  103C 000E               1606      MOVE.B      #14, D0
000018D4                          1607  
000018D4  4E4F                    1608      TRAP #15
000018D6                          1609      
000018D6  4EB9 000018E0           1610      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
000018DC                          1611  
000018DC  5304                    1612      SUB.B       #1, D4
000018DE                          1613  
000018DE  60D6                    1614      BRA         OPPOSITE_CHECK_SECOND
000018E0                          1615  
000018E0                          1616      
000018E0                          1617      
000018E0                          1618  OPPOSITE_PRINT_REGISTER_MOVEM
000018E0  41F9 000018F2           1619      LEA        OPPOSITE_jmp_table_MOVEM, A0
000018E6  4242                    1620      CLR        D2
000018E8  143C 0006               1621      MOVE.B     #6, D2
000018EC  C4C4                    1622      MULU       D4, D2                           
000018EE  4EF0 2000               1623      JMP        0(A0,D2)   *Jump indirect with index
000018F2                          1624                      
000018F2                          1625  OPPOSITE_jmp_table_MOVEM      
000018F2  4EF9 00001952           1626      JMP         OPPOSITE_bit0
000018F8  4EF9 00001962           1627                 JMP         OPPOSITE_bit1
000018FE  4EF9 00001972           1628                 JMP         OPPOSITE_bit2
00001904  4EF9 00001982           1629                 JMP         OPPOSITE_bit3
0000190A  4EF9 00001992           1630                 JMP         OPPOSITE_bit4
00001910  4EF9 000019A2           1631                 JMP         OPPOSITE_bit5
00001916  4EF9 000019B2           1632                 JMP         OPPOSITE_bit6
0000191C  4EF9 000019C2           1633                 JMP         OPPOSITE_bit7
00001922  4EF9 000019D2           1634                 JMP         OPPOSITE_bit8
00001928  4EF9 000019E2           1635                 JMP         OPPOSITE_bit9
0000192E  4EF9 000019F2           1636                 JMP         OPPOSITE_bit10
00001934  4EF9 00001A02           1637                 JMP         OPPOSITE_bit11
0000193A  4EF9 00001A12           1638                 JMP         OPPOSITE_bit12
00001940  4EF9 00001A22           1639                 JMP         OPPOSITE_bit13
00001946  4EF9 00001A32           1640                 JMP         OPPOSITE_bit14
0000194C  4EF9 00001A42           1641                 JMP         OPPOSITE_bit15
00001952                          1642          
00001952                          1643   
00001952                          1644   
00001952                          1645   
00001952                          1646  OPPOSITE_bit0    * D0
00001952  1E3C 0007               1647      MOVE.B    #%111, D7    * REGISTER
00001956                          1648      
00001956  1C3C 0001               1649      MOVE.B    #%001, D6    * MODE
0000195A                          1650  
0000195A  4EB9 000023D8           1651      JSR        PRINT_EA
00001960                          1652  
00001960  4E75                    1653      RTS    
00001962                          1654  
00001962                          1655  OPPOSITE_bit1    * D1
00001962  1E3C 0006               1656      MOVE.B    #%110, D7    * REGISTER
00001966                          1657      
00001966  1C3C 0001               1658      MOVE.B    #%001, D6    * MODE
0000196A                          1659  
0000196A  4EB9 000023D8           1660      JSR        PRINT_EA
00001970                          1661  
00001970  4E75                    1662      RTS    
00001972                          1663  
00001972                          1664  OPPOSITE_bit2    * D2
00001972  1E3C 0005               1665      MOVE.B    #%101, D7    * REGISTER
00001976                          1666      
00001976  1C3C 0001               1667      MOVE.B    #%001, D6    * MODE
0000197A                          1668  
0000197A  4EB9 000023D8           1669      JSR        PRINT_EA    
00001980                          1670  
00001980  4E75                    1671      RTS
00001982                          1672  
00001982                          1673  OPPOSITE_bit3    * D3
00001982  1E3C 0004               1674      MOVE.B    #%100, D7    * REGISTER
00001986                          1675      
00001986  1C3C 0001               1676      MOVE.B    #%001, D6    * MODE
0000198A                          1677  
0000198A  4EB9 000023D8           1678      JSR        PRINT_EA
00001990                          1679  
00001990  4E75                    1680      RTS    
00001992                          1681  
00001992                          1682  OPPOSITE_bit4    * D4
00001992  1E3C 0003               1683      MOVE.B    #%011, D7    * REGISTER
00001996                          1684  
00001996  1C3C 0001               1685      MOVE.B    #%001, D6    * MODE
0000199A                          1686  
0000199A  4EB9 000023D8           1687      JSR        PRINT_EA
000019A0                          1688  
000019A0  4E75                    1689      RTS    
000019A2                          1690  
000019A2                          1691  
000019A2                          1692  OPPOSITE_bit5    * D5
000019A2  1E3C 0002               1693      MOVE.B    #%010, D7    * REGISTER
000019A6                          1694      
000019A6  1C3C 0001               1695      MOVE.B    #%001, D6    * MODE
000019AA                          1696  
000019AA  4EB9 000023D8           1697      JSR        PRINT_EA
000019B0                          1698  
000019B0  4E75                    1699      RTS    
000019B2                          1700  
000019B2                          1701  OPPOSITE_bit6    * D6
000019B2  1E3C 0001               1702      MOVE.B    #%001, D7    * REGISTER
000019B6                          1703      
000019B6  1C3C 0001               1704      MOVE.B    #%001, D6    * MODE
000019BA                          1705  
000019BA  4EB9 000023D8           1706      JSR        PRINT_EA
000019C0                          1707  
000019C0  4E75                    1708      RTS    
000019C2                          1709  
000019C2                          1710  OPPOSITE_bit7    * D7
000019C2  1E3C 0000               1711      MOVE.B    #%000, D7    * REGISTER
000019C6                          1712      
000019C6  1C3C 0001               1713      MOVE.B    #%001, D6    * MODE
000019CA                          1714  
000019CA  4EB9 000023D8           1715      JSR        PRINT_EA
000019D0                          1716  
000019D0  4E75                    1717      RTS    
000019D2                          1718  
000019D2                          1719  OPPOSITE_bit8    * A0
000019D2  1E3C 0007               1720      MOVE.B    #%111, D7    * REGISTER
000019D6                          1721      
000019D6  1C3C 0000               1722      MOVE.B    #%000, D6    * MODE
000019DA                          1723  
000019DA  4EB9 000023D8           1724      JSR        PRINT_EA
000019E0                          1725  
000019E0  4E75                    1726      RTS    
000019E2                          1727  
000019E2                          1728  OPPOSITE_bit9    * A1
000019E2  1E3C 0006               1729      MOVE.B    #%110, D7    * REGISTER
000019E6                          1730      
000019E6  1C3C 0000               1731      MOVE.B    #%000, D6    * MODE
000019EA                          1732  
000019EA  4EB9 000023D8           1733      JSR        PRINT_EA
000019F0                          1734  
000019F0  4E75                    1735      RTS    
000019F2                          1736  
000019F2                          1737  OPPOSITE_bit10    * A2
000019F2  1E3C 0005               1738      MOVE.B    #%101, D7    * REGISTER
000019F6                          1739      
000019F6  1C3C 0000               1740      MOVE.B    #%000, D6    * MODE
000019FA                          1741  
000019FA  4EB9 000023D8           1742      JSR        PRINT_EA
00001A00                          1743  
00001A00  4E75                    1744      RTS    
00001A02                          1745  
00001A02                          1746  
00001A02                          1747  OPPOSITE_bit11    * A5
00001A02  1E3C 0002               1748      MOVE.B    #%010, D7    * REGISTER
00001A06                          1749      
00001A06  1C3C 0000               1750      MOVE.B    #%000, D6    * MODE
00001A0A                          1751  
00001A0A  4EB9 000023D8           1752      JSR        PRINT_EA
00001A10                          1753  
00001A10  4E75                    1754      RTS    
00001A12                          1755  
00001A12                          1756  OPPOSITE_bit12    * A4
00001A12  1E3C 0003               1757      MOVE.B    #%011, D7    * REGISTER
00001A16                          1758      
00001A16  1C3C 0000               1759      MOVE.B    #%000, D6    * MODE
00001A1A                          1760  
00001A1A  4EB9 000023D8           1761      JSR        PRINT_EA
00001A20                          1762  
00001A20  4E75                    1763      RTS    
00001A22                          1764  
00001A22                          1765  
00001A22                          1766  OPPOSITE_bit13    * A5
00001A22  1E3C 0002               1767      MOVE.B    #%010, D7    * REGISTER
00001A26                          1768      
00001A26  1C3C 0000               1769      MOVE.B    #%000, D6    * MODE
00001A2A                          1770  
00001A2A  4EB9 000023D8           1771      JSR        PRINT_EA
00001A30                          1772  
00001A30  4E75                    1773      RTS    
00001A32                          1774  
00001A32                          1775  
00001A32                          1776  OPPOSITE_bit14     * A6
00001A32  1E3C 0001               1777      MOVE.B    #%001, D7    * REGISTER
00001A36                          1778      
00001A36  1C3C 0000               1779      MOVE.B    #%000, D6    * MODE
00001A3A                          1780  
00001A3A  4EB9 000023D8           1781      JSR        PRINT_EA
00001A40                          1782  
00001A40  4E75                    1783      RTS        
00001A42                          1784  
00001A42                          1785  
00001A42                          1786  OPPOSITE_bit15    * A7
00001A42  1E3C 0000               1787      MOVE.B    #%000, D7    * REGISTER
00001A46                          1788      
00001A46  1C3C 0000               1789      MOVE.B    #%000, D6    * MODE
00001A4A                          1790  
00001A4A  4EB9 000023D8           1791      JSR        PRINT_EA
00001A50                          1792  
00001A50  4E75                    1793      RTS    
00001A52                          1794  
00001A52                          1795  
00001A52                          1796  
00001A52                          1797  
00001A52                          1798  
00001A52                          1799  LOOP_MOVEM
00001A52                          1800          
00001A52  0903                    1801      BTST        D4, D3     * BIT TEST
00001A54                          1802  
00001A54  6600 0020               1803      BNE         IS_USED_FIRST
00001A58                          1804  
00001A58  5304                    1805      SUB.B       #1, D4
00001A5A                          1806      
00001A5A                          1807  CHECK
00001A5A  B83C 00FF               1808      CMP.B       #-1,  D4
00001A5E                          1809  
00001A5E  6700 0B64               1810      BEQ         DONE
00001A62                          1811  
00001A62  60EE                    1812      BRA         LOOP_MOVEM
00001A64                          1813      
00001A64                          1814  LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
00001A64  0903                    1815      BTST        D4, D3     * BIT TEST
00001A66                          1816  
00001A66  6600 0018               1817      BNE         IS_USED
00001A6A                          1818  
00001A6A  5304                    1819      SUB.B       #1, D4
00001A6C                          1820      
00001A6C                          1821  CHECK_SECOND
00001A6C  B83C 00FF               1822      CMP.B       #-1,  D4
00001A70                          1823  
00001A70  6700 0B52               1824      BEQ         DONE
00001A74                          1825  
00001A74  60EE                    1826      BRA         LOOP_MOVEM_SECOND
00001A76                          1827  
00001A76                          1828  IS_USED_FIRST
00001A76  4EB9 00001A96           1829      JSR         PRINT_REGISTER_MOVEM
00001A7C                          1830  
00001A7C  5304                    1831      SUB.B       #1, D4
00001A7E                          1832  
00001A7E  60EC                    1833      BRA         CHECK_SECOND
00001A80                          1834  
00001A80                          1835  
00001A80                          1836  IS_USED
00001A80  43F9 00002793           1837      LEA         SLASH, A1
00001A86                          1838  
00001A86  103C 000E               1839      MOVE.B      #14, D0
00001A8A                          1840  
00001A8A  4E4F                    1841      TRAP #15
00001A8C                          1842      
00001A8C  4EB9 00001A96           1843      JSR         PRINT_REGISTER_MOVEM
00001A92                          1844  
00001A92  5304                    1845      SUB.B       #1, D4
00001A94                          1846  
00001A94  60D6                    1847      BRA         CHECK_SECOND
00001A96                          1848  
00001A96                          1849  
00001A96                          1850  
00001A96                          1851  
00001A96                          1852  
00001A96                          1853  PRINT_REGISTER_MOVEM
00001A96  41F9 00001AA8           1854      LEA         jmp_table_MOVEM, A0
00001A9C  4242                    1855      CLR         D2
00001A9E  143C 0006               1856      MOVE.B      #6, D2
00001AA2  C4C4                    1857      MULU        D4, D2                           
00001AA4  4EF0 2000               1858      JMP         0(A0,D2)   *Jump indirect with index
00001AA8                          1859                      
00001AA8                          1860  jmp_table_MOVEM      
00001AA8  4EF9 00001B08           1861      JMP         bit0
00001AAE  4EF9 00001B18           1862                 JMP         bit1
00001AB4  4EF9 00001B28           1863                 JMP         bit2
00001ABA  4EF9 00001B38           1864                 JMP         bit3
00001AC0  4EF9 00001B48           1865                 JMP         bit4
00001AC6  4EF9 00001B58           1866                 JMP         bit5
00001ACC  4EF9 00001B68           1867                 JMP         bit6
00001AD2  4EF9 00001B78           1868                 JMP         bit7
00001AD8  4EF9 00001B88           1869                 JMP         bit8
00001ADE  4EF9 00001B98           1870                 JMP         bit9
00001AE4  4EF9 00001BA8           1871                 JMP         bit10
00001AEA  4EF9 00001BB8           1872                 JMP         bit11
00001AF0  4EF9 00001BC8           1873                 JMP         bit12
00001AF6  4EF9 00001BD8           1874                 JMP         bit13
00001AFC  4EF9 00001BE8           1875                 JMP         bit14
00001B02  4EF9 00001BF8           1876                 JMP         bit15
00001B08                          1877          
00001B08                          1878   
00001B08                          1879   
00001B08                          1880   
00001B08                          1881  bit0    * D0
00001B08  1E3C 0000               1882      MOVE.B    #%000, D7    * REGISTER
00001B0C                          1883      
00001B0C  1C3C 0000               1884      MOVE.B    #%000, D6    * MODE
00001B10                          1885  
00001B10  4EB9 000023D8           1886      JSR        PRINT_EA
00001B16                          1887  
00001B16  4E75                    1888      RTS    
00001B18                          1889  
00001B18                          1890  bit1    * D1
00001B18  1E3C 0001               1891      MOVE.B    #%001, D7    * REGISTER
00001B1C                          1892      
00001B1C  1C3C 0000               1893      MOVE.B    #%000, D6    * MODE
00001B20                          1894  
00001B20  4EB9 000023D8           1895      JSR        PRINT_EA
00001B26                          1896  
00001B26  4E75                    1897      RTS    
00001B28                          1898  
00001B28                          1899  bit2    * D2
00001B28  1E3C 0002               1900      MOVE.B    #%010, D7    * REGISTER
00001B2C                          1901      
00001B2C  1C3C 0000               1902      MOVE.B    #%000, D6    * MODE
00001B30                          1903  
00001B30  4EB9 000023D8           1904      JSR        PRINT_EA    
00001B36                          1905  
00001B36  4E75                    1906      RTS
00001B38                          1907  
00001B38                          1908  bit3    * D3
00001B38  1E3C 0003               1909      MOVE.B    #%011, D7    * REGISTER
00001B3C                          1910      
00001B3C  1C3C 0000               1911      MOVE.B    #%000, D6    * MODE
00001B40                          1912  
00001B40  4EB9 000023D8           1913      JSR        PRINT_EA
00001B46                          1914  
00001B46  4E75                    1915      RTS    
00001B48                          1916  
00001B48                          1917  bit4    * D4
00001B48  1E3C 0004               1918      MOVE.B    #%100, D7    * REGISTER
00001B4C                          1919  
00001B4C  1C3C 0000               1920      MOVE.B    #%000, D6    * MODE
00001B50                          1921  
00001B50  4EB9 000023D8           1922      JSR        PRINT_EA
00001B56                          1923  
00001B56  4E75                    1924      RTS    
00001B58                          1925  
00001B58                          1926  
00001B58                          1927  bit5    * D5
00001B58  1E3C 0005               1928      MOVE.B    #%101, D7    * REGISTER
00001B5C                          1929      
00001B5C  1C3C 0000               1930      MOVE.B    #%000, D6    * MODE
00001B60                          1931  
00001B60  4EB9 000023D8           1932      JSR        PRINT_EA
00001B66                          1933  
00001B66  4E75                    1934      RTS    
00001B68                          1935  
00001B68                          1936  bit6    * D6
00001B68  1E3C 0006               1937      MOVE.B    #%110, D7    * REGISTER
00001B6C                          1938      
00001B6C  1C3C 0000               1939      MOVE.B    #%000, D6    * MODE
00001B70                          1940  
00001B70  4EB9 000023D8           1941      JSR        PRINT_EA
00001B76                          1942  
00001B76  4E75                    1943      RTS    
00001B78                          1944  
00001B78                          1945  bit7    * D7
00001B78  1E3C 0007               1946      MOVE.B    #%111, D7    * REGISTER
00001B7C                          1947      
00001B7C  1C3C 0000               1948      MOVE.B    #%000, D6    * MODE
00001B80                          1949  
00001B80  4EB9 000023D8           1950      JSR        PRINT_EA
00001B86                          1951  
00001B86  4E75                    1952      RTS    
00001B88                          1953  
00001B88                          1954  bit8    * A0
00001B88  1E3C 0000               1955      MOVE.B    #%000, D7    * REGISTER
00001B8C                          1956      
00001B8C  1C3C 0001               1957      MOVE.B    #%001, D6    * MODE
00001B90                          1958  
00001B90  4EB9 000023D8           1959      JSR        PRINT_EA
00001B96                          1960  
00001B96  4E75                    1961      RTS    
00001B98                          1962  
00001B98                          1963  bit9    * A1
00001B98  1E3C 0001               1964      MOVE.B    #%001, D7    * REGISTER
00001B9C                          1965      
00001B9C  1C3C 0001               1966      MOVE.B    #%001, D6    * MODE
00001BA0                          1967  
00001BA0  4EB9 000023D8           1968      JSR        PRINT_EA
00001BA6                          1969  
00001BA6  4E75                    1970      RTS    
00001BA8                          1971  
00001BA8                          1972  bit10    * A2
00001BA8  1E3C 0002               1973      MOVE.B    #%010, D7    * REGISTER
00001BAC                          1974      
00001BAC  1C3C 0001               1975      MOVE.B    #%001, D6    * MODE
00001BB0                          1976  
00001BB0  4EB9 000023D8           1977      JSR        PRINT_EA
00001BB6                          1978  
00001BB6  4E75                    1979      RTS    
00001BB8                          1980  
00001BB8                          1981  
00001BB8                          1982  bit11    * A5
00001BB8  1E3C 0003               1983      MOVE.B    #%011, D7    * REGISTER
00001BBC                          1984      
00001BBC  1C3C 0001               1985      MOVE.B    #%001, D6    * MODE
00001BC0                          1986  
00001BC0  4EB9 000023D8           1987      JSR        PRINT_EA
00001BC6                          1988  
00001BC6  4E75                    1989      RTS    
00001BC8                          1990  
00001BC8                          1991  bit12    * A4
00001BC8  1E3C 0004               1992      MOVE.B    #%100, D7    * REGISTER
00001BCC                          1993      
00001BCC  1C3C 0001               1994      MOVE.B    #%001, D6    * MODE
00001BD0                          1995  
00001BD0  4EB9 000023D8           1996      JSR        PRINT_EA
00001BD6                          1997  
00001BD6  4E75                    1998      RTS    
00001BD8                          1999  
00001BD8                          2000  
00001BD8                          2001  bit13    * A5
00001BD8  1E3C 0005               2002      MOVE.B    #%101, D7    * REGISTER
00001BDC                          2003      
00001BDC  1C3C 0001               2004      MOVE.B    #%001, D6    * MODE
00001BE0                          2005  
00001BE0  4EB9 000023D8           2006      JSR        PRINT_EA
00001BE6                          2007  
00001BE6  4E75                    2008      RTS    
00001BE8                          2009  
00001BE8                          2010  
00001BE8                          2011  bit14     * A6
00001BE8  1E3C 0006               2012      MOVE.B    #%110, D7    * REGISTER
00001BEC                          2013      
00001BEC  1C3C 0001               2014      MOVE.B    #%001, D6    * MODE
00001BF0                          2015  
00001BF0  4EB9 000023D8           2016      JSR        PRINT_EA
00001BF6                          2017  
00001BF6  4E75                    2018      RTS        
00001BF8                          2019  
00001BF8                          2020  
00001BF8                          2021  bit15    * A7
00001BF8  1E3C 0007               2022      MOVE.B    #%111, D7    * REGISTER
00001BFC                          2023      
00001BFC  1C3C 0001               2024      MOVE.B    #%001, D6    * MODE
00001C00                          2025  
00001C00  4EB9 000023D8           2026      JSR        PRINT_EA
00001C06                          2027  
00001C06  4E75                    2028      RTS    
00001C08                          2029  
00001C08                          2030  DONE_MOVEM_LOOP
00001C08  4E75                    2031      RTS
00001C0A                          2032  
00001C0A                          2033     * SIMHALT             ; halt simulator
00001C0A                          2034      *INCLUDE 'MESSAGE_Data.X68'
00001C0A                          2035     * INCLUDE 'JUMPTABLE EA.X68'
00001C0A                          2036  
00001C0A                          2037  
00001C0A                          2038     * END    START        ; last line of source
00001C0A                          2039  
00001C0A                          2040  
00001C0A                          2041  
00001C0A                          2042  
00001C0A                          2043  
00001C0A                          2044  
00001C0A                          2045  
00001C0A                          2046  
00001C0A                          2047  
00001C0A                          2048  
00001C0A                          2049  
00001C0A                          2050  
00001C0A                          2051  
00001C0A                          2052  
00001C0A                          2053  
00001C0A                          2054  
00001C0A                          2055  
00001C0A                          2056  
00001C0A                          2057  
00001C0A                          2058  
00001C0A                          2059  
00001C0A                          2060  
00001C0A                          2061  
00001C0A                          2062  
00001C0A                          2063  
00001C0A                          2064  
00001C0A                          2065  
00001C0A                          2066  
00001C0A                          2067  
00001C0A                          2068  
00001C0A                          2069  
00001C0A                          2070  
00001C0A                          2071  
00001C0A                          2072  
00001C0A                          2073  
00001C0A                          2074  
00001C0A                          2075  
00001C0A                          2076  
00001C0A                          2077  -------------------- end include --------------------
00001C0A                          2078                  INCLUDE 'MOVEQ.X68'
00001C0A                          2079  
00001C0A                          2080  MOVEQ 
00001C0A                          2081  
00001C0A                          2082                   * ADD message
00001C0A  43F9 00002729           2083                   LEA      MOVEQ_MESSAGE,    A1
00001C10  103C 000E               2084                   MOVE.B   #14,            D0
00001C14  4E4F                    2085                   TRAP #15
00001C16                          2086                   
00001C16                          2087                   * print out size L
00001C16  43F9 00002784           2088                   LEA      SIZE_L_PRINT,    A1
00001C1C  103C 000E               2089                   MOVE.B   #14,             D0          
00001C20  4E4F                    2090                   TRAP #15   
00001C22                          2091                   
00001C22                          2092                   * print out immediate Data
00001C22                          2093                   
00001C22  43F9 0000278A           2094                  LEA     POUND_SIGN, A1
00001C28                          2095              
00001C28  103C 000E               2096                  MOVE.B  #14, D0
00001C2C                          2097              
00001C2C  4E4F                    2098                  TRAP #15
00001C2E                          2099              
00001C2E  43F9 0000278C           2100                  LEA     HEX_SIGN, A1
00001C34                          2101              
00001C34  4E4F                    2102                  TRAP #15
00001C36                          2103                  
00001C36  4280                    2104                  CLR.L       D0              *Zero it
00001C38                          2105  
00001C38  3015                    2106                  MOVE.W      (A5),D0     *We'll play with it here
00001C3A                          2107                 
00001C3A  123C 0008               2108                  MOVE.B      #8, D1
00001C3E                          2109                 
00001C3E  E368                    2110                  LSL.W       D1, D0
00001C40                          2111  
00001C40  123C 0008               2112                  MOVE.B      #8,D1       *Shift 12 bits to the right  
00001C44                          2113  
00001C44  E268                    2114                  LSR.W       D1,D0           *Move the bits -> D0 holds DATA
00001C46                          2115                      
00001C46  4285                    2116                  CLR.L D5
00001C48                          2117                 
00001C48  3A00                    2118                  MOVE.W D0, D5      
00001C4A                          2119          
00001C4A  4EB9 0000233A           2120                  JSR         HEX_TO_ASCII
00001C50                          2121                  
00001C50  43F9 000027AA           2122                  LEA      COMMA,    A1
00001C56  103C 000E               2123                  MOVE.B   #14,            D0
00001C5A  4E4F                    2124                  TRAP #15
00001C5C                          2125                   
00001C5C                          2126                  * for the first Dn 
00001C5C  4286                    2127                  CLR.L D6
00001C5E                          2128                  
00001C5E  4EB9 00002156           2129                  JSR     GET_Data_Register
00001C64                          2130                  
00001C64  1C3C 0000               2131                  MOVE.B  #%000, D6 * for mode
00001C68                          2132                   
00001C68  4EB9 000023D8           2133                  JSR     PRINT_EA *by using jmp table
00001C6E                          2134                   
00001C6E  6000 F480               2135                  BRA PARSE_MEMORY
00001C72                          2136          
00001C72                          2137  
00001C72                          2138  
00001C72                          2139  
00001C72                          2140  
00001C72                          2141  
00001C72                          2142  
00001C72                          2143  
00001C72                          2144  
00001C72                          2145  
00001C72                          2146  
00001C72                          2147  
00001C72                          2148  
00001C72                          2149  -------------------- end include --------------------
00001C72                          2150                  INCLUDE 'DAMIAN_OP_CODE.X68'
00001C72  4280                    2151  SHIFTS           CLR.L D0
00001C74                          2152                      
00001C74  4286                    2153                   CLR.L D6
00001C76                          2154  
00001C76  4281                    2155                   CLR.L D1
00001C78                          2156                   
00001C78  3015                    2157                   MOVE.W (A5), D0
00001C7A                          2158                   
00001C7A  E148                    2159                   LSL.W #8, D0
00001C7C                          2160                   
00001C7C  123C 000E               2161                   MOVE.B #14, D1
00001C80                          2162                   
00001C80  E268                    2163                   LSR.W D1, D0
00001C82                          2164                   
00001C82  B03C 0003               2165                   CMP.B  #%11, D0            * check to see if its memory shift
00001C86                          2166                   
00001C86  6700 0024               2167                   BEQ MEMORY_SHIFTS
00001C8A                          2168                   
00001C8A  3015                    2169                   MOVE.W     (A5), D0
00001C8C                          2170                   
00001C8C  123C 000B               2171                   MOVE.B     #11, D1
00001C90                          2172                   
00001C90  E368                    2173                   LSL.W      D1, D0
00001C92                          2174                   
00001C92  123C 000E               2175                   MOVE.B     #14, D1
00001C96                          2176                   
00001C96  E268                    2177                   LSR.W      D1, D0
00001C98                          2178                   
00001C98  B03C 0000               2179                   CMP.B      #%00, D0
00001C9C                          2180                   
00001C9C  6700 010A               2181                   BEQ        ASD
00001CA0                          2182                   
00001CA0  B03C 0001               2183                   CMP.B      #%01, D0
00001CA4                          2184                   
00001CA4  6700 0032               2185                   BEQ        LSD
00001CA8                          2186                   
00001CA8  6000 0096               2187                   BRA        ROD
00001CAC                          2188                   
00001CAC                          2189                   
00001CAC                          2190  MEMORY_SHIFTS
00001CAC  3015                    2191                   MOVE.W (A5),D0
00001CAE                          2192                   
00001CAE  E948                    2193                   LSL.W #4,D0            *shift out the opcode
00001CB0                          2194                   
00001CB0  123C 000D               2195                   MOVE.B #13,D1          
00001CB4                          2196                   
00001CB4  E268                    2197                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there
00001CB6                          2198                   
00001CB6  B03C 0001               2199                   CMP.B #1,D0            
00001CBA                          2200                   
00001CBA  6700 001C               2201                   BEQ LSD                *if the bits are 1, it is a logical shift
00001CBE                          2202                   
00001CBE  B03C 0003               2203                   CMP.B #3,D0
00001CC2                          2204                   
00001CC2  6700 007C               2205                   BEQ ROD                *if the bits are 3, it is a rotation
00001CC6                          2206                   
00001CC6  3015                    2207                   MOVE.W (A5),D0
00001CC8                          2208                   
00001CC8  E948                    2209                   LSL.W #4,D0            *shift out the opcode
00001CCA                          2210                   
00001CCA  123C 000D               2211                   MOVE.B #13,D1          
00001CCE                          2212                   
00001CCE  E268                    2213                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there   
00001CD0                          2214                      
00001CD0  B03C 0000               2215                   CMP.B  #0, D0
00001CD4                          2216                   
00001CD4  6700 00D2               2217                   BEQ    ASD
00001CD8                          2218                   
00001CD8                          2219  
00001CD8  4280                    2220  LSD              CLR.L D0               *still need to do checks, since an asd shift could still be a possibility
00001CDA                          2221                   
00001CDA  4281                    2222                   CLR.L D1
00001CDC                          2223                                                 
00001CDC  3015                    2224                   MOVE.W (A5), D0
00001CDE                          2225                   
00001CDE  EF48                    2226                   LSL.W  #7, D0
00001CE0                          2227                   
00001CE0  123C 000F               2228                   MOVE.B #15, D1
00001CE4                          2229                   
00001CE4  E268                    2230                   LSR.W  D1, D0
00001CE6                          2231                   
00001CE6  B03C 0001               2232                   CMP.B  #1, D0
00001CEA                          2233                   
00001CEA  6700 0006               2234                   BEQ LSL
00001CEE                          2235                   
00001CEE  6000 0024               2236                   BRA LSR
00001CF2                          2237                   
00001CF2                          2238  
00001CF2                          2239  LSL
00001CF2  43F9 0000275A           2240                   LEA LSL_MESSAGE, A1    * print message
00001CF8                          2241                   
00001CF8  103C 000E               2242                   MOVE.B #14, D0
00001CFC                          2243                   
00001CFC  4E4F                    2244                   TRAP #15
00001CFE                          2245              
00001CFE  3015                    2246                   MOVE.W (A5), D0
00001D00                          2247                   
00001D00  E148                    2248                   LSL.W #8, D0
00001D02                          2249                   
00001D02  123C 000E               2250                   MOVE.B #14, D1
00001D06                          2251                   
00001D06  E268                    2252                   LSR.W D1, D0
00001D08                          2253                   
00001D08  B03C 0003               2254                   CMP.B  #%11, D0        * check to see if it is memory and not register shift
00001D0C                          2255                   
00001D0C  6700 0028               2256                   BEQ LSD_MEMORY
00001D10                          2257                   
00001D10  6000 00FA               2258                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001D14                          2259  
00001D14                          2260  LSR              
00001D14  43F9 00002769           2261                   LEA LSR_MESSAGE, A1            * print message
00001D1A                          2262                   
00001D1A  103C 000E               2263                   MOVE.B #14, D0
00001D1E                          2264                   
00001D1E  4E4F                    2265                   TRAP #15
00001D20                          2266          
00001D20  3015                    2267                   MOVE.W (A5), D0
00001D22                          2268                   
00001D22  E148                    2269                   LSL.W #8, D0
00001D24                          2270                   
00001D24  123C 000E               2271                   MOVE.B #14, D1
00001D28                          2272                   
00001D28  E268                    2273                   LSR.W D1, D0
00001D2A                          2274                   
00001D2A  B03C 0003               2275                   CMP.B  #%11, D0            * check to see if memory shift
00001D2E                          2276                   
00001D2E  6700 0006               2277                   BEQ LSD_MEMORY
00001D32                          2278                   
00001D32  6000 00D8               2279                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001D36                          2280                   
00001D36                          2281  LSD_MEMORY
00001D36  4EB9 00001EB8           2282                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001D3C                          2283                   
00001D3C  6000 F3B2               2284                   BRA PARSE_MEMORY
00001D40                          2285              
00001D40                          2286  
00001D40  4280                    2287  ROD              CLR.L D0               *same check as logical shift, since an arithmetic shift could still be possible
00001D42                          2288                   
00001D42  4281                    2289                   CLR.L D1
00001D44                          2290                   
00001D44  3015                    2291                   MOVE.W (A5), D0
00001D46                          2292                   
00001D46  EF48                    2293                   LSL.W  #7, D0
00001D48                          2294                   
00001D48  123C 000F               2295                   MOVE.B #15, D1
00001D4C                          2296                   
00001D4C  E268                    2297                   LSR.W  D1, D0
00001D4E                          2298                   
00001D4E  B03C 0001               2299                   CMP.B  #1, D0
00001D52                          2300                   
00001D52  6700 0006               2301                   BEQ ROL
00001D56                          2302                   
00001D56  6000 0024               2303                   BRA ROR
00001D5A                          2304  
00001D5A                          2305  ROL              
00001D5A  43F9 00002764           2306                   LEA ROL_MESSAGE, A1
00001D60                          2307                   
00001D60  103C 000E               2308                   MOVE.B #14, D0
00001D64                          2309                   
00001D64  4E4F                    2310                   TRAP #15
00001D66                          2311  
00001D66  3015                    2312                   MOVE.W (A5), D0
00001D68                          2313                   
00001D68  E148                    2314                   LSL.W #8, D0
00001D6A                          2315                   
00001D6A  123C 000E               2316                   MOVE.B #14, D1
00001D6E                          2317                   
00001D6E  E268                    2318                   LSR.W D1, D0
00001D70                          2319                   
00001D70  B03C 0003               2320                   CMP.B  #%11, D0            * check to see if its memory shift
00001D74                          2321                   
00001D74  6700 0028               2322                   BEQ ROD_MEMORY
00001D78                          2323                   
00001D78  6000 0092               2324                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001D7C                          2325  
00001D7C                          2326  ROR       
00001D7C  43F9 00002773           2327                   LEA ROR_MESSAGE, A1
00001D82                          2328                   
00001D82  103C 000E               2329                   MOVE.B #14, D0
00001D86                          2330                   
00001D86  4E4F                    2331                   TRAP #15
00001D88                          2332                   
00001D88  3015                    2333                   MOVE.W (A5), D0
00001D8A                          2334                   
00001D8A  E148                    2335                   LSL.W #8, D0
00001D8C                          2336                   
00001D8C  123C 000E               2337                   MOVE.B #14, D1
00001D90                          2338                   
00001D90  E268                    2339                   LSR.W D1, D0
00001D92                          2340                   
00001D92  B03C 0003               2341                   CMP.B  #%11, D0            * check to see if its memory shift
00001D96                          2342                   
00001D96  6700 0006               2343                   BEQ ROD_MEMORY
00001D9A                          2344                   
00001D9A  6000 0070               2345                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001D9E                          2346  
00001D9E                          2347  ROD_MEMORY       
00001D9E  4EB9 00001EB8           2348                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001DA4                          2349                   
00001DA4  6000 F34A               2350                   BRA PARSE_MEMORY
00001DA8                          2351                   
00001DA8                          2352                   
00001DA8  3015                    2353  ASD              MOVE.W (A5), D0
00001DAA                          2354                   
00001DAA  EF48                    2355                   LSL.W  #7, D0
00001DAC                          2356                   
00001DAC  123C 000F               2357                   MOVE.B #15, D1
00001DB0                          2358                   
00001DB0  E268                    2359                   LSR.W  D1, D0
00001DB2                          2360                   
00001DB2  B03C 0001               2361                   CMP.B  #1, D0
00001DB6                          2362                   
00001DB6  6700 0006               2363                   BEQ ASL
00001DBA                          2364                   
00001DBA  6000 0024               2365                   BRA ASR
00001DBE                          2366                   
00001DBE                          2367  ASL
00001DBE  43F9 0000275F           2368                   LEA ASL_MESSAGE, A1
00001DC4                          2369                   
00001DC4  103C 000E               2370                   MOVE.B #14, D0
00001DC8                          2371                   
00001DC8  4E4F                    2372                   TRAP #15
00001DCA                          2373                   
00001DCA  3015                    2374                   MOVE.W (A5), D0
00001DCC                          2375                   
00001DCC  E148                    2376                   LSL.W #8, D0
00001DCE                          2377                   
00001DCE  123C 000E               2378                   MOVE.B #14, D1
00001DD2                          2379                   
00001DD2  E268                    2380                   LSR.W D1, D0
00001DD4                          2381                   
00001DD4  B03C 0003               2382                   CMP.B  #%11, D0            * check to see if its memory shift
00001DD8                          2383                   
00001DD8  6700 0028               2384                   BEQ ASD_MEMORY
00001DDC                          2385                   
00001DDC  6000 002E               2386                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001DE0                          2387                                    
00001DE0                          2388  
00001DE0                          2389  ASR              
00001DE0  43F9 0000276E           2390                   LEA ASR_MESSAGE, A1
00001DE6                          2391                   
00001DE6  103C 000E               2392                   MOVE.B #14, D0
00001DEA                          2393                   
00001DEA  4E4F                    2394                   TRAP #15
00001DEC                          2395                   
00001DEC  3015                    2396                   MOVE.W (A5), D0
00001DEE                          2397                   
00001DEE  E148                    2398                   LSL.W #8, D0
00001DF0                          2399                   
00001DF0  123C 000E               2400                   MOVE.B #14, D1
00001DF4                          2401                   
00001DF4  E268                    2402                   LSR.W D1, D0
00001DF6                          2403                   
00001DF6  B03C 0003               2404                   CMP.B  #%11, D0            * check to see if its memory shift
00001DFA                          2405                   
00001DFA  6700 0006               2406                   BEQ ASD_MEMORY
00001DFE                          2407                   
00001DFE  6000 000C               2408                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001E02                          2409  
00001E02                          2410  ASD_MEMORY
00001E02  4EB9 00001EB8           2411                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001E08                          2412                   
00001E08  6000 F2E6               2413                   BRA PARSE_MEMORY
00001E0C                          2414                   
00001E0C                          2415  PRINTOUT_REGISTER_SHIFTS_EA
00001E0C  43F9 0000278E           2416                   LEA PERIOD, A1
00001E12                          2417                   
00001E12  103C 000E               2418                   MOVE.B #14, D0
00001E16                          2419                   
00001E16  4E4F                    2420                   TRAP #15
00001E18                          2421                  
00001E18  4EB9 000020E8           2422                   JSR GET_SIZE_PURPLE
00001E1E                          2423                   
00001E1E  4EB9 000020FE           2424                   JSR PRINTOUT_SIZE_PURPLE
00001E24                          2425  
00001E24  3015                    2426                   MOVE.W (A5), D0
00001E26                          2427                   
00001E26  123C 000A               2428                   MOVE.B #10, D1
00001E2A                          2429                   
00001E2A  E368                    2430                   LSL.W D1, D0
00001E2C                          2431                   
00001E2C  123C 000F               2432                   MOVE.B #15, D1
00001E30                          2433                   
00001E30  E268                    2434                   LSR.W D1, D0
00001E32                          2435                   
00001E32  B03C 0001               2436                   CMP.B #1, D0
00001E36                          2437                   
00001E36  6700 0048               2438                   BEQ PRINTOUT_REGISTER
00001E3A                          2439                   
00001E3A  6000 0002               2440                   BRA PRINTOUT_COUNT
00001E3E                          2441  
00001E3E                          2442                   
00001E3E                          2443  PRINTOUT_COUNT
00001E3E  43F9 0000278A           2444                   LEA POUND_SIGN, A1
00001E44                          2445  
00001E44  103C 000E               2446                   MOVE.B #14, D0
00001E48                          2447  
00001E48  4E4F                    2448                   TRAP #15     
00001E4A                          2449                 
00001E4A  3015                    2450                   MOVE.W (A5), D0
00001E4C                          2451                   
00001E4C  E948                    2452                   LSL.W #4, D0
00001E4E                          2453                   
00001E4E  123C 000D               2454                   MOVE.B #13, D1
00001E52                          2455                   
00001E52  E268                    2456                   LSR.W D1, D0
00001E54                          2457                   
00001E54  1200                    2458                   MOVE.B D0, D1
00001E56                          2459                   
00001E56  103C 0003               2460                   MOVE.B #3, D0
00001E5A                          2461                   
00001E5A  4E4F                    2462                   TRAP #15                  * print out the amount that the ea is being shifted by
00001E5C                          2463                   
00001E5C  43F9 000027AA           2464                   LEA COMMA, A1
00001E62                          2465                   
00001E62  103C 000E               2466                   MOVE.B #14, D0
00001E66                          2467                   
00001E66  4E4F                    2468                   TRAP #15
00001E68                          2469                   
00001E68  3015                    2470                   MOVE.W (A5), D0
00001E6A                          2471                   
00001E6A  123C 000D               2472                   MOVE.B #13, D1                * to print out the ea that is being shifted
00001E6E                          2473                   
00001E6E  E368                    2474                   LSL.W D1, D0
00001E70                          2475                   
00001E70  E268                    2476                   LSR.W D1, D0
00001E72                          2477                   
00001E72  1E00                    2478                   MOVE.B D0, D7
00001E74                          2479                   
00001E74  7C00                    2480                   MOVE.L #%000, D6              * we know it is a data register
00001E76                          2481                   
00001E76  4EB9 000023D8           2482                   JSR PRINT_EA
00001E7C                          2483                   
00001E7C  6000 F272               2484                   BRA PARSE_MEMORY
00001E80                          2485                   
00001E80                          2486  
00001E80                          2487  PRINTOUT_REGISTER
00001E80  3015                    2488                   MOVE.W (A5), D0
00001E82                          2489                   
00001E82  E948                    2490                   LSL.W #4, D0
00001E84                          2491                   
00001E84  123C 000D               2492                   MOVE.B #13, D1
00001E88                          2493                   
00001E88  E268                    2494                   LSR.W D1, D0
00001E8A                          2495                   
00001E8A  1E00                    2496                   MOVE.B D0, D7
00001E8C                          2497                   
00001E8C  7C00                    2498                   MOVE.L #%000, D6
00001E8E                          2499                   
00001E8E  4EB9 000023D8           2500                   JSR PRINT_EA                  * to print out the data register
00001E94                          2501                   
00001E94  43F9 000027AA           2502                   LEA COMMA, A1
00001E9A                          2503                   
00001E9A  103C 000E               2504                   MOVE.B #14, D0
00001E9E                          2505                   
00001E9E  4E4F                    2506                   TRAP #15
00001EA0                          2507                   
00001EA0  3015                    2508                   MOVE.W (A5), D0
00001EA2                          2509                   
00001EA2  123C 000D               2510                   MOVE.B #13, D1                * to print out the ea that is being shifted
00001EA6                          2511                   
00001EA6  E368                    2512                   LSL.W D1, D0
00001EA8                          2513                   
00001EA8  E268                    2514                   LSR.W D1, D0
00001EAA                          2515                   
00001EAA  1E00                    2516                   MOVE.B D0, D7
00001EAC                          2517                   
00001EAC  7C00                    2518                   MOVE.L #%000, D6              * we know it is a data register
00001EAE                          2519                   
00001EAE  4EB9 000023D8           2520                   JSR PRINT_EA
00001EB4                          2521                   
00001EB4  6000 F23A               2522                   BRA PARSE_MEMORY
00001EB8                          2523                                   
00001EB8                          2524  
00001EB8                          2525  PRINTOUT_MEMORY_SHIFTS_EA   * gets the mode and register of the memory ea, and prints it out
00001EB8                          2526                   *JSR GET_SIZE_PURPLE
00001EB8                          2527                   
00001EB8                          2528                   *JSR PRINTOUT_SIZE_PURPLE
00001EB8                          2529                   
00001EB8  43F9 00002790           2530                   LEA SPACE, A1
00001EBE                          2531                   
00001EBE  103C 000E               2532                   MOVE.B #14, D0
00001EC2                          2533                   
00001EC2  4E4F                    2534                   TRAP #15
00001EC4                          2535  
00001EC4  3015                    2536                   MOVE.W (A5), D0
00001EC6                          2537                   
00001EC6  123C 000A               2538                   MOVE.B #10, D1
00001ECA                          2539                   
00001ECA  E368                    2540                   LSL.W D1, D0
00001ECC                          2541                   
00001ECC  123C 000D               2542                   MOVE.B #13, D1
00001ED0                          2543                   
00001ED0  E268                    2544                   LSR.W D1, D0
00001ED2                          2545                   
00001ED2  2C00                    2546                   MOVE.L D0, D6
00001ED4                          2547                   
00001ED4  3015                    2548                   MOVE.W (A5), D0
00001ED6                          2549                   
00001ED6  123C 000D               2550                   MOVE.B #13, D1
00001EDA                          2551                   
00001EDA  E368                    2552                   LSL.W D1, D0
00001EDC                          2553                   
00001EDC  E268                    2554                   LSR.W D1, D0
00001EDE                          2555                   
00001EDE  2E00                    2556                   MOVE.L D0, D7
00001EE0                          2557                   
00001EE0  4EB9 000023D8           2558                   JSR PRINT_EA
00001EE6                          2559                   
00001EE6  4E75                    2560                   RTS
00001EE8                          2561                                   
00001EE8                          2562                
00001EE8  43F9 000026CA           2563  MOVEB            LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00001EEE                          2564  
00001EEE  4280                    2565                   CLR.L  D0
00001EF0                          2566                   
00001EF0  103C 000E               2567                   MOVE.B #14, D0
00001EF4                          2568                   
00001EF4  4E4F                    2569                   TRAP #15
00001EF6                          2570                   
00001EF6  43F9 00002778           2571                   LEA SIZE_B_PRINT, A1
00001EFC                          2572                   
00001EFC  4E4F                    2573                   TRAP #15               * done printing opcode and size
00001EFE                          2574                   
00001EFE  1A3C 0000               2575                   MOVE.B     #%00, D5
00001F02                          2576                   
00001F02  6000 00A6               2577                   BRA PRINTOUT_MOVE_EA
00001F06                          2578  
00001F06  4280                    2579  MOVEW            CLR.L D0
00001F08                          2580                   
00001F08  4281                    2581                   CLR.L D1
00001F0A                          2582                   
00001F0A  3015                    2583                   MOVE.W (A5),D0
00001F0C                          2584                   
00001F0C  EF48                    2585                   LSL.W #7,D0
00001F0E                          2586                   
00001F0E  123C 000D               2587                   MOVE.B #13,D1
00001F12                          2588                   
00001F12  E268                    2589                   LSR.W D1,D0
00001F14                          2590                   
00001F14  B03C 0001               2591                   CMP.B #1,D0            *check to see if the mode of the destination is an address register
00001F18                          2592                   
00001F18  6700 0054               2593                   BEQ MOVEAW             *if the destination is an address, it is MOVEA
00001F1C                          2594                   
00001F1C  43F9 000026CA           2595                   LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00001F22                          2596                   
00001F22  4280                    2597                   CLR.L D0
00001F24                          2598                   
00001F24  103C 000E               2599                   MOVE.B #14, D0
00001F28                          2600                   
00001F28  4E4F                    2601                   TRAP #15
00001F2A                          2602                   
00001F2A  43F9 0000277E           2603                   LEA SIZE_W_PRINT, A1
00001F30                          2604                   
00001F30  4E4F                    2605                   TRAP #15               * done printing opcode and size
00001F32                          2606                   
00001F32  1A3C 0001               2607                   MOVE.B     #%01, D5
00001F36                          2608                      
00001F36  6000 0072               2609                   BRA PRINTOUT_MOVE_EA
00001F3A                          2610                
00001F3A                          2611  
00001F3A  4280                    2612  MOVEL            CLR.L D0
00001F3C                          2613                   
00001F3C  4281                    2614                   CLR.L D1
00001F3E                          2615                   
00001F3E  3015                    2616                   MOVE.W (A5),D0
00001F40                          2617                   
00001F40  EF48                    2618                   LSL.W #7,D0
00001F42                          2619                   
00001F42  123C 000D               2620                   MOVE.B #13,D1
00001F46                          2621                   
00001F46  E268                    2622                   LSR.W D1,D0
00001F48                          2623                   
00001F48  B03C 0001               2624                   CMP.B #1,D0            *check to see if the mode of the destination is equal to 1
00001F4C                          2625                   
00001F4C  6700 003E               2626                   BEQ MOVEAL             *if the mode is 1, then it is an address register, and the opcode is MOVEA
00001F50                          2627                   
00001F50  43F9 000026CA           2628                   LEA MOVE_MESSAGE, A1   * printing out opcode and size
00001F56                          2629                   
00001F56  4280                    2630                   CLR.L D0
00001F58                          2631                   
00001F58  103C 000E               2632                   MOVE.B #14, D0
00001F5C                          2633                   
00001F5C  4E4F                    2634                   TRAP #15
00001F5E                          2635                   
00001F5E  43F9 00002784           2636                   LEA SIZE_L_PRINT, A1
00001F64                          2637                   
00001F64  4E4F                    2638                   TRAP #15               * done printing opcode and size
00001F66                          2639                   
00001F66  1A3C 0002               2640                   MOVE.B     #%10, D5
00001F6A                          2641                   
00001F6A  6000 003E               2642                   BRA PRINTOUT_MOVE_EA
00001F6E                          2643                   
00001F6E                          2644                   
00001F6E  43F9 000026C3           2645  MOVEAW           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
00001F74                          2646  
00001F74  4280                    2647                   CLR.L D0
00001F76                          2648                   
00001F76  103C 000E               2649                   MOVE.B #14, D0
00001F7A                          2650                   
00001F7A  4E4F                    2651                   TRAP #15
00001F7C                          2652                   
00001F7C  43F9 0000277E           2653                   LEA SIZE_W_PRINT, A1
00001F82                          2654                   
00001F82  4E4F                    2655                   TRAP #15               * done printing out opcode and size
00001F84                          2656                   
00001F84  1A3C 0001               2657                   MOVE.B     #%01, D5
00001F88                          2658                   
00001F88  6000 0020               2659                   BRA PRINTOUT_MOVE_EA
00001F8C                          2660  
00001F8C  43F9 000026C3           2661  MOVEAL           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
00001F92                          2662  
00001F92  4280                    2663                   CLR.L D0
00001F94                          2664                   
00001F94  103C 000E               2665                   MOVE.B #14, D0
00001F98                          2666                   
00001F98  4E4F                    2667                   TRAP #15
00001F9A                          2668                   
00001F9A  43F9 00002784           2669                   LEA SIZE_L_PRINT, A1
00001FA0                          2670                   
00001FA0  4E4F                    2671                   TRAP #15               * done printing out opcode and size
00001FA2                          2672                   
00001FA2  1A3C 0002               2673                   MOVE.B     #%10, D5
00001FA6                          2674                   
00001FA6  6000 0002               2675                   BRA PRINTOUT_MOVE_EA
00001FAA                          2676  
00001FAA                          2677  PRINTOUT_MOVE_EA
00001FAA  4247                    2678                   CLR    D7 
00001FAC                          2679                   
00001FAC  4246                    2680                   CLR    D6               
00001FAE                          2681                   
00001FAE  3015                    2682                   MOVE.W (A5), D0
00001FB0                          2683                   
00001FB0  123C 000A               2684                   MOVE.B #10, D1
00001FB4                          2685                   
00001FB4  E368                    2686                   LSL.W D1, D0
00001FB6                          2687                   
00001FB6  123C 000D               2688                   MOVE.B #13, D1
00001FBA                          2689                   
00001FBA  E268                    2690                   LSR.W D1, D0
00001FBC                          2691                   
00001FBC  1C00                    2692                   MOVE.B D0, D6          * getting the mode of the second ea
00001FBE                          2693                   
00001FBE  3015                    2694                   MOVE.W (A5), D0
00001FC0                          2695                   
00001FC0  123C 000D               2696                   MOVE.B #13, D1
00001FC4                          2697                   
00001FC4  E368                    2698                   LSL.W D1, D0
00001FC6                          2699                   
00001FC6  E268                    2700                   LSR.W D1, D0
00001FC8                          2701                   
00001FC8  1E00                    2702                   MOVE.B D0, D7          * getting the register of the second ea
00001FCA                          2703                   
00001FCA  4EB9 000023D8           2704                   JSR PRINT_EA
00001FD0                          2705                   
00001FD0  43F9 000027AA           2706                   LEA COMMA, A1
00001FD6                          2707                   
00001FD6  103C 000E               2708                   MOVE.B #14, D0
00001FDA                          2709                   
00001FDA  4E4F                    2710                   TRAP #15
00001FDC                          2711                   
00001FDC  3015                    2712                   MOVE.W (A5), D0
00001FDE                          2713                   
00001FDE  E948                    2714                   LSL.W #4, D0
00001FE0                          2715                   
00001FE0  123C 000D               2716                   MOVE.B #13, D1
00001FE4                          2717                   
00001FE4  E268                    2718                   LSR.W D1, D0
00001FE6                          2719                   
00001FE6  1E00                    2720                   MOVE.B D0, D7          * getting the register of the first ea
00001FE8                          2721                   
00001FE8  3015                    2722                   MOVE.W (A5), D0
00001FEA                          2723                   
00001FEA  EF48                    2724                   LSL.W #7, D0
00001FEC                          2725                   
00001FEC  123C 000D               2726                   MOVE.B #13, D1
00001FF0                          2727                   
00001FF0  E268                    2728                   LSR.W D1, D0
00001FF2                          2729                   
00001FF2  1C00                    2730                   MOVE.B D0, D6          * getting the mode of the first ea
00001FF4                          2731                   
00001FF4  4EB9 000023D8           2732                   JSR PRINT_EA
00001FFA                          2733                   
00001FFA  6000 F0F4               2734                   BRA PARSE_MEMORY
00001FFE                          2735  
00001FFE                          2736  
00001FFE                          2737  
00001FFE                          2738  
00001FFE                          2739  
00001FFE                          2740  
00001FFE                          2741  -------------------- end include --------------------
00001FFE                          2742                  INCLUDE 'ADD_ADDA.X68'
00001FFE                          2743    
00001FFE                          2744  
00001FFE                          2745          
00001FFE                          2746  
00001FFE                          2747                  * INCLUDE 'CMP.X68'
00001FFE                          2748                  * INCLUDE 'SUB.X68'
00001FFE                          2749                  * INCLUDE 'DIVU_OR.X68'
00001FFE                          2750                  * INCLUDE 'MULS_AND.X68'
00001FFE                          2751    
00001FFE                          2752  ADD_ADDA  *at this point we know the first 4 bits are 1101 -> ADD or ADDA -> compare the destination opmode
00001FFE                          2753                   
00001FFE  4EB9 000020E8           2754                   JSR      GET_SIZE_PURPLE
00002004                          2755                                              
00002004  BA3C 0003               2756                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is ADDA
00002008                          2757                   
00002008  6700 0008               2758                   BEQ      ADDA_CODE
0000200C                          2759                   
0000200C  4EF9 00002080           2760                   JMP      ADD_CODE
00002012                          2761                   
00002012                          2762  ADDA_CODE 
00002012                          2763                   * ADDA opcode message
00002012  43F9 00002754           2764                   LEA ADDA_MESSAGE, A1
00002018                          2765                   
00002018  103C 000E               2766                   MOVE.B #14, D0
0000201C                          2767                   
0000201C  4E4F                    2768                   TRAP #15
0000201E                          2769                   
0000201E  4285                    2770                   CLR.L   D5         * clear for the size since this is not for the size purple
00002020                          2771                   
00002020  4280                    2772                   CLR.L D0                *clear D0
00002022                          2773                   
00002022  4281                    2774                   CLR.L D1                *clear D1
00002024                          2775                   
00002024  3010                    2776                   MOVE.W  (A0),D0     *D0 is the binary value to decode
00002026                          2777                   
00002026  0800 0008               2778                   BTST    #8, D0
0000202A                          2779                   
0000202A  6700 0030               2780                   BEQ     PRINTOUT_SIZE_W
0000202E                          2781                   
0000202E  4EF9 0000206E           2782                   JMP     PRINTOUT_SIZE_L
00002034                          2783                   
00002034                          2784  FINISH_PRINTING_SIZE
00002034                          2785  
00002034  4EB9 00002168           2786                   JSR     Set_Ea
0000203A                          2787                   
0000203A  4EB9 000023D8           2788                   JSR     PRINT_EA *by using jmp table
00002040                          2789                   
00002040  4EB9 00002148           2790                   JSR     PRINT_COMMA
00002046                          2791                   
00002046                          2792                    * for the first Dn 
00002046  4EB9 00002156           2793                   JSR     GET_Data_Register
0000204C                          2794                   
0000204C  4286                    2795                   CLR.L   D6
0000204E                          2796                   
0000204E  1C3C 0001               2797                   MOVE.B  #%001, D6 * for mode
00002052                          2798  
00002052  4EB9 000023D8           2799                   JSR     PRINT_EA *by using jmp table
00002058                          2800  
00002058  4EF8 10F0               2801                   JMP     PARSE_MEMORY
0000205C                          2802                   
0000205C                          2803  PRINTOUT_SIZE_W
0000205C                          2804                   
0000205C  3A3C 0001               2805                   MOVE    #%01, D5          
00002060                          2806                   
00002060  43F9 0000277E           2807                   LEA      SIZE_W_PRINT,    A1
00002066                          2808                   
00002066  103C 000E               2809                   MOVE.B   #14,             D0
0000206A                          2810          
0000206A  4E4F                    2811                   TRAP #15
0000206C                          2812                   
0000206C  60C6                    2813                   BRA     FINISH_PRINTING_SIZE
0000206E                          2814                   
0000206E                          2815  PRINTOUT_SIZE_L                           
0000206E  3A3C 0002               2816                   MOVE    #%10, D5          
00002072                          2817                   
00002072  43F9 00002784           2818                   LEA      SIZE_L_PRINT,    A1
00002078                          2819                   
00002078  103C 000E               2820                   MOVE.B   #14,             D0 
0000207C                          2821         
0000207C  4E4F                    2822                   TRAP #15
0000207E                          2823                   
0000207E  60B4                    2824                   BRA     FINISH_PRINTING_SIZE
00002080                          2825  
00002080                          2826  ADD_CODE
00002080                          2827                   * ADD message
00002080  43F9 0000274F           2828                   LEA      ADD_MESSAGE,    A1
00002086  103C 000E               2829                   MOVE.B   #14,            D0
0000208A  4E4F                    2830                   TRAP #15
0000208C                          2831                   
0000208C  4EB9 000020FE           2832                   JSR     PRINTOUT_SIZE_PURPLE
00002092                          2833                   
00002092                          2834                   * check for dn and ea
00002092  4280                    2835                   CLR.L D0                *clear D0
00002094                          2836                   
00002094  4281                    2837                   CLR.L D1                *clear D1
00002096                          2838                   
00002096  3015                    2839                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002098                          2840                   
00002098  0800 0008               2841                   BTST    #8, D0
0000209C                          2842                   
0000209C  6700 0028               2843                   BEQ     ADD_FIRST_EA
000020A0                          2844                   
000020A0                          2845                   * for the first Dn 
000020A0  4EB9 00002156           2846                   JSR     GET_Data_Register
000020A6                          2847                   
000020A6  1C3C 0000               2848                   MOVE.B  #%000, D6 * for mode
000020AA                          2849                   
000020AA  4EB9 000023D8           2850                   JSR     PRINT_EA *by using jmp table
000020B0                          2851                   
000020B0  4EB9 00002148           2852                   JSR     PRINT_COMMA
000020B6                          2853                   
000020B6  4EB9 00002168           2854                   JSR     Set_Ea
000020BC                          2855                   
000020BC  4EB9 000023D8           2856                   JSR     PRINT_EA *by using jmp table
000020C2                          2857                   
000020C2  4EF8 10F0               2858                   JMP     PARSE_MEMORY
000020C6                          2859                   
000020C6                          2860  ADD_FIRST_EA
000020C6  4EB9 00002168           2861                   JSR     Set_Ea
000020CC                          2862                   
000020CC  4EB9 000023D8           2863                   JSR     PRINT_EA *by using jmp table
000020D2                          2864                   
000020D2  4EB9 00002148           2865                   JSR     PRINT_COMMA
000020D8                          2866                   
000020D8                          2867                    * for the first Dn 
000020D8  4EB9 00002156           2868                   JSR     GET_Data_Register
000020DE                          2869                   
000020DE  1C3C 0000               2870                   MOVE.B  #%000, D6 * for mode
000020E2                          2871  
000020E2  4EB9 000023D8           2872                   JSR     PRINT_EA *by using jmp table
000020E8                          2873                   
000020E8                          2874                   
000020E8                          2875  GET_SIZE_PURPLE * get the op-code 
000020E8                          2876  
000020E8  4280                    2877                   CLR.L D0                *clear D0
000020EA                          2878                   
000020EA  4281                    2879                   CLR.L D1                *clear D1
000020EC                          2880                   
000020EC  3015                    2881                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000020EE                          2882  
000020EE  123C 0008               2883                   MOVE.B  #8,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000020F2                          2884  
000020F2  E368                    2885                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000020F4                          2886                   
000020F4  123C 000E               2887                   MOVE.B  #14,D1          *14 bits is the number of times to shift to hold the mode number
000020F8                          2888  
000020F8  E268                    2889                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
000020FA                          2890                   
000020FA  1A00                    2891                   MOVE.B  D0, D5          *push the size to the Data register 5 for the future use
000020FC                          2892                   
000020FC  4E75                    2893                   RTS 
000020FE                          2894  
000020FE                          2895  PRINTOUT_SIZE_PURPLE * get the size for ADDI, CLR, ADDQ, OR, SUB, CMP, AND, ADD
000020FE                          2896                       
000020FE  BA7C 0000               2897                   CMP    #%00, D5          
00002102                          2898                   
00002102  6700 0014               2899                   BEQ    PRINT_B
00002106                          2900                   
00002106  BA7C 0001               2901                   CMP    #%01, D5          
0000210A                          2902                   
0000210A  6700 001C               2903                   BEQ    PRINT_W
0000210E                          2904                   
0000210E  BA7C 0002               2905                   CMP    #%10, D5          
00002112                          2906                   
00002112  6700 0024               2907                   BEQ    PRINT_L
00002116                          2908                   
00002116                          2909  DONE_PRINTING
00002116  4E75                    2910                   RTS 
00002118                          2911                   
00002118                          2912  PRINT_B          
00002118  43F9 00002778           2913                   LEA      SIZE_B_PRINT,    A1
0000211E  103C 000E               2914                   MOVE.B   #14,            D0          
00002122  4E4F                    2915                   TRAP #15
00002124                          2916  
00002124  4EF8 2116               2917                   JMP      DONE_PRINTING
00002128                          2918                   
00002128                          2919  PRINT_W     
00002128  43F9 0000277E           2920                   LEA      SIZE_W_PRINT,    A1
0000212E  103C 000E               2921                   MOVE.B   #14,             D0          
00002132  4E4F                    2922                   TRAP #15
00002134                          2923  
00002134  4EF8 2116               2924                   JMP      DONE_PRINTING
00002138                          2925  
00002138                          2926  
00002138                          2927  PRINT_L          
00002138  43F9 00002784           2928                   LEA      SIZE_L_PRINT,    A1
0000213E  103C 000E               2929                   MOVE.B   #14,             D0          
00002142  4E4F                    2930                   TRAP #15   
00002144                          2931                      
00002144  4EF8 2116               2932                   JMP    DONE_PRINTING
00002148                          2933                   
00002148                          2934  PRINT_COMMA
00002148                          2935  
00002148  43F9 000027AA           2936                   LEA COMMA, A1
0000214E  103C 000E               2937                   MOVE.B #14, D0
00002152  4E4F                    2938                   TRAP #15
00002154                          2939                   
00002154  4E75                    2940                   RTS
00002156                          2941                   
00002156                          2942  GET_Data_Register
00002156  4280                    2943                   CLR.L D0                *clear D0
00002158                          2944                   
00002158  4281                    2945                   CLR.L D1                *clear D1
0000215A                          2946                   
0000215A  3015                    2947                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000215C                          2948  
0000215C  E948                    2949                   LSL.W   #4,D0           *Shift the bits 4 times -> D0 now removes the opcode & reg#
0000215E                          2950                   
0000215E  123C 000D               2951                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00002162                          2952  
00002162  E268                    2953                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00002164                          2954  
00002164  1E00                    2955                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00002166                          2956                   
00002166  4E75                    2957                   RTS
00002168                          2958                   
00002168                          2959  Set_Ea
00002168                          2960  
00002168                          2961                   * set register
00002168  4280                    2962                   CLR.L D0                *clear D0
0000216A                          2963                   
0000216A  4281                    2964                   CLR.L D1                *clear D1
0000216C                          2965                   
0000216C  3015                    2966                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000216E                          2967                 
0000216E  123C 000D               2968                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002172                          2969  
00002172  E368                    2970                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002174                          2971  
00002174  123C 000D               2972                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00002178                          2973  
00002178  E268                    2974                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
0000217A                          2975  
0000217A  1E00                    2976                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
0000217C                          2977                   
0000217C                          2978                   * set mode
0000217C  4280                    2979                   CLR.L D0                *clear D0
0000217E                          2980                   
0000217E  4281                    2981                   CLR.L D1                *clear D1
00002180                          2982                   
00002180  3015                    2983                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002182                          2984                 
00002182  123C 000A               2985                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002186                          2986  
00002186  E368                    2987                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002188                          2988  
00002188  123C 000D               2989                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
0000218C                          2990  
0000218C  E268                    2991                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
0000218E                          2992  
0000218E  1C00                    2993                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
00002190                          2994                   
00002190  4E75                    2995                   RTS
00002192                          2996                   
00002192                          2997                  
00002192                          2998  
00002192                          2999  
00002192                          3000  
00002192                          3001  
00002192                          3002  
00002192                          3003  
00002192                          3004  
00002192                          3005  
00002192                          3006  
00002192                          3007  
00002192                          3008  
00002192                          3009  
00002192                          3010  
00002192                          3011  
00002192                          3012  
00002192                          3013  
00002192                          3014  
00002192                          3015  
00002192                          3016  -------------------- end include --------------------
00002192                          3017                  INCLUDE 'BCC.X68'
00002192                          3018  
00002192                          3019  
00002192                          3020  BCC           
00002192  4240                    3021                 CLR       D0              *Zero it
00002194                          3022  
00002194  3015                    3023                 MOVE.W      (A5),D0     *We'll play with it here
00002196                          3024                 
00002196  4241                    3025                 CLR       D1
00002198                          3026  
00002198                          3027                 
00002198  123C 0004               3028                 MOVE.B      #4, D1
0000219C                          3029                 
0000219C  E368                    3030                 LSL.W       D1, D0
0000219E                          3031  
0000219E  123C 000C               3032                 MOVE.B      #12,D1       *Shift 12 bits to the right  
000021A2                          3033  
000021A2  E268                    3034                 LSR.W       D1,D0           *Move the bi
000021A4                          3035                 
000021A4  B03C 0004               3036                 CMP.B       #%0100, D0
000021A8                          3037                 
000021A8  6700 001A               3038                 BEQ         CC
000021AC                          3039                 
000021AC  B03C 000E               3040                 CMP.B       #%1110, D0
000021B0                          3041                 
000021B0  6700 003A               3042                 BEQ         GT
000021B4                          3043                 
000021B4  B03C 000F               3044                 CMP.B       #%1111, D0
000021B8                          3045                 
000021B8  6700 0036               3046                 BEQ         LE
000021BC                          3047                 
000021BC                          3048  
000021BC                          3049                      
000021BC                          3050  
000021BC  6000 0036               3051  HI             BRA         PRINT_BHI 
000021C0                          3052  
000021C0  6000 0042               3053  LS             BRA         PRINT_BLS  
000021C4                          3054  
000021C4  6000 004E               3055  CC             BRA         PRINT_BCC
000021C8                          3056  
000021C8  6000 005A               3057  CS             BRA         PRINT_BCS 
000021CC                          3058  
000021CC  6000 0066               3059  NE             BRA         PRINT_BNE 
000021D0                          3060  
000021D0  6000 0072               3061  EQ             BRA         PRINT_BEQ
000021D4                          3062  
000021D4  6000 007E               3063  VC             BRA         PRINT_BVC
000021D8                          3064  
000021D8  6000 008A               3065  VS             BRA         PRINT_BVS
000021DC                          3066  
000021DC  6000 0096               3067  PL             BRA         PRINT_BPL
000021E0                          3068  
000021E0  6000 00A2               3069  MI             BRA         PRINT_BMI 
000021E4                          3070  
000021E4  6000 00AE               3071  GE             BRA         PRINT_BGE 
000021E8                          3072  
000021E8  6000 00BA               3073  LT             BRA         PRINT_BLT
000021EC                          3074  
000021EC  6000 00C6               3075  GT             BRA         PRINT_BGT      
000021F0                          3076  
000021F0  6000 00D2               3077  LE             BRA         PRINT_BLE 
000021F4                          3078  
000021F4                          3079  
000021F4                          3080  PRINT_BHI      
000021F4  43F9 00002709           3081                 LEA BHI_MESSAGE, A1
000021FA                          3082            
000021FA  103C 000E               3083                 MOVE.B #14, D0
000021FE                          3084                   
000021FE  4E4F                    3085                 TRAP #15    
00002200                          3086                 
00002200  6000 00CE               3087                 BRA DISPLACEMENT
00002204                          3088                 
00002204                          3089  PRINT_BLS
00002204  43F9 00002711           3090                 LEA BLS_MESSAGE, A1
0000220A                          3091                   
0000220A  103C 000E               3092                 MOVE.B #14, D0
0000220E                          3093                   
0000220E  4E4F                    3094                 TRAP #15
00002210                          3095                 
00002210  6000 00BE               3096                 BRA DISPLACEMENT
00002214                          3097  PRINT_BCC
00002214  43F9 000026F1           3098                 LEA BCC_MESSAGE, A1
0000221A                          3099                   
0000221A  103C 000E               3100                 MOVE.B #14, D0
0000221E                          3101                   
0000221E  4E4F                    3102                 TRAP #15
00002220                          3103                 
00002220  6000 00AE               3104                 BRA DISPLACEMENT
00002224                          3105  PRINT_BCS
00002224  43F9 000026FD           3106                 LEA BCS_MESSAGE, A1
0000222A                          3107                   
0000222A  103C 000E               3108                 MOVE.B #14, D0
0000222E                          3109                   
0000222E  4E4F                    3110                 TRAP #15
00002230                          3111                 
00002230  6000 009E               3112                 BRA DISPLACEMENT
00002234                          3113  PRINT_BNE
00002234  43F9 000026F9           3114                 LEA BNE_MESSAGE, A1
0000223A                          3115                   
0000223A  103C 000E               3116                 MOVE.B #14, D0
0000223E                          3117                   
0000223E  4E4F                    3118                 TRAP #15
00002240                          3119                 
00002240  6000 008E               3120                 BRA DISPLACEMENT
00002244                          3121  PRINT_BEQ
00002244  43F9 000026F5           3122                 LEA BEQ_MESSAGE, A1
0000224A                          3123                   
0000224A  103C 000E               3124                 MOVE.B #14, D0
0000224E                          3125                   
0000224E  4E4F                    3126                 TRAP #15
00002250                          3127                 
00002250  6000 007E               3128                 BRA DISPLACEMENT
00002254                          3129  PRINT_BVC
00002254  43F9 00002721           3130                 LEA BVC_MESSAGE, A1
0000225A                          3131                   
0000225A  103C 000E               3132                 MOVE.B #14, D0
0000225E                          3133                   
0000225E  4E4F                    3134                 TRAP #15     
00002260                          3135                 
00002260  6000 006E               3136                 BRA DISPLACEMENT
00002264                          3137  PRINT_BVS
00002264  43F9 00002725           3138                 LEA BVS_MESSAGE, A1
0000226A                          3139                   
0000226A  103C 000E               3140                 MOVE.B #14, D0
0000226E                          3141                   
0000226E  4E4F                    3142                 TRAP #15
00002270                          3143                 
00002270  6000 005E               3144                 BRA DISPLACEMENT
00002274                          3145  PRINT_BPL
00002274  43F9 0000271D           3146                 LEA BPL_MESSAGE, A1
0000227A                          3147                   
0000227A  103C 000E               3148                 MOVE.B #14, D0
0000227E                          3149                   
0000227E  4E4F                    3150                 TRAP #15
00002280                          3151                 
00002280  6000 004E               3152                 BRA DISPLACEMENT
00002284                          3153  PRINT_BMI
00002284  43F9 00002719           3154                 LEA BMI_MESSAGE, A1
0000228A                          3155                   
0000228A  103C 000E               3156                 MOVE.B #14, D0
0000228E                          3157                   
0000228E  4E4F                    3158                 TRAP #15
00002290                          3159                 
00002290  6000 003E               3160                 BRA DISPLACEMENT
00002294                          3161  PRINT_BGE
00002294  43F9 00002701           3162                 LEA BGE_MESSAGE, A1
0000229A                          3163                   
0000229A  103C 000E               3164                 MOVE.B #14, D0
0000229E                          3165                   
0000229E  4E4F                    3166                 TRAP #15
000022A0                          3167                 
000022A0  6000 002E               3168                 BRA DISPLACEMENT
000022A4                          3169  PRINT_BLT
000022A4  43F9 00002715           3170                 LEA BLT_MESSAGE, A1
000022AA                          3171                   
000022AA  103C 000E               3172                 MOVE.B #14, D0
000022AE                          3173                   
000022AE  4E4F                    3174                 TRAP #15
000022B0                          3175                 
000022B0  6000 001E               3176                 BRA DISPLACEMENT
000022B4                          3177  PRINT_BGT
000022B4  43F9 00002705           3178                 LEA BGT_MESSAGE, A1
000022BA                          3179                   
000022BA  103C 000E               3180                 MOVE.B #14, D0
000022BE                          3181                   
000022BE  4E4F                    3182                 TRAP #15
000022C0                          3183                 
000022C0  6000 000E               3184                 BRA DISPLACEMENT
000022C4                          3185  PRINT_BLE
000022C4  43F9 0000270D           3186                 LEA BLE_MESSAGE, A1
000022CA                          3187                   
000022CA  103C 000E               3188                 MOVE.B #14, D0
000022CE                          3189                   
000022CE  4E4F                    3190                 TRAP #15
000022D0                          3191                 
000022D0                          3192  DISPLACEMENT   
000022D0                          3193  
000022D0  43F9 00002790           3194                 LEA     SPACE, A1
000022D6                          3195  
000022D6  103C 000E               3196                 MOVE.B #14, D0
000022DA                          3197  
000022DA  4E4F                    3198                 TRAP #15 
000022DC                          3199  
000022DC  43F9 0000278A           3200                 LEA     POUND_SIGN, A1
000022E2                          3201              
000022E2  103C 000E               3202                 MOVE.B  #14, D0
000022E6                          3203              
000022E6  4E4F                    3204                 TRAP #15
000022E8                          3205              
000022E8  43F9 0000278C           3206                 LEA     HEX_SIGN, A1
000022EE                          3207              
000022EE  4E4F                    3208                 TRAP #15
000022F0                          3209  
000022F0  4280                    3210                 CLR.L       D0              *Zero it
000022F2                          3211  
000022F2  3015                    3212                 MOVE.W      (A5),D0     *We'll play with it here
000022F4                          3213                 
000022F4  123C 0008               3214                 MOVE.B      #8, D1
000022F8                          3215                 
000022F8  E368                    3216                 LSL.W       D1, D0
000022FA                          3217  
000022FA  123C 0008               3218                 MOVE.B      #8,D1       *Shift 12 bits to the right  
000022FE                          3219  
000022FE  E268                    3220                 LSR.W       D1,D0           *Move the bits
00002300                          3221                 
00002300                          3222                 *chk the D0 for 8, 16, or 32 but displacement
00002300                          3223                  
00002300  B03C 0000               3224                 CMP.B  #$00, D0
00002304                          3225  
00002304  6700 0018               3226                 BEQ  a_16_BIT 
00002308                          3227  
00002308  B03C 00FF               3228                 CMP.B #$FF, D0   
0000230C                          3229  
0000230C  6700 001E               3230                 BEQ  a_32_BIT
00002310                          3231                  
00002310                          3232                  *else 
00002310                          3233                  
00002310  4285                    3234                 CLR.L D5
00002312                          3235                 
00002312  3A00                    3236                 MOVE.W D0, D5      
00002314                          3237          
00002314  4EB9 0000233A           3238                 JSR  HEX_TO_ASCII
0000231A                          3239                 
0000231A  4EF8 10F0               3240                 JMP PARSE_MEMORY
0000231E                          3241                            
0000231E                          3242  a_16_BIT
0000231E  4285                    3243          CLR.L  D5
00002320                          3244          
00002320  3A1E                    3245          MOVE.W (A6)+, D5
00002322                          3246          
00002322  4EB9 0000233A           3247          JSR  HEX_TO_ASCII
00002328                          3248          
00002328  4EF8 10F0               3249          JMP PARSE_MEMORY
0000232C                          3250  a_32_BIT
0000232C                          3251  
0000232C  4285                    3252          CLR.L  D5
0000232E                          3253          
0000232E  2A1E                    3254          MOVE.L (A6)+, D5
00002330                          3255          
00002330  4EB9 0000233A           3256          JSR  HEX_TO_ASCII
00002336                          3257          
00002336  4EF8 10F0               3258          JMP PARSE_MEMORY
0000233A                          3259            
0000233A                          3260  
0000233A                          3261  
0000233A                          3262  
0000233A                          3263  
0000233A                          3264  
0000233A                          3265  
0000233A                          3266  
0000233A                          3267  
0000233A                          3268  
0000233A                          3269  
0000233A                          3270  
0000233A                          3271  -------------------- end include --------------------
0000233A                          3272                  INCLUDE 'HEX_TO_ASCII_V1.X68'
0000233A                          3273      *ORG    $5000
0000233A                          3274  
0000233A                          3275  
0000233A                          3276  HEX_TO_ASCII      
0000233A  4283                    3277       CLR.L      D3
0000233C                          3278       
0000233C  BABC 00000000           3279       CMP.L       #0, D5
00002342                          3280       
00002342  6700 0086               3281       BEQ         PRINT_ZERO
00002346                          3282      
00002346                          3283       *MOVE.L     #$ABCDEF, D5
00002346                          3284       
00002346                          3285  LOOP     
00002346  2C05                    3286       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
00002348                          3287       
00002348  4282                    3288       CLR.L      D2
0000234A                          3289       
0000234A  143C 001C               3290       MOVE.B     #28, D2
0000234E                          3291  
0000234E  E4AE                    3292       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
00002350                          3293       
00002350  BC3C 000A               3294       CMP.B      #10, D6
00002354                          3295       
00002354  6C00 0006               3296       BGE        LETTER_1                  * determine if a letter or a number
00002358                          3297       
00002358  6000 000C               3298       BRA        NUMBER_1
0000235C                          3299       
0000235C                          3300  LETTER_1
0000235C  0606 0037               3301       ADD.B      #55, D6
00002360                          3302       
00002360  1206                    3303       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00002362                          3304       
00002362  6000 000C               3305       BRA        PRINTOUT_NIBBLE
00002366                          3306  
00002366                          3307  NUMBER_1     
00002366  0606 0030               3308       ADD.B      #48, D6
0000236A                          3309       
0000236A  1206                    3310       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
0000236C                          3311       
0000236C  6000 0002               3312       BRA        PRINTOUT_NIBBLE
00002370                          3313  
00002370                          3314  
00002370                          3315  PRINTOUT_NIBBLE
00002370  E98D                    3316      LSL.L      #4, D5                   * shift out the nibble you just read from the source
00002372                          3317      
00002372  5203                    3318      ADD.B      #1, D3
00002374                          3319      
00002374  BC3C 0030               3320      CMP.B      #$30, D6
00002378                          3321  
00002378  67CC                    3322      BEQ        LOOP             
0000237A                          3323      
0000237A  103C 0006               3324      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
0000237E                          3325      
0000237E  4E4F                    3326      TRAP #15
00002380                          3327       
00002380  B63C 0008               3328      CMP.B      #8, D3                   * compare to the counter to check if you are done
00002384                          3329       
00002384  6700 023E               3330      BEQ        DONE
00002388                          3331          
00002388  6000 0002               3332      BRA LOOP_ZERO                            * continue the loop and print next nibble
0000238C                          3333      
0000238C                          3334      
0000238C                          3335  LOOP_ZERO    
0000238C  2C05                    3336       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
0000238E                          3337       
0000238E  4282                    3338       CLR.L      D2
00002390                          3339       
00002390  143C 001C               3340       MOVE.B     #28, D2
00002394                          3341  
00002394  E4AE                    3342       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
00002396                          3343       
00002396  BC3C 000A               3344       CMP.B      #10, D6
0000239A                          3345       
0000239A  6C00 0006               3346       BGE        LETTER_1_ZERO                  * determine if a letter or a number
0000239E                          3347       
0000239E  6000 000C               3348       BRA        NUMBER_1_ZERO
000023A2                          3349       
000023A2                          3350  LETTER_1_ZERO
000023A2  0606 0037               3351       ADD.B      #55, D6
000023A6                          3352       
000023A6  1206                    3353       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000023A8                          3354       
000023A8  6000 000C               3355       BRA        PRINTOUT_NIBBLE_ZERO
000023AC                          3356  
000023AC                          3357  NUMBER_1_ZERO    
000023AC  0606 0030               3358       ADD.B      #48, D6
000023B0                          3359       
000023B0  1206                    3360       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000023B2                          3361       
000023B2  6000 0002               3362       BRA        PRINTOUT_NIBBLE_ZERO
000023B6                          3363  
000023B6                          3364  
000023B6                          3365  PRINTOUT_NIBBLE_ZERO
000023B6  E98D                    3366      LSL.L      #4, D5                   * shift out the nibble you just read from the source
000023B8                          3367      
000023B8  5203                    3368      ADD.B      #1, D3            
000023BA                          3369      
000023BA  103C 0006               3370      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
000023BE                          3371      
000023BE  4E4F                    3372      TRAP #15
000023C0                          3373       
000023C0  B63C 0008               3374      CMP.B      #8, D3                   * compare to the counter to check if you are done
000023C4                          3375       
000023C4  6700 01FE               3376      BEQ        DONE
000023C8                          3377      
000023C8  60C2                    3378      BRA LOOP_ZERO                            * continue the loop and print next nibble
000023CA                          3379          
000023CA                          3380  
000023CA                          3381       
000023CA                          3382  PRINT_ZERO
000023CA  123C 0030               3383      MOVE.B      #$30, D1
000023CE                          3384  
000023CE  103C 0006               3385      MOVE.B      #6, D0  
000023D2                          3386  
000023D2  4E4F                    3387      TRAP #15 
000023D4                          3388  
000023D4  6000 01EE               3389      BRA DONE  
000023D8                          3390  
000023D8                          3391  
000023D8                          3392      *SIMHALT             ; halt simulator
000023D8                          3393  
000023D8                          3394  
000023D8                          3395      *END    START       ; last line of source
000023D8                          3396  -------------------- end include --------------------
000023D8                          3397                  INCLUDE 'JUMPTABLE-EA.X68'
000023D8                          3398   *ORG     $400
000023D8                          3399  
000023D8                          3400  
000023D8                          3401  
000023D8                          3402  
000023D8                          3403  
000023D8                          3404                 *MOVE.B       #%00, D5         *SIZE
000023D8                          3405                
000023D8                          3406                 *MOVE.B       #%111,D6         *MODE
000023D8                          3407                 
000023D8                          3408                 *MOVE.B       #%100,D7         *REGISTER
000023D8                          3409                 
000023D8                          3410                 *MOVE.L       #$4000, A5
000023D8                          3411  
000023D8                          3412                 *MOVE.B       #$0040, (A5)  
000023D8                          3413  PRINT_EA 
000023D8                          3414                 
000023D8  41F9 000023E6           3415                 LEA     jmp_table_ea,A0      *Index into the table
000023DE                          3416  
000023DE  CCFC 0006               3417                 MULU        #6,D6            *Form offset     
000023E2                          3418  
000023E2  4EF0 6000               3419                 JMP         0(A0,D6)         *Jump indirect with index
000023E6                          3420   
000023E6  4EF9 00002416           3421  jmp_table_ea   JMP         code000
000023EC                          3422  
000023EC  4EF9 0000241A           3423                 JMP         code001
000023F2                          3424  
000023F2  4EF9 0000241E           3425                 JMP         code010
000023F8                          3426  
000023F8  4EF9 00002422           3427                 JMP         code011
000023FE                          3428  
000023FE  4EF9 00002426           3429                 JMP         code100
00002404                          3430  
00002404  4EF9 0000242A           3431                 JMP         code101
0000240A                          3432  
0000240A  4EF9 0000242E           3433                 JMP         code110
00002410                          3434  
00002410  4EF9 00002432           3435                 JMP         code111
00002416                          3436          
00002416                          3437  
00002416                          3438   
00002416                          3439  
00002416                          3440  
00002416                          3441   
00002416                          3442  
00002416                          3443   
00002416                          3444  
00002416  6000 001E               3445  code000       BRA         DATA_REGISTER
0000241A                          3446  
0000241A  6000 0036               3447  code001       BRA         ADDRESS_REGISTER
0000241E                          3448  
0000241E  6000 004E               3449  code010       BRA         INDIRECT_ADDRESS
00002422                          3450  
00002422  6000 0074               3451  code011       BRA         ADDRESS_PI    * post increment
00002426                          3452  
00002426  6000 009A               3453  code100       BRA         ADDRESS_PD    * pre decrement
0000242A                          3454  
0000242A  6000 00C0               3455  code101       BRA         ADDRESS_W_DISPLACEMENT
0000242E                          3456  
0000242E  6000 00C0               3457  code110       BRA         ADDRESS_W_INDEX
00002432                          3458  
00002432  6000 00C0               3459  code111       BRA         GROUP_111
00002436                          3460  
00002436                          3461   
00002436                          3462  DATA_REGISTER
00002436                          3463  
00002436  43F9 00002795           3464              LEA D_REGISTER, A1
0000243C                          3465              
0000243C  4280                    3466              CLR.L D0
0000243E                          3467              
0000243E  103C 000E               3468              MOVE.B #14, D0
00002442                          3469              
00002442  4E4F                    3470              TRAP #15                * print out 'D' for data register
00002444                          3471              
00002444  4281                    3472              CLR.L D1
00002446                          3473              
00002446  1207                    3474              MOVE.B D7, D1
00002448                          3475              
00002448  103C 0003               3476              MOVE.B #3, D0           * print out the number in the register
0000244C                          3477              
0000244C  4E4F                    3478              TRAP #15
0000244E                          3479              
0000244E  6000 0174               3480              BRA DONE
00002452                          3481              
00002452                          3482  
00002452                          3483  ADDRESS_REGISTER
00002452  43F9 00002797           3484              LEA A_REGISTER, A1
00002458                          3485              
00002458  4280                    3486              CLR.L D0
0000245A                          3487              
0000245A  103C 000E               3488              MOVE.B #14, D0          * print out the 'A' for address register
0000245E                          3489              
0000245E  4E4F                    3490              TRAP #15
00002460                          3491              
00002460  4281                    3492              CLR.L D1
00002462                          3493              
00002462  1207                    3494              MOVE.B D7, D1
00002464                          3495              
00002464  103C 0003               3496              MOVE.B #3, D0
00002468                          3497              
00002468  4E4F                    3498              TRAP #15                * print out the value in the data register
0000246A                          3499  
0000246A  6000 0158               3500              BRA DONE
0000246E                          3501              
0000246E                          3502  INDIRECT_ADDRESS
0000246E  43F9 00002799           3503              LEA IA_START, A1
00002474                          3504              
00002474  4280                    3505              CLR.L D0
00002476                          3506              
00002476  103C 000E               3507              MOVE.B #14, D0          * print out the '(A' for start of indirect address register
0000247A                          3508              
0000247A  4E4F                    3509              TRAP #15
0000247C                          3510              
0000247C  4281                    3511              CLR.L D1
0000247E                          3512              
0000247E  1207                    3513              MOVE.B D7, D1
00002480                          3514              
00002480  103C 0003               3515              MOVE.B #3, D0
00002484                          3516              
00002484  4E4F                    3517              TRAP #15                * print out the value in the data register
00002486                          3518              
00002486  43F9 0000279C           3519              LEA IA_END, A1
0000248C                          3520  
0000248C  4280                    3521              CLR.L D0
0000248E                          3522              
0000248E  103C 000E               3523              MOVE.B #14, D0          * print out the ')' for end of post increment address register
00002492                          3524              
00002492  4E4F                    3525              TRAP #15
00002494                          3526              
00002494  6000 012E               3527              BRA DONE
00002498                          3528  
00002498                          3529  ADDRESS_PI
00002498  43F9 0000279E           3530              LEA A_PI_START, A1
0000249E                          3531              
0000249E  4280                    3532              CLR.L D0
000024A0                          3533              
000024A0  103C 000E               3534              MOVE.B #14, D0          * print out the '(A' for start of post increment address register
000024A4                          3535              
000024A4  4E4F                    3536              TRAP #15
000024A6                          3537              
000024A6  4281                    3538              CLR.L D1
000024A8                          3539              
000024A8  1207                    3540              MOVE.B D7, D1
000024AA                          3541              
000024AA  103C 0003               3542              MOVE.B #3, D0
000024AE                          3543              
000024AE  4E4F                    3544              TRAP #15                * print out the value in the data register
000024B0                          3545              
000024B0  43F9 000027A1           3546              LEA A_PI_END, A1
000024B6                          3547  
000024B6  4280                    3548              CLR.L D0
000024B8                          3549              
000024B8  103C 000E               3550              MOVE.B #14, D0          * print out the ')+' for end of post increment address register
000024BC                          3551     
000024BC  4E4F                    3552              TRAP #15
000024BE                          3553              
000024BE  6000 0104               3554              BRA DONE  
000024C2                          3555         
000024C2                          3556  ADDRESS_PD
000024C2                          3557  
000024C2  43F9 000027A4           3558              LEA A_PD_START, A1
000024C8                          3559              
000024C8  4280                    3560              CLR.L D0
000024CA                          3561              
000024CA  103C 000E               3562              MOVE.B #14, D0          * print out the '-(A' for start of pre decrement address register
000024CE                          3563              
000024CE  4E4F                    3564              TRAP #15
000024D0                          3565              
000024D0  4281                    3566              CLR.L D1
000024D2                          3567              
000024D2  1207                    3568              MOVE.B D7, D1
000024D4                          3569              
000024D4  103C 0003               3570              MOVE.B #3, D0
000024D8                          3571              
000024D8  4E4F                    3572              TRAP #15                * print out the value in the data register
000024DA                          3573              
000024DA  43F9 000027A8           3574              LEA A_PD_END, A1
000024E0                          3575  
000024E0  4280                    3576              CLR.L D0
000024E2                          3577              
000024E2  103C 000E               3578              MOVE.B #14, D0          * print out the ')-' for end of pre decrement
000024E6                          3579  
000024E6  4E4F                    3580              TRAP #15
000024E8                          3581              
000024E8  6000 00DA               3582              BRA DONE
000024EC                          3583              
000024EC                          3584  ADDRESS_W_DISPLACEMENT
000024EC  6000 00D6               3585              BRA DONE
000024F0                          3586  
000024F0                          3587  ADDRESS_W_INDEX
000024F0  6000 00D2               3588              BRA DONE
000024F4                          3589  
000024F4                          3590  GROUP_111
000024F4                          3591  
000024F4  41F9 00002502           3592                 LEA         jmp_table_ea_111,A0    *Index into the table
000024FA                          3593  
000024FA  CEFC 0006               3594                 MULU        #6,D7       *Form offset     
000024FE                          3595  
000024FE  4EF0 7000               3596                 JMP         0(A0,D7)   *Jump indirect with index
00002502                          3597                 
00002502                          3598  jmp_table_ea_111   
00002502  4EF9 00002528           3599                 JMP         reg000
00002508                          3600  
00002508  4EF9 0000252C           3601                 JMP         reg001
0000250E                          3602  
0000250E  4EF9 00002520           3603                 JMP         reg010
00002514                          3604  
00002514  4EF9 00002524           3605                 JMP         reg011
0000251A                          3606  
0000251A  4EF9 00002530           3607                 JMP         reg100
00002520                          3608          
00002520                          3609  
00002520  6000 0012               3610  reg010       BRA         PC_W_DISPLACEMENT
00002524                          3611  
00002524  6000 0012               3612  reg011       BRA         PC_W_INDEX
00002528                          3613  
00002528  6000 0012               3614  reg000       BRA         ABSOLUTE_SHORT
0000252C                          3615  
0000252C  6000 002C               3616  reg001       BRA         ABSOLUTE_LONG
00002530                          3617  
00002530  6000 0046               3618  reg100       BRA         IMMEDIATE
00002534                          3619  
00002534                          3620  
00002534                          3621  PC_W_DISPLACEMENT
00002534  6000 008E               3622              BRA DONE
00002538                          3623  
00002538                          3624  PC_W_INDEX
00002538  6000 008A               3625              BRA DONE
0000253C                          3626  
0000253C                          3627  ABSOLUTE_SHORT
0000253C  43F9 0000278C           3628              LEA         HEX_SIGN, A1
00002542                          3629              
00002542  103C 000E               3630              MOVE.B      #14, D0
00002546                          3631              
00002546  4E4F                    3632              TRAP #15
00002548                          3633              
00002548  4281                    3634              CLR.L       D1
0000254A                          3635              
0000254A  321E                    3636              MOVE.W      (A6)+, D1
0000254C                          3637              
0000254C  103C 000F               3638              MOVE.B      #15, D0
00002550                          3639              
00002550  143C 0010               3640              MOVE.B      #16, D2
00002554                          3641              
00002554  4E4F                    3642              TRAP #15
00002556                          3643              
00002556  6000 006C               3644              BRA DONE  
0000255A                          3645  
0000255A                          3646  
0000255A                          3647  ABSOLUTE_LONG
0000255A  43F9 0000278C           3648              LEA         HEX_SIGN, A1
00002560                          3649              
00002560  103C 000E               3650              MOVE.B      #14, D0
00002564                          3651              
00002564  4E4F                    3652              TRAP #15
00002566                          3653              
00002566  4281                    3654              CLR.L       D1
00002568                          3655              
00002568  221E                    3656              MOVE.L      (A6)+, D1
0000256A                          3657              
0000256A  103C 000F               3658              MOVE.B      #15, D0
0000256E                          3659              
0000256E  143C 0010               3660              MOVE.B      #16, D2
00002572                          3661              
00002572  4E4F                    3662              TRAP #15
00002574                          3663                          
00002574  6000 004E               3664              BRA DONE  
00002578                          3665  
00002578                          3666  
00002578                          3667  IMMEDIATE
00002578  43F9 0000278A           3668              LEA     POUND_SIGN, A1
0000257E                          3669              
0000257E  103C 000E               3670              MOVE.B  #14, D0
00002582                          3671              
00002582  4E4F                    3672              TRAP #15
00002584                          3673              
00002584  43F9 0000278C           3674              LEA     HEX_SIGN, A1
0000258A                          3675              
0000258A  4E4F                    3676              TRAP #15
0000258C                          3677              
0000258C  BA3C 0000               3678              CMP.B   #%00, D5
00002590                          3679              
00002590  6700 000E               3680              BEQ     IMMEDIATE_B
00002594                          3681              
00002594  BA3C 0001               3682              CMP.B   #%01, D5
00002598                          3683              
00002598  6700 0012               3684              BEQ     IMMEDIATE_W
0000259C                          3685              
0000259C  6000 001A               3686              BRA     IMMEDIATE_L
000025A0                          3687              
000025A0                          3688  IMMEDIATE_B
000025A0  4285                    3689              CLR.L       D5
000025A2                          3690     
000025A2  3A1E                    3691              MOVE.W      (A6)+, D5
000025A4                          3692              
000025A4  4EB8 233A               3693              JSR         HEX_TO_ASCII
000025A8                          3694              
000025A8  6000 001A               3695              BRA DONE
000025AC                          3696  
000025AC                          3697  IMMEDIATE_W
000025AC  4285                    3698              CLR.L       D5
000025AE                          3699  
000025AE  3A1E                    3700              MOVE.W      (A6)+, D5
000025B0                          3701              
000025B0  4EB8 233A               3702              JSR         HEX_TO_ASCII
000025B4                          3703              
000025B4                          3704              *MOVE.B      #15, D0
000025B4                          3705              
000025B4                          3706              *MOVE.B      #16, D2
000025B4                          3707              
000025B4                          3708              *TRAP #15 
000025B4                          3709              
000025B4  6000 000E               3710              BRA DONE        
000025B8                          3711  
000025B8                          3712  IMMEDIATE_L 
000025B8  4285                    3713              CLR.L       D5
000025BA                          3714              
000025BA  2A1E                    3715              MOVE.L      (A6)+, D5
000025BC                          3716      
000025BC  4EB8 233A               3717              JSR         HEX_TO_ASCII
000025C0                          3718              
000025C0  6000 0002               3719              BRA DONE
000025C4                          3720              
000025C4                          3721  DONE 
000025C4  4E75                    3722      RTS
000025C6                          3723      
000025C6                          3724   * INCLUDE 'MESSAGE_Data.X68'
000025C6                          3725   * INCLUDE 'HEX_TO_ASCII_V1.X68'
000025C6                          3726       
000025C6                          3727          
000025C6                          3728  
000025C6                          3729  
000025C6                          3730  
000025C6                          3731  
000025C6                          3732  
000025C6                          3733  
000025C6                          3734  
000025C6                          3735  
000025C6                          3736  -------------------- end include --------------------
000025C6                          3737                  
000025C6  4EF8 10F0               3738                  JMP      PARSE_MEMORY
000025CA                          3739                  
000025CA                          3740  PRESS_ENTER_CONTINUE
000025CA  267C 00000000           3741                   MOVEA.L  #outputCountCurr, A3  *reset to 0
000025D0  43F9 0000266B           3742                   LEA ENTER, A1
000025D6  103C 000E               3743                   MOVE.B #14, D0
000025DA  4E4F                    3744                   TRAP #15
000025DC                          3745                   
000025DC  103C 0005               3746                   MOVE.B #5, D0
000025E0  4E4F                    3747                   TRAP #15
000025E2                          3748                   
000025E2  B23C 000D               3749                   CMP.B #$D, D1
000025E6                          3750  
000025E6  103C 000B               3751                   MOVE.B #11, D0   *clear display
000025EA  323C FF00               3752                   MOVE.W #$FF00, D1
000025EE  4E4F                    3753                   TRAP #15
000025F0                          3754  
000025F0  4EF8 1114               3755                   JMP CONTINUE_PARSE
000025F4                          3756                  
000025F4                          3757                 
000025F4                          3758                  
000025F4                          3759  STOP
000025F4                          3760  
000025F4                          3761  
000025F4                          3762  
000025F4                          3763  
000025F4                          3764  
000025F4                          3765  
000025F4                          3766  
000025F4                          3767  
000025F4                          3768  
000025F4                          3769  
000025F4                          3770  
000025F4                          3771  
000025F4                          3772  
000025F4                          3773  
000025F4                          3774  
000025F4                          3775  
000025F4                          3776  
000025F4                          3777  
000025F4                          3778  
000025F4                          3779  
000025F4                          3780  
000025F4                          3781  
000025F4                          3782  
000025F4                          3783  
000025F4                          3784  -------------------- end include --------------------
000025F4                          3785  
000025F4  FFFF FFFF               3786      SIMHALT             ; halt simulator
000025F8                          3787  
000025F8                          3788      INCLUDE 'DS_Data.X68' * STARTING_ADDR ** ENDING_ADDR
000025F8                          3789  
000025F8                          3790  STARTING_ADDR   DS.L 1
000025FC                          3791  
000025FC                          3792  ENDING_ADDR     DS.L 1
000025FC                          3793  -------------------- end include --------------------
00002600                          3794      INCLUDE 'MESSAGE_Data.X68' 
00002600                          3795  
00002600  =0000000D               3796  CR  EQU $0D
00002600  =0000000A               3797  LF  EQU $0A 
00002600                          3798  
00002600= 57 65 6C 63 6F 6D ...   3799  WELCOME_MESSAGE DC.B 'Welcome to our Team wild pokemon disassembly!!', CR, LF, 0
00002631= 45 6E 74 65 72 20 ...   3800  STARTING        DC.B 'Enter the starting location: ', 0
0000264F= 45 6E 74 65 72 20 ...   3801  ENDING          DC.B 'Enter the ending locaiton: ', 0
0000266B= 45 6E 74 65 72 20 ...   3802  ENTER           DC.B 'Enter to continue ', 0
0000267E= 49 6E 76 61 6C 69 ...   3803  ERROR_MSG       DC.B 'Invalid Input, must be 8 characters, (0-9), (A-F), re-do ',CR, LF, 0
000026BA= 0D 0A 00                3804  CR_LF           DC.B '', CR, LF, 0
000026BD                          3805      
000026BD= 41 44 44 49 2E 00       3806  ADDI_MESSAGE    DC.B 'ADDI.',0
000026C3= 4D 4F 56 45 41 2E 00    3807  MOVEA_MESSAGE   DC.B 'MOVEA.',0
000026CA= 4D 4F 56 45 2E 00       3808  MOVE_MESSAGE    DC.B 'MOVE.',0
000026D0= 4E 4F 50 00             3809  NOP_MESSAGE     DC.B 'NOP',0
000026D4= 4D 4F 56 45 4D 2E 00    3810  MOVEM_MESSAGE   DC.B 'MOVEM.',0
000026DB= 4A 53 52 00             3811  JSR_MESSAGE     DC.B 'JSR',0
000026DF= 52 54 53 00             3812  RTS_MESSAGE     DC.B 'RTS',0
000026E3= 43 4C 52 00             3813  CLR_MESSAGE     DC.B 'CLR',0
000026E7= 41 44 44 51 2E 00       3814  ADDQ_MESSAGE    DC.B 'ADDQ.',0
000026ED= 4C 45 41 00             3815  LEA_MESSAGE     DC.B 'LEA',0
000026F1                          3816  
000026F1                          3817  
000026F1= 42 43 43 00             3818  BCC_MESSAGE     DC.B 'BCC',0   *//
000026F5= 42 45 51 00             3819  BEQ_MESSAGE     DC.B 'BEQ',0   *//
000026F9= 42 4E 45 00             3820  BNE_MESSAGE     DC.B 'BNE',0   *//
000026FD= 42 43 53 00             3821  BCS_MESSAGE     DC.B 'BCS',0   *//
00002701= 42 47 45 00             3822  BGE_MESSAGE     DC.B 'BGE',0   *//
00002705= 42 47 54 00             3823  BGT_MESSAGE     DC.B 'BGT',0   *//
00002709= 42 48 49 00             3824  BHI_MESSAGE     DC.B 'BHI',0   *//
0000270D= 42 4C 45 00             3825  BLE_MESSAGE     DC.B 'BLE',0   *//
00002711= 42 4C 53 00             3826  BLS_MESSAGE     DC.B 'BLS',0   *//
00002715= 42 4C 54 00             3827  BLT_MESSAGE     DC.B 'BLT',0   *//
00002719= 42 4D 49 00             3828  BMI_MESSAGE     DC.B 'BMI',0   *//
0000271D= 42 50 4C 00             3829  BPL_MESSAGE     DC.B 'BPL',0   *//
00002721= 42 56 43 00             3830  BVC_MESSAGE     DC.B 'BVC',0   *//
00002725= 42 56 53 00             3831  BVS_MESSAGE     DC.B 'BVS',0   *//
00002729                          3832  
00002729= 4D 4F 56 45 51 2E 00    3833  MOVEQ_MESSAGE   DC.B 'MOVEQ.',0
00002730= 44 49 56 55 2E 00       3834  DIVU_MESSAGE    DC.B 'DIVU.',0
00002736= 4F 52 2E 00             3835  OR_MESSAGE      DC.B 'OR.',0
0000273A= 53 55 42 2E 00          3836  SUB_MESSAGE     DC.B 'SUB.',0
0000273F= 43 4D 50 2E 00          3837  CMP_MESSAGE     DC.B 'CMP.',0
00002744= 4D 55 4C 53 2E 00       3838  MULS_MESSAGE    DC.B 'MULS.',0
0000274A= 41 4E 44 2E 00          3839  AND_MESSAGE     DC.B 'AND.',0
0000274F= 41 44 44 2E 00          3840  ADD_MESSAGE     DC.B 'ADD.',0
00002754= 41 44 44 41 2E 00       3841  ADDA_MESSAGE    DC.B 'ADDA.',0
0000275A= 4C 53 4C 2E 00          3842  LSL_MESSAGE     DC.B 'LSL.',0 *//
0000275F= 41 53 4C 2E 00          3843  ASL_MESSAGE     DC.B 'ASL.',0
00002764= 52 4F 4C 2E 00          3844  ROL_MESSAGE     DC.B 'ROL.',0
00002769= 4C 53 52 2E 00          3845  LSR_MESSAGE     DC.B 'LSR.',0 *//
0000276E= 41 53 52 2E 00          3846  ASR_MESSAGE     DC.B 'ASR.',0
00002773= 52 4F 52 2E 00          3847  ROR_MESSAGE     DC.B 'ROR.',0
00002778= 42 20 20 20 20 00       3848  SIZE_B_PRINT    DC.B 'B    ',0
0000277E= 57 20 20 20 20 00       3849  SIZE_W_PRINT    DC.B 'W    ',0
00002784= 4C 20 20 20 20 00       3850  SIZE_L_PRINT    DC.B 'L    ',0
0000278A= 23 00                   3851  POUND_SIGN      DC.B '#',0
0000278C= 24 00                   3852  HEX_SIGN        DC.B '$',0
0000278E= 2E 00                   3853  PERIOD          DC.B '.',0
00002790= 20 20 00                3854  SPACE           DC.B '  ',0
00002793= 2F 00                   3855  SLASH           DC.B '/', 0
00002795                          3856  
00002795= 44 00                   3857  D_REGISTER      DC.B 'D',0
00002797= 41 00                   3858  A_REGISTER      DC.B 'A',0
00002799= 28 41 00                3859  IA_START        DC.B '(A',0
0000279C= 29 00                   3860  IA_END          DC.B ')',0
0000279E= 28 41 00                3861  A_PI_START      DC.B '(A',0
000027A1= 29 2B 00                3862  A_PI_END        DC.B ')+',0
000027A4= 2D 28 41 00             3863  A_PD_START      DC.B '-(A',0
000027A8= 29 00                   3864  A_PD_END        DC.B ')',0
000027AA= 2C 20 00                3865  COMMA           DC.B ', ',0
000027AD                          3866  
000027AD                          3867  
000027AD                          3868  
000027AD                          3869  
000027AD                          3870  
000027AD                          3871  
000027AD                          3872  
000027AD                          3873  
000027AD                          3874  
000027AD                          3875  
000027AD                          3876  
000027AD                          3877  
000027AD                          3878  
000027AD                          3879  
000027AD                          3880  
000027AD                          3881  
000027AD                          3882  
000027AD                          3883  
000027AD                          3884  
000027AD                          3885  -------------------- end include --------------------
000027AD                          3886      *MOVE.B    #3, D2
000027AD                          3887      *MOVE.B    #0, D5
000027AE  307C 0400               3888      MOVEA.W   #$400, A0
000027B2                          3889      
000027B2                          3890      
000027B2                          3891      
000027B2                          3892  
000027B2                          3893      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_LONG       255A
ABSOLUTE_SHORT      253C
ADDA_CODE           2012
ADDA_MESSAGE        2754
ADDI                11D6
ADDI_B_SIZE         1246
ADDI_EA             12A6
ADDI_MESSAGE        26BD
ADDI_W_SIZE         1276
ADDQ                13BA
ADDQB               13E8
ADDQL               1414
ADDQW               13FE
ADDQ_MESSAGE        26E7
ADDRESS_PD          24C2
ADDRESS_PI          2498
ADDRESS_REGISTER    2452
ADDRESS_W_DISPLACEMENT  24EC
ADDRESS_W_INDEX     24F0
ADD_ADDA            1FFE
ADD_CODE            2080
ADD_FIRST_EA        20C6
ADD_MESSAGE         274F
AND_CODE            174C
AND_FIRST_EA        1792
AND_MESSAGE         274A
ASD                 1DA8
ASD_MEMORY          1E02
ASL                 1DBE
ASL_MESSAGE         275F
ASR                 1DE0
ASR_MESSAGE         276E
A_16_BIT            231E
A_32_BIT            232C
A_PD_END            27A8
A_PD_START          27A4
A_PI_END            27A1
A_PI_START          279E
A_REGISTER          2797
BCC                 2192
BCC_MESSAGE         26F1
BCS_MESSAGE         26FD
BEQ_MESSAGE         26F5
BGE_MESSAGE         2701
BGT_MESSAGE         2705
BHI_MESSAGE         2709
BIT0                1B08
BIT1                1B18
BIT10               1BA8
BIT11               1BB8
BIT12               1BC8
BIT13               1BD8
BIT14               1BE8
BIT15               1BF8
BIT2                1B28
BIT3                1B38
BIT4                1B48
BIT5                1B58
BIT6                1B68
BIT7                1B78
BIT8                1B88
BIT9                1B98
BLE_MESSAGE         270D
BLS_MESSAGE         2711
BLT_MESSAGE         2715
BMI_MESSAGE         2719
BNE_MESSAGE         26F9
BPL_MESSAGE         271D
BVC_MESSAGE         2721
BVS_MESSAGE         2725
CC                  21C4
CHAR                10A0
CHECK               1A5A
CHECK_SECOND        1A6C
CLR_MESSAGE         26E3
CLR_OPCODE          153C
CMP                 12F0
CMP_MESSAGE         273F
CODE000             2416
CODE0000            1196
CODE0001            119A
CODE001             241A
CODE0010            119E
CODE0011            11A2
CODE010             241E
CODE0100            11A6
CODE0101            11AA
CODE011             2422
CODE0110            11AE
CODE0111            11B2
CODE100             2426
CODE1000            11B6
CODE1001            11BA
CODE101             242A
CODE1010            11BE
CODE1011            11C2
CODE110             242E
CODE1100            11C6
CODE1101            11CA
CODE111             2432
CODE1110            11CE
CODE1111            11D2
COMMA               27AA
CONTINUE_PARSE      1114
CONVERT_STRING      107E
CR                  D
CR_LF               26BA
CS                  21C8
DATA_REGISTER       2436
DIRECTION_LEFT      1
DIRECTION_RIGHT     0
DISPLACEMENT        22D0
DIVU_CODE           15EA
DIVU_MESSAGE        2730
DIVU_OR             15D6
DONE                25C4
DONE_MOVEM_LOOP     1C08
DONE_PRINTING       2116
DR_FIELD            17F0
D_REGISTER          2795
ENDCONV             10DA
ENDING              264F
ENDING_ADDR         25FC
ENDING_MESSAGE      103C
ENTER               266B
EQ                  21D0
ERROR               10CA
ERROR_MSG           267E
EXAMPLE             606
EXAMPLE1            DE61
FINISH_PRINTING_SIZE  2034
GE                  21E4
GET_DATA_REGISTER   2156
GET_SIZE_PURPLE     20E8
GO_THROUGH_MEMORY   10DC
GROUP_0100_CODE     1698
GROUP_111           24F4
GT                  21EC
HEX_SIGN            278C
HEX_TO_ASCII        233A
HI                  21BC
IA_END              279C
IA_START            2799
IMMEDIATE           2578
IMMEDIATE_B         25A0
IMMEDIATE_L         25B8
IMMEDIATE_W         25AC
INDIRECT_ADDRESS    246E
IS_USED             1A80
IS_USED_FIRST       1A76
JMP_TABLE           1136
JMP_TABLE_EA        23E6
JMP_TABLE_EA_111    2502
JMP_TABLE_MOVEM     1AA8
JSR_MESSAGE         26DB
JSR_OPCODE          1506
LE                  21F0
LEA_MESSAGE         26ED
LEA_OPCODE          148C
LETTER_1            235C
LETTER_1_ZERO       23A2
LF                  A
LOOP                2346
LOOP_MOVEM          1A52
LOOP_MOVEM_SECOND   1A64
LOOP_ZERO           238C
LS                  21C0
LSD                 1CD8
LSD_MEMORY          1D36
LSL                 1CF2
LSL_MESSAGE         275A
LSR                 1D14
LSR_MESSAGE         2769
LT                  21E8
MAX_USER_INPUT      8
MEMORY_REGISTER     185C
MEMORY_SHIFTS       1CAC
MI                  21E0
MODE_AL             7
MODE_AN             1
MODE_AS             7
MODE_AWD            5
MODE_AWI            6
MODE_DN             0
MODE_IAN            2
MODE_ID             7
MODE_M_DN           0
MODE_M_PDAN         1
MODE_PCWD           7
MODE_PCWI           7
MODE_PDAN           4
MODE_PIAN           3
MOVEAL              1F8C
MOVEAW              1F6E
MOVEA_MESSAGE       26C3
MOVEB               1EE8
MOVEL               1F3A
MOVEM_MESSAGE       26D4
MOVEM_OPCODE        17B8
MOVEQ               1C0A
MOVEQ_MESSAGE       2729
MOVEW               1F06
MOVE_MESSAGE        26CA
MULS_AND            16FA
MULS_CODE           170E
MULS_MESSAGE        2744
NE                  21CC
NEXT_INSTRUCTION    111C
NOP_MESSAGE         26D0
NOP_OPCODE          14E6
NUMBER              1090
NUMBER_1            2366
NUMBER_1_ZERO       23AC
OPPOSITE_BIT0       1952
OPPOSITE_BIT1       1962
OPPOSITE_BIT10      19F2
OPPOSITE_BIT11      1A02
OPPOSITE_BIT12      1A12
OPPOSITE_BIT13      1A22
OPPOSITE_BIT14      1A32
OPPOSITE_BIT15      1A42
OPPOSITE_BIT2       1972
OPPOSITE_BIT3       1982
OPPOSITE_BIT4       1992
OPPOSITE_BIT5       19A2
OPPOSITE_BIT6       19B2
OPPOSITE_BIT7       19C2
OPPOSITE_BIT8       19D2
OPPOSITE_BIT9       19E2
OPPOSITE_CHECK      18A4
OPPOSITE_CHECK_SECOND  18B6
OPPOSITE_IS_USED    18CA
OPPOSITE_IS_USED_FIRST  18C0
OPPOSITE_JMP_TABLE_MOVEM  18F2
OPPOSITE_LOOP       187C
OPPOSITE_LOOP_MOVEM  189C
OPPOSITE_LOOP_MOVEM_SECOND  18AE
OPPOSITE_PRINT_REGISTER_MOVEM  18E0
OR_CODE             162C
OR_FIRST_EA         1672
OR_MESSAGE          2736
OUTPUTCOUNTCURR     0
OUTPUTCOUNTMAX      1F
PARSE_MEMORY        10F0
PARSE_MEMORY_FIRST  10FE
PC_W_DISPLACEMENT   2534
PC_W_INDEX          2538
PERIOD              278E
PL                  21DC
POUND_SIGN          278A
PRESS_ENTER_CONTINUE  25CA
PRINTADDQ           142A
PRINTOUT_COUNT      1E3E
PRINTOUT_MEMORY_SHIFTS_EA  1EB8
PRINTOUT_MOVE_EA    1FAA
PRINTOUT_NIBBLE     2370
PRINTOUT_NIBBLE_ZERO  23B6
PRINTOUT_REGISTER   1E80
PRINTOUT_REGISTER_SHIFTS_EA  1E0C
PRINTOUT_SIZE_L     206E
PRINTOUT_SIZE_PURPLE  20FE
PRINTOUT_SIZE_W     205C
PRINT_ADDRESS       183A
PRINT_B             2118
PRINT_BCC           2214
PRINT_BCS           2224
PRINT_BEQ           2244
PRINT_BGE           2294
PRINT_BGT           22B4
PRINT_BHI           21F4
PRINT_BLE           22C4
PRINT_BLS           2204
PRINT_BLT           22A4
PRINT_BMI           2284
PRINT_BNE           2234
PRINT_BPL           2274
PRINT_BVC           2254
PRINT_BVS           2264
PRINT_COMMA         2148
PRINT_EA            23D8
PRINT_L             2138
PRINT_REGISTER_MOVEM  1A96
PRINT_SIZE          1580
PRINT_SIZE_L_MOVEM  17E4
PRINT_SUB_CMP       1366
PRINT_W             2128
PRINT_ZERO          23CA
REG000              2528
REG001              252C
REG010              2520
REG011              2524
REG100              2530
REGITSET_MEMORY     1802
ROD                 1D40
ROD_MEMORY          1D9E
ROL                 1D5A
ROL_MESSAGE         2764
ROR                 1D7C
ROR_MESSAGE         2773
RO_IMMEDATE         0
RO_REGISTER         1
RTS_MESSAGE         26DF
RTS_OPCODE          14F6
SET_EA              2168
SHIFT               C
SHIFTS              1C72
SIZE_B              15B8
SIZE_BYTE           0
SIZE_B_PRINT        2778
SIZE_L              15CC
SIZE_LONG           3
SIZE_L_PRINT        2784
SIZE_W              15C2
SIZE_WORD           1
SIZE_W_PRINT        277E
SLASH               2793
SPACE               2790
START               1000
STARTING            2631
STARTING_ADDR       25F8
STARTING_MESSAGE    100C
STOP                25F4
STORE_ADDR          10B8
SUB                 12DE
SUB_CMP             1302
SUB_CMP_B           1324
SUB_CMP_L           1350
SUB_CMP_W           133A
SUB_MESSAGE         273A
VC                  21D4
VS                  21D8
WELCOME_MESSAGE     2600
XN_AL               1
XN_AS               0
XN_ID               4
XN_PCWD             2
XN_PCWI             3
