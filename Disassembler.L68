00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/16 7:50:53 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Dissassembler Integration
00000000                             3  * Written by : Samuel Williams
00000000                             4  * Date       : 5/25/2016
00000000                             5  * Description: The file which includes all files
00000000                             6  *              to create a complete dissassembler 
00000000                             7  *-----------------------------------------------------------
00001000                             8      ORG    $1000
00001000                             9  START:                  ; first instruction of program
00001000                            10      
00001000                            11      *INCLUDE 'TEST_CODE_DAMIAN.X68'
00001000                            12      INCLUDE 'EQU_Data.X68'
00001000                            13  
00001000                            14  
00001000  =00000008                 15  MAX_USER_INPUT  EQU 8 
00001000                            16  
00001000                            17  
00001000  =00000606                 18  example          EQU     %0000011000000110
00001000                            19  
00001000  =0000DE61                 20  example1         EQU     %1101111001100001    * I made up bits 0 to 11      
00001000                            21  
00001000  =0000000C                 22  shift            EQU     12                   * Shift 12 bits 
00001000                            23  
00001000  =00000000                 24  mode_dn          EQU     %000
00001000                            25  
00001000  =00000001                 26  mode_an          EQU     %001
00001000                            27  
00001000  =00000002                 28  mode_ian         EQU     %010
00001000                            29  
00001000  =00000003                 30  mode_pian        EQU     %011
00001000                            31  
00001000  =00000004                 32  mode_pdan        EQU     %100
00001000                            33  
00001000  =00000005                 34  mode_awd         EQU     %101
00001000                            35  
00001000  =00000006                 36  mode_awi         EQU     %110
00001000                            37  
00001000  =00000007                 38  mode_pcwd        EQU     %111
00001000                            39  
00001000  =00000002                 40  xn_pcwd          EQU     %010
00001000                            41  
00001000  =00000007                 42  mode_pcwi        EQU     %111
00001000                            43  
00001000  =00000003                 44  xn_pcwi          EQU     %011
00001000                            45  
00001000  =00000007                 46  mode_as          EQU     %111
00001000                            47  
00001000  =00000000                 48  xn_as            EQU     %000
00001000                            49  
00001000  =00000007                 50  mode_al          EQU     %111
00001000                            51  
00001000  =00000001                 52  xn_al            EQU     %001
00001000                            53  
00001000  =00000007                 54  mode_id          EQU     %111
00001000                            55  
00001000  =00000004                 56  xn_id            EQU     %100
00001000                            57  
00001000  =00000000                 58  size_byte        EQU     %00
00001000                            59  
00001000  =00000001                 60  size_word        EQU     %01
00001000                            61  
00001000  =00000003                 62  size_long        EQU     %11
00001000                            63  
00001000  =00000000                 64  direction_right  EQU     %0
00001000                            65  
00001000  =00000001                 66  direction_left   EQU     %1
00001000                            67  
00001000  =00000000                 68  ro_immedate      EQU     %0
00001000                            69  
00001000  =00000001                 70  ro_register      EQU     %1
00001000                            71  
00001000  =00000000                 72  mode_m_dn        EQU     %0
00001000                            73  
00001000  =00000001                 74  mode_m_pdan      EQU     %1
00001000                            75  
00001000  =0000001F                 76  outputCountMax   EQU     31
00001000                            77  
00001000  =00000000                 78  outputCountCurr  EQU     0
00001000                            79            
00001000  =0000000D                 80  CR  EQU $0D
00001000                            81  
00001000  =0000000A                 82  LF  EQU $0A
00001000                            83  
00001000                            84  
00001000                            85  
00001000                            86  
00001000                            87  
00001000                            88  
00001000                            89  -------------------- end include --------------------
00001000                            90      INCLUDE 'INPUT.X68'
00001000                            91      * I/O 
00001000                            92  START_OF_PROGRAM    
00001000                            93      * Welcome message
00001000  43F9 00002616             94          LEA WELCOME_MESSAGE, A1
00001006  103C 000E                 95          MOVE.B #14, D0
0000100A  4E4F                      96          TRAP #15
0000100C                            97          
0000100C                            98  STARTING_MESSAGE    
0000100C                            99      * Printing out the Starting address message
0000100C  43F9 00002647            100          LEA STARTING, A1
00001012  103C 000E                101          MOVE.B #14, D0
00001016  4E4F                     102          TRAP #15
00001018                           103      
00001018                           104      * Code for input
00001018  227C 00000200            105          MOVEA.L #$200, A1 *we have to change this addr later
0000101E  103C 0002                106          MOVE.B #2, D0
00001022  4E4F                     107          TRAP #15
00001024  143C 0008                108          MOVE.B #MAX_USER_INPUT, D2
00001028                           109      
00001028                           110      * JSR to convert string function
00001028  4EB9 0000107E            111          JSR CONVERT_STRING   
0000102E                           112      * check if the address is even number
0000102E  E25C                     113          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001030  65DA                     114          BCS STARTING_MESSAGE   *if carry is set then the user typed in an odd address
00001032  E35C                     115          ROL #1, D4     *PUT D4 BACK
00001034                           116         
00001034                           117      * store hex value of inputted string 
00001034  23C4 0000260E            118          MOVE.L D4, STARTING_ADDR 
0000103A                           119      * reset the D4
0000103A  4284                     120          CLR.L  D4
0000103C                           121          
0000103C                           122  ENDING_MESSAGE
0000103C                           123      * message user to input
0000103C  43F9 00002665            124          LEA ENDING, A1   
00001042  103C 000E                125          MOVE.B #14, D0
00001046  4E4F                     126          TRAP #15
00001048                           127      * read user input
00001048  227C 00000200            128          MOVEA.L #$200, A1 *we have to change this addr later
0000104E  103C 0002                129          MOVE.B #2, D0   
00001052  4E4F                     130          TRAP #15
00001054                           131      * counter for loop
00001054  143C 0008                132          MOVE.B #MAX_USER_INPUT, D2   
00001058                           133      * JSR to convert string function
00001058  4EB9 0000107E            134          JSR CONVERT_STRING 
0000105E                           135          
0000105E                           136      * check if the address is even number
0000105E  E25C                     137          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001060  65DA                     138          BCS ENDING_MESSAGE   *if carry is set then the user typed in an odd address
00001062  E35C                     139          ROL #1, D4     *PUT D4 BACK        
00001064                           140          
00001064                           141      * Check if the starting and ending address is the same
00001064                           142         ; CMP.L #STARTING_ADDR, D4
00001064                           143         * MOVE.L #STARTING_ADDR, D5
00001064  2C39 0000260E            144          MOVE.L STARTING_ADDR, D6
0000106A  B886                     145          CMP.L  D6, D4
0000106C  6FCE                     146          BLE   ENDING_MESSAGE
0000106E                           147      * store hex value of inputted string   
0000106E  23C4 00002612            148          MOVE.L D4, ENDING_ADDR   
00001074                           149          
00001074                           150      * clear the unused data in the data and address regisgter
00001074  4280                     151          CLR.L D0
00001076  4284                     152          CLR.L D4
00001078                           153          
00001078                           154          * Do error handling here Sam
00001078                           155          
00001078  4EF9 000010DC            156          JMP GO_THROUGH_MEMORY
0000107E                           157      
0000107E                           158      * Get each char
0000107E                           159  CONVERT_STRING 
0000107E  1219                     160          MOVE.B (A1)+, D1
00001080                           161      
00001080                           162      * Go to next instruction for converting
00001080  B23C 0039                163          CMP.B #$39, D1
00001084  6F00 000A                164          BLE NUMBER
00001088                           165          
00001088  B23C 003A                166          CMP.B #$3A, D1
0000108C  6C00 0012                167          BGE CHAR   
00001090                           168      
00001090                           169      * Convert Ascii numbers to hex
00001090                           170  NUMBER  
00001090  B23C 002F                171          CMP.B #$2F, D1
00001094                           172      * Number is out of range
00001094  6F00 0034                173          BLE ERROR       
00001098  0401 0030                174          SUB.B #48, D1
0000109C                           175          
0000109C                           176      * Need to be changed the name of label
0000109C  6000 001A                177          BRA STORE_ADDR    
000010A0                           178      
000010A0                           179      * Convert Ascii charaters to hex
000010A0                           180  CHAR    
000010A0  B27C 0040                181          CMP #$40, D1
000010A4                           182      * Number is out of range
000010A4  6F00 0024                183          BLE ERROR
000010A8                           184          
000010A8  B27C 0047                185          CMP #$47, D1
000010AC                           186      * Number is out of range
000010AC  6C00 001C                187          BGE ERROR
000010B0                           188          
000010B0  0401 0037                189          SUB.B #55, D1
000010B4  6000 0002                190          BRA STORE_ADDR
000010B8                           191          
000010B8                           192  STORE_ADDR
000010B8                           193      * Add converted nibble to overall number
000010B8  D801                     194          ADD.B D1, D4
000010BA                           195      * Clear D1 for reuse 
000010BA  4201                     196          CLR.B D1
000010BC                           197      * Subtract from counter
000010BC  5342                     198          SUB #1, D2
000010BE                           199      * If counter is 0, we compared all 8 hex numbers
000010BE  B43C 0000                200          CMP.B #0, D2
000010C2  6700 0016                201          BEQ ENDCONV
000010C6                           202      * Shift the overall number to the left by 1 nibble, so it will fit next hex number
000010C6  E98C                     203          LSL.L #4, D4
000010C8  60B4                     204          BRA CONVERT_STRING
000010CA                           205          
000010CA                           206      * Error handling
000010CA                           207  ERROR
000010CA  43F9 00002694            208      LEA   ERROR_MSG, A1 
000010D0  103C 000E                209      MOVE.B #14, D0
000010D4  4E4F                     210      TRAP #15
000010D6  4EF8 100C                211      JMP   STARTING_MESSAGE
000010DA                           212  
000010DA                           213      
000010DA                           214  ENDCONV * Next instruction starts 
000010DA  4E75                     215          RTS
000010DC                           216         * MOVE.L D4, STARTING_ADDR 
000010DC                           217          
000010DC                           218  GO_THROUGH_MEMORY
000010DC                           219  
000010DC                           220  
000010DC                           221  
000010DC                           222  
000010DC                           223  
000010DC                           224  
000010DC                           225  
000010DC                           226  
000010DC                           227  
000010DC                           228  
000010DC                           229  
000010DC                           230  
000010DC                           231  
000010DC                           232  
000010DC                           233  
000010DC                           234  
000010DC                           235  
000010DC                           236  
000010DC                           237  
000010DC                           238  
000010DC                           239  
000010DC                           240  
000010DC                           241  
000010DC                           242  
000010DC                           243  
000010DC                           244  
000010DC                           245  
000010DC                           246  -------------------- end include --------------------
000010DC                           247      INCLUDE 'MEMORY_PARSER.X68'
000010DC                           248  
000010DC  2A79 0000260E            249                  MOVEA.L   STARTING_ADDR, A5
000010E2  2C4D                     250                  MOVEA.L   A5, A6
000010E4  247C 0000001F            251                  MOVEA.L  #outputCountMax, A2
000010EA  267C 00000000            252                  MOVEA.L  #outputCountCurr, A3
000010F0                           253  PARSE_MEMORY      
000010F0  3A4E                     254                  MOVE.W   A6, A5
000010F2  43F9 000026D0            255                  LEA      CR_LF, A1
000010F8  103C 000E                256                  MOVE.B   #14, D0
000010FC  4E4F                     257                  TRAP #15  
000010FE                           258          
000010FE                           259  PARSE_MEMORY_FIRST    
000010FE  BBF9 00002612            260                  CMPA.L   ENDING_ADDR, A5
00001104  6700 14B8                261                  BEQ      ASK_TO_CONTINUE
00001108  301E                     262                  MOVE.W   (A6)+, D0
0000110A                           263                  
0000110A  B7FC 0000001F            264                  CMPA.L   #outputCountMax, A3
00001110  6700 1482                265                  BEQ       PRESS_ENTER_CONTINUE
00001114                           266  CONTINUE_PARSE
00001114  528B                     267                  ADDA.L    #1, A3
00001116                           268                  
00001116  4EF9 0000111C            269                  JMP      NEXT_INSTRUCTION
0000111C                           270                      
0000111C                           271  NEXT_INSTRUCTION
0000111C                           272                  INCLUDE 'JUMPTABLE DAMIAN-V1.X68'
0000111C                           273   
0000111C                           274  
0000111C  3015                     275                   MOVE.W  (A5),D0
0000111E                           276  
0000111E                           277  
0000111E                           278  
0000111E  41F9 00001136            279                   LEA     jmp_table,A0    *Index into the table
00001124                           280  
00001124  4280                     281                   CLR.L   D0              *Zero it
00001126                           282  
00001126  3015                     283                   MOVE.W  (A5),D0     *We'll play with it here
00001128                           284  
00001128  123C 000C                285                   MOVE.B  #shift,D1       *Shift 12 bits to the right  
0000112C                           286  
0000112C  E268                     287                   LSR.W   D1,D0           *Move the bits
0000112E                           288  
0000112E                           289  
0000112E                           290  
0000112E                           291  
0000112E                           292   
0000112E                           293  
0000112E  C0FC 0006                294                 MULU        #6,D0       *Form offset     
00001132                           295  
00001132  4EB0 0000                296                 JSR         0(A0,D0)   *Jump indirect with index
00001136                           297  
00001136                           298                      
00001136                           299  
00001136  4EF9 00001196            300  jmp_table      JMP         code0000
0000113C                           301  
0000113C  4EF9 0000119A            302                 JMP         code0001
00001142                           303  
00001142  4EF9 0000119E            304                 JMP         code0010
00001148                           305  
00001148  4EF9 000011A2            306                 JMP         code0011
0000114E                           307  
0000114E  4EF9 000011A6            308                 JMP         code0100
00001154                           309  
00001154  4EF9 000011AA            310                 JMP         code0101
0000115A                           311  
0000115A  4EF9 000011AE            312                 JMP         code0110
00001160                           313  
00001160  4EF9 000011B2            314                 JMP         code0111
00001166                           315  
00001166  4EF9 000011B6            316                 JMP         code1000
0000116C                           317  
0000116C  4EF9 000011BA            318                 JMP         code1001
00001172                           319  
00001172  4EF9 000011BE            320                 JMP         code1010
00001178                           321  
00001178  4EF9 000011C2            322                 JMP         code1011
0000117E                           323  
0000117E  4EF9 000011C6            324                 JMP         code1100
00001184                           325  
00001184  4EF9 000011CA            326                 JMP         code1101
0000118A                           327  
0000118A  4EF9 000011CE            328                 JMP         code1110
00001190                           329  
00001190  4EF9 000011D2            330                 JMP         code1111
00001196                           331  
00001196                           332          
00001196                           333  
00001196                           334   
00001196                           335  
00001196                           336  
00001196                           337   
00001196                           338  
00001196                           339   
00001196                           340  
00001196  6000 01F0                341  code0000       BRA         ADDI
0000119A                           342  
0000119A  6000 0EAA                343  code0001       BRA         MOVEB
0000119E                           344  
0000119E  6000 0EF8                345  code0010       BRA         MOVEL
000011A2                           346  
000011A2  6000 0EC0                347  code0011       BRA         MOVEW
000011A6                           348  
000011A6  6000 0660                349  code0100       BRA         GROUP_0100_CODE
000011AA                           350  
000011AA  6000 02E2                351  code0101       BRA         ADDQ   * Subroutine for ADDQ
000011AE                           352  
000011AE  6000 0FAC                353  code0110       BRA         BCC
000011B2                           354  
000011B2  6000 0BBA                355  code0111       BRA         MOVEQ
000011B6                           356  
000011B6  6000 059A                357  code1000       BRA         DIVU_OR
000011BA                           358  
000011BA  6000 03DA                359  code1001       BRA         SUB    * Subroutine for SUB
000011BE                           360  
000011BE  4E72 2700                361  code1010       STOP        #$2700
000011C2                           362  
000011C2                           363   
000011C2                           364  
000011C2                           365  
000011C2                           366  
000011C2                           367  
000011C2                           368   * another jump table to the 8 possible op-codes at the next level.
000011C2                           369  
000011C2                           370   
000011C2                           371  
000011C2  6000 039C                372  code1011       BRA        CMP  * Subroutuine for CMP
000011C6                           373  
000011C6  6000 06A2                374  code1100       BRA        MULS_AND
000011CA                           375  
000011CA  6000 000A                376  code1101       BRA         ADD_ADDA       *#$2700
000011CE                           377  
000011CE  6000 0C04                378  code1110       BRA         SHIFTS
000011D2                           379  
000011D2  4E72 2700                380  code1111       STOP        #$2700
000011D6                           381                   
000011D6                           382  
000011D6                           383                      
000011D6                           384              
000011D6                           385  
000011D6                           386  
000011D6                           387  
000011D6                           388  
000011D6                           389  
000011D6                           390  
000011D6                           391  
000011D6                           392  
000011D6                           393  
000011D6                           394  
000011D6                           395  
000011D6                           396  
000011D6                           397  
000011D6                           398  
000011D6                           399  
000011D6                           400  
000011D6                           401  
000011D6                           402  -------------------- end include --------------------
000011D6                           403                  INCLUDE 'ADD_ADDA.X68'
000011D6                           404    
000011D6                           405  
000011D6                           406          
000011D6                           407  
000011D6                           408                  * INCLUDE 'CMP.X68'
000011D6                           409                  * INCLUDE 'SUB.X68'
000011D6                           410                  * INCLUDE 'DIVU_OR.X68'
000011D6                           411                  * INCLUDE 'MULS_AND.X68'
000011D6                           412    
000011D6                           413  ADD_ADDA  *at this point we know the first 4 bits are 1101 -> ADD or ADDA -> compare the destination opmode
000011D6                           414                   
000011D6  4EB9 000012DA            415                   JSR      GET_SIZE_PURPLE
000011DC                           416                                              
000011DC  BA3C 0003                417                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is ADDA
000011E0                           418                   
000011E0  6700 0008                419                   BEQ      ADDA_CODE
000011E4                           420                   
000011E4  4EF9 0000125E            421                   JMP      ADD_CODE
000011EA                           422                   
000011EA                           423  ADDA_CODE 
000011EA                           424                   * ADDA opcode message
000011EA  43F9 0000276A            425                   LEA ADDA_MESSAGE, A1
000011F0                           426                   
000011F0  103C 000E                427                   MOVE.B #14, D0
000011F4                           428                   
000011F4  4E4F                     429                   TRAP #15
000011F6                           430                   
000011F6  4285                     431                   CLR.L D5         * clear for the size since this is not for the size purple
000011F8                           432                   
000011F8  4280                     433                   CLR.L D0                *clear D0
000011FA                           434                   
000011FA  4281                     435                   CLR.L D1                *clear D1
000011FC                           436                   
000011FC  3015                     437                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000011FE                           438                   
000011FE  EF48                     439                   LSL.W   #7, D0
00001200                           440  
00001200  123C 000D                441                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the
00001204                           442  
00001204  E268                     443                   LSR.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001206                           444                   
00001206  B03C 0003                445                   CMP.B   #%011, D0
0000120A                           446                   
0000120A  6700 002E                447                   BEQ     PRINTOUT_SIZE_W
0000120E                           448                   
0000120E  4EF9 0000124C            449                   JMP     PRINTOUT_SIZE_L
00001214                           450                   
00001214                           451  FINISH_PRINTING_SIZE
00001214                           452  
00001214  4EB9 0000135E            453                   JSR     Set_Ea
0000121A                           454                   
0000121A  4EB9 000023A2            455                   JSR     PRINT_EA *by using jmp table
00001220                           456                   
00001220  4EB9 0000133C            457                   JSR     PRINT_COMMA
00001226                           458                   
00001226                           459                    * for the first Dn 
00001226  4EB9 0000134C            460                   JSR     GET_Data_Register
0000122C                           461                   
0000122C  1C3C 0001                462                   MOVE.B  #%001, D6 * for mode
00001230                           463  
00001230  4EB9 000023A2            464                   JSR     PRINT_EA *by using jmp table
00001236                           465  
00001236  4EF8 10F0                466                   JMP     PARSE_MEMORY
0000123A                           467                   
0000123A                           468  PRINTOUT_SIZE_W
0000123A                           469                   
0000123A  3A3C 0001                470                   MOVE    #%01, D5          
0000123E                           471                   
0000123E  43F9 0000278E            472                   LEA      SIZE_W_PRINT,    A1
00001244                           473                   
00001244  103C 000E                474                   MOVE.B   #14,             D0
00001248                           475          
00001248  4E4F                     476                   TRAP #15
0000124A                           477                   
0000124A  60C8                     478                   BRA     FINISH_PRINTING_SIZE
0000124C                           479                   
0000124C                           480  PRINTOUT_SIZE_L                           
0000124C  3A3C 0002                481                   MOVE    #%10, D5          
00001250                           482                   
00001250  43F9 00002794            483                   LEA      SIZE_L_PRINT,    A1
00001256                           484                   
00001256  103C 000E                485                   MOVE.B   #14,             D0 
0000125A                           486         
0000125A  4E4F                     487                   TRAP #15
0000125C                           488                   
0000125C  60B6                     489                   BRA     FINISH_PRINTING_SIZE
0000125E                           490  
0000125E                           491  ADD_CODE
0000125E                           492                   * ADD message
0000125E  43F9 00002765            493                   LEA      ADD_MESSAGE,    A1
00001264  103C 000E                494                   MOVE.B   #14,            D0
00001268  4E4F                     495                   TRAP #15
0000126A                           496                   
0000126A  4EB9 000012F2            497                   JSR     PRINTOUT_SIZE_PURPLE
00001270                           498                   
00001270                           499                   * check for dn and ea
00001270  4280                     500                   CLR.L D0                *clear D0
00001272                           501                   
00001272  4281                     502                   CLR.L D1                *clear D1
00001274                           503                   
00001274  3015                     504                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001276                           505                   
00001276                           506                   * check the bit at 7
00001276  123C 0007                507                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000127A                           508  
0000127A  E368                     509                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000127C                           510                   
0000127C  123C 000F                511                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
00001280                           512  
00001280  E268                     513                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
00001282                           514                   
00001282  B03C 0000                515                   CMP.B   #0, D0
00001286                           516                   
00001286                           517                 *  BTST    #8, D0 * if the bit at 8 is 1, the ccr of z is set to 0
00001286                           518                   
00001286                           519                   
00001286  6700 002A                520                   BEQ     ADD_FIRST_EA
0000128A                           521                   
0000128A                           522                   * for the first Dn 
0000128A  4EB9 0000134C            523                   JSR     GET_Data_Register
00001290                           524                   
00001290  4286                     525                   CLR.L   D6
00001292                           526                   
00001292  1C3C 0000                527                   MOVE.B  #%000, D6 * for mode
00001296                           528                   
00001296  4EB9 000023A2            529                   JSR     PRINT_EA *by using jmp table
0000129C                           530                   
0000129C  4EB9 0000133C            531                   JSR     PRINT_COMMA
000012A2                           532                   
000012A2  4EB9 0000135E            533                   JSR     Set_Ea
000012A8                           534                   
000012A8  4EB9 000023A2            535                   JSR     PRINT_EA *by using jmp table
000012AE                           536                   
000012AE  4EF8 10F0                537                   JMP     PARSE_MEMORY
000012B2                           538                   
000012B2                           539  ADD_FIRST_EA
000012B2  4EB9 0000135E            540                   JSR     Set_Ea
000012B8                           541                   
000012B8  4EB9 000023A2            542                   JSR     PRINT_EA *by using jmp table
000012BE                           543                   
000012BE  4EB9 0000133C            544                   JSR     PRINT_COMMA
000012C4                           545                   
000012C4                           546                    * for the first Dn 
000012C4  4EB9 0000134C            547                   JSR     GET_Data_Register
000012CA                           548                   
000012CA  4286                     549                   CLR.L   D6
000012CC                           550                   
000012CC  1C3C 0000                551                   MOVE.B  #%000, D6 * for mode
000012D0                           552  
000012D0  4EB9 000023A2            553                   JSR     PRINT_EA *by using jmp table
000012D6                           554                   
000012D6  4EF8 10F0                555                   JMP     PARSE_MEMORY
000012DA                           556                   
000012DA                           557  GET_SIZE_PURPLE * get the op-code 
000012DA                           558  
000012DA  4280                     559                   CLR.L D0                *clear D0
000012DC                           560                   
000012DC  4281                     561                   CLR.L D1                *clear D1
000012DE                           562                   
000012DE  3015                     563                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000012E0                           564  
000012E0  123C 0008                565                   MOVE.B  #8,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000012E4                           566  
000012E4  E368                     567                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000012E6                           568                   
000012E6  123C 000E                569                   MOVE.B  #14,D1          *14 bits is the number of times to shift to hold the mode number
000012EA                           570  
000012EA  E268                     571                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
000012EC                           572                   
000012EC  4285                     573                   CLR.L   D5
000012EE                           574                   
000012EE  1A00                     575                   MOVE.B  D0, D5          *push the size to the Data register 5 for the future use
000012F0                           576                   
000012F0  4E75                     577                   RTS 
000012F2                           578  
000012F2                           579  PRINTOUT_SIZE_PURPLE * get the size for ADDI, CLR, ADDQ, OR, SUB, CMP, AND, ADD
000012F2                           580                       
000012F2  BA7C 0000                581                   CMP    #%00, D5          
000012F6                           582                   
000012F6  6700 0014                583                   BEQ    PRINT_B
000012FA                           584                   
000012FA  BA7C 0001                585                   CMP    #%01, D5          
000012FE                           586                   
000012FE  6700 001C                587                   BEQ    PRINT_W
00001302                           588                   
00001302  BA7C 0002                589                   CMP    #%10, D5          
00001306                           590                   
00001306  6700 0024                591                   BEQ    PRINT_L
0000130A                           592                   
0000130A                           593  DONE_PRINTING
0000130A  4E75                     594                   RTS 
0000130C                           595                   
0000130C                           596  PRINT_B          
0000130C  43F9 00002788            597                   LEA      SIZE_B_PRINT,    A1
00001312  103C 000E                598                   MOVE.B   #14,            D0          
00001316  4E4F                     599                   TRAP #15
00001318                           600  
00001318  4EF8 130A                601                   JMP      DONE_PRINTING
0000131C                           602                   
0000131C                           603  PRINT_W     
0000131C  43F9 0000278E            604                   LEA      SIZE_W_PRINT,    A1
00001322  103C 000E                605                   MOVE.B   #14,             D0          
00001326  4E4F                     606                   TRAP #15
00001328                           607  
00001328  4EF8 130A                608                   JMP      DONE_PRINTING
0000132C                           609  
0000132C                           610  
0000132C                           611  PRINT_L          
0000132C  43F9 00002794            612                   LEA      SIZE_L_PRINT,    A1
00001332  103C 000E                613                   MOVE.B   #14,             D0          
00001336  4E4F                     614                   TRAP #15   
00001338                           615                      
00001338  4EF8 130A                616                   JMP    DONE_PRINTING
0000133C                           617                   
0000133C                           618  PRINT_COMMA
0000133C  43F9 000027BA            619                   LEA COMMA, A1
00001342  103C 000E                620                   MOVE.B #14, D0
00001346  4E4F                     621                   TRAP #15
00001348                           622                   
00001348  4EF8 130A                623                   JMP    DONE_PRINTING
0000134C                           624                   
0000134C                           625  GET_Data_Register
0000134C  4280                     626                   CLR.L D0                *clear D0
0000134E                           627                   
0000134E  4281                     628                   CLR.L D1                *clear D1
00001350                           629                   
00001350  3015                     630                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001352                           631  
00001352  E948                     632                   LSL.W   #4,D0           *Shift the bits 4 times -> D0 now removes the opcode & reg#
00001354                           633                   
00001354  123C 000D                634                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001358                           635  
00001358  E268                     636                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
0000135A                           637  
0000135A  1E00                     638                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
0000135C                           639                   
0000135C  4E75                     640                   RTS
0000135E                           641                   
0000135E                           642  Set_Ea
0000135E                           643  
0000135E                           644                   * set register
0000135E  4280                     645                   CLR.L D0                *clear D0
00001360                           646                   
00001360  4281                     647                   CLR.L D1                *clear D1
00001362                           648                   
00001362  3015                     649                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001364                           650                 
00001364  123C 000D                651                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001368                           652  
00001368  E368                     653                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000136A                           654  
0000136A  E268                     655                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
0000136C                           656                   
0000136C  4287                     657                   CLR.L D7                *clear D7 
0000136E                           658  
0000136E  1E00                     659                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00001370                           660                   
00001370                           661                   * set mode
00001370  4280                     662                   CLR.L D0                *clear D0
00001372                           663                   
00001372  4281                     664                   CLR.L D1                *clear D1
00001374                           665                   
00001374  3015                     666                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001376                           667                 
00001376  123C 000A                668                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000137A                           669  
0000137A  E368                     670                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000137C                           671  
0000137C  123C 000D                672                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001380                           673  
00001380  E268                     674                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001382                           675                   
00001382  4286                     676                   CLR.L D6                *clear D6
00001384                           677  
00001384  1C00                     678                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
00001386                           679                   
00001386  4E75                     680                   RTS
00001388                           681                   
00001388                           682                  
00001388                           683  
00001388                           684  
00001388                           685  
00001388                           686  
00001388                           687  
00001388                           688  
00001388                           689  
00001388                           690  
00001388                           691  
00001388                           692  
00001388                           693  
00001388                           694  
00001388                           695  
00001388                           696  
00001388                           697  
00001388                           698  
00001388                           699  
00001388                           700  
00001388                           701  
00001388                           702  
00001388                           703  
00001388                           704  
00001388                           705  
00001388                           706  
00001388                           707  
00001388                           708  
00001388                           709  
00001388                           710  
00001388                           711  
00001388                           712  
00001388                           713  
00001388                           714  
00001388                           715  -------------------- end include --------------------
00001388                           716                  INCLUDE 'ADDI.X68'
00001388                           717    
00001388                           718  ADDI           * first check the first 4 bits after the op-code
00001388  4280                     719                 CLR.L       D0
0000138A                           720  
0000138A  4281                     721                 CLR.L       D1
0000138C                           722                 
0000138C  3015                     723                 MOVE.W      (A5),D0
0000138E                           724                 
0000138E  123C 0008                725                 MOVE.B      #8, D1 * for shifting to the right by 8 bits
00001392                           726                 
00001392  E268                     727                 LSR.W       D1, D0
00001394                           728                 
00001394  B07C 0006                729                 CMP.W       #6, D0 * checking the first 4 bits 
00001398                           730                 
00001398  6600 FD30                731                 BNE         ERROR  * go to error 
0000139C                           732                 
0000139C                           733                 * print the op-code 
0000139C  4280                     734                 CLR.L       D0
0000139E                           735  
0000139E  4281                     736                 CLR.L       D1
000013A0                           737                 
000013A0  43F9 000026D3            738                 LEA         ADDI_MESSAGE, A1    * NOTE - how do you know this is of size B ????? 
000013A6                           739                 
000013A6  103C 000E                740                 MOVE.B      #14, D0
000013AA                           741                 
000013AA  4E4F                     742                 TRAP #15
000013AC                           743                                
000013AC                           744                 * print the size
000013AC  4280                     745                 CLR.L       D0
000013AE                           746  
000013AE  4281                     747                 CLR.L       D1
000013B0                           748                 
000013B0  3015                     749                 MOVE.W      (A5),D0
000013B2                           750                
000013B2  E148                     751                 LSL.W       #8, D0
000013B4                           752  
000013B4  123C 000E                753                 MOVE.B      #14, D1 * for shifting to the right by 8 bits
000013B8                           754                 
000013B8  E268                     755                 LSR.W       D1, D0
000013BA                           756                 
000013BA                           757                 * D1 holds the size
000013BA                           758    *             CLR.L       D1
000013BA                           759                 
000013BA                           760    *             MOVE.B      D0, D1
000013BA                           761                   
000013BA  B03C 0000                762                 CMP.B       #%00, D0
000013BE                           763                 
000013BE  6700 0038                764                 BEQ         ADDI_B_SIZE
000013C2                           765                 
000013C2  B03C 0001                766                 CMP.B       #%01, D0
000013C6                           767                 
000013C6  6700 0060                768                 BEQ         ADDI_W_SIZE
000013CA                           769                 
000013CA                           770                 *print size L
000013CA  43F9 00002794            771                 LEA         SIZE_L_PRINT, A1     
000013D0                           772                 
000013D0  103C 000E                773                 MOVE.B      #14, D0
000013D4                           774                 
000013D4  4E4F                     775                 TRAP #15
000013D6                           776                 
000013D6                           777                * print out pound sign and hex sign
000013D6  43F9 0000279A            778                 LEA     POUND_SIGN, A1
000013DC                           779              
000013DC  103C 000E                780                 MOVE.B  #14, D0
000013E0                           781              
000013E0  4E4F                     782                 TRAP #15
000013E2                           783              
000013E2  43F9 0000279C            784                 LEA     HEX_SIGN, A1
000013E8                           785              
000013E8  4E4F                     786                 TRAP #15
000013EA                           787                 
000013EA  4285                     788                 CLR.L  D5
000013EC                           789          
000013EC  2A1E                     790                 MOVE.L (A6)+, D5 * we mimght change it later
000013EE                           791          
000013EE  4EB9 00002304            792                 JSR  HEX_TO_ASCII
000013F4                           793                 
000013F4  6000 0062                794                 BRA         ADDI_EA   
000013F8                           795                      
000013F8                           796  ADDI_B_SIZE
000013F8  43F9 00002788            797                 LEA         SIZE_B_PRINT, A1     
000013FE                           798                 
000013FE  103C 000E                799                 MOVE.B      #14, D0
00001402                           800                 
00001402  4E4F                     801                 TRAP #15
00001404                           802                 
00001404                           803                * print out pound sign and hex sign
00001404  43F9 0000279A            804                 LEA     POUND_SIGN, A1
0000140A                           805              
0000140A  103C 000E                806                 MOVE.B  #14, D0
0000140E                           807              
0000140E  4E4F                     808                 TRAP #15
00001410                           809              
00001410  43F9 0000279C            810                 LEA     HEX_SIGN, A1
00001416                           811              
00001416  4E4F                     812                 TRAP #15
00001418                           813                 
00001418  4280                     814                 CLR.L D0
0000141A                           815  
0000141A  301E                     816                 MOVE.W (A6)+, D0 * we mimght change it later
0000141C                           817                 
0000141C  1A00                     818                 MOVE.B D0, D5
0000141E                           819     
0000141E  4EB9 00002304            820                 JSR  HEX_TO_ASCII
00001424                           821                 
00001424  6000 0032                822                 BRA         ADDI_EA 
00001428                           823                  
00001428                           824  
00001428                           825  ADDI_W_SIZE
00001428  43F9 0000278E            826                 LEA         SIZE_W_PRINT, A1     
0000142E                           827                 
0000142E  103C 000E                828                 MOVE.B      #14, D0
00001432                           829                 
00001432  4E4F                     830                 TRAP #15
00001434                           831                 
00001434                           832                 * print out pound sign and hex sign
00001434  43F9 0000279A            833                 LEA     POUND_SIGN, A1
0000143A                           834              
0000143A  103C 000E                835                 MOVE.B  #14, D0
0000143E                           836              
0000143E  4E4F                     837                 TRAP #15
00001440                           838              
00001440  43F9 0000279C            839                 LEA     HEX_SIGN, A1
00001446                           840              
00001446  4E4F                     841                 TRAP #15
00001448                           842  
00001448  4285                     843                 CLR.L  D5
0000144A                           844          
0000144A  3A1E                     845                 MOVE.W (A6)+, D5
0000144C                           846          
0000144C  4EB9 00002304            847                 JSR  HEX_TO_ASCII
00001452                           848          
00001452  4EF9 00001458            849                 JMP  ADDI_EA
00001458                           850  
00001458                           851  
00001458                           852  ADDI_EA      
00001458  4EB8 133C                853                  JSR     PRINT_COMMA
0000145C                           854                  
0000145C  4280                     855                  CLR.L   D0
0000145E                           856                  
0000145E  4281                     857                  CLR.L   D1
00001460                           858                  
00001460                           859                  * set register
00001460                           860                   
00001460  3015                     861                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001462                           862                 
00001462  123C 000D                863                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001466                           864  
00001466  E368                     865                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001468                           866  
00001468  123C 000D                867                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
0000146C                           868  
0000146C  E268                     869                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
0000146E                           870  
0000146E  1E00                     871                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00001470                           872                   
00001470                           873                   * set mode
00001470  4280                     874                   CLR.L D0                *clear D0
00001472                           875                   
00001472  4281                     876                   CLR.L D1                *clear D1
00001474                           877                   
00001474  3015                     878                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001476                           879                 
00001476  123C 000A                880                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000147A                           881  
0000147A  E368                     882                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000147C                           883  
0000147C  123C 000D                884                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001480                           885  
00001480  E268                     886                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001482                           887  
00001482  1C00                     888                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
00001484                           889  
00001484                           890   
00001484                           891                 * JSR     Set_Ea
00001484                           892                   
00001484  4EB9 000023A2            893                  JSR     PRINT_EA *by using jmp table
0000148A                           894                  
0000148A  4EF8 10F0                895                  JMP     PARSE_MEMORY
0000148E                           896                  
0000148E                           897                  
0000148E                           898                   
0000148E                           899                   
0000148E                           900  
0000148E                           901  
0000148E                           902                 
0000148E                           903  
0000148E                           904  
0000148E                           905  
0000148E                           906  
0000148E                           907  
0000148E                           908  
0000148E                           909  
0000148E                           910  
0000148E                           911  
0000148E                           912  
0000148E                           913  
0000148E                           914  
0000148E                           915  
0000148E                           916  
0000148E                           917  
0000148E                           918  
0000148E                           919  
0000148E                           920  
0000148E                           921  
0000148E                           922  
0000148E                           923  
0000148E                           924  
0000148E                           925  
0000148E                           926  
0000148E                           927  
0000148E                           928  -------------------- end include --------------------
0000148E                           929                  INCLUDE 'ADDQ.X68'
0000148E                           930  
0000148E                           931  
0000148E                           932  ADDQ
0000148E                           933  
0000148E  43F9 000026FD            934      LEA ADDQ_MESSAGE, A1  *print ADDQ
00001494                           935                   
00001494  103C 000E                936      MOVE.B #14, D0
00001498                           937                   
00001498  4E4F                     938      TRAP #15
0000149A                           939      
0000149A  3015                     940      MOVE.W (A5), D0
0000149C                           941      
0000149C  123C 0008                942      MOVE.B  #8,D1     
000014A0                           943  
000014A0  E368                     944      LSL.W   D1,D0
000014A2                           945                   
000014A2  123C 000E                946      MOVE.B  #14,D1
000014A6                           947  
000014A6  E268                     948      LSR.W   D1,D0  *DO now holds size
000014A8                           949                                              
000014A8  B03C 0002                950      CMP.B    #$2, D0        *if D0 holds 2, size is L
000014AC                           951      
000014AC  6700 003A                952      BEQ      ADDQL
000014B0                           953                   
000014B0  B03C 0001                954      CMP.B    #$1, D0        *if D0 holds 1, size is W
000014B4                           955                                   
000014B4  6700 001C                956      BEQ      ADDQW
000014B8                           957  
000014B8  6000 0002                958      BRA      ADDQB
000014BC                           959  
000014BC                           960  ADDQB  *Print B
000014BC                           961  
000014BC  43F9 00002788            962      LEA SIZE_B_PRINT, A1  *print B
000014C2                           963                   
000014C2  103C 000E                964      MOVE.B #14, D0
000014C6                           965                   
000014C6  4E4F                     966      TRAP #15
000014C8                           967      
000014C8  1A3C 0000                968      MOVE.B #%00, D5
000014CC                           969      
000014CC  4EF9 000014FE            970      JMP PRINTADDQ
000014D2                           971      
000014D2                           972  ADDQW  *Print W
000014D2                           973  
000014D2  43F9 0000278E            974      LEA SIZE_W_PRINT, A1  *print W
000014D8                           975                   
000014D8  103C 000E                976      MOVE.B #14, D0
000014DC                           977                                    
000014DC  4E4F                     978      TRAP #15
000014DE                           979      
000014DE  1A3C 0001                980      MOVE.B #%01, D5
000014E2                           981  
000014E2  4EF9 000014FE            982      JMP PRINTADDQ
000014E8                           983  
000014E8                           984  ADDQL   *Print L
000014E8                           985  
000014E8  43F9 00002794            986      LEA SIZE_L_PRINT, A1  *print L
000014EE                           987                   
000014EE  103C 000E                988      MOVE.B #14, D0
000014F2                           989                   
000014F2  4E4F                     990      TRAP #15
000014F4                           991  
000014F4  1A3C 0002                992      MOVE.B #%10, D5
000014F8                           993      
000014F8  4EF9 000014FE            994      JMP PRINTADDQ
000014FE                           995      
000014FE                           996  PRINTADDQ
000014FE                           997  
000014FE  43F9 0000279A            998      LEA POUND_SIGN, A1  *print W
00001504                           999                   
00001504  103C 000E               1000      MOVE.B #14, D0
00001508                          1001                                    
00001508  4E4F                    1002      TRAP #15
0000150A                          1003      
0000150A  3015                    1004      MOVE.W (A5), D0
0000150C                          1005  
0000150C  123C 0004               1006      MOVE.B  #4,D1     
00001510                          1007  
00001510  E368                    1008      LSL.W   D1,D0
00001512                          1009                   
00001512  123C 000D               1010      MOVE.B  #13,D1
00001516                          1011  
00001516  E268                    1012      LSR.W   D1,D0  *D0 now holds Dn
00001518                          1013      
00001518  4281                    1014      CLR.L D1
0000151A                          1015                                              
0000151A  3200                    1016      MOVE.W D0, D1 *D6 holds Dn   
0000151C                          1017  
0000151C  103C 0003               1018      MOVE.B #3, D0
00001520                          1019                 
00001520  4E4F                    1020      TRAP #15
00001522                          1021      
00001522  43F9 000027BA           1022      LEA COMMA, A1  *print W
00001528                          1023                   
00001528  103C 000E               1024      MOVE.B #14, D0
0000152C                          1025                                    
0000152C  4E4F                    1026      TRAP #15
0000152E                          1027      
0000152E  4286                    1028      CLR.L D6
00001530                          1029      
00001530  4287                    1030      CLR.L D7
00001532                          1031      
00001532  3015                    1032      MOVE.W (A5), D0
00001534                          1033  
00001534  123C 000A               1034      MOVE.B  #10,D1     
00001538                          1035  
00001538  E368                    1036      LSL.W   D1,D0
0000153A                          1037                   
0000153A  123C 000D               1038      MOVE.B  #13,D1
0000153E                          1039  
0000153E  E268                    1040      LSR.W   D1,D0  *D0 now holds MODE
00001540                          1041                                              
00001540  3C00                    1042      MOVE.W D0, D6 *D6 holds mode
00001542                          1043      
00001542  4281                    1044      CLR.L D1
00001544                          1045      
00001544  4280                    1046      CLR.L D0
00001546                          1047      
00001546  3015                    1048      MOVE.W (A5), D0
00001548                          1049  
00001548  123C 000D               1050      MOVE.B  #13,D1     
0000154C                          1051  
0000154C  E368                    1052      LSL.W   D1,D0
0000154E                          1053                   
0000154E  123C 000D               1054      MOVE.B  #13,D1
00001552                          1055  
00001552  E268                    1056      LSR.W   D1,D0  *D0 now holds MODE
00001554                          1057                                              
00001554  3E00                    1058      MOVE.W D0, D7 *D6 holds Register   
00001556                          1059      
00001556  4EB9 000023A2           1060      JSR PRINT_EA
0000155C                          1061      
0000155C  6000 FB92               1062      BRA PARSE_MEMORY
00001560                          1063  
00001560                          1064      
00001560                          1065  
00001560                          1066  
00001560                          1067  
00001560                          1068  
00001560                          1069  
00001560                          1070  
00001560                          1071  
00001560                          1072  
00001560                          1073  
00001560                          1074  
00001560                          1075  
00001560                          1076  
00001560                          1077  
00001560                          1078  -------------------- end include --------------------
00001560                          1079                  INCLUDE 'CMP.X68'
00001560                          1080     
00001560                          1081  CMP
00001560                          1082                   * ADD message
00001560  43F9 00002755           1083                   LEA      CMP_MESSAGE,    A1
00001566  103C 000E               1084                   MOVE.B   #14,            D0
0000156A  4E4F                    1085                   TRAP #15
0000156C                          1086                   
0000156C  4EB8 12DA               1087                   JSR GET_SIZE_PURPLE
00001570                          1088                   
00001570  4EB8 12F2               1089                   JSR     PRINTOUT_SIZE_PURPLE
00001574                          1090                   
00001574                          1091                   
00001574  4EB8 135E               1092                   JSR     Set_Ea
00001578                          1093                   
00001578  4EB9 000023A2           1094                   JSR     PRINT_EA *by using jmp table
0000157E                          1095                   
0000157E  4EB8 133C               1096                   JSR     PRINT_COMMA
00001582                          1097                   
00001582                          1098                    * for the first Dn 
00001582  4EB8 134C               1099                   JSR     GET_Data_Register
00001586                          1100                   
00001586  4286                    1101                   CLR.L   D6
00001588                          1102                   
00001588  1C3C 0000               1103                   MOVE.B  #%000, D6 * for mode
0000158C                          1104  
0000158C  4EB9 000023A2           1105                   JSR     PRINT_EA *by using jmp table
00001592                          1106                   
00001592  4EF8 10F0               1107                   JMP     PARSE_MEMORY
00001596                          1108  
00001596                          1109                   
00001596                          1110   *                JMP     NEXT
00001596                          1111  
00001596                          1112  
00001596                          1113  
00001596                          1114  
00001596                          1115  
00001596                          1116  -------------------- end include --------------------
00001596                          1117                  INCLUDE 'SUB.X68'
00001596                          1118  
00001596                          1119  SUB
00001596                          1120                   * ADD message
00001596  43F9 00002750           1121                   LEA      SUB_MESSAGE,    A1
0000159C  103C 000E               1122                   MOVE.B   #14,            D0
000015A0  4E4F                    1123                   TRAP #15
000015A2                          1124                   
000015A2  4EB8 12DA               1125                   JSR    GET_SIZE_PURPLE
000015A6                          1126                   
000015A6  4EB8 12F2               1127                   JSR     PRINTOUT_SIZE_PURPLE
000015AA                          1128                   
000015AA                          1129                   
000015AA  4280                    1130                   CLR.L D0                *clear D0
000015AC                          1131                   
000015AC  4281                    1132                   CLR.L D1                *clear D1
000015AE                          1133                   
000015AE  3015                    1134                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000015B0                          1135                   
000015B0                          1136                   * check the bit at 7
000015B0  123C 0007               1137                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000015B4                          1138  
000015B4  E368                    1139                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000015B6                          1140                   
000015B6  123C 000F               1141                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
000015BA                          1142  
000015BA  E268                    1143                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
000015BC                          1144                   
000015BC  B03C 0000               1145                   CMP.B   #0, D0
000015C0                          1146  
000015C0                          1147                   
000015C0                          1148                *   BTST    #8, D0
000015C0                          1149                   
000015C0  6700 0024               1150                   BEQ     SUB_FIRST_EA
000015C4                          1151                   
000015C4                          1152                   * for the first Dn 
000015C4  4EB8 134C               1153                   JSR     GET_Data_Register
000015C8                          1154                   
000015C8  4286                    1155                   CLR.L   D6
000015CA                          1156                   
000015CA  1C3C 0000               1157                   MOVE.B  #%000, D6 * for mode
000015CE                          1158                   
000015CE  4EB9 000023A2           1159                   JSR     PRINT_EA *by using jmp table
000015D4                          1160                   
000015D4  4EB8 133C               1161                   JSR     PRINT_COMMA
000015D8                          1162                   
000015D8  4EB8 135E               1163                   JSR     Set_Ea
000015DC                          1164                   
000015DC  4EB9 000023A2           1165                   JSR     PRINT_EA *by using jmp table
000015E2                          1166                   
000015E2  4EF8 10F0               1167                   JMP     PARSE_MEMORY
000015E6                          1168                   
000015E6                          1169  SUB_FIRST_EA
000015E6  4EB8 135E               1170                   JSR     Set_Ea
000015EA                          1171                   
000015EA  4EB9 000023A2           1172                   JSR     PRINT_EA *by using jmp table
000015F0                          1173                   
000015F0  4EB8 133C               1174                   JSR     PRINT_COMMA
000015F4                          1175                   
000015F4                          1176                    * for the first Dn 
000015F4  4EB8 134C               1177                   JSR     GET_Data_Register
000015F8                          1178                   
000015F8  4286                    1179                   CLR.L   D6
000015FA                          1180                   
000015FA  1C3C 0000               1181                   MOVE.B  #%000, D6 * for mode
000015FE                          1182  
000015FE  4EB9 000023A2           1183                   JSR     PRINT_EA *by using jmp table
00001604                          1184                   
00001604  4EF8 10F0               1185                   JMP     PARSE_MEMORY
00001608                          1186  
00001608                          1187  
00001608                          1188  
00001608                          1189  
00001608                          1190  
00001608                          1191  -------------------- end include --------------------
00001608                          1192                  INCLUDE 'TRYING_NOP.X68'
00001608                          1193  
00001608                          1194      
00001608                          1195   
00001608                          1196      *MOVE.W  #$4E75, D2          * hardcodiing nop
00001608                          1197  
00001608                          1198     * CMP.L       #$4E71, D2      * has to be NOP
00001608                          1199      *
00001608                          1200     * BEQ         NOP_OPCODE
00001608                          1201      
00001608                          1202     * CMP.L       #$4E75, D2      * has to be RTS
00001608                          1203      
00001608                          1204    *  BEQ         RTS_OPCODE
00001608                          1205     *BRA CLR_OPCODE  
00001608                          1206  LEA_OPCODE
00001608                          1207      
00001608  43F9 00002703           1208      LEA         LEA_MESSAGE, A1     * print out message for 'NOP'
0000160E                          1209      
0000160E  103C 000E               1210      MOVE.B      #14, D0
00001612                          1211      
00001612  4E4F                    1212      TRAP #15  
00001614                          1213      
00001614  3015                    1214      MOVE.W  (A5),D0     *D0 is the binary value to decode
00001616                          1215      
00001616  123C 000D               1216      MOVE.B  #13,D1     
0000161A                          1217  
0000161A  E368                    1218      LSL.W   D1,D0
0000161C                          1219                   
0000161C  123C 000D               1220      MOVE.B  #13,D1
00001620                          1221  
00001620  E268                    1222      LSR.W   D1,D0  *D0 now holds Register
00001622                          1223                                              
00001622  3E00                    1224      MOVE.W D0, D7 *D7 holds Register  
00001624                          1225  
00001624  3015                    1226      MOVE.W  (A5),D0     *D0 is the binary value to decode
00001626                          1227  
00001626  123C 000A               1228      MOVE.B  #10,D1     
0000162A                          1229  
0000162A  E368                    1230      LSL.W   D1,D0
0000162C                          1231                   
0000162C  123C 000D               1232      MOVE.B  #13,D1
00001630                          1233  
00001630  E268                    1234      LSR.W   D1,D0  *D0 now holds MODE
00001632                          1235                                              
00001632  3C00                    1236      MOVE.W D0, D6 *D6 holds MODE  
00001634                          1237      
00001634  4EB9 000023A2           1238      JSR PRINT_EA
0000163A                          1239  
0000163A  43F9 000027BA           1240      LEA         COMMA, A1     * print out message for 'NOP'
00001640                          1241      
00001640  103C 000E               1242      MOVE.B      #14, D0
00001644                          1243      
00001644  4E4F                    1244      TRAP #15 
00001646                          1245                                    
00001646  3015                    1246      MOVE.W  (A5),D0     *D0 is the binary value to decode 
00001648                          1247  
00001648  7C01                    1248      MOVE.L #%001, D6
0000164A                          1249  
0000164A  123C 0004               1250      MOVE.B  #4,D1     
0000164E                          1251  
0000164E  E368                    1252      LSL.W   D1,D0
00001650                          1253                   
00001650  123C 000D               1254      MOVE.B  #13,D1
00001654                          1255  
00001654  E268                    1256      LSR.W   D1,D0  
00001656                          1257                                              
00001656  3E00                    1258      MOVE.W D0, D7 
00001658                          1259      
00001658  4EB9 000023A2           1260      JSR PRINT_EA
0000165E                          1261      
0000165E  4EF8 10F0               1262      JMP     PARSE_MEMORY       
00001662                          1263            
00001662                          1264  NOP_OPCODE
00001662  43F9 000026E6           1265      LEA         NOP_MESSAGE, A1     * print out message for 'NOP'
00001668                          1266      
00001668  103C 000E               1267      MOVE.B      #14, D0
0000166C                          1268      
0000166C  4E4F                    1269      TRAP #15
0000166E                          1270      
0000166E  6000 FA80               1271      BRA PARSE_MEMORY
00001672                          1272  RTS_OPCODE 
00001672  43F9 000026F5           1273      LEA         RTS_MESSAGE, A1     * print out message for 'RTS'
00001678                          1274      
00001678  103C 000E               1275      MOVE.B      #14, D0
0000167C                          1276      
0000167C  4E4F                    1277      TRAP #15
0000167E                          1278      
0000167E  6000 FA70               1279      BRA PARSE_MEMORY
00001682                          1280      
00001682                          1281  JSR_OPCODE 
00001682  43F9 000026F1           1282      LEA         JSR_MESSAGE, A1     * print out message for 'JSR'
00001688                          1283      
00001688  103C 000E               1284      MOVE.B      #14, D0
0000168C                          1285      
0000168C  4E4F                    1286      TRAP #15
0000168E                          1287      
0000168E  2002                    1288      MOVE.L D2, D0
00001690                          1289  
00001690  123C 000D               1290      MOVE.B  #13,D1     
00001694                          1291  
00001694  E368                    1292      LSL.W   D1,D0
00001696                          1293                   
00001696  123C 000D               1294      MOVE.B  #13,D1
0000169A                          1295  
0000169A  E268                    1296      LSR.W   D1,D0  *D0 now holds Register
0000169C                          1297                                              
0000169C  3E00                    1298      MOVE.W D0, D7 *D7 holds Register  
0000169E                          1299  
0000169E  2002                    1300      MOVE.L D2, D0
000016A0                          1301  
000016A0  123C 000A               1302      MOVE.B  #10,D1     
000016A4                          1303  
000016A4  E368                    1304      LSL.W   D1,D0
000016A6                          1305                   
000016A6  123C 000D               1306      MOVE.B  #13,D1
000016AA                          1307  
000016AA  E268                    1308      LSR.W   D1,D0  *D0 now holds MODE
000016AC                          1309                                              
000016AC  3C00                    1310      MOVE.W D0, D6 *D6 holds MODE  
000016AE                          1311      
000016AE  4EB9 000023A2           1312      JSR PRINT_EA
000016B4                          1313      
000016B4  6000 FA3A               1314      BRA PARSE_MEMORY
000016B8                          1315         
000016B8                          1316  CLR_OPCODE 
000016B8  43F9 000026F9           1317      LEA         CLR_MESSAGE, A1     * print out message for 'CLR'
000016BE                          1318      
000016BE  103C 000E               1319      MOVE.B      #14, D0
000016C2                          1320      
000016C2  4E4F                    1321      TRAP #15
000016C4                          1322                     
000016C4  43F9 0000279E           1323      LEA      PERIOD, A1
000016CA                          1324      
000016CA  103C 000E               1325      MOVE.B   #14, D0
000016CE                          1326      
000016CE  4E4F                    1327      TRAP #15 
000016D0                          1328                
000016D0  3015                    1329      MOVE.W      (A5), D0
000016D2                          1330               
000016D2  123C 0006               1331      MOVE.B      #6, D1
000016D6                          1332                 
000016D6  E268                    1333      LSR.W       D1, D0  *shift right 6 
000016D8                          1334                 
000016D8  123C 000E               1335      MOVE.B      #14, D1
000016DC                          1336                 
000016DC  E368                    1337      LSL.W       D1, D0  *shift left 15, only size is left
000016DE                          1338      
000016DE  123C 000E               1339      MOVE.B      #14, D1
000016E2                          1340                 
000016E2  E268                    1341      LSR.W       D1, D0  *shift right 15, size is left   
000016E4                          1342      
000016E4  B07C 0000               1343      CMP.W       #00, D0
000016E8                          1344  
000016E8  6700 004A               1345      BEQ         SIZE_B
000016EC                          1346      
000016EC  B07C 0001               1347      CMP.W       #01, D0
000016F0                          1348                 
000016F0  6700 004C               1349      BEQ         SIZE_W 
000016F4                          1350      
000016F4  B07C 0002               1351      CMP.W       #2, D0
000016F8                          1352                 
000016F8  6700 004E               1353      BEQ         SIZE_L
000016FC                          1354  
000016FC                          1355  PRINT_SIZE
000016FC                          1356  
000016FC  103C 000E               1357      MOVE.B      #14, D0
00001700                          1358      
00001700  4E4F                    1359      TRAP #15
00001702                          1360  
00001702  4280                    1361      CLR.L   D0
00001704                          1362                  
00001704  4281                    1363      CLR.L   D1
00001706                          1364                       * set register
00001706                          1365                   
00001706  3015                    1366      MOVE.W  (A5),D0     *D0 is the binary value to decode
00001708                          1367                 
00001708  123C 000D               1368      MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000170C                          1369  
0000170C  E368                    1370      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000170E                          1371  
0000170E  123C 000D               1372      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001712                          1373  
00001712  E268                    1374      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001714                          1375  
00001714  1E00                    1376      MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00001716                          1377                   
00001716                          1378                   * set mode
00001716  4280                    1379      CLR.L D0                *clear D0
00001718                          1380                   
00001718  4281                    1381      CLR.L D1                *clear D1
0000171A                          1382                   
0000171A  3015                    1383      MOVE.W  (A5),D0     *D0 is the binary value to decode
0000171C                          1384                 
0000171C  123C 000A               1385      MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001720                          1386  
00001720  E368                    1387      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001722                          1388  
00001722  123C 000D               1389      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001726                          1390  
00001726  E268                    1391      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001728                          1392  
00001728  2C00                    1393      MOVE.L  D0, D6          *put D0 to data register into D7 for future printing
0000172A                          1394                   
0000172A  4EB9 000023A2           1395      JSR     PRINT_EA *by using jmp table
00001730                          1396  
00001730  6000 F9BE               1397      BRA PARSE_MEMORY
00001734                          1398      
00001734                          1399  SIZE_B 
00001734                          1400                
00001734  43F9 00002788           1401      LEA         SIZE_B_PRINT, A1 
0000173A                          1402      
0000173A  4EF8 16FC               1403      JMP PRINT_SIZE
0000173E                          1404      
0000173E                          1405  SIZE_W 
0000173E                          1406                
0000173E  43F9 0000278E           1407      LEA         SIZE_W_PRINT, A1 
00001744                          1408      
00001744  4EF8 16FC               1409      JMP PRINT_SIZE
00001748                          1410      
00001748                          1411  SIZE_L 
00001748                          1412                
00001748  43F9 00002794           1413      LEA         SIZE_L_PRINT, A1 
0000174E                          1414      
0000174E  4EF8 16FC               1415      JMP PRINT_SIZE
00001752                          1416      
00001752                          1417  
00001752                          1418   *   END    START        ; last line of source
00001752                          1419  
00001752                          1420  
00001752                          1421  
00001752                          1422  
00001752                          1423  
00001752                          1424  
00001752                          1425  
00001752                          1426  
00001752                          1427  
00001752                          1428  
00001752                          1429  
00001752                          1430  
00001752                          1431  
00001752                          1432  
00001752                          1433  -------------------- end include --------------------
00001752                          1434                  INCLUDE 'DIVU_OR.X68'
00001752                          1435      
00001752  4EB8 12DA               1436  DIVU_OR          JSR      GET_SIZE_PURPLE  
00001756                          1437                                            
00001756  BA3C 0003               1438                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
0000175A                          1439                   
0000175A  6700 0008               1440                   BEQ      DIVU_CODE
0000175E                          1441                   
0000175E  4EF9 0000179A           1442                   JMP      OR_CODE
00001764                          1443                   
00001764                          1444  DIVU_CODE  
00001764                          1445                   * OP_CODE message
00001764  43F9 00002746           1446                   LEA      DIVU_MESSAGE, A1
0000176A  103C 000E               1447                   MOVE.B   #14, D0
0000176E  4E4F                    1448                   TRAP #15
00001770                          1449  
00001770  3A3C 0001               1450                   MOVE    #%01, D5          
00001774                          1451                   
00001774                          1452              *     LEA      SIZE_W_PRINT,    A1
00001774                          1453                   
00001774                          1454              *     MOVE.B   #14,             D0
00001774                          1455          
00001774                          1456              *     TRAP #15
00001774                          1457                   
00001774  4EB8 135E               1458                   JSR     Set_Ea
00001778                          1459                   
00001778  1A3C 0001               1460                   MOVE.B  #%01, D5
0000177C                          1461                   
0000177C  4EB9 000023A2           1462                   JSR     PRINT_EA *by using jmp table
00001782                          1463                   
00001782  4EB8 133C               1464                   JSR     PRINT_COMMA
00001786                          1465                   
00001786                          1466                    * for the first Dn 
00001786  4EB8 134C               1467                   JSR     GET_Data_Register
0000178A                          1468                   
0000178A  4286                    1469                   CLR.L   D6
0000178C                          1470                   
0000178C  1C3C 0000               1471                   MOVE.B  #%000, D6 * for mode
00001790                          1472  
00001790  4EB9 000023A2           1473                   JSR     PRINT_EA *by using jmp table
00001796                          1474  
00001796  4EF8 10F0               1475                   JMP     PARSE_MEMORY
0000179A                          1476  
0000179A                          1477  OR_CODE    
0000179A                          1478                   * OP_CODE message
0000179A  43F9 0000274C           1479                   LEA      OR_MESSAGE, A1
000017A0  103C 000E               1480                   MOVE.B   #14, D0
000017A4  4E4F                    1481                   TRAP #15
000017A6                          1482  
000017A6  4EB8 12F2               1483                   JSR PRINTOUT_SIZE_PURPLE
000017AA                          1484                   
000017AA                          1485                     * check for dn and ea
000017AA  4280                    1486                   CLR.L D0                *clear D0
000017AC                          1487                   
000017AC  4281                    1488                   CLR.L D1                *clear D1
000017AE                          1489                   
000017AE  3015                    1490                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000017B0                          1491                   
000017B0                          1492                   * check the bit at 7
000017B0  123C 0007               1493                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000017B4                          1494  
000017B4  E368                    1495                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000017B6                          1496                   
000017B6  123C 000F               1497                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
000017BA                          1498  
000017BA  E268                    1499                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
000017BC                          1500                   
000017BC  B03C 0000               1501                   CMP.B   #0, D0
000017C0                          1502                   
000017C0                          1503                  * BTST    #7, D0
000017C0                          1504                   
000017C0  6700 0024               1505                   BEQ     OR_FIRST_EA
000017C4                          1506                   
000017C4                          1507                   * for the first Dn 
000017C4  4EB8 134C               1508                   JSR     GET_Data_Register
000017C8                          1509                   
000017C8  4286                    1510                   CLR.L   D6
000017CA                          1511                   
000017CA  1C3C 0000               1512                   MOVE.B  #%000, D6 * for mode
000017CE                          1513                   
000017CE  4EB9 000023A2           1514                   JSR     PRINT_EA *by using jmp table
000017D4                          1515                   
000017D4  4EB8 133C               1516                   JSR     PRINT_COMMA
000017D8                          1517                   
000017D8  4EB8 135E               1518                   JSR     Set_Ea
000017DC                          1519                   
000017DC  4EB9 000023A2           1520                   JSR     PRINT_EA *by using jmp table
000017E2                          1521                   
000017E2  4EF8 10F0               1522                   JMP     PARSE_MEMORY
000017E6                          1523                   
000017E6                          1524  OR_FIRST_EA
000017E6  4EB8 135E               1525                   JSR     Set_Ea
000017EA                          1526                   
000017EA  4EB9 000023A2           1527                   JSR     PRINT_EA *by using jmp table
000017F0                          1528                   
000017F0  4EB8 133C               1529                   JSR     PRINT_COMMA
000017F4                          1530                   
000017F4                          1531                    * for the first Dn 
000017F4  4EB8 134C               1532                   JSR     GET_Data_Register
000017F8                          1533                   
000017F8  4286                    1534                   CLR.L   D6
000017FA                          1535                   
000017FA  1C3C 0000               1536                   MOVE.B  #%000, D6 * for mode
000017FE                          1537  
000017FE  4EB9 000023A2           1538                   JSR     PRINT_EA *by using jmp table
00001804                          1539                   
00001804  4EF8 10F0               1540                   JMP     PARSE_MEMORY
00001808                          1541  
00001808                          1542  
00001808                          1543  
00001808                          1544  
00001808                          1545  
00001808                          1546  
00001808                          1547  
00001808                          1548  
00001808                          1549  
00001808                          1550  
00001808                          1551  
00001808                          1552  
00001808                          1553  
00001808                          1554  -------------------- end include --------------------
00001808                          1555                  INCLUDE 'GROUP_0100_CODE.X68'
00001808                          1556  GROUP_0100_CODE          *at this point we know the first 4 bits are 0100 -> NOP, RTS, JSR,  MOVEM, CLR
00001808                          1557  
00001808  4280                    1558                   CLR.L D0                *clear D0
0000180A                          1559                   
0000180A  4281                    1560                   CLR.L D1                *clear D1
0000180C                          1561                   
0000180C  3015                    1562                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000180E                          1563  
0000180E  123C 0004               1564                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
00001812                          1565  
00001812  E368                    1566                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
00001814                          1567                   
00001814  123C 0004               1568                   MOVE.B  #4,D1           *4 bits is the number of times to shift to hold everything except the opcode
00001818                          1569  
00001818  E268                    1570                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds everything except opcode
0000181A                          1571                   
0000181A                          1572                                              
0000181A  B07C 0E71               1573                   CMP.W    #$E71, D0      *if D0 holds E71, the opcode is NOP
0000181E                          1574                   
0000181E  6700 FE42               1575                   BEQ      NOP_OPCODE       *Branch to NOP_CODE if the opcode is NOP
00001822                          1576                   
00001822                          1577                   
00001822  B07C 0E75               1578                   CMP.W    #$E75, D0      *if D0 holds E75, the opcode is RTS
00001826                          1579                   
00001826  6700 FE4A               1580                   BEQ      RTS_OPCODE       *Branch to RTS_CODE if the opcode is RTS
0000182A                          1581                   
0000182A                          1582                   
0000182A  4280                    1583                   CLR.L D0                *clear D0
0000182C                          1584                   
0000182C                          1585                   
0000182C  4281                    1586                   CLR.L D1                *clear D1
0000182E                          1587                   
0000182E                          1588                   
0000182E  3015                    1589                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001830                          1590  
00001830                          1591  
00001830  123C 0004               1592                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
00001834                          1593  
00001834                          1594  
00001834  E368                    1595                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
00001836                          1596                   
00001836  123C 000C               1597                   MOVE.B  #12,D1           *12 bits is the number of times to shift to hold the 4th-8th bits (counting left to right, non-inclusive)
0000183A                          1598  
0000183A  E268                    1599                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds 4th-8th bits (counting left to right, non-inclusive)
0000183C                          1600                   
0000183C  B07C 0002               1601                   CMP.W    #$2, D0        *if D0 holds #2, the opcode is CLR
00001840                          1602                   
00001840  6700 FE76               1603                   BEQ      CLR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
00001844                          1604                   
00001844                          1605          
00001844  B07C 000E               1606                   CMP.W    #$E, D0        *if D0 holds $E = 14, the opcode is JSR
00001848                          1607                   
00001848  6700 FE38               1608                   BEQ      JSR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
0000184C                          1609                   
0000184C  4280                    1610                   CLR.L D0                *clear D0
0000184E                          1611                   
0000184E  4281                    1612                   CLR.L D1                *clear D1
00001850                          1613                   
00001850  3015                    1614                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001852                          1615  
00001852  123C 0007               1616                   MOVE.B  #7,D1 
00001856                          1617  
00001856  E368                    1618                   LSL.W   D1,D0 
00001858                          1619                   
00001858  123C 000D               1620                   MOVE.B  #13,D1 
0000185C                          1621  
0000185C  E268                    1622                   LSR.W   D1,D0     
0000185E                          1623                   
0000185E  B07C 0007               1624                   CMP.W    #%111, D0  
00001862                          1625                   
00001862  6700 FDA4               1626                   BEQ LEA_OPCODE
00001866                          1627                   
00001866  6000 00B4               1628                   BRA      MOVEM_OPCODE     *else it is a MOVEM
0000186A                          1629  
0000186A                          1630      
0000186A                          1631  
0000186A                          1632  
0000186A                          1633  
0000186A                          1634  
0000186A                          1635  
0000186A                          1636  -------------------- end include --------------------
0000186A                          1637                  INCLUDE 'MULS_AND.X68'
0000186A                          1638   
0000186A  4EB8 12DA               1639  MULS_AND         JSR      GET_SIZE_PURPLE
0000186E                          1640                                              
0000186E  BA3C 0003               1641                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
00001872                          1642                   
00001872  6700 0008               1643                   BEQ      MULS_CODE
00001876                          1644                   
00001876  4EF9 000018AE           1645                   JMP      AND_CODE
0000187C                          1646                   
0000187C                          1647  MULS_CODE
0000187C                          1648                   * OP_CODE message
0000187C  43F9 0000275A           1649                   LEA MULS_MESSAGE, A1
00001882                          1650                   
00001882  103C 000E               1651                   MOVE.B #14, D0
00001886                          1652                   
00001886  4E4F                    1653                   TRAP #15
00001888                          1654  
00001888                          1655             *      LEA      SIZE_W_PRINT,    A1
00001888                          1656                   
00001888                          1657             *      MOVE.B   #14,             D0
00001888                          1658          
00001888                          1659             *      TRAP #15
00001888                          1660                   
00001888  4EB8 135E               1661                   JSR     Set_Ea
0000188C                          1662                   
0000188C  1A3C 0001               1663                   MOVE.B  #%01, D5
00001890                          1664                   
00001890  4EB9 000023A2           1665                   JSR     PRINT_EA *by using jmp table
00001896                          1666                   
00001896  4EB8 133C               1667                   JSR     PRINT_COMMA
0000189A                          1668                   
0000189A                          1669                    * for the first Dn 
0000189A  4EB8 134C               1670                   JSR     GET_Data_Register
0000189E                          1671                   
0000189E  4286                    1672                   CLR.L   D6
000018A0                          1673                   
000018A0  1C3C 0000               1674                   MOVE.B  #%000, D6 * for mode
000018A4                          1675  
000018A4  4EB9 000023A2           1676                   JSR     PRINT_EA *by using jmp table
000018AA                          1677  
000018AA  4EF8 10F0               1678                   JMP      PARSE_MEMORY
000018AE                          1679  
000018AE                          1680  AND_CODE
000018AE                          1681                   * OP_CODE message
000018AE  43F9 00002760           1682                   LEA AND_MESSAGE, A1
000018B4  103C 000E               1683                   MOVE.B #14, D0
000018B8  4E4F                    1684                   TRAP #15
000018BA                          1685                   
000018BA  4EB8 12F2               1686                   JSR PRINTOUT_SIZE_PURPLE
000018BE                          1687                   
000018BE                          1688                     * check for dn and ea
000018BE  4280                    1689                   CLR.L D0                *clear D0
000018C0                          1690                   
000018C0  4281                    1691                   CLR.L D1                *clear D1
000018C2                          1692                   
000018C2  3015                    1693                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000018C4                          1694                   
000018C4                          1695                   * check the bit at 7
000018C4  123C 0007               1696                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000018C8                          1697  
000018C8  E368                    1698                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000018CA                          1699                   
000018CA  123C 000F               1700                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
000018CE                          1701  
000018CE  E268                    1702                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
000018D0                          1703                   
000018D0  B03C 0000               1704                   CMP.B   #0, D0
000018D4                          1705  
000018D4                          1706                *   BTST    #8, D0
000018D4                          1707                   
000018D4  6700 0024               1708                   BEQ     AND_FIRST_EA
000018D8                          1709                   
000018D8                          1710                   * for the first Dn 
000018D8  4EB8 134C               1711                   JSR     GET_Data_Register
000018DC                          1712                   
000018DC  4286                    1713                   CLR.L   D6
000018DE                          1714                   
000018DE  1C3C 0000               1715                   MOVE.B  #%000, D6 * for mode
000018E2                          1716                   
000018E2  4EB9 000023A2           1717                   JSR     PRINT_EA *by using jmp table
000018E8                          1718                   
000018E8  4EB8 133C               1719                   JSR     PRINT_COMMA
000018EC                          1720                   
000018EC  4EB8 135E               1721                   JSR     Set_Ea
000018F0                          1722                   
000018F0  4EB9 000023A2           1723                   JSR     PRINT_EA *by using jmp table
000018F6                          1724                   
000018F6  4EF8 10F0               1725                   JMP      PARSE_MEMORY
000018FA                          1726                   
000018FA                          1727  AND_FIRST_EA
000018FA  4EB8 135E               1728                   JSR     Set_Ea
000018FE                          1729                   
000018FE  4EB9 000023A2           1730                   JSR     PRINT_EA *by using jmp table
00001904                          1731                   
00001904  4EB8 133C               1732                   JSR     PRINT_COMMA
00001908                          1733                   
00001908                          1734                    * for the first Dn 
00001908  4EB8 134C               1735                   JSR     GET_Data_Register
0000190C                          1736                   
0000190C  4286                    1737                   CLR.L   D6
0000190E                          1738                   
0000190E  1C3C 0000               1739                   MOVE.B  #%000, D6 * for mode
00001912                          1740  
00001912  4EB9 000023A2           1741                   JSR     PRINT_EA *by using jmp table
00001918                          1742                   
00001918  4EF8 10F0               1743                   JMP      PARSE_MEMORY
0000191C                          1744  
0000191C                          1745  
0000191C                          1746  
0000191C                          1747  
0000191C                          1748  
0000191C                          1749  
0000191C                          1750  
0000191C                          1751  
0000191C                          1752  
0000191C                          1753  
0000191C                          1754  
0000191C                          1755  
0000191C                          1756  -------------------- end include --------------------
0000191C                          1757                  INCLUDE 'MOVEM.X68'
0000191C                          1758     
0000191C                          1759  
0000191C                          1760  MOVEM_OPCODE
0000191C                          1761  
0000191C  4280                    1762     CLR.L       D0               *Zero it
0000191E                          1763     
0000191E  4286                    1764     CLR.L       D6
00001920                          1765  
00001920  3015                    1766     MOVE.W      (A5), D0     *We'll play with it here
00001922                          1767  
00001922  43F9 000026EA           1768     LEA MOVEM_MESSAGE, A1
00001928                          1769            
00001928  103C 000E               1770     MOVE.B #14, D0
0000192C                          1771                   
0000192C  4E4F                    1772     TRAP #15    
0000192E                          1773  
0000192E  3015                    1774    MOVE.W     (A5), D0
00001930                          1775  
00001930  0800 0006               1776    BTST       #6,  D0      
00001934                          1777  
00001934  6600 0012               1778    BNE        PRINT_SIZE_L_MOVEM
00001938                          1779  
00001938  43F9 0000278E           1780    LEA SIZE_W_PRINT, A1
0000193E                          1781            
0000193E  103C 000E               1782    MOVE.B #14, D0
00001942                          1783                   
00001942  4E4F                    1784    TRAP #15    
00001944                          1785   
00001944  6000 000E               1786    BRA          DR_FIELD
00001948                          1787      
00001948                          1788    * Print out size for W
00001948                          1789  PRINT_SIZE_L_MOVEM
00001948                          1790  
00001948  43F9 00002794           1791    LEA SIZE_L_PRINT, A1
0000194E                          1792            
0000194E  103C 000E               1793    MOVE.B #14, D0
00001952                          1794                   
00001952  4E4F                    1795    TRAP #15    
00001954                          1796  
00001954                          1797  DR_FIELD
00001954                          1798                 
00001954  0800 000A               1799    BTST        #10,  D0    * BIT TEST
00001958                          1800  
00001958  6700 000C               1801    BEQ         Regitset_Memory *if D0 holds a 1
0000195C                          1802  
0000195C  6000 0062               1803    BRA         Memory_Register *If D0 hollds a 0
00001960                          1804  
00001960  4284                    1805    CLR.L D4
00001962                          1806  
00001962  183C 000F               1807    MOVE.B #15, D4
00001966                          1808  
00001966                          1809  Regitset_Memory
00001966  361E                    1810      MOVE.W      (A6)+, D3
00001968                          1811      
00001968                          1812      * CHECK IF PRE DECREMEMNT
00001968  3015                    1813      MOVE.W (A5), D0
0000196A                          1814      
0000196A  123C 000A               1815      MOVE.B      #10, D1
0000196E                          1816      
0000196E  E368                    1817      LSL.W       D1, D0
00001970                          1818  
00001970  123C 000D               1819      MOVE.B      #13, D1
00001974                          1820  
00001974  E268                    1821      LSR.W       D1, D0
00001976                          1822  
00001976  B03C 0004               1823      CMP.B       #%100, D0
0000197A                          1824  
0000197A  6700 0064               1825      BEQ         OPPOSITE_LOOP 
0000197E                          1826      * NOW IT CAN BE IN REGULAR ORDER
0000197E                          1827      
0000197E  183C 000F               1828      MOVE.B      #15, D4
00001982                          1829      
00001982  4EB9 00001BB6           1830      JSR         LOOP_MOVEM
00001988                          1831      
00001988  43F9 000027BA           1832      LEA COMMA, A1
0000198E                          1833      
0000198E  103C 000E               1834      MOVE.B      #14, D0
00001992                          1835      
00001992  4E4F                    1836      TRAP #15
00001994                          1837      
00001994  4EB9 0000199E           1838      JSR PRINT_ADDRESS
0000199A                          1839      
0000199A  6000 F754               1840      BRA PARSE_MEMORY
0000199E                          1841  
0000199E                          1842  PRINT_ADDRESS 
0000199E  3015                    1843      MOVE.W      (A5), D0
000019A0                          1844  
000019A0  123C 000A               1845      MOVE.B      #10, D1
000019A4                          1846      
000019A4  E368                    1847      LSL.W       D1, D0
000019A6                          1848      
000019A6  123C 000D               1849      MOVE.B      #13, D1
000019AA                          1850  
000019AA  E268                    1851      LSR.W       D1, D0
000019AC                          1852      
000019AC  1C00                    1853      MOVE.B      D0, D6
000019AE                          1854      
000019AE  3015                    1855      MOVE.W      (A5), D0
000019B0                          1856      
000019B0  E368                    1857      LSL.W       D1, D0
000019B2                          1858      
000019B2  E268                    1859      LSR.W       D1, D0
000019B4                          1860      
000019B4  4287                    1861      CLR.L       D7
000019B6                          1862      
000019B6  1E00                    1863      MOVE.B      D0, D7
000019B8                          1864      
000019B8  4EB9 000023A2           1865      JSR PRINT_EA
000019BE                          1866      
000019BE  4E75                    1867      RTS
000019C0                          1868  
000019C0                          1869  Memory_Register
000019C0  361E                    1870      MOVE.W (A6)+, D3
000019C2                          1871      
000019C2  4EB8 199E               1872      JSR         PRINT_ADDRESS
000019C6                          1873      
000019C6  43F9 000027BA           1874      LEA         COMMA, A1
000019CC                          1875      
000019CC  103C 000E               1876      MOVE.B      #14, D0
000019D0                          1877      
000019D0  4E4F                    1878      TRAP #15
000019D2                          1879          
000019D2                          1880      *MOVE.W      (A6)+, D3
000019D2                          1881      
000019D2  183C 000F               1882      MOVE.B      #15, D4
000019D6                          1883      
000019D6  4EB9 00001BB6           1884      JSR         LOOP_MOVEM
000019DC                          1885      
000019DC  6000 F712               1886      BRA PARSE_MEMORY
000019E0                          1887  
000019E0                          1888  
000019E0                          1889  OPPOSITE_LOOP
000019E0  4241                    1890      CLR         D1
000019E2                          1891  
000019E2                          1892      *MOVE.W      (A6)+, D3
000019E2                          1893      
000019E2  183C 000F               1894      MOVE.B      #15, D4
000019E6                          1895      
000019E6  4EB9 00001A00           1896      JSR OPPOSITE_LOOP_MOVEM
000019EC                          1897      
000019EC  43F9 000027BA           1898      LEA COMMA, A1
000019F2                          1899      
000019F2  103C 000E               1900      MOVE.B      #14, D0
000019F6                          1901      
000019F6  4E4F                    1902      TRAP #15
000019F8                          1903      
000019F8  4EB8 199E               1904      JSR PRINT_ADDRESS
000019FC                          1905      
000019FC  6000 F6F2               1906      BRA PARSE_MEMORY
00001A00                          1907  
00001A00                          1908          
00001A00                          1909  OPPOSITE_LOOP_MOVEM
00001A00                          1910          
00001A00  0903                    1911      BTST        D4, D3     * BIT TEST
00001A02                          1912  
00001A02  6600 0020               1913      BNE         OPPOSITE_IS_USED_FIRST
00001A06                          1914  
00001A06  5304                    1915      SUB.B       #1, D4
00001A08                          1916      
00001A08                          1917  OPPOSITE_CHECK
00001A08  B83C 00FF               1918      CMP.B       #-1,  D4
00001A0C                          1919  
00001A0C  6700 0B80               1920      BEQ         DONE
00001A10                          1921  
00001A10  60EE                    1922      BRA         OPPOSITE_LOOP_MOVEM
00001A12                          1923      
00001A12                          1924  OPPOSITE_LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
00001A12  0903                    1925      BTST        D4, D3     * BIT TEST
00001A14                          1926  
00001A14  6600 0018               1927      BNE         OPPOSITE_IS_USED
00001A18                          1928  
00001A18  5304                    1929      SUB.B       #1, D4
00001A1A                          1930      
00001A1A                          1931  OPPOSITE_CHECK_SECOND
00001A1A  B83C 00FF               1932      CMP.B       #-1,  D4
00001A1E                          1933  
00001A1E  6700 0B6E               1934      BEQ         DONE
00001A22                          1935  
00001A22  60EE                    1936      BRA         OPPOSITE_LOOP_MOVEM_SECOND
00001A24                          1937  
00001A24                          1938  OPPOSITE_IS_USED_FIRST
00001A24  4EB9 00001A44           1939      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
00001A2A                          1940  
00001A2A  5304                    1941      SUB.B       #1, D4
00001A2C                          1942  
00001A2C  60EC                    1943      BRA         OPPOSITE_CHECK_SECOND
00001A2E                          1944  
00001A2E                          1945  
00001A2E                          1946  OPPOSITE_IS_USED
00001A2E  43F9 000027A3           1947      LEA         SLASH, A1
00001A34                          1948  
00001A34  103C 000E               1949      MOVE.B      #14, D0
00001A38                          1950  
00001A38  4E4F                    1951      TRAP #15
00001A3A                          1952      
00001A3A  4EB9 00001A44           1953      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
00001A40                          1954  
00001A40  5304                    1955      SUB.B       #1, D4
00001A42                          1956  
00001A42  60D6                    1957      BRA         OPPOSITE_CHECK_SECOND
00001A44                          1958  
00001A44                          1959      
00001A44                          1960      
00001A44                          1961  OPPOSITE_PRINT_REGISTER_MOVEM
00001A44  41F9 00001A56           1962      LEA        OPPOSITE_jmp_table_MOVEM, A0
00001A4A  4242                    1963      CLR        D2
00001A4C  143C 0006               1964      MOVE.B     #6, D2
00001A50  C4C4                    1965      MULU       D4, D2                           
00001A52  4EF0 2000               1966      JMP        0(A0,D2)   *Jump indirect with index
00001A56                          1967                      
00001A56                          1968  OPPOSITE_jmp_table_MOVEM      
00001A56  4EF9 00001AB6           1969      JMP         OPPOSITE_bit0
00001A5C  4EF9 00001AC6           1970                 JMP         OPPOSITE_bit1
00001A62  4EF9 00001AD6           1971                 JMP         OPPOSITE_bit2
00001A68  4EF9 00001AE6           1972                 JMP         OPPOSITE_bit3
00001A6E  4EF9 00001AF6           1973                 JMP         OPPOSITE_bit4
00001A74  4EF9 00001B06           1974                 JMP         OPPOSITE_bit5
00001A7A  4EF9 00001B16           1975                 JMP         OPPOSITE_bit6
00001A80  4EF9 00001B26           1976                 JMP         OPPOSITE_bit7
00001A86  4EF9 00001B36           1977                 JMP         OPPOSITE_bit8
00001A8C  4EF9 00001B46           1978                 JMP         OPPOSITE_bit9
00001A92  4EF9 00001B56           1979                 JMP         OPPOSITE_bit10
00001A98  4EF9 00001B66           1980                 JMP         OPPOSITE_bit11
00001A9E  4EF9 00001B76           1981                 JMP         OPPOSITE_bit12
00001AA4  4EF9 00001B86           1982                 JMP         OPPOSITE_bit13
00001AAA  4EF9 00001B96           1983                 JMP         OPPOSITE_bit14
00001AB0  4EF9 00001BA6           1984                 JMP         OPPOSITE_bit15
00001AB6                          1985          
00001AB6                          1986   
00001AB6                          1987   
00001AB6                          1988   
00001AB6                          1989  OPPOSITE_bit0    * D0
00001AB6  1E3C 0007               1990      MOVE.B    #%111, D7    * REGISTER
00001ABA                          1991      
00001ABA  1C3C 0001               1992      MOVE.B    #%001, D6    * MODE
00001ABE                          1993  
00001ABE  4EB9 000023A2           1994      JSR        PRINT_EA
00001AC4                          1995  
00001AC4  4E75                    1996      RTS    
00001AC6                          1997  
00001AC6                          1998  OPPOSITE_bit1    * D1
00001AC6  1E3C 0006               1999      MOVE.B    #%110, D7    * REGISTER
00001ACA                          2000      
00001ACA  1C3C 0001               2001      MOVE.B    #%001, D6    * MODE
00001ACE                          2002  
00001ACE  4EB9 000023A2           2003      JSR        PRINT_EA
00001AD4                          2004  
00001AD4  4E75                    2005      RTS    
00001AD6                          2006  
00001AD6                          2007  OPPOSITE_bit2    * D2
00001AD6  1E3C 0005               2008      MOVE.B    #%101, D7    * REGISTER
00001ADA                          2009      
00001ADA  1C3C 0001               2010      MOVE.B    #%001, D6    * MODE
00001ADE                          2011  
00001ADE  4EB9 000023A2           2012      JSR        PRINT_EA    
00001AE4                          2013  
00001AE4  4E75                    2014      RTS
00001AE6                          2015  
00001AE6                          2016  OPPOSITE_bit3    * D3
00001AE6  1E3C 0004               2017      MOVE.B    #%100, D7    * REGISTER
00001AEA                          2018      
00001AEA  1C3C 0001               2019      MOVE.B    #%001, D6    * MODE
00001AEE                          2020  
00001AEE  4EB9 000023A2           2021      JSR        PRINT_EA
00001AF4                          2022  
00001AF4  4E75                    2023      RTS    
00001AF6                          2024  
00001AF6                          2025  OPPOSITE_bit4    * D4
00001AF6  1E3C 0003               2026      MOVE.B    #%011, D7    * REGISTER
00001AFA                          2027  
00001AFA  1C3C 0001               2028      MOVE.B    #%001, D6    * MODE
00001AFE                          2029  
00001AFE  4EB9 000023A2           2030      JSR        PRINT_EA
00001B04                          2031  
00001B04  4E75                    2032      RTS    
00001B06                          2033  
00001B06                          2034  
00001B06                          2035  OPPOSITE_bit5    * D5
00001B06  1E3C 0002               2036      MOVE.B    #%010, D7    * REGISTER
00001B0A                          2037      
00001B0A  1C3C 0001               2038      MOVE.B    #%001, D6    * MODE
00001B0E                          2039  
00001B0E  4EB9 000023A2           2040      JSR        PRINT_EA
00001B14                          2041  
00001B14  4E75                    2042      RTS    
00001B16                          2043  
00001B16                          2044  OPPOSITE_bit6    * D6
00001B16  1E3C 0001               2045      MOVE.B    #%001, D7    * REGISTER
00001B1A                          2046      
00001B1A  1C3C 0001               2047      MOVE.B    #%001, D6    * MODE
00001B1E                          2048  
00001B1E  4EB9 000023A2           2049      JSR        PRINT_EA
00001B24                          2050  
00001B24  4E75                    2051      RTS    
00001B26                          2052  
00001B26                          2053  OPPOSITE_bit7    * D7
00001B26  1E3C 0000               2054      MOVE.B    #%000, D7    * REGISTER
00001B2A                          2055      
00001B2A  1C3C 0001               2056      MOVE.B    #%001, D6    * MODE
00001B2E                          2057  
00001B2E  4EB9 000023A2           2058      JSR        PRINT_EA
00001B34                          2059  
00001B34  4E75                    2060      RTS    
00001B36                          2061  
00001B36                          2062  OPPOSITE_bit8    * A0
00001B36  1E3C 0007               2063      MOVE.B    #%111, D7    * REGISTER
00001B3A                          2064      
00001B3A  1C3C 0000               2065      MOVE.B    #%000, D6    * MODE
00001B3E                          2066  
00001B3E  4EB9 000023A2           2067      JSR        PRINT_EA
00001B44                          2068  
00001B44  4E75                    2069      RTS    
00001B46                          2070  
00001B46                          2071  OPPOSITE_bit9    * A1
00001B46  1E3C 0006               2072      MOVE.B    #%110, D7    * REGISTER
00001B4A                          2073      
00001B4A  1C3C 0000               2074      MOVE.B    #%000, D6    * MODE
00001B4E                          2075  
00001B4E  4EB9 000023A2           2076      JSR        PRINT_EA
00001B54                          2077  
00001B54  4E75                    2078      RTS    
00001B56                          2079  
00001B56                          2080  OPPOSITE_bit10    * A2
00001B56  1E3C 0005               2081      MOVE.B    #%101, D7    * REGISTER
00001B5A                          2082      
00001B5A  1C3C 0000               2083      MOVE.B    #%000, D6    * MODE
00001B5E                          2084  
00001B5E  4EB9 000023A2           2085      JSR        PRINT_EA
00001B64                          2086  
00001B64  4E75                    2087      RTS    
00001B66                          2088  
00001B66                          2089  
00001B66                          2090  OPPOSITE_bit11    * A5
00001B66  1E3C 0002               2091      MOVE.B    #%010, D7    * REGISTER
00001B6A                          2092      
00001B6A  1C3C 0000               2093      MOVE.B    #%000, D6    * MODE
00001B6E                          2094  
00001B6E  4EB9 000023A2           2095      JSR        PRINT_EA
00001B74                          2096  
00001B74  4E75                    2097      RTS    
00001B76                          2098  
00001B76                          2099  OPPOSITE_bit12    * A4
00001B76  1E3C 0003               2100      MOVE.B    #%011, D7    * REGISTER
00001B7A                          2101      
00001B7A  1C3C 0000               2102      MOVE.B    #%000, D6    * MODE
00001B7E                          2103  
00001B7E  4EB9 000023A2           2104      JSR        PRINT_EA
00001B84                          2105  
00001B84  4E75                    2106      RTS    
00001B86                          2107  
00001B86                          2108  
00001B86                          2109  OPPOSITE_bit13    * A5
00001B86  1E3C 0002               2110      MOVE.B    #%010, D7    * REGISTER
00001B8A                          2111      
00001B8A  1C3C 0000               2112      MOVE.B    #%000, D6    * MODE
00001B8E                          2113  
00001B8E  4EB9 000023A2           2114      JSR        PRINT_EA
00001B94                          2115  
00001B94  4E75                    2116      RTS    
00001B96                          2117  
00001B96                          2118  
00001B96                          2119  OPPOSITE_bit14     * A6
00001B96  1E3C 0001               2120      MOVE.B    #%001, D7    * REGISTER
00001B9A                          2121      
00001B9A  1C3C 0000               2122      MOVE.B    #%000, D6    * MODE
00001B9E                          2123  
00001B9E  4EB9 000023A2           2124      JSR        PRINT_EA
00001BA4                          2125  
00001BA4  4E75                    2126      RTS        
00001BA6                          2127  
00001BA6                          2128  
00001BA6                          2129  OPPOSITE_bit15    * A7
00001BA6  1E3C 0000               2130      MOVE.B    #%000, D7    * REGISTER
00001BAA                          2131      
00001BAA  1C3C 0000               2132      MOVE.B    #%000, D6    * MODE
00001BAE                          2133  
00001BAE  4EB9 000023A2           2134      JSR        PRINT_EA
00001BB4                          2135  
00001BB4  4E75                    2136      RTS    
00001BB6                          2137  
00001BB6                          2138  
00001BB6                          2139  
00001BB6                          2140  
00001BB6                          2141  
00001BB6                          2142  LOOP_MOVEM
00001BB6                          2143          
00001BB6  0903                    2144      BTST        D4, D3     * BIT TEST
00001BB8                          2145  
00001BB8  6600 0020               2146      BNE         IS_USED_FIRST
00001BBC                          2147  
00001BBC  5304                    2148      SUB.B       #1, D4
00001BBE                          2149      
00001BBE                          2150  CHECK
00001BBE  B83C 00FF               2151      CMP.B       #-1,  D4
00001BC2                          2152  
00001BC2  6700 09CA               2153      BEQ         DONE
00001BC6                          2154  
00001BC6  60EE                    2155      BRA         LOOP_MOVEM
00001BC8                          2156      
00001BC8                          2157  LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
00001BC8  0903                    2158      BTST        D4, D3     * BIT TEST
00001BCA                          2159  
00001BCA  6600 0018               2160      BNE         IS_USED
00001BCE                          2161  
00001BCE  5304                    2162      SUB.B       #1, D4
00001BD0                          2163      
00001BD0                          2164  CHECK_SECOND
00001BD0  B83C 00FF               2165      CMP.B       #-1,  D4
00001BD4                          2166  
00001BD4  6700 09B8               2167      BEQ         DONE
00001BD8                          2168  
00001BD8  60EE                    2169      BRA         LOOP_MOVEM_SECOND
00001BDA                          2170  
00001BDA                          2171  IS_USED_FIRST
00001BDA  4EB9 00001BFA           2172      JSR         PRINT_REGISTER_MOVEM
00001BE0                          2173  
00001BE0  5304                    2174      SUB.B       #1, D4
00001BE2                          2175  
00001BE2  60EC                    2176      BRA         CHECK_SECOND
00001BE4                          2177  
00001BE4                          2178  
00001BE4                          2179  IS_USED
00001BE4  43F9 000027A3           2180      LEA         SLASH, A1
00001BEA                          2181  
00001BEA  103C 000E               2182      MOVE.B      #14, D0
00001BEE                          2183  
00001BEE  4E4F                    2184      TRAP #15
00001BF0                          2185      
00001BF0  4EB9 00001BFA           2186      JSR         PRINT_REGISTER_MOVEM
00001BF6                          2187  
00001BF6  5304                    2188      SUB.B       #1, D4
00001BF8                          2189  
00001BF8  60D6                    2190      BRA         CHECK_SECOND
00001BFA                          2191  
00001BFA                          2192  
00001BFA                          2193  
00001BFA                          2194  
00001BFA                          2195  
00001BFA                          2196  PRINT_REGISTER_MOVEM
00001BFA  41F9 00001C0C           2197      LEA         jmp_table_MOVEM, A0
00001C00  4242                    2198      CLR         D2
00001C02  143C 0006               2199      MOVE.B      #6, D2
00001C06  C4C4                    2200      MULU        D4, D2                           
00001C08  4EF0 2000               2201      JMP         0(A0,D2)   *Jump indirect with index
00001C0C                          2202                      
00001C0C                          2203  jmp_table_MOVEM      
00001C0C  4EF9 00001C6C           2204      JMP         bit0
00001C12  4EF9 00001C7C           2205                 JMP         bit1
00001C18  4EF9 00001C8C           2206                 JMP         bit2
00001C1E  4EF9 00001C9C           2207                 JMP         bit3
00001C24  4EF9 00001CAC           2208                 JMP         bit4
00001C2A  4EF9 00001CBC           2209                 JMP         bit5
00001C30  4EF9 00001CCC           2210                 JMP         bit6
00001C36  4EF9 00001CDC           2211                 JMP         bit7
00001C3C  4EF9 00001CEC           2212                 JMP         bit8
00001C42  4EF9 00001CFC           2213                 JMP         bit9
00001C48  4EF9 00001D0C           2214                 JMP         bit10
00001C4E  4EF9 00001D1C           2215                 JMP         bit11
00001C54  4EF9 00001D2C           2216                 JMP         bit12
00001C5A  4EF9 00001D3C           2217                 JMP         bit13
00001C60  4EF9 00001D4C           2218                 JMP         bit14
00001C66  4EF9 00001D5C           2219                 JMP         bit15
00001C6C                          2220          
00001C6C                          2221   
00001C6C                          2222   
00001C6C                          2223   
00001C6C                          2224  bit0    * D0
00001C6C  1E3C 0000               2225      MOVE.B    #%000, D7    * REGISTER
00001C70                          2226      
00001C70  1C3C 0000               2227      MOVE.B    #%000, D6    * MODE
00001C74                          2228  
00001C74  4EB9 000023A2           2229      JSR        PRINT_EA
00001C7A                          2230  
00001C7A  4E75                    2231      RTS    
00001C7C                          2232  
00001C7C                          2233  bit1    * D1
00001C7C  1E3C 0001               2234      MOVE.B    #%001, D7    * REGISTER
00001C80                          2235      
00001C80  1C3C 0000               2236      MOVE.B    #%000, D6    * MODE
00001C84                          2237  
00001C84  4EB9 000023A2           2238      JSR        PRINT_EA
00001C8A                          2239  
00001C8A  4E75                    2240      RTS    
00001C8C                          2241  
00001C8C                          2242  bit2    * D2
00001C8C  1E3C 0002               2243      MOVE.B    #%010, D7    * REGISTER
00001C90                          2244      
00001C90  1C3C 0000               2245      MOVE.B    #%000, D6    * MODE
00001C94                          2246  
00001C94  4EB9 000023A2           2247      JSR        PRINT_EA    
00001C9A                          2248  
00001C9A  4E75                    2249      RTS
00001C9C                          2250  
00001C9C                          2251  bit3    * D3
00001C9C  1E3C 0003               2252      MOVE.B    #%011, D7    * REGISTER
00001CA0                          2253      
00001CA0  1C3C 0000               2254      MOVE.B    #%000, D6    * MODE
00001CA4                          2255  
00001CA4  4EB9 000023A2           2256      JSR        PRINT_EA
00001CAA                          2257  
00001CAA  4E75                    2258      RTS    
00001CAC                          2259  
00001CAC                          2260  bit4    * D4
00001CAC  1E3C 0004               2261      MOVE.B    #%100, D7    * REGISTER
00001CB0                          2262  
00001CB0  1C3C 0000               2263      MOVE.B    #%000, D6    * MODE
00001CB4                          2264  
00001CB4  4EB9 000023A2           2265      JSR        PRINT_EA
00001CBA                          2266  
00001CBA  4E75                    2267      RTS    
00001CBC                          2268  
00001CBC                          2269  
00001CBC                          2270  bit5    * D5
00001CBC  1E3C 0005               2271      MOVE.B    #%101, D7    * REGISTER
00001CC0                          2272      
00001CC0  1C3C 0000               2273      MOVE.B    #%000, D6    * MODE
00001CC4                          2274  
00001CC4  4EB9 000023A2           2275      JSR        PRINT_EA
00001CCA                          2276  
00001CCA  4E75                    2277      RTS    
00001CCC                          2278  
00001CCC                          2279  bit6    * D6
00001CCC  1E3C 0006               2280      MOVE.B    #%110, D7    * REGISTER
00001CD0                          2281      
00001CD0  1C3C 0000               2282      MOVE.B    #%000, D6    * MODE
00001CD4                          2283  
00001CD4  4EB9 000023A2           2284      JSR        PRINT_EA
00001CDA                          2285  
00001CDA  4E75                    2286      RTS    
00001CDC                          2287  
00001CDC                          2288  bit7    * D7
00001CDC  1E3C 0007               2289      MOVE.B    #%111, D7    * REGISTER
00001CE0                          2290      
00001CE0  1C3C 0000               2291      MOVE.B    #%000, D6    * MODE
00001CE4                          2292  
00001CE4  4EB9 000023A2           2293      JSR        PRINT_EA
00001CEA                          2294  
00001CEA  4E75                    2295      RTS    
00001CEC                          2296  
00001CEC                          2297  bit8    * A0
00001CEC  1E3C 0000               2298      MOVE.B    #%000, D7    * REGISTER
00001CF0                          2299      
00001CF0  1C3C 0001               2300      MOVE.B    #%001, D6    * MODE
00001CF4                          2301  
00001CF4  4EB9 000023A2           2302      JSR        PRINT_EA
00001CFA                          2303  
00001CFA  4E75                    2304      RTS    
00001CFC                          2305  
00001CFC                          2306  bit9    * A1
00001CFC  1E3C 0001               2307      MOVE.B    #%001, D7    * REGISTER
00001D00                          2308      
00001D00  1C3C 0001               2309      MOVE.B    #%001, D6    * MODE
00001D04                          2310  
00001D04  4EB9 000023A2           2311      JSR        PRINT_EA
00001D0A                          2312  
00001D0A  4E75                    2313      RTS    
00001D0C                          2314  
00001D0C                          2315  bit10    * A2
00001D0C  1E3C 0002               2316      MOVE.B    #%010, D7    * REGISTER
00001D10                          2317      
00001D10  1C3C 0001               2318      MOVE.B    #%001, D6    * MODE
00001D14                          2319  
00001D14  4EB9 000023A2           2320      JSR        PRINT_EA
00001D1A                          2321  
00001D1A  4E75                    2322      RTS    
00001D1C                          2323  
00001D1C                          2324  
00001D1C                          2325  bit11    * A5
00001D1C  1E3C 0003               2326      MOVE.B    #%011, D7    * REGISTER
00001D20                          2327      
00001D20  1C3C 0001               2328      MOVE.B    #%001, D6    * MODE
00001D24                          2329  
00001D24  4EB9 000023A2           2330      JSR        PRINT_EA
00001D2A                          2331  
00001D2A  4E75                    2332      RTS    
00001D2C                          2333  
00001D2C                          2334  bit12    * A4
00001D2C  1E3C 0004               2335      MOVE.B    #%100, D7    * REGISTER
00001D30                          2336      
00001D30  1C3C 0001               2337      MOVE.B    #%001, D6    * MODE
00001D34                          2338  
00001D34  4EB9 000023A2           2339      JSR        PRINT_EA
00001D3A                          2340  
00001D3A  4E75                    2341      RTS    
00001D3C                          2342  
00001D3C                          2343  
00001D3C                          2344  bit13    * A5
00001D3C  1E3C 0005               2345      MOVE.B    #%101, D7    * REGISTER
00001D40                          2346      
00001D40  1C3C 0001               2347      MOVE.B    #%001, D6    * MODE
00001D44                          2348  
00001D44  4EB9 000023A2           2349      JSR        PRINT_EA
00001D4A                          2350  
00001D4A  4E75                    2351      RTS    
00001D4C                          2352  
00001D4C                          2353  
00001D4C                          2354  bit14     * A6
00001D4C  1E3C 0006               2355      MOVE.B    #%110, D7    * REGISTER
00001D50                          2356      
00001D50  1C3C 0001               2357      MOVE.B    #%001, D6    * MODE
00001D54                          2358  
00001D54  4EB9 000023A2           2359      JSR        PRINT_EA
00001D5A                          2360  
00001D5A  4E75                    2361      RTS        
00001D5C                          2362  
00001D5C                          2363  
00001D5C                          2364  bit15    * A7
00001D5C  1E3C 0007               2365      MOVE.B    #%111, D7    * REGISTER
00001D60                          2366      
00001D60  1C3C 0001               2367      MOVE.B    #%001, D6    * MODE
00001D64                          2368  
00001D64  4EB9 000023A2           2369      JSR        PRINT_EA
00001D6A                          2370  
00001D6A  4E75                    2371      RTS    
00001D6C                          2372  
00001D6C                          2373  DONE_MOVEM_LOOP
00001D6C  4E75                    2374      RTS
00001D6E                          2375  
00001D6E                          2376     * SIMHALT             ; halt simulator
00001D6E                          2377      *INCLUDE 'MESSAGE_Data.X68'
00001D6E                          2378     * INCLUDE 'JUMPTABLE EA.X68'
00001D6E                          2379  
00001D6E                          2380  
00001D6E                          2381     * END    START        ; last line of source
00001D6E                          2382  
00001D6E                          2383  
00001D6E                          2384  
00001D6E                          2385  
00001D6E                          2386  
00001D6E                          2387  
00001D6E                          2388  
00001D6E                          2389  
00001D6E                          2390  
00001D6E                          2391  
00001D6E                          2392  
00001D6E                          2393  
00001D6E                          2394  
00001D6E                          2395  
00001D6E                          2396  
00001D6E                          2397  
00001D6E                          2398  
00001D6E                          2399  
00001D6E                          2400  
00001D6E                          2401  
00001D6E                          2402  
00001D6E                          2403  
00001D6E                          2404  
00001D6E                          2405  
00001D6E                          2406  
00001D6E                          2407  
00001D6E                          2408  
00001D6E                          2409  
00001D6E                          2410  
00001D6E                          2411  
00001D6E                          2412  
00001D6E                          2413  
00001D6E                          2414  
00001D6E                          2415  
00001D6E                          2416  
00001D6E                          2417  
00001D6E                          2418  
00001D6E                          2419  
00001D6E                          2420  -------------------- end include --------------------
00001D6E                          2421                  INCLUDE 'MOVEQ.X68'
00001D6E                          2422  
00001D6E                          2423  MOVEQ 
00001D6E                          2424  
00001D6E                          2425                   * ADD message
00001D6E  43F9 0000273F           2426                   LEA      MOVEQ_MESSAGE,    A1
00001D74  103C 000E               2427                   MOVE.B   #14,            D0
00001D78  4E4F                    2428                   TRAP #15
00001D7A                          2429                   
00001D7A                          2430                   * print out size L
00001D7A  43F9 00002794           2431                   LEA      SIZE_L_PRINT,    A1
00001D80  103C 000E               2432                   MOVE.B   #14,             D0          
00001D84  4E4F                    2433                   TRAP #15   
00001D86                          2434                   
00001D86                          2435                   * print out immediate Data
00001D86                          2436                   
00001D86  43F9 0000279A           2437                  LEA     POUND_SIGN, A1
00001D8C                          2438              
00001D8C  103C 000E               2439                  MOVE.B  #14, D0
00001D90                          2440              
00001D90  4E4F                    2441                  TRAP #15
00001D92                          2442              
00001D92  43F9 0000279C           2443                  LEA     HEX_SIGN, A1
00001D98                          2444              
00001D98  4E4F                    2445                  TRAP #15
00001D9A                          2446                  
00001D9A  4280                    2447                  CLR.L       D0              *Zero it
00001D9C                          2448  
00001D9C  3015                    2449                  MOVE.W      (A5),D0     *We'll play with it here
00001D9E                          2450                 
00001D9E  123C 0008               2451                  MOVE.B      #8, D1
00001DA2                          2452                 
00001DA2  E368                    2453                  LSL.W       D1, D0
00001DA4                          2454  
00001DA4  123C 0008               2455                  MOVE.B      #8,D1       *Shift 12 bits to the right  
00001DA8                          2456  
00001DA8  E268                    2457                  LSR.W       D1,D0           *Move the bits -> D0 holds DATA
00001DAA                          2458                      
00001DAA  4285                    2459                  CLR.L D5
00001DAC                          2460                 
00001DAC  3A00                    2461                  MOVE.W D0, D5      
00001DAE                          2462          
00001DAE  4EB9 00002304           2463                  JSR         HEX_TO_ASCII
00001DB4                          2464                  
00001DB4  43F9 000027BA           2465                  LEA      COMMA,    A1
00001DBA  103C 000E               2466                  MOVE.B   #14,            D0
00001DBE  4E4F                    2467                  TRAP #15
00001DC0                          2468                   
00001DC0                          2469                  * for the first Dn 
00001DC0  4286                    2470                  CLR.L D6
00001DC2                          2471                  
00001DC2  4EB8 134C               2472                  JSR     GET_Data_Register
00001DC6                          2473                  
00001DC6  1C3C 0000               2474                  MOVE.B  #%000, D6 * for mode
00001DCA                          2475                   
00001DCA  4EB9 000023A2           2476                  JSR     PRINT_EA *by using jmp table
00001DD0                          2477                   
00001DD0  6000 F31E               2478                  BRA PARSE_MEMORY
00001DD4                          2479          
00001DD4                          2480  
00001DD4                          2481  
00001DD4                          2482  
00001DD4                          2483  
00001DD4                          2484  
00001DD4                          2485  
00001DD4                          2486  
00001DD4                          2487  
00001DD4                          2488  
00001DD4                          2489  
00001DD4                          2490  
00001DD4                          2491  
00001DD4                          2492  -------------------- end include --------------------
00001DD4                          2493                  INCLUDE 'DAMIAN_OP_CODE.X68'
00001DD4  4280                    2494  SHIFTS           CLR.L D0
00001DD6                          2495                      
00001DD6  4286                    2496                   CLR.L D6
00001DD8                          2497  
00001DD8  4281                    2498                   CLR.L D1
00001DDA                          2499                   
00001DDA  3015                    2500                   MOVE.W (A5), D0
00001DDC                          2501                   
00001DDC  E148                    2502                   LSL.W #8, D0
00001DDE                          2503                   
00001DDE  123C 000E               2504                   MOVE.B #14, D1
00001DE2                          2505                   
00001DE2  E268                    2506                   LSR.W D1, D0
00001DE4                          2507                   
00001DE4  B03C 0003               2508                   CMP.B  #%11, D0            * check to see if its memory shift
00001DE8                          2509                   
00001DE8  6700 0024               2510                   BEQ MEMORY_SHIFTS
00001DEC                          2511                   
00001DEC  3015                    2512                   MOVE.W     (A5), D0
00001DEE                          2513                   
00001DEE  123C 000B               2514                   MOVE.B     #11, D1
00001DF2                          2515                   
00001DF2  E368                    2516                   LSL.W      D1, D0
00001DF4                          2517                   
00001DF4  123C 000E               2518                   MOVE.B     #14, D1
00001DF8                          2519                   
00001DF8  E268                    2520                   LSR.W      D1, D0
00001DFA                          2521                   
00001DFA  B03C 0000               2522                   CMP.B      #%00, D0
00001DFE                          2523                   
00001DFE  6700 010A               2524                   BEQ        ASD
00001E02                          2525                   
00001E02  B03C 0001               2526                   CMP.B      #%01, D0
00001E06                          2527                   
00001E06  6700 0032               2528                   BEQ        LSD
00001E0A                          2529                   
00001E0A  6000 0096               2530                   BRA        ROD
00001E0E                          2531                   
00001E0E                          2532                   
00001E0E                          2533  MEMORY_SHIFTS
00001E0E  3015                    2534                   MOVE.W (A5),D0
00001E10                          2535                   
00001E10  E948                    2536                   LSL.W #4,D0            *shift out the opcode
00001E12                          2537                   
00001E12  123C 000D               2538                   MOVE.B #13,D1          
00001E16                          2539                   
00001E16  E268                    2540                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there
00001E18                          2541                   
00001E18  B03C 0001               2542                   CMP.B #1,D0            
00001E1C                          2543                   
00001E1C  6700 001C               2544                   BEQ LSD                *if the bits are 1, it is a logical shift
00001E20                          2545                   
00001E20  B03C 0003               2546                   CMP.B #3,D0
00001E24                          2547                   
00001E24  6700 007C               2548                   BEQ ROD                *if the bits are 3, it is a rotation
00001E28                          2549                   
00001E28  3015                    2550                   MOVE.W (A5),D0
00001E2A                          2551                   
00001E2A  E948                    2552                   LSL.W #4,D0            *shift out the opcode
00001E2C                          2553                   
00001E2C  123C 000D               2554                   MOVE.B #13,D1          
00001E30                          2555                   
00001E30  E268                    2556                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there   
00001E32                          2557                      
00001E32  B03C 0000               2558                   CMP.B  #0, D0
00001E36                          2559                   
00001E36  6700 00D2               2560                   BEQ    ASD
00001E3A                          2561                   
00001E3A                          2562  
00001E3A  4280                    2563  LSD              CLR.L D0               *still need to do checks, since an asd shift could still be a possibility
00001E3C                          2564                   
00001E3C  4281                    2565                   CLR.L D1
00001E3E                          2566                                                 
00001E3E  3015                    2567                   MOVE.W (A5), D0
00001E40                          2568                   
00001E40  EF48                    2569                   LSL.W  #7, D0
00001E42                          2570                   
00001E42  123C 000F               2571                   MOVE.B #15, D1
00001E46                          2572                   
00001E46  E268                    2573                   LSR.W  D1, D0
00001E48                          2574                   
00001E48  B03C 0001               2575                   CMP.B  #1, D0
00001E4C                          2576                   
00001E4C  6700 0006               2577                   BEQ LSL
00001E50                          2578                   
00001E50  6000 0024               2579                   BRA LSR
00001E54                          2580                   
00001E54                          2581  
00001E54                          2582  LSL
00001E54  43F9 00002770           2583                   LEA LSL_MESSAGE, A1    * print message
00001E5A                          2584                   
00001E5A  103C 000E               2585                   MOVE.B #14, D0
00001E5E                          2586                   
00001E5E  4E4F                    2587                   TRAP #15
00001E60                          2588              
00001E60  3015                    2589                   MOVE.W (A5), D0
00001E62                          2590                   
00001E62  E148                    2591                   LSL.W #8, D0
00001E64                          2592                   
00001E64  123C 000E               2593                   MOVE.B #14, D1
00001E68                          2594                   
00001E68  E268                    2595                   LSR.W D1, D0
00001E6A                          2596                   
00001E6A  B03C 0003               2597                   CMP.B  #%11, D0        * check to see if it is memory and not register shift
00001E6E                          2598                   
00001E6E  6700 0028               2599                   BEQ LSD_MEMORY
00001E72                          2600                   
00001E72  6000 00FA               2601                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001E76                          2602  
00001E76                          2603  LSR              
00001E76  43F9 0000277C           2604                   LEA LSR_MESSAGE, A1            * print message
00001E7C                          2605                   
00001E7C  103C 000E               2606                   MOVE.B #14, D0
00001E80                          2607                   
00001E80  4E4F                    2608                   TRAP #15
00001E82                          2609          
00001E82  3015                    2610                   MOVE.W (A5), D0
00001E84                          2611                   
00001E84  E148                    2612                   LSL.W #8, D0
00001E86                          2613                   
00001E86  123C 000E               2614                   MOVE.B #14, D1
00001E8A                          2615                   
00001E8A  E268                    2616                   LSR.W D1, D0
00001E8C                          2617                   
00001E8C  B03C 0003               2618                   CMP.B  #%11, D0            * check to see if memory shift
00001E90                          2619                   
00001E90  6700 0006               2620                   BEQ LSD_MEMORY
00001E94                          2621                   
00001E94  6000 00D8               2622                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001E98                          2623                   
00001E98                          2624  LSD_MEMORY
00001E98  4EB9 00002016           2625                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001E9E                          2626                   
00001E9E  6000 F250               2627                   BRA PARSE_MEMORY
00001EA2                          2628              
00001EA2                          2629  
00001EA2  4280                    2630  ROD              CLR.L D0               *same check as logical shift, since an arithmetic shift could still be possible
00001EA4                          2631                   
00001EA4  4281                    2632                   CLR.L D1
00001EA6                          2633                   
00001EA6  3015                    2634                   MOVE.W (A5), D0
00001EA8                          2635                   
00001EA8  EF48                    2636                   LSL.W  #7, D0
00001EAA                          2637                   
00001EAA  123C 000F               2638                   MOVE.B #15, D1
00001EAE                          2639                   
00001EAE  E268                    2640                   LSR.W  D1, D0
00001EB0                          2641                   
00001EB0  B03C 0001               2642                   CMP.B  #1, D0
00001EB4                          2643                   
00001EB4  6700 0006               2644                   BEQ ROL
00001EB8                          2645                   
00001EB8  6000 0024               2646                   BRA ROR
00001EBC                          2647  
00001EBC                          2648  ROL              
00001EBC  43F9 00002778           2649                   LEA ROL_MESSAGE, A1
00001EC2                          2650                   
00001EC2  103C 000E               2651                   MOVE.B #14, D0
00001EC6                          2652                   
00001EC6  4E4F                    2653                   TRAP #15
00001EC8                          2654  
00001EC8  3015                    2655                   MOVE.W (A5), D0
00001ECA                          2656                   
00001ECA  E148                    2657                   LSL.W #8, D0
00001ECC                          2658                   
00001ECC  123C 000E               2659                   MOVE.B #14, D1
00001ED0                          2660                   
00001ED0  E268                    2661                   LSR.W D1, D0
00001ED2                          2662                   
00001ED2  B03C 0003               2663                   CMP.B  #%11, D0            * check to see if its memory shift
00001ED6                          2664                   
00001ED6  6700 0028               2665                   BEQ ROD_MEMORY
00001EDA                          2666                   
00001EDA  6000 0092               2667                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001EDE                          2668  
00001EDE                          2669  ROR       
00001EDE  43F9 00002784           2670                   LEA ROR_MESSAGE, A1
00001EE4                          2671                   
00001EE4  103C 000E               2672                   MOVE.B #14, D0
00001EE8                          2673                   
00001EE8  4E4F                    2674                   TRAP #15
00001EEA                          2675                   
00001EEA  3015                    2676                   MOVE.W (A5), D0
00001EEC                          2677                   
00001EEC  E148                    2678                   LSL.W #8, D0
00001EEE                          2679                   
00001EEE  123C 000E               2680                   MOVE.B #14, D1
00001EF2                          2681                   
00001EF2  E268                    2682                   LSR.W D1, D0
00001EF4                          2683                   
00001EF4  B03C 0003               2684                   CMP.B  #%11, D0            * check to see if its memory shift
00001EF8                          2685                   
00001EF8  6700 0006               2686                   BEQ ROD_MEMORY
00001EFC                          2687                   
00001EFC  6000 0070               2688                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001F00                          2689  
00001F00                          2690  ROD_MEMORY       
00001F00  4EB9 00002016           2691                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001F06                          2692                   
00001F06  6000 F1E8               2693                   BRA PARSE_MEMORY
00001F0A                          2694                   
00001F0A                          2695                   
00001F0A  3015                    2696  ASD              MOVE.W (A5), D0
00001F0C                          2697                   
00001F0C  EF48                    2698                   LSL.W  #7, D0
00001F0E                          2699                   
00001F0E  123C 000F               2700                   MOVE.B #15, D1
00001F12                          2701                   
00001F12  E268                    2702                   LSR.W  D1, D0
00001F14                          2703                   
00001F14  B03C 0001               2704                   CMP.B  #1, D0
00001F18                          2705                   
00001F18  6700 0006               2706                   BEQ ASL
00001F1C                          2707                   
00001F1C  6000 0024               2708                   BRA ASR
00001F20                          2709                   
00001F20                          2710  ASL
00001F20  43F9 00002774           2711                   LEA ASL_MESSAGE, A1
00001F26                          2712                   
00001F26  103C 000E               2713                   MOVE.B #14, D0
00001F2A                          2714                   
00001F2A  4E4F                    2715                   TRAP #15
00001F2C                          2716                   
00001F2C  3015                    2717                   MOVE.W (A5), D0
00001F2E                          2718                   
00001F2E  E148                    2719                   LSL.W #8, D0
00001F30                          2720                   
00001F30  123C 000E               2721                   MOVE.B #14, D1
00001F34                          2722                   
00001F34  E268                    2723                   LSR.W D1, D0
00001F36                          2724                   
00001F36  B03C 0003               2725                   CMP.B  #%11, D0            * check to see if its memory shift
00001F3A                          2726                   
00001F3A  6700 0028               2727                   BEQ ASD_MEMORY
00001F3E                          2728                   
00001F3E  6000 002E               2729                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001F42                          2730                                    
00001F42                          2731  
00001F42                          2732  ASR              
00001F42  43F9 00002780           2733                   LEA ASR_MESSAGE, A1
00001F48                          2734                   
00001F48  103C 000E               2735                   MOVE.B #14, D0
00001F4C                          2736                   
00001F4C  4E4F                    2737                   TRAP #15
00001F4E                          2738                   
00001F4E  3015                    2739                   MOVE.W (A5), D0
00001F50                          2740                   
00001F50  E148                    2741                   LSL.W #8, D0
00001F52                          2742                   
00001F52  123C 000E               2743                   MOVE.B #14, D1
00001F56                          2744                   
00001F56  E268                    2745                   LSR.W D1, D0
00001F58                          2746                   
00001F58  B03C 0003               2747                   CMP.B  #%11, D0            * check to see if its memory shift
00001F5C                          2748                   
00001F5C  6700 0006               2749                   BEQ ASD_MEMORY
00001F60                          2750                   
00001F60  6000 000C               2751                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001F64                          2752  
00001F64                          2753  ASD_MEMORY
00001F64  4EB9 00002016           2754                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001F6A                          2755                   
00001F6A  6000 F184               2756                   BRA PARSE_MEMORY
00001F6E                          2757                   
00001F6E                          2758  PRINTOUT_REGISTER_SHIFTS_EA
00001F6E  43F9 0000279E           2759                   LEA PERIOD, A1
00001F74                          2760                   
00001F74  103C 000E               2761                   MOVE.B #14, D0
00001F78                          2762                   
00001F78  4E4F                    2763                   TRAP #15
00001F7A                          2764                  
00001F7A  4EB8 12DA               2765                   JSR GET_SIZE_PURPLE
00001F7E                          2766                   
00001F7E  4EB8 12F2               2767                   JSR PRINTOUT_SIZE_PURPLE
00001F82                          2768  
00001F82  3015                    2769                   MOVE.W (A5), D0
00001F84                          2770                   
00001F84  123C 000A               2771                   MOVE.B #10, D1
00001F88                          2772                   
00001F88  E368                    2773                   LSL.W D1, D0
00001F8A                          2774                   
00001F8A  123C 000F               2775                   MOVE.B #15, D1
00001F8E                          2776                   
00001F8E  E268                    2777                   LSR.W D1, D0
00001F90                          2778                   
00001F90  B03C 0001               2779                   CMP.B #1, D0
00001F94                          2780                   
00001F94  6700 0048               2781                   BEQ PRINTOUT_REGISTER
00001F98                          2782                   
00001F98  6000 0002               2783                   BRA PRINTOUT_COUNT
00001F9C                          2784  
00001F9C                          2785                   
00001F9C                          2786  PRINTOUT_COUNT
00001F9C  43F9 0000279A           2787                   LEA POUND_SIGN, A1
00001FA2                          2788  
00001FA2  103C 000E               2789                   MOVE.B #14, D0
00001FA6                          2790  
00001FA6  4E4F                    2791                   TRAP #15     
00001FA8                          2792                 
00001FA8  3015                    2793                   MOVE.W (A5), D0
00001FAA                          2794                   
00001FAA  E948                    2795                   LSL.W #4, D0
00001FAC                          2796                   
00001FAC  123C 000D               2797                   MOVE.B #13, D1
00001FB0                          2798                   
00001FB0  E268                    2799                   LSR.W D1, D0
00001FB2                          2800                   
00001FB2  1200                    2801                   MOVE.B D0, D1
00001FB4                          2802                   
00001FB4  103C 0003               2803                   MOVE.B #3, D0
00001FB8                          2804                   
00001FB8  4E4F                    2805                   TRAP #15                  * print out the amount that the ea is being shifted by
00001FBA                          2806                   
00001FBA  43F9 000027BA           2807                   LEA COMMA, A1
00001FC0                          2808                   
00001FC0  103C 000E               2809                   MOVE.B #14, D0
00001FC4                          2810                   
00001FC4  4E4F                    2811                   TRAP #15
00001FC6                          2812                   
00001FC6  3015                    2813                   MOVE.W (A5), D0
00001FC8                          2814                   
00001FC8  123C 000D               2815                   MOVE.B #13, D1                * to print out the ea that is being shifted
00001FCC                          2816                   
00001FCC  E368                    2817                   LSL.W D1, D0
00001FCE                          2818                   
00001FCE  E268                    2819                   LSR.W D1, D0
00001FD0                          2820                   
00001FD0  1E00                    2821                   MOVE.B D0, D7
00001FD2                          2822                   
00001FD2  7C00                    2823                   MOVE.L #%000, D6              * we know it is a data register
00001FD4                          2824                   
00001FD4  4EB9 000023A2           2825                   JSR PRINT_EA
00001FDA                          2826                   
00001FDA  6000 F114               2827                   BRA PARSE_MEMORY
00001FDE                          2828                   
00001FDE                          2829  
00001FDE                          2830  PRINTOUT_REGISTER
00001FDE  3015                    2831                   MOVE.W (A5), D0
00001FE0                          2832                   
00001FE0  E948                    2833                   LSL.W #4, D0
00001FE2                          2834                   
00001FE2  123C 000D               2835                   MOVE.B #13, D1
00001FE6                          2836                   
00001FE6  E268                    2837                   LSR.W D1, D0
00001FE8                          2838                   
00001FE8  1E00                    2839                   MOVE.B D0, D7
00001FEA                          2840                   
00001FEA  7C00                    2841                   MOVE.L #%000, D6
00001FEC                          2842                   
00001FEC  4EB9 000023A2           2843                   JSR PRINT_EA                  * to print out the data register
00001FF2                          2844                   
00001FF2  43F9 000027BA           2845                   LEA COMMA, A1
00001FF8                          2846                   
00001FF8  103C 000E               2847                   MOVE.B #14, D0
00001FFC                          2848                   
00001FFC  4E4F                    2849                   TRAP #15
00001FFE                          2850                   
00001FFE  3015                    2851                   MOVE.W (A5), D0
00002000                          2852                   
00002000  123C 000D               2853                   MOVE.B #13, D1                * to print out the ea that is being shifted
00002004                          2854                   
00002004  E368                    2855                   LSL.W D1, D0
00002006                          2856                   
00002006  E268                    2857                   LSR.W D1, D0
00002008                          2858                   
00002008  1E00                    2859                   MOVE.B D0, D7
0000200A                          2860                   
0000200A  7C00                    2861                   MOVE.L #%000, D6              * we know it is a data register
0000200C                          2862                   
0000200C  4EB9 000023A2           2863                   JSR PRINT_EA
00002012                          2864                   
00002012  6000 F0DC               2865                   BRA PARSE_MEMORY
00002016                          2866                                   
00002016                          2867  
00002016                          2868  PRINTOUT_MEMORY_SHIFTS_EA   * gets the mode and register of the memory ea, and prints it out
00002016                          2869                   *JSR GET_SIZE_PURPLE
00002016                          2870                   
00002016                          2871                   *JSR PRINTOUT_SIZE_PURPLE
00002016                          2872                   
00002016  43F9 000027A0           2873                   LEA SPACE, A1
0000201C                          2874                   
0000201C  103C 000E               2875                   MOVE.B #14, D0
00002020                          2876                   
00002020  4E4F                    2877                   TRAP #15
00002022                          2878  
00002022  3015                    2879                   MOVE.W (A5), D0
00002024                          2880                   
00002024  123C 000A               2881                   MOVE.B #10, D1
00002028                          2882                   
00002028  E368                    2883                   LSL.W D1, D0
0000202A                          2884                   
0000202A  123C 000D               2885                   MOVE.B #13, D1
0000202E                          2886                   
0000202E  E268                    2887                   LSR.W D1, D0
00002030                          2888                   
00002030  2C00                    2889                   MOVE.L D0, D6
00002032                          2890                   
00002032  3015                    2891                   MOVE.W (A5), D0
00002034                          2892                   
00002034  123C 000D               2893                   MOVE.B #13, D1
00002038                          2894                   
00002038  E368                    2895                   LSL.W D1, D0
0000203A                          2896                   
0000203A  E268                    2897                   LSR.W D1, D0
0000203C                          2898                   
0000203C  2E00                    2899                   MOVE.L D0, D7
0000203E                          2900                   
0000203E  4EB9 000023A2           2901                   JSR PRINT_EA
00002044                          2902                   
00002044  4E75                    2903                   RTS
00002046                          2904                                   
00002046                          2905                
00002046  43F9 000026E0           2906  MOVEB            LEA MOVE_MESSAGE, A1   * printing out the opcode and size
0000204C                          2907  
0000204C  4280                    2908                   CLR.L  D0
0000204E                          2909                   
0000204E  103C 000E               2910                   MOVE.B #14, D0
00002052                          2911                   
00002052  4E4F                    2912                   TRAP #15
00002054                          2913                   
00002054  43F9 00002788           2914                   LEA SIZE_B_PRINT, A1
0000205A                          2915                   
0000205A  4E4F                    2916                   TRAP #15               * done printing opcode and size
0000205C                          2917                   
0000205C  1A3C 0000               2918                   MOVE.B     #%00, D5
00002060                          2919                   
00002060  6000 00A6               2920                   BRA PRINTOUT_MOVE_EA
00002064                          2921  
00002064  4280                    2922  MOVEW            CLR.L D0
00002066                          2923                   
00002066  4281                    2924                   CLR.L D1
00002068                          2925                   
00002068  3015                    2926                   MOVE.W (A5),D0
0000206A                          2927                   
0000206A  EF48                    2928                   LSL.W #7,D0
0000206C                          2929                   
0000206C  123C 000D               2930                   MOVE.B #13,D1
00002070                          2931                   
00002070  E268                    2932                   LSR.W D1,D0
00002072                          2933                   
00002072  B03C 0001               2934                   CMP.B #1,D0            *check to see if the mode of the destination is an address register
00002076                          2935                   
00002076  6700 0054               2936                   BEQ MOVEAW             *if the destination is an address, it is MOVEA
0000207A                          2937                   
0000207A  43F9 000026E0           2938                   LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00002080                          2939                   
00002080  4280                    2940                   CLR.L D0
00002082                          2941                   
00002082  103C 000E               2942                   MOVE.B #14, D0
00002086                          2943                   
00002086  4E4F                    2944                   TRAP #15
00002088                          2945                   
00002088  43F9 0000278E           2946                   LEA SIZE_W_PRINT, A1
0000208E                          2947                   
0000208E  4E4F                    2948                   TRAP #15               * done printing opcode and size
00002090                          2949                   
00002090  1A3C 0001               2950                   MOVE.B     #%01, D5
00002094                          2951                      
00002094  6000 0072               2952                   BRA PRINTOUT_MOVE_EA
00002098                          2953                
00002098                          2954  
00002098  4280                    2955  MOVEL            CLR.L D0
0000209A                          2956                   
0000209A  4281                    2957                   CLR.L D1
0000209C                          2958                   
0000209C  3015                    2959                   MOVE.W (A5),D0
0000209E                          2960                   
0000209E  EF48                    2961                   LSL.W #7,D0
000020A0                          2962                   
000020A0  123C 000D               2963                   MOVE.B #13,D1
000020A4                          2964                   
000020A4  E268                    2965                   LSR.W D1,D0
000020A6                          2966                   
000020A6  B03C 0001               2967                   CMP.B #1,D0            *check to see if the mode of the destination is equal to 1
000020AA                          2968                   
000020AA  6700 003E               2969                   BEQ MOVEAL             *if the mode is 1, then it is an address register, and the opcode is MOVEA
000020AE                          2970                   
000020AE  43F9 000026E0           2971                   LEA MOVE_MESSAGE, A1   * printing out opcode and size
000020B4                          2972                   
000020B4  4280                    2973                   CLR.L D0
000020B6                          2974                   
000020B6  103C 000E               2975                   MOVE.B #14, D0
000020BA                          2976                   
000020BA  4E4F                    2977                   TRAP #15
000020BC                          2978                   
000020BC  43F9 00002794           2979                   LEA SIZE_L_PRINT, A1
000020C2                          2980                   
000020C2  4E4F                    2981                   TRAP #15               * done printing opcode and size
000020C4                          2982                   
000020C4  1A3C 0002               2983                   MOVE.B     #%10, D5
000020C8                          2984                   
000020C8  6000 003E               2985                   BRA PRINTOUT_MOVE_EA
000020CC                          2986                   
000020CC                          2987                   
000020CC  43F9 000026D9           2988  MOVEAW           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
000020D2                          2989  
000020D2  4280                    2990                   CLR.L D0
000020D4                          2991                   
000020D4  103C 000E               2992                   MOVE.B #14, D0
000020D8                          2993                   
000020D8  4E4F                    2994                   TRAP #15
000020DA                          2995                   
000020DA  43F9 0000278E           2996                   LEA SIZE_W_PRINT, A1
000020E0                          2997                   
000020E0  4E4F                    2998                   TRAP #15               * done printing out opcode and size
000020E2                          2999                   
000020E2  1A3C 0001               3000                   MOVE.B     #%01, D5
000020E6                          3001                   
000020E6  6000 0020               3002                   BRA PRINTOUT_MOVE_EA
000020EA                          3003  
000020EA  43F9 000026D9           3004  MOVEAL           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
000020F0                          3005  
000020F0  4280                    3006                   CLR.L D0
000020F2                          3007                   
000020F2  103C 000E               3008                   MOVE.B #14, D0
000020F6                          3009                   
000020F6  4E4F                    3010                   TRAP #15
000020F8                          3011                   
000020F8  43F9 00002794           3012                   LEA SIZE_L_PRINT, A1
000020FE                          3013                   
000020FE  4E4F                    3014                   TRAP #15               * done printing out opcode and size
00002100                          3015                   
00002100  1A3C 0002               3016                   MOVE.B     #%10, D5
00002104                          3017                   
00002104  6000 0002               3018                   BRA PRINTOUT_MOVE_EA
00002108                          3019  
00002108                          3020  PRINTOUT_MOVE_EA
00002108  4247                    3021                   CLR    D7 
0000210A                          3022                   
0000210A  4246                    3023                   CLR    D6               
0000210C                          3024                   
0000210C  3015                    3025                   MOVE.W (A5), D0
0000210E                          3026                   
0000210E  123C 000A               3027                   MOVE.B #10, D1
00002112                          3028                   
00002112  E368                    3029                   LSL.W D1, D0
00002114                          3030                   
00002114  123C 000D               3031                   MOVE.B #13, D1
00002118                          3032                   
00002118  E268                    3033                   LSR.W D1, D0
0000211A                          3034                   
0000211A  1C00                    3035                   MOVE.B D0, D6          * getting the mode of the second ea
0000211C                          3036                   
0000211C  3015                    3037                   MOVE.W (A5), D0
0000211E                          3038                   
0000211E  123C 000D               3039                   MOVE.B #13, D1
00002122                          3040                   
00002122  E368                    3041                   LSL.W D1, D0
00002124                          3042                   
00002124  E268                    3043                   LSR.W D1, D0
00002126                          3044                   
00002126  1E00                    3045                   MOVE.B D0, D7          * getting the register of the second ea
00002128                          3046                   
00002128  4EB9 000023A2           3047                   JSR PRINT_EA
0000212E                          3048                   
0000212E  43F9 000027BA           3049                   LEA COMMA, A1
00002134                          3050                   
00002134  103C 000E               3051                   MOVE.B #14, D0
00002138                          3052                   
00002138  4E4F                    3053                   TRAP #15
0000213A                          3054                   
0000213A  3015                    3055                   MOVE.W (A5), D0
0000213C                          3056                   
0000213C  E948                    3057                   LSL.W #4, D0
0000213E                          3058                   
0000213E  123C 000D               3059                   MOVE.B #13, D1
00002142                          3060                   
00002142  E268                    3061                   LSR.W D1, D0
00002144                          3062                   
00002144  1E00                    3063                   MOVE.B D0, D7          * getting the register of the first ea
00002146                          3064                   
00002146  3015                    3065                   MOVE.W (A5), D0
00002148                          3066                   
00002148  EF48                    3067                   LSL.W #7, D0
0000214A                          3068                   
0000214A  123C 000D               3069                   MOVE.B #13, D1
0000214E                          3070                   
0000214E  E268                    3071                   LSR.W D1, D0
00002150                          3072                   
00002150  1C00                    3073                   MOVE.B D0, D6          * getting the mode of the first ea
00002152                          3074                   
00002152  4EB9 000023A2           3075                   JSR PRINT_EA
00002158                          3076                   
00002158  6000 EF96               3077                   BRA PARSE_MEMORY
0000215C                          3078  
0000215C                          3079  
0000215C                          3080  
0000215C                          3081  
0000215C                          3082  
0000215C                          3083  
0000215C                          3084  -------------------- end include --------------------
0000215C                          3085                  INCLUDE 'BCC.X68'
0000215C                          3086  
0000215C                          3087  
0000215C                          3088  BCC           
0000215C  4240                    3089                 CLR       D0              *Zero it
0000215E                          3090  
0000215E  3015                    3091                 MOVE.W      (A5),D0     *We'll play with it here
00002160                          3092                 
00002160  4241                    3093                 CLR       D1
00002162                          3094  
00002162                          3095                 
00002162  123C 0004               3096                 MOVE.B      #4, D1
00002166                          3097                 
00002166  E368                    3098                 LSL.W       D1, D0
00002168                          3099  
00002168  123C 000C               3100                 MOVE.B      #12,D1       *Shift 12 bits to the right  
0000216C                          3101  
0000216C  E268                    3102                 LSR.W       D1,D0           *Move the bi
0000216E                          3103                 
0000216E  B03C 0004               3104                 CMP.B       #%0100, D0
00002172                          3105                 
00002172  6700 001A               3106                 BEQ         CC
00002176                          3107                 
00002176  B03C 000E               3108                 CMP.B       #%1110, D0
0000217A                          3109                 
0000217A  6700 003A               3110                 BEQ         GT
0000217E                          3111                 
0000217E  B03C 000F               3112                 CMP.B       #%1111, D0
00002182                          3113                 
00002182  6700 0036               3114                 BEQ         LE
00002186                          3115                 
00002186                          3116  
00002186                          3117                      
00002186                          3118  
00002186  6000 0036               3119  HI             BRA         PRINT_BHI 
0000218A                          3120  
0000218A  6000 0042               3121  LS             BRA         PRINT_BLS  
0000218E                          3122  
0000218E  6000 004E               3123  CC             BRA         PRINT_BCC
00002192                          3124  
00002192  6000 005A               3125  CS             BRA         PRINT_BCS 
00002196                          3126  
00002196  6000 0066               3127  NE             BRA         PRINT_BNE 
0000219A                          3128  
0000219A  6000 0072               3129  EQ             BRA         PRINT_BEQ
0000219E                          3130  
0000219E  6000 007E               3131  VC             BRA         PRINT_BVC
000021A2                          3132  
000021A2  6000 008A               3133  VS             BRA         PRINT_BVS
000021A6                          3134  
000021A6  6000 0096               3135  PL             BRA         PRINT_BPL
000021AA                          3136  
000021AA  6000 00A2               3137  MI             BRA         PRINT_BMI 
000021AE                          3138  
000021AE  6000 00AE               3139  GE             BRA         PRINT_BGE 
000021B2                          3140  
000021B2  6000 00BA               3141  LT             BRA         PRINT_BLT
000021B6                          3142  
000021B6  6000 00C6               3143  GT             BRA         PRINT_BGT      
000021BA                          3144  
000021BA  6000 00D2               3145  LE             BRA         PRINT_BLE 
000021BE                          3146  
000021BE                          3147  
000021BE                          3148  PRINT_BHI      
000021BE  43F9 0000271F           3149                 LEA BHI_MESSAGE, A1
000021C4                          3150            
000021C4  103C 000E               3151                 MOVE.B #14, D0
000021C8                          3152                   
000021C8  4E4F                    3153                 TRAP #15    
000021CA                          3154                 
000021CA  6000 00CE               3155                 BRA DISPLACEMENT
000021CE                          3156                 
000021CE                          3157  PRINT_BLS
000021CE  43F9 00002727           3158                 LEA BLS_MESSAGE, A1
000021D4                          3159                   
000021D4  103C 000E               3160                 MOVE.B #14, D0
000021D8                          3161                   
000021D8  4E4F                    3162                 TRAP #15
000021DA                          3163                 
000021DA  6000 00BE               3164                 BRA DISPLACEMENT
000021DE                          3165  PRINT_BCC
000021DE  43F9 00002707           3166                 LEA BCC_MESSAGE, A1
000021E4                          3167                   
000021E4  103C 000E               3168                 MOVE.B #14, D0
000021E8                          3169                   
000021E8  4E4F                    3170                 TRAP #15
000021EA                          3171                 
000021EA  6000 00AE               3172                 BRA DISPLACEMENT
000021EE                          3173  PRINT_BCS
000021EE  43F9 00002713           3174                 LEA BCS_MESSAGE, A1
000021F4                          3175                   
000021F4  103C 000E               3176                 MOVE.B #14, D0
000021F8                          3177                   
000021F8  4E4F                    3178                 TRAP #15
000021FA                          3179                 
000021FA  6000 009E               3180                 BRA DISPLACEMENT
000021FE                          3181  PRINT_BNE
000021FE  43F9 0000270F           3182                 LEA BNE_MESSAGE, A1
00002204                          3183                   
00002204  103C 000E               3184                 MOVE.B #14, D0
00002208                          3185                   
00002208  4E4F                    3186                 TRAP #15
0000220A                          3187                 
0000220A  6000 008E               3188                 BRA DISPLACEMENT
0000220E                          3189  PRINT_BEQ
0000220E  43F9 0000270B           3190                 LEA BEQ_MESSAGE, A1
00002214                          3191                   
00002214  103C 000E               3192                 MOVE.B #14, D0
00002218                          3193                   
00002218  4E4F                    3194                 TRAP #15
0000221A                          3195                 
0000221A  6000 007E               3196                 BRA DISPLACEMENT
0000221E                          3197  PRINT_BVC
0000221E  43F9 00002737           3198                 LEA BVC_MESSAGE, A1
00002224                          3199                   
00002224  103C 000E               3200                 MOVE.B #14, D0
00002228                          3201                   
00002228  4E4F                    3202                 TRAP #15     
0000222A                          3203                 
0000222A  6000 006E               3204                 BRA DISPLACEMENT
0000222E                          3205  PRINT_BVS
0000222E  43F9 0000273B           3206                 LEA BVS_MESSAGE, A1
00002234                          3207                   
00002234  103C 000E               3208                 MOVE.B #14, D0
00002238                          3209                   
00002238  4E4F                    3210                 TRAP #15
0000223A                          3211                 
0000223A  6000 005E               3212                 BRA DISPLACEMENT
0000223E                          3213  PRINT_BPL
0000223E  43F9 00002733           3214                 LEA BPL_MESSAGE, A1
00002244                          3215                   
00002244  103C 000E               3216                 MOVE.B #14, D0
00002248                          3217                   
00002248  4E4F                    3218                 TRAP #15
0000224A                          3219                 
0000224A  6000 004E               3220                 BRA DISPLACEMENT
0000224E                          3221  PRINT_BMI
0000224E  43F9 0000272F           3222                 LEA BMI_MESSAGE, A1
00002254                          3223                   
00002254  103C 000E               3224                 MOVE.B #14, D0
00002258                          3225                   
00002258  4E4F                    3226                 TRAP #15
0000225A                          3227                 
0000225A  6000 003E               3228                 BRA DISPLACEMENT
0000225E                          3229  PRINT_BGE
0000225E  43F9 00002717           3230                 LEA BGE_MESSAGE, A1
00002264                          3231                   
00002264  103C 000E               3232                 MOVE.B #14, D0
00002268                          3233                   
00002268  4E4F                    3234                 TRAP #15
0000226A                          3235                 
0000226A  6000 002E               3236                 BRA DISPLACEMENT
0000226E                          3237  PRINT_BLT
0000226E  43F9 0000272B           3238                 LEA BLT_MESSAGE, A1
00002274                          3239                   
00002274  103C 000E               3240                 MOVE.B #14, D0
00002278                          3241                   
00002278  4E4F                    3242                 TRAP #15
0000227A                          3243                 
0000227A  6000 001E               3244                 BRA DISPLACEMENT
0000227E                          3245  PRINT_BGT
0000227E  43F9 0000271B           3246                 LEA BGT_MESSAGE, A1
00002284                          3247                   
00002284  103C 000E               3248                 MOVE.B #14, D0
00002288                          3249                   
00002288  4E4F                    3250                 TRAP #15
0000228A                          3251                 
0000228A  6000 000E               3252                 BRA DISPLACEMENT
0000228E                          3253  PRINT_BLE
0000228E  43F9 00002723           3254                 LEA BLE_MESSAGE, A1
00002294                          3255                   
00002294  103C 000E               3256                 MOVE.B #14, D0
00002298                          3257                   
00002298  4E4F                    3258                 TRAP #15
0000229A                          3259                 
0000229A                          3260  DISPLACEMENT   
0000229A                          3261  
0000229A  43F9 000027A0           3262                 LEA     SPACE, A1
000022A0                          3263  
000022A0  103C 000E               3264                 MOVE.B #14, D0
000022A4                          3265  
000022A4  4E4F                    3266                 TRAP #15 
000022A6                          3267  
000022A6  43F9 0000279A           3268                 LEA     POUND_SIGN, A1
000022AC                          3269              
000022AC  103C 000E               3270                 MOVE.B  #14, D0
000022B0                          3271              
000022B0  4E4F                    3272                 TRAP #15
000022B2                          3273              
000022B2  43F9 0000279C           3274                 LEA     HEX_SIGN, A1
000022B8                          3275              
000022B8  4E4F                    3276                 TRAP #15
000022BA                          3277  
000022BA  4280                    3278                 CLR.L       D0              *Zero it
000022BC                          3279  
000022BC  3015                    3280                 MOVE.W      (A5),D0     *We'll play with it here
000022BE                          3281                 
000022BE  123C 0008               3282                 MOVE.B      #8, D1
000022C2                          3283                 
000022C2  E368                    3284                 LSL.W       D1, D0
000022C4                          3285  
000022C4  123C 0008               3286                 MOVE.B      #8,D1       *Shift 12 bits to the right  
000022C8                          3287  
000022C8  E268                    3288                 LSR.W       D1,D0           *Move the bits
000022CA                          3289                 
000022CA                          3290                 *chk the D0 for 8, 16, or 32 but displacement
000022CA                          3291                  
000022CA  B03C 0000               3292                 CMP.B  #$00, D0
000022CE                          3293  
000022CE  6700 0018               3294                 BEQ  a_16_BIT 
000022D2                          3295  
000022D2  B03C 00FF               3296                 CMP.B #$FF, D0   
000022D6                          3297  
000022D6  6700 001E               3298                 BEQ  a_32_BIT
000022DA                          3299                  
000022DA                          3300                  *else 
000022DA                          3301                  
000022DA  4285                    3302                 CLR.L D5
000022DC                          3303                 
000022DC  3A00                    3304                 MOVE.W D0, D5      
000022DE                          3305          
000022DE  4EB9 00002304           3306                 JSR  HEX_TO_ASCII
000022E4                          3307                 
000022E4  4EF8 10F0               3308                 JMP PARSE_MEMORY
000022E8                          3309                            
000022E8                          3310  a_16_BIT
000022E8  4285                    3311          CLR.L  D5
000022EA                          3312          
000022EA  3A1E                    3313          MOVE.W (A6)+, D5
000022EC                          3314          
000022EC  4EB9 00002304           3315          JSR  HEX_TO_ASCII
000022F2                          3316          
000022F2  4EF8 10F0               3317          JMP PARSE_MEMORY
000022F6                          3318  a_32_BIT
000022F6                          3319  
000022F6  4285                    3320          CLR.L  D5
000022F8                          3321          
000022F8  2A1E                    3322          MOVE.L (A6)+, D5
000022FA                          3323          
000022FA  4EB9 00002304           3324          JSR  HEX_TO_ASCII
00002300                          3325          
00002300  4EF8 10F0               3326          JMP PARSE_MEMORY
00002304                          3327            
00002304                          3328  
00002304                          3329  
00002304                          3330  
00002304                          3331  
00002304                          3332  
00002304                          3333  
00002304                          3334  
00002304                          3335  
00002304                          3336  
00002304                          3337  
00002304                          3338  
00002304                          3339  -------------------- end include --------------------
00002304                          3340                  INCLUDE 'HEX_TO_ASCII_V1.X68'
00002304                          3341      *ORG    $5000
00002304                          3342  
00002304                          3343  
00002304                          3344  HEX_TO_ASCII      
00002304  4283                    3345       CLR.L      D3
00002306                          3346       
00002306  BABC 00000000           3347       CMP.L       #0, D5
0000230C                          3348       
0000230C  6700 0086               3349       BEQ         PRINT_ZERO
00002310                          3350      
00002310                          3351       *MOVE.L     #$ABCDEF, D5
00002310                          3352       
00002310                          3353  LOOP     
00002310  2C05                    3354       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
00002312                          3355       
00002312  4282                    3356       CLR.L      D2
00002314                          3357       
00002314  143C 001C               3358       MOVE.B     #28, D2
00002318                          3359  
00002318  E4AE                    3360       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
0000231A                          3361       
0000231A  BC3C 000A               3362       CMP.B      #10, D6
0000231E                          3363       
0000231E  6C00 0006               3364       BGE        LETTER_1                  * determine if a letter or a number
00002322                          3365       
00002322  6000 000C               3366       BRA        NUMBER_1
00002326                          3367       
00002326                          3368  LETTER_1
00002326  0606 0037               3369       ADD.B      #55, D6
0000232A                          3370       
0000232A  1206                    3371       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
0000232C                          3372       
0000232C  6000 000C               3373       BRA        PRINTOUT_NIBBLE
00002330                          3374  
00002330                          3375  NUMBER_1     
00002330  0606 0030               3376       ADD.B      #48, D6
00002334                          3377       
00002334  1206                    3378       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00002336                          3379       
00002336  6000 0002               3380       BRA        PRINTOUT_NIBBLE
0000233A                          3381  
0000233A                          3382  
0000233A                          3383  PRINTOUT_NIBBLE
0000233A  E98D                    3384      LSL.L      #4, D5                   * shift out the nibble you just read from the source
0000233C                          3385      
0000233C  5203                    3386      ADD.B      #1, D3
0000233E                          3387      
0000233E  BC3C 0030               3388      CMP.B      #$30, D6
00002342                          3389  
00002342  67CC                    3390      BEQ        LOOP             
00002344                          3391      
00002344  103C 0006               3392      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
00002348                          3393      
00002348  4E4F                    3394      TRAP #15
0000234A                          3395       
0000234A  B63C 0008               3396      CMP.B      #8, D3                   * compare to the counter to check if you are done
0000234E                          3397       
0000234E  6700 023E               3398      BEQ        DONE
00002352                          3399          
00002352  6000 0002               3400      BRA LOOP_ZERO                            * continue the loop and print next nibble
00002356                          3401      
00002356                          3402      
00002356                          3403  LOOP_ZERO    
00002356  2C05                    3404       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
00002358                          3405       
00002358  4282                    3406       CLR.L      D2
0000235A                          3407       
0000235A  143C 001C               3408       MOVE.B     #28, D2
0000235E                          3409  
0000235E  E4AE                    3410       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
00002360                          3411       
00002360  BC3C 000A               3412       CMP.B      #10, D6
00002364                          3413       
00002364  6C00 0006               3414       BGE        LETTER_1_ZERO                  * determine if a letter or a number
00002368                          3415       
00002368  6000 000C               3416       BRA        NUMBER_1_ZERO
0000236C                          3417       
0000236C                          3418  LETTER_1_ZERO
0000236C  0606 0037               3419       ADD.B      #55, D6
00002370                          3420       
00002370  1206                    3421       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00002372                          3422       
00002372  6000 000C               3423       BRA        PRINTOUT_NIBBLE_ZERO
00002376                          3424  
00002376                          3425  NUMBER_1_ZERO    
00002376  0606 0030               3426       ADD.B      #48, D6
0000237A                          3427       
0000237A  1206                    3428       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
0000237C                          3429       
0000237C  6000 0002               3430       BRA        PRINTOUT_NIBBLE_ZERO
00002380                          3431  
00002380                          3432  
00002380                          3433  PRINTOUT_NIBBLE_ZERO
00002380  E98D                    3434      LSL.L      #4, D5                   * shift out the nibble you just read from the source
00002382                          3435      
00002382  5203                    3436      ADD.B      #1, D3            
00002384                          3437      
00002384  103C 0006               3438      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
00002388                          3439      
00002388  4E4F                    3440      TRAP #15
0000238A                          3441       
0000238A  B63C 0008               3442      CMP.B      #8, D3                   * compare to the counter to check if you are done
0000238E                          3443       
0000238E  6700 01FE               3444      BEQ        DONE
00002392                          3445      
00002392  60C2                    3446      BRA LOOP_ZERO                            * continue the loop and print next nibble
00002394                          3447          
00002394                          3448  
00002394                          3449       
00002394                          3450  PRINT_ZERO
00002394  123C 0030               3451      MOVE.B      #$30, D1
00002398                          3452  
00002398  103C 0006               3453      MOVE.B      #6, D0  
0000239C                          3454  
0000239C  4E4F                    3455      TRAP #15 
0000239E                          3456  
0000239E  6000 01EE               3457      BRA DONE  
000023A2                          3458  
000023A2                          3459  
000023A2                          3460      *SIMHALT             ; halt simulator
000023A2                          3461  
000023A2                          3462  
000023A2                          3463      *END    START       ; last line of source
000023A2                          3464  -------------------- end include --------------------
000023A2                          3465                  INCLUDE 'JUMPTABLE-EA.X68'
000023A2                          3466   *ORG     $400
000023A2                          3467  
000023A2                          3468  
000023A2                          3469  
000023A2                          3470  
000023A2                          3471  
000023A2                          3472                 *MOVE.B       #%00, D5         *SIZE
000023A2                          3473                
000023A2                          3474                 *MOVE.B       #%111,D6         *MODE
000023A2                          3475                 
000023A2                          3476                 *MOVE.B       #%100,D7         *REGISTER
000023A2                          3477                 
000023A2                          3478                 *MOVE.L       #$4000, A5
000023A2                          3479  
000023A2                          3480                 *MOVE.B       #$0040, (A5)  
000023A2                          3481  PRINT_EA 
000023A2                          3482                 
000023A2  41F9 000023B0           3483                 LEA     jmp_table_ea,A0      *Index into the table
000023A8                          3484  
000023A8  CCFC 0006               3485                 MULU        #6,D6            *Form offset     
000023AC                          3486  
000023AC  4EF0 6000               3487                 JMP         0(A0,D6)         *Jump indirect with index
000023B0                          3488   
000023B0  4EF9 000023E0           3489  jmp_table_ea   JMP         code000
000023B6                          3490  
000023B6  4EF9 000023E4           3491                 JMP         code001
000023BC                          3492  
000023BC  4EF9 000023E8           3493                 JMP         code010
000023C2                          3494  
000023C2  4EF9 000023EC           3495                 JMP         code011
000023C8                          3496  
000023C8  4EF9 000023F0           3497                 JMP         code100
000023CE                          3498  
000023CE  4EF9 000023F4           3499                 JMP         code101
000023D4                          3500  
000023D4  4EF9 000023F8           3501                 JMP         code110
000023DA                          3502  
000023DA  4EF9 000023FC           3503                 JMP         code111
000023E0                          3504          
000023E0                          3505  
000023E0                          3506   
000023E0                          3507  
000023E0                          3508  
000023E0                          3509   
000023E0                          3510  
000023E0                          3511   
000023E0                          3512  
000023E0  6000 001E               3513  code000       BRA         DATA_REGISTER
000023E4                          3514  
000023E4  6000 0036               3515  code001       BRA         ADDRESS_REGISTER
000023E8                          3516  
000023E8  6000 004E               3517  code010       BRA         INDIRECT_ADDRESS
000023EC                          3518  
000023EC  6000 0074               3519  code011       BRA         ADDRESS_PI    * post increment
000023F0                          3520  
000023F0  6000 009A               3521  code100       BRA         ADDRESS_PD    * pre decrement
000023F4                          3522  
000023F4  6000 00C0               3523  code101       BRA         ADDRESS_W_DISPLACEMENT
000023F8                          3524  
000023F8  6000 00C0               3525  code110       BRA         ADDRESS_W_INDEX
000023FC                          3526  
000023FC  6000 00C0               3527  code111       BRA         GROUP_111
00002400                          3528  
00002400                          3529   
00002400                          3530  DATA_REGISTER
00002400                          3531  
00002400  43F9 000027A5           3532              LEA D_REGISTER, A1
00002406                          3533              
00002406  4280                    3534              CLR.L D0
00002408                          3535              
00002408  103C 000E               3536              MOVE.B #14, D0
0000240C                          3537              
0000240C  4E4F                    3538              TRAP #15                * print out 'D' for data register
0000240E                          3539              
0000240E  4281                    3540              CLR.L D1
00002410                          3541              
00002410  1207                    3542              MOVE.B D7, D1
00002412                          3543              
00002412  103C 0003               3544              MOVE.B #3, D0           * print out the number in the register
00002416                          3545              
00002416  4E4F                    3546              TRAP #15
00002418                          3547              
00002418  6000 0174               3548              BRA DONE
0000241C                          3549              
0000241C                          3550  
0000241C                          3551  ADDRESS_REGISTER
0000241C  43F9 000027A7           3552              LEA A_REGISTER, A1
00002422                          3553              
00002422  4280                    3554              CLR.L D0
00002424                          3555              
00002424  103C 000E               3556              MOVE.B #14, D0          * print out the 'A' for address register
00002428                          3557              
00002428  4E4F                    3558              TRAP #15
0000242A                          3559              
0000242A  4281                    3560              CLR.L D1
0000242C                          3561              
0000242C  1207                    3562              MOVE.B D7, D1
0000242E                          3563              
0000242E  103C 0003               3564              MOVE.B #3, D0
00002432                          3565              
00002432  4E4F                    3566              TRAP #15                * print out the value in the data register
00002434                          3567  
00002434  6000 0158               3568              BRA DONE
00002438                          3569              
00002438                          3570  INDIRECT_ADDRESS
00002438  43F9 000027A9           3571              LEA IA_START, A1
0000243E                          3572              
0000243E  4280                    3573              CLR.L D0
00002440                          3574              
00002440  103C 000E               3575              MOVE.B #14, D0          * print out the '(A' for start of indirect address register
00002444                          3576              
00002444  4E4F                    3577              TRAP #15
00002446                          3578              
00002446  4281                    3579              CLR.L D1
00002448                          3580              
00002448  1207                    3581              MOVE.B D7, D1
0000244A                          3582              
0000244A  103C 0003               3583              MOVE.B #3, D0
0000244E                          3584              
0000244E  4E4F                    3585              TRAP #15                * print out the value in the data register
00002450                          3586              
00002450  43F9 000027AC           3587              LEA IA_END, A1
00002456                          3588  
00002456  4280                    3589              CLR.L D0
00002458                          3590              
00002458  103C 000E               3591              MOVE.B #14, D0          * print out the ')' for end of post increment address register
0000245C                          3592              
0000245C  4E4F                    3593              TRAP #15
0000245E                          3594              
0000245E  6000 012E               3595              BRA DONE
00002462                          3596  
00002462                          3597  ADDRESS_PI
00002462  43F9 000027AE           3598              LEA A_PI_START, A1
00002468                          3599              
00002468  4280                    3600              CLR.L D0
0000246A                          3601              
0000246A  103C 000E               3602              MOVE.B #14, D0          * print out the '(A' for start of post increment address register
0000246E                          3603              
0000246E  4E4F                    3604              TRAP #15
00002470                          3605              
00002470  4281                    3606              CLR.L D1
00002472                          3607              
00002472  1207                    3608              MOVE.B D7, D1
00002474                          3609              
00002474  103C 0003               3610              MOVE.B #3, D0
00002478                          3611              
00002478  4E4F                    3612              TRAP #15                * print out the value in the data register
0000247A                          3613              
0000247A  43F9 000027B1           3614              LEA A_PI_END, A1
00002480                          3615  
00002480  4280                    3616              CLR.L D0
00002482                          3617              
00002482  103C 000E               3618              MOVE.B #14, D0          * print out the ')+' for end of post increment address register
00002486                          3619     
00002486  4E4F                    3620              TRAP #15
00002488                          3621              
00002488  6000 0104               3622              BRA DONE  
0000248C                          3623         
0000248C                          3624  ADDRESS_PD
0000248C                          3625  
0000248C  43F9 000027B4           3626              LEA A_PD_START, A1
00002492                          3627              
00002492  4280                    3628              CLR.L D0
00002494                          3629              
00002494  103C 000E               3630              MOVE.B #14, D0          * print out the '-(A' for start of pre decrement address register
00002498                          3631              
00002498  4E4F                    3632              TRAP #15
0000249A                          3633              
0000249A  4281                    3634              CLR.L D1
0000249C                          3635              
0000249C  1207                    3636              MOVE.B D7, D1
0000249E                          3637              
0000249E  103C 0003               3638              MOVE.B #3, D0
000024A2                          3639              
000024A2  4E4F                    3640              TRAP #15                * print out the value in the data register
000024A4                          3641              
000024A4  43F9 000027B8           3642              LEA A_PD_END, A1
000024AA                          3643  
000024AA  4280                    3644              CLR.L D0
000024AC                          3645              
000024AC  103C 000E               3646              MOVE.B #14, D0          * print out the ')-' for end of pre decrement
000024B0                          3647  
000024B0  4E4F                    3648              TRAP #15
000024B2                          3649              
000024B2  6000 00DA               3650              BRA DONE
000024B6                          3651              
000024B6                          3652  ADDRESS_W_DISPLACEMENT
000024B6  6000 00D6               3653              BRA DONE
000024BA                          3654  
000024BA                          3655  ADDRESS_W_INDEX
000024BA  6000 00D2               3656              BRA DONE
000024BE                          3657  
000024BE                          3658  GROUP_111
000024BE                          3659  
000024BE  41F9 000024CC           3660                 LEA         jmp_table_ea_111,A0    *Index into the table
000024C4                          3661  
000024C4  CEFC 0006               3662                 MULU        #6,D7       *Form offset     
000024C8                          3663  
000024C8  4EF0 7000               3664                 JMP         0(A0,D7)   *Jump indirect with index
000024CC                          3665                 
000024CC                          3666  jmp_table_ea_111   
000024CC  4EF9 000024F2           3667                 JMP         reg000
000024D2                          3668  
000024D2  4EF9 000024F6           3669                 JMP         reg001
000024D8                          3670  
000024D8  4EF9 000024EA           3671                 JMP         reg010
000024DE                          3672  
000024DE  4EF9 000024EE           3673                 JMP         reg011
000024E4                          3674  
000024E4  4EF9 000024FA           3675                 JMP         reg100
000024EA                          3676          
000024EA                          3677  
000024EA  6000 0012               3678  reg010       BRA         PC_W_DISPLACEMENT
000024EE                          3679  
000024EE  6000 0012               3680  reg011       BRA         PC_W_INDEX
000024F2                          3681  
000024F2  6000 0012               3682  reg000       BRA         ABSOLUTE_SHORT
000024F6                          3683  
000024F6  6000 002C               3684  reg001       BRA         ABSOLUTE_LONG
000024FA                          3685  
000024FA  6000 0046               3686  reg100       BRA         IMMEDIATE
000024FE                          3687  
000024FE                          3688  
000024FE                          3689  PC_W_DISPLACEMENT
000024FE  6000 008E               3690              BRA DONE
00002502                          3691  
00002502                          3692  PC_W_INDEX
00002502  6000 008A               3693              BRA DONE
00002506                          3694  
00002506                          3695  ABSOLUTE_SHORT
00002506  43F9 0000279C           3696              LEA         HEX_SIGN, A1
0000250C                          3697              
0000250C  103C 000E               3698              MOVE.B      #14, D0
00002510                          3699              
00002510  4E4F                    3700              TRAP #15
00002512                          3701              
00002512  4281                    3702              CLR.L       D1
00002514                          3703              
00002514  321E                    3704              MOVE.W      (A6)+, D1
00002516                          3705              
00002516  103C 000F               3706              MOVE.B      #15, D0
0000251A                          3707              
0000251A  143C 0010               3708              MOVE.B      #16, D2
0000251E                          3709              
0000251E  4E4F                    3710              TRAP #15
00002520                          3711              
00002520  6000 006C               3712              BRA DONE  
00002524                          3713  
00002524                          3714  
00002524                          3715  ABSOLUTE_LONG
00002524  43F9 0000279C           3716              LEA         HEX_SIGN, A1
0000252A                          3717              
0000252A  103C 000E               3718              MOVE.B      #14, D0
0000252E                          3719              
0000252E  4E4F                    3720              TRAP #15
00002530                          3721              
00002530  4281                    3722              CLR.L       D1
00002532                          3723              
00002532  221E                    3724              MOVE.L      (A6)+, D1
00002534                          3725              
00002534  103C 000F               3726              MOVE.B      #15, D0
00002538                          3727              
00002538  143C 0010               3728              MOVE.B      #16, D2
0000253C                          3729              
0000253C  4E4F                    3730              TRAP #15
0000253E                          3731                          
0000253E  6000 004E               3732              BRA DONE  
00002542                          3733  
00002542                          3734  
00002542                          3735  IMMEDIATE
00002542  43F9 0000279A           3736              LEA     POUND_SIGN, A1
00002548                          3737              
00002548  103C 000E               3738              MOVE.B  #14, D0
0000254C                          3739              
0000254C  4E4F                    3740              TRAP #15
0000254E                          3741              
0000254E  43F9 0000279C           3742              LEA     HEX_SIGN, A1
00002554                          3743              
00002554  4E4F                    3744              TRAP #15
00002556                          3745              
00002556  BA3C 0000               3746              CMP.B   #%00, D5
0000255A                          3747              
0000255A  6700 000E               3748              BEQ     IMMEDIATE_B
0000255E                          3749              
0000255E  BA3C 0001               3750              CMP.B   #%01, D5
00002562                          3751              
00002562  6700 0012               3752              BEQ     IMMEDIATE_W
00002566                          3753              
00002566  6000 001A               3754              BRA     IMMEDIATE_L
0000256A                          3755              
0000256A                          3756  IMMEDIATE_B
0000256A  4285                    3757              CLR.L       D5
0000256C                          3758     
0000256C  3A1E                    3759              MOVE.W      (A6)+, D5
0000256E                          3760              
0000256E  4EB8 2304               3761              JSR         HEX_TO_ASCII
00002572                          3762              
00002572  6000 001A               3763              BRA DONE
00002576                          3764  
00002576                          3765  IMMEDIATE_W
00002576  4285                    3766              CLR.L       D5
00002578                          3767  
00002578  3A1E                    3768              MOVE.W      (A6)+, D5
0000257A                          3769              
0000257A  4EB8 2304               3770              JSR         HEX_TO_ASCII
0000257E                          3771              
0000257E                          3772              *MOVE.B      #15, D0
0000257E                          3773              
0000257E                          3774              *MOVE.B      #16, D2
0000257E                          3775              
0000257E                          3776              *TRAP #15 
0000257E                          3777              
0000257E  6000 000E               3778              BRA DONE        
00002582                          3779  
00002582                          3780  IMMEDIATE_L 
00002582  4285                    3781              CLR.L       D5
00002584                          3782              
00002584  2A1E                    3783              MOVE.L      (A6)+, D5
00002586                          3784      
00002586  4EB8 2304               3785              JSR         HEX_TO_ASCII
0000258A                          3786              
0000258A  6000 0002               3787              BRA DONE
0000258E                          3788              
0000258E                          3789  DONE 
0000258E  4E75                    3790      RTS
00002590                          3791      
00002590                          3792   * INCLUDE 'MESSAGE_Data.X68'
00002590                          3793   * INCLUDE 'HEX_TO_ASCII_V1.X68'
00002590                          3794       
00002590                          3795          
00002590                          3796  
00002590                          3797  
00002590                          3798  
00002590                          3799  
00002590                          3800  
00002590                          3801  
00002590                          3802  
00002590                          3803  
00002590                          3804  -------------------- end include --------------------
00002590                          3805                  
00002590  4EF8 10F0               3806                  JMP      PARSE_MEMORY
00002594                          3807                  
00002594                          3808  PRESS_ENTER_CONTINUE
00002594  267C 00000000           3809                   MOVEA.L  #outputCountCurr, A3  *reset to 0
0000259A  43F9 00002681           3810                   LEA ENTER, A1
000025A0  103C 000E               3811                   MOVE.B #14, D0
000025A4  4E4F                    3812                   TRAP #15
000025A6                          3813                   
000025A6  103C 0005               3814                   MOVE.B #5, D0
000025AA  4E4F                    3815                   TRAP #15
000025AC                          3816                   
000025AC  B23C 000D               3817                   CMP.B #$D, D1
000025B0                          3818  
000025B0  103C 000B               3819                   MOVE.B #11, D0   *clear display
000025B4  323C FF00               3820                   MOVE.W #$FF00, D1
000025B8  4E4F                    3821                   TRAP #15
000025BA                          3822  
000025BA  4EF8 1114               3823                   JMP CONTINUE_PARSE
000025BE                          3824                  
000025BE                          3825  ASK_TO_CONTINUE
000025BE  43F9 000027BD           3826      LEA         ASK_TO_CONTINUE_M, A1
000025C4                          3827      
000025C4  103C 000E               3828      MOVE.B      #14, D0
000025C8                          3829  
000025C8  4E4F                    3830      TRAP #15
000025CA                          3831      
000025CA  3278 0100               3832      MOVEA.W     $100, A1
000025CE                          3833      
000025CE  103C 0002               3834      MOVE.B      #2, D0
000025D2                          3835  
000025D2  4E4F                    3836      TRAP #15
000025D4                          3837  
000025D4                          3838      * VALIDATE THE INPUT
000025D4                          3839  
000025D4  4240                    3840      CLR         D0
000025D6                          3841  
000025D6  1011                    3842      MOVE.B      (A1), D0  
000025D8                          3843  
000025D8  B03C 0059               3844      CMP.B       #$59, D0
000025DC                          3845  
000025DC  6700 001C               3846      BEQ         RESTART
000025E0                          3847  
000025E0  B03C 0079               3848      CMP.B       #$79, D0
000025E4                          3849  
000025E4  6700 0014               3850      BEQ         RESTART
000025E8                          3851  
000025E8  B03C 004E               3852      CMP.B       #$4E, D0
000025EC                          3853  
000025EC  6700 0010               3854      BEQ         STOP
000025F0                          3855  
000025F0  B03C 006E               3856      CMP.B       #$6E, D0
000025F4                          3857  
000025F4  6700 0008               3858      BEQ         STOP
000025F8                          3859  
000025F8  60C4                    3860      BRA         ASK_TO_CONTINUE   
000025FA                          3861      
000025FA                          3862  RESTART
000025FA  6000 EA04               3863      BRA         START_OF_PROGRAM   
000025FE                          3864  
000025FE                          3865                 
000025FE                          3866  STOP
000025FE                          3867  
000025FE  43F9 000027DC           3868      LEA         TERMINATED, A1
00002604                          3869      
00002604  103C 000E               3870      MOVE.B      #14, D0
00002608                          3871      
00002608  4E4F                    3872      TRAP #15
0000260A                          3873  
0000260A                          3874  
0000260A                          3875  
0000260A                          3876  
0000260A                          3877  
0000260A                          3878  
0000260A                          3879  
0000260A                          3880  
0000260A                          3881  
0000260A                          3882  
0000260A                          3883  
0000260A                          3884  
0000260A                          3885  
0000260A                          3886  
0000260A                          3887  
0000260A                          3888  
0000260A                          3889  
0000260A                          3890  
0000260A                          3891  
0000260A                          3892  
0000260A                          3893  
0000260A                          3894  
0000260A                          3895  
0000260A                          3896  
0000260A                          3897  
0000260A                          3898  
0000260A                          3899  
0000260A                          3900  
0000260A                          3901  
0000260A                          3902  -------------------- end include --------------------
0000260A                          3903  
0000260A  FFFF FFFF               3904      SIMHALT             ; halt simulator
0000260E                          3905  
0000260E                          3906      INCLUDE 'DS_Data.X68' * STARTING_ADDR ** ENDING_ADDR
0000260E                          3907  
0000260E                          3908  STARTING_ADDR   DS.L 1
00002612                          3909  
00002612                          3910  ENDING_ADDR     DS.L 1
00002612                          3911  -------------------- end include --------------------
00002616                          3912      INCLUDE 'MESSAGE_Data.X68' 
00002616                          3913  
00002616  =0000000D               3914  CR  EQU $0D
00002616  =0000000A               3915  LF  EQU $0A 
00002616                          3916  
00002616= 57 65 6C 63 6F 6D ...   3917  WELCOME_MESSAGE DC.B 'Welcome to our Team wild pokemon disassembly!!', CR, LF, 0
00002647= 45 6E 74 65 72 20 ...   3918  STARTING        DC.B 'Enter the starting location: ', 0
00002665= 45 6E 74 65 72 20 ...   3919  ENDING          DC.B 'Enter the ending locaiton: ', 0
00002681= 45 6E 74 65 72 20 ...   3920  ENTER           DC.B 'Enter to continue ', 0
00002694= 49 6E 76 61 6C 69 ...   3921  ERROR_MSG       DC.B 'Invalid Input, must be 8 characters, (0-9), (A-F), re-do ',CR, LF, 0
000026D0= 0D 0A 00                3922  CR_LF           DC.B '', CR, LF, 0
000026D3                          3923      
000026D3= 41 44 44 49 2E 00       3924  ADDI_MESSAGE    DC.B 'ADDI.',0
000026D9= 4D 4F 56 45 41 2E 00    3925  MOVEA_MESSAGE   DC.B 'MOVEA.',0
000026E0= 4D 4F 56 45 2E 00       3926  MOVE_MESSAGE    DC.B 'MOVE.',0
000026E6= 4E 4F 50 00             3927  NOP_MESSAGE     DC.B 'NOP',0
000026EA= 4D 4F 56 45 4D 2E 00    3928  MOVEM_MESSAGE   DC.B 'MOVEM.',0
000026F1= 4A 53 52 00             3929  JSR_MESSAGE     DC.B 'JSR',0
000026F5= 52 54 53 00             3930  RTS_MESSAGE     DC.B 'RTS',0
000026F9= 43 4C 52 00             3931  CLR_MESSAGE     DC.B 'CLR',0
000026FD= 41 44 44 51 2E 00       3932  ADDQ_MESSAGE    DC.B 'ADDQ.',0
00002703= 4C 45 41 00             3933  LEA_MESSAGE     DC.B 'LEA',0
00002707                          3934  
00002707                          3935  
00002707= 42 43 43 00             3936  BCC_MESSAGE     DC.B 'BCC',0   *//
0000270B= 42 45 51 00             3937  BEQ_MESSAGE     DC.B 'BEQ',0   *//
0000270F= 42 4E 45 00             3938  BNE_MESSAGE     DC.B 'BNE',0   *//
00002713= 42 43 53 00             3939  BCS_MESSAGE     DC.B 'BCS',0   *//
00002717= 42 47 45 00             3940  BGE_MESSAGE     DC.B 'BGE',0   *//
0000271B= 42 47 54 00             3941  BGT_MESSAGE     DC.B 'BGT',0   *//
0000271F= 42 48 49 00             3942  BHI_MESSAGE     DC.B 'BHI',0   *//
00002723= 42 4C 45 00             3943  BLE_MESSAGE     DC.B 'BLE',0   *//
00002727= 42 4C 53 00             3944  BLS_MESSAGE     DC.B 'BLS',0   *//
0000272B= 42 4C 54 00             3945  BLT_MESSAGE     DC.B 'BLT',0   *//
0000272F= 42 4D 49 00             3946  BMI_MESSAGE     DC.B 'BMI',0   *//
00002733= 42 50 4C 00             3947  BPL_MESSAGE     DC.B 'BPL',0   *//
00002737= 42 56 43 00             3948  BVC_MESSAGE     DC.B 'BVC',0   *//
0000273B= 42 56 53 00             3949  BVS_MESSAGE     DC.B 'BVS',0   *//
0000273F                          3950  
0000273F= 4D 4F 56 45 51 2E 00    3951  MOVEQ_MESSAGE   DC.B 'MOVEQ.',0
00002746= 44 49 56 55 2E 00       3952  DIVU_MESSAGE    DC.B 'DIVU.',0
0000274C= 4F 52 2E 00             3953  OR_MESSAGE      DC.B 'OR.',0
00002750= 53 55 42 2E 00          3954  SUB_MESSAGE     DC.B 'SUB.',0
00002755= 43 4D 50 2E 00          3955  CMP_MESSAGE     DC.B 'CMP.',0
0000275A= 4D 55 4C 53 2E 00       3956  MULS_MESSAGE    DC.B 'MULS.',0
00002760= 41 4E 44 2E 00          3957  AND_MESSAGE     DC.B 'AND.',0
00002765= 41 44 44 2E 00          3958  ADD_MESSAGE     DC.B 'ADD.',0
0000276A= 41 44 44 41 2E 00       3959  ADDA_MESSAGE    DC.B 'ADDA.',0
00002770= 4C 53 4C 00             3960  LSL_MESSAGE     DC.B 'LSL',0 *//
00002774= 41 53 4C 00             3961  ASL_MESSAGE     DC.B 'ASL',0
00002778= 52 4F 4C 00             3962  ROL_MESSAGE     DC.B 'ROL',0
0000277C= 4C 53 52 00             3963  LSR_MESSAGE     DC.B 'LSR',0 *//
00002780= 41 53 52 00             3964  ASR_MESSAGE     DC.B 'ASR',0
00002784= 52 4F 52 00             3965  ROR_MESSAGE     DC.B 'ROR',0
00002788= 42 20 20 20 20 00       3966  SIZE_B_PRINT    DC.B 'B    ',0
0000278E= 57 20 20 20 20 00       3967  SIZE_W_PRINT    DC.B 'W    ',0
00002794= 4C 20 20 20 20 00       3968  SIZE_L_PRINT    DC.B 'L    ',0
0000279A= 23 00                   3969  POUND_SIGN      DC.B '#',0
0000279C= 24 00                   3970  HEX_SIGN        DC.B '$',0
0000279E= 2E 00                   3971  PERIOD          DC.B '.',0
000027A0= 20 20 00                3972  SPACE           DC.B '  ',0
000027A3= 2F 00                   3973  SLASH           DC.B '/', 0
000027A5                          3974  
000027A5= 44 00                   3975  D_REGISTER      DC.B 'D',0
000027A7= 41 00                   3976  A_REGISTER      DC.B 'A',0
000027A9= 28 41 00                3977  IA_START        DC.B '(A',0
000027AC= 29 00                   3978  IA_END          DC.B ')',0
000027AE= 28 41 00                3979  A_PI_START      DC.B '(A',0
000027B1= 29 2B 00                3980  A_PI_END        DC.B ')+',0
000027B4= 2D 28 41 00             3981  A_PD_START      DC.B '-(A',0
000027B8= 29 00                   3982  A_PD_END        DC.B ')',0
000027BA= 2C 20 00                3983  COMMA           DC.B ', ',0
000027BD                          3984  
000027BD                          3985  
000027BD= 64 6F 20 79 6F 75 ...   3986  ASK_TO_CONTINUE_M     DC.B    'do you want to continue? (y/n)', 0
000027DC                          3987  
000027DC= 50 52 4F 47 52 41 ...   3988  TERMINATED          DC.B    'PROGRAM TERMINATED',0
000027EF                          3989  
000027EF                          3990  
000027EF                          3991  
000027EF                          3992  
000027EF                          3993  
000027EF                          3994  
000027EF                          3995  
000027EF                          3996  
000027EF                          3997  
000027EF                          3998  
000027EF                          3999  
000027EF                          4000  
000027EF                          4001  
000027EF                          4002  
000027EF                          4003  
000027EF                          4004  
000027EF                          4005  
000027EF                          4006  
000027EF                          4007  
000027EF                          4008  -------------------- end include --------------------
000027EF                          4009      *MOVE.B    #3, D2
000027EF                          4010      *MOVE.B    #0, D5
000027F0  307C 0400               4011      MOVEA.W   #$400, A0
000027F4                          4012      
000027F4                          4013      
000027F4                          4014      
000027F4                          4015  
000027F4                          4016      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_LONG       2524
ABSOLUTE_SHORT      2506
ADDA_CODE           11EA
ADDA_MESSAGE        276A
ADDI                1388
ADDI_B_SIZE         13F8
ADDI_EA             1458
ADDI_MESSAGE        26D3
ADDI_W_SIZE         1428
ADDQ                148E
ADDQB               14BC
ADDQL               14E8
ADDQW               14D2
ADDQ_MESSAGE        26FD
ADDRESS_PD          248C
ADDRESS_PI          2462
ADDRESS_REGISTER    241C
ADDRESS_W_DISPLACEMENT  24B6
ADDRESS_W_INDEX     24BA
ADD_ADDA            11D6
ADD_CODE            125E
ADD_FIRST_EA        12B2
ADD_MESSAGE         2765
AND_CODE            18AE
AND_FIRST_EA        18FA
AND_MESSAGE         2760
ASD                 1F0A
ASD_MEMORY          1F64
ASK_TO_CONTINUE     25BE
ASK_TO_CONTINUE_M   27BD
ASL                 1F20
ASL_MESSAGE         2774
ASR                 1F42
ASR_MESSAGE         2780
A_16_BIT            22E8
A_32_BIT            22F6
A_PD_END            27B8
A_PD_START          27B4
A_PI_END            27B1
A_PI_START          27AE
A_REGISTER          27A7
BCC                 215C
BCC_MESSAGE         2707
BCS_MESSAGE         2713
BEQ_MESSAGE         270B
BGE_MESSAGE         2717
BGT_MESSAGE         271B
BHI_MESSAGE         271F
BIT0                1C6C
BIT1                1C7C
BIT10               1D0C
BIT11               1D1C
BIT12               1D2C
BIT13               1D3C
BIT14               1D4C
BIT15               1D5C
BIT2                1C8C
BIT3                1C9C
BIT4                1CAC
BIT5                1CBC
BIT6                1CCC
BIT7                1CDC
BIT8                1CEC
BIT9                1CFC
BLE_MESSAGE         2723
BLS_MESSAGE         2727
BLT_MESSAGE         272B
BMI_MESSAGE         272F
BNE_MESSAGE         270F
BPL_MESSAGE         2733
BVC_MESSAGE         2737
BVS_MESSAGE         273B
CC                  218E
CHAR                10A0
CHECK               1BBE
CHECK_SECOND        1BD0
CLR_MESSAGE         26F9
CLR_OPCODE          16B8
CMP                 1560
CMP_MESSAGE         2755
CODE000             23E0
CODE0000            1196
CODE0001            119A
CODE001             23E4
CODE0010            119E
CODE0011            11A2
CODE010             23E8
CODE0100            11A6
CODE0101            11AA
CODE011             23EC
CODE0110            11AE
CODE0111            11B2
CODE100             23F0
CODE1000            11B6
CODE1001            11BA
CODE101             23F4
CODE1010            11BE
CODE1011            11C2
CODE110             23F8
CODE1100            11C6
CODE1101            11CA
CODE111             23FC
CODE1110            11CE
CODE1111            11D2
COMMA               27BA
CONTINUE_PARSE      1114
CONVERT_STRING      107E
CR                  D
CR_LF               26D0
CS                  2192
DATA_REGISTER       2400
DIRECTION_LEFT      1
DIRECTION_RIGHT     0
DISPLACEMENT        229A
DIVU_CODE           1764
DIVU_MESSAGE        2746
DIVU_OR             1752
DONE                258E
DONE_MOVEM_LOOP     1D6C
DONE_PRINTING       130A
DR_FIELD            1954
D_REGISTER          27A5
ENDCONV             10DA
ENDING              2665
ENDING_ADDR         2612
ENDING_MESSAGE      103C
ENTER               2681
EQ                  219A
ERROR               10CA
ERROR_MSG           2694
EXAMPLE             606
EXAMPLE1            DE61
FINISH_PRINTING_SIZE  1214
GE                  21AE
GET_DATA_REGISTER   134C
GET_SIZE_PURPLE     12DA
GO_THROUGH_MEMORY   10DC
GROUP_0100_CODE     1808
GROUP_111           24BE
GT                  21B6
HEX_SIGN            279C
HEX_TO_ASCII        2304
HI                  2186
IA_END              27AC
IA_START            27A9
IMMEDIATE           2542
IMMEDIATE_B         256A
IMMEDIATE_L         2582
IMMEDIATE_W         2576
INDIRECT_ADDRESS    2438
IS_USED             1BE4
IS_USED_FIRST       1BDA
JMP_TABLE           1136
JMP_TABLE_EA        23B0
JMP_TABLE_EA_111    24CC
JMP_TABLE_MOVEM     1C0C
JSR_MESSAGE         26F1
JSR_OPCODE          1682
LE                  21BA
LEA_MESSAGE         2703
LEA_OPCODE          1608
LETTER_1            2326
LETTER_1_ZERO       236C
LF                  A
LOOP                2310
LOOP_MOVEM          1BB6
LOOP_MOVEM_SECOND   1BC8
LOOP_ZERO           2356
LS                  218A
LSD                 1E3A
LSD_MEMORY          1E98
LSL                 1E54
LSL_MESSAGE         2770
LSR                 1E76
LSR_MESSAGE         277C
LT                  21B2
MAX_USER_INPUT      8
MEMORY_REGISTER     19C0
MEMORY_SHIFTS       1E0E
MI                  21AA
MODE_AL             7
MODE_AN             1
MODE_AS             7
MODE_AWD            5
MODE_AWI            6
MODE_DN             0
MODE_IAN            2
MODE_ID             7
MODE_M_DN           0
MODE_M_PDAN         1
MODE_PCWD           7
MODE_PCWI           7
MODE_PDAN           4
MODE_PIAN           3
MOVEAL              20EA
MOVEAW              20CC
MOVEA_MESSAGE       26D9
MOVEB               2046
MOVEL               2098
MOVEM_MESSAGE       26EA
MOVEM_OPCODE        191C
MOVEQ               1D6E
MOVEQ_MESSAGE       273F
MOVEW               2064
MOVE_MESSAGE        26E0
MULS_AND            186A
MULS_CODE           187C
MULS_MESSAGE        275A
NE                  2196
NEXT_INSTRUCTION    111C
NOP_MESSAGE         26E6
NOP_OPCODE          1662
NUMBER              1090
NUMBER_1            2330
NUMBER_1_ZERO       2376
OPPOSITE_BIT0       1AB6
OPPOSITE_BIT1       1AC6
OPPOSITE_BIT10      1B56
OPPOSITE_BIT11      1B66
OPPOSITE_BIT12      1B76
OPPOSITE_BIT13      1B86
OPPOSITE_BIT14      1B96
OPPOSITE_BIT15      1BA6
OPPOSITE_BIT2       1AD6
OPPOSITE_BIT3       1AE6
OPPOSITE_BIT4       1AF6
OPPOSITE_BIT5       1B06
OPPOSITE_BIT6       1B16
OPPOSITE_BIT7       1B26
OPPOSITE_BIT8       1B36
OPPOSITE_BIT9       1B46
OPPOSITE_CHECK      1A08
OPPOSITE_CHECK_SECOND  1A1A
OPPOSITE_IS_USED    1A2E
OPPOSITE_IS_USED_FIRST  1A24
OPPOSITE_JMP_TABLE_MOVEM  1A56
OPPOSITE_LOOP       19E0
OPPOSITE_LOOP_MOVEM  1A00
OPPOSITE_LOOP_MOVEM_SECOND  1A12
OPPOSITE_PRINT_REGISTER_MOVEM  1A44
OR_CODE             179A
OR_FIRST_EA         17E6
OR_MESSAGE          274C
OUTPUTCOUNTCURR     0
OUTPUTCOUNTMAX      1F
PARSE_MEMORY        10F0
PARSE_MEMORY_FIRST  10FE
PC_W_DISPLACEMENT   24FE
PC_W_INDEX          2502
PERIOD              279E
PL                  21A6
POUND_SIGN          279A
PRESS_ENTER_CONTINUE  2594
PRINTADDQ           14FE
PRINTOUT_COUNT      1F9C
PRINTOUT_MEMORY_SHIFTS_EA  2016
PRINTOUT_MOVE_EA    2108
PRINTOUT_NIBBLE     233A
PRINTOUT_NIBBLE_ZERO  2380
PRINTOUT_REGISTER   1FDE
PRINTOUT_REGISTER_SHIFTS_EA  1F6E
PRINTOUT_SIZE_L     124C
PRINTOUT_SIZE_PURPLE  12F2
PRINTOUT_SIZE_W     123A
PRINT_ADDRESS       199E
PRINT_B             130C
PRINT_BCC           21DE
PRINT_BCS           21EE
PRINT_BEQ           220E
PRINT_BGE           225E
PRINT_BGT           227E
PRINT_BHI           21BE
PRINT_BLE           228E
PRINT_BLS           21CE
PRINT_BLT           226E
PRINT_BMI           224E
PRINT_BNE           21FE
PRINT_BPL           223E
PRINT_BVC           221E
PRINT_BVS           222E
PRINT_COMMA         133C
PRINT_EA            23A2
PRINT_L             132C
PRINT_REGISTER_MOVEM  1BFA
PRINT_SIZE          16FC
PRINT_SIZE_L_MOVEM  1948
PRINT_W             131C
PRINT_ZERO          2394
REG000              24F2
REG001              24F6
REG010              24EA
REG011              24EE
REG100              24FA
REGITSET_MEMORY     1966
RESTART             25FA
ROD                 1EA2
ROD_MEMORY          1F00
ROL                 1EBC
ROL_MESSAGE         2778
ROR                 1EDE
ROR_MESSAGE         2784
RO_IMMEDATE         0
RO_REGISTER         1
RTS_MESSAGE         26F5
RTS_OPCODE          1672
SET_EA              135E
SHIFT               C
SHIFTS              1DD4
SIZE_B              1734
SIZE_BYTE           0
SIZE_B_PRINT        2788
SIZE_L              1748
SIZE_LONG           3
SIZE_L_PRINT        2794
SIZE_W              173E
SIZE_WORD           1
SIZE_W_PRINT        278E
SLASH               27A3
SPACE               27A0
START               1000
STARTING            2647
STARTING_ADDR       260E
STARTING_MESSAGE    100C
START_OF_PROGRAM    1000
STOP                25FE
STORE_ADDR          10B8
SUB                 1596
SUB_FIRST_EA        15E6
SUB_MESSAGE         2750
TERMINATED          27DC
VC                  219E
VS                  21A2
WELCOME_MESSAGE     2616
XN_AL               1
XN_AS               0
XN_ID               4
XN_PCWD             2
XN_PCWI             3
