00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/16 5:23:16 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Dissassembler Integration
00000000                             3  * Written by : Samuel Williams
00000000                             4  * Date       : 5/25/2016
00000000                             5  * Description: The file which includes all files
00000000                             6  *              to create a complete dissassembler 
00000000                             7  *-----------------------------------------------------------
00001000                             8      ORG    $1000
00001000                             9  START:                  ; first instruction of program
00001000                            10      
00001000                            11      *INCLUDE 'TEST_CODE_DAMIAN.X68'
00001000                            12      INCLUDE 'EQU_Data.X68'
00001000                            13  
00001000                            14  
00001000  =00000008                 15  MAX_USER_INPUT  EQU 8 
00001000                            16  
00001000                            17  
00001000  =00000606                 18  example          EQU     %0000011000000110
00001000                            19  
00001000  =0000DE61                 20  example1         EQU     %1101111001100001    * I made up bits 0 to 11      
00001000                            21  
00001000  =0000000C                 22  shift            EQU     12                   * Shift 12 bits 
00001000                            23  
00001000  =00000000                 24  mode_dn          EQU     %000
00001000                            25  
00001000  =00000001                 26  mode_an          EQU     %001
00001000                            27  
00001000  =00000002                 28  mode_ian         EQU     %010
00001000                            29  
00001000  =00000003                 30  mode_pian        EQU     %011
00001000                            31  
00001000  =00000004                 32  mode_pdan        EQU     %100
00001000                            33  
00001000  =00000005                 34  mode_awd         EQU     %101
00001000                            35  
00001000  =00000006                 36  mode_awi         EQU     %110
00001000                            37  
00001000  =00000007                 38  mode_pcwd        EQU     %111
00001000                            39  
00001000  =00000002                 40  xn_pcwd          EQU     %010
00001000                            41  
00001000  =00000007                 42  mode_pcwi        EQU     %111
00001000                            43  
00001000  =00000003                 44  xn_pcwi          EQU     %011
00001000                            45  
00001000  =00000007                 46  mode_as          EQU     %111
00001000                            47  
00001000  =00000000                 48  xn_as            EQU     %000
00001000                            49  
00001000  =00000007                 50  mode_al          EQU     %111
00001000                            51  
00001000  =00000001                 52  xn_al            EQU     %001
00001000                            53  
00001000  =00000007                 54  mode_id          EQU     %111
00001000                            55  
00001000  =00000004                 56  xn_id            EQU     %100
00001000                            57  
00001000  =00000000                 58  size_byte        EQU     %00
00001000                            59  
00001000  =00000001                 60  size_word        EQU     %01
00001000                            61  
00001000  =00000003                 62  size_long        EQU     %11
00001000                            63  
00001000  =00000000                 64  direction_right  EQU     %0
00001000                            65  
00001000  =00000001                 66  direction_left   EQU     %1
00001000                            67  
00001000  =00000000                 68  ro_immedate      EQU     %0
00001000                            69  
00001000  =00000001                 70  ro_register      EQU     %1
00001000                            71  
00001000  =00000000                 72  mode_m_dn        EQU     %0
00001000                            73  
00001000  =00000001                 74  mode_m_pdan      EQU     %1
00001000                            75  
00001000  =0000001F                 76  outputCountMax   EQU     31
00001000                            77  
00001000  =00000000                 78  outputCountCurr  EQU     0
00001000                            79            
00001000  =0000000D                 80  CR  EQU $0D
00001000                            81  
00001000  =0000000A                 82  LF  EQU $0A
00001000                            83  
00001000                            84  
00001000                            85  
00001000                            86  
00001000                            87  
00001000                            88  
00001000                            89  -------------------- end include --------------------
00001000                            90      INCLUDE 'INPUT.X68'
00001000                            91      * I/O 
00001000                            92      
00001000                            93      * Welcome message
00001000  43F9 00002524             94          LEA WELCOME_MESSAGE, A1
00001006  103C 000E                 95          MOVE.B #14, D0
0000100A  4E4F                      96          TRAP #15
0000100C                            97          
0000100C                            98  STARTING_MESSAGE    
0000100C                            99      * Printing out the Starting address message
0000100C  43F9 00002555            100          LEA STARTING, A1
00001012  103C 000E                101          MOVE.B #14, D0
00001016  4E4F                     102          TRAP #15
00001018                           103      
00001018                           104      * Code for input
00001018  227C 00000200            105          MOVEA.L #$200, A1 *we have to change this addr later
0000101E  103C 0002                106          MOVE.B #2, D0
00001022  4E4F                     107          TRAP #15
00001024  143C 0008                108          MOVE.B #MAX_USER_INPUT, D2
00001028                           109      
00001028                           110      * JSR to convert string function
00001028  4EB9 0000107E            111          JSR CONVERT_STRING   
0000102E                           112      * check if the address is even number
0000102E  E25C                     113          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001030  65DA                     114          BCS STARTING_MESSAGE   *if carry is set then the user typed in an odd address
00001032  E35C                     115          ROL #1, D4     *PUT D4 BACK
00001034                           116         
00001034                           117      * store hex value of inputted string 
00001034  23C4 0000251C            118          MOVE.L D4, STARTING_ADDR 
0000103A                           119      * reset the D4
0000103A  4284                     120          CLR.L  D4
0000103C                           121          
0000103C                           122  ENDING_MESSAGE
0000103C                           123      * message user to input
0000103C  43F9 00002573            124          LEA ENDING, A1   
00001042  103C 000E                125          MOVE.B #14, D0
00001046  4E4F                     126          TRAP #15
00001048                           127      * read user input
00001048  227C 00000200            128          MOVEA.L #$200, A1 *we have to change this addr later
0000104E  103C 0002                129          MOVE.B #2, D0   
00001052  4E4F                     130          TRAP #15
00001054                           131      * counter for loop
00001054  143C 0008                132          MOVE.B #MAX_USER_INPUT, D2   
00001058                           133      * JSR to convert string function
00001058  4EB9 0000107E            134          JSR CONVERT_STRING 
0000105E                           135          
0000105E                           136      * check if the address is even number
0000105E  E25C                     137          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001060  65DA                     138          BCS ENDING_MESSAGE   *if carry is set then the user typed in an odd address
00001062  E35C                     139          ROL #1, D4     *PUT D4 BACK        
00001064                           140          
00001064                           141      * Check if the starting and ending address is the same
00001064                           142         ; CMP.L #STARTING_ADDR, D4
00001064                           143         * MOVE.L #STARTING_ADDR, D5
00001064  2C39 0000251C            144          MOVE.L STARTING_ADDR, D6
0000106A  B886                     145          CMP.L  D6, D4
0000106C  6FCE                     146          BLE   ENDING_MESSAGE
0000106E                           147      * store hex value of inputted string   
0000106E  23C4 00002520            148          MOVE.L D4, ENDING_ADDR   
00001074                           149          
00001074                           150      * clear the unused data in the data and address regisgter
00001074  4280                     151          CLR.L D0
00001076  4284                     152          CLR.L D4
00001078                           153          
00001078                           154          * Do error handling here Sam
00001078                           155          
00001078  4EF9 000010DC            156          JMP GO_THROUGH_MEMORY
0000107E                           157      
0000107E                           158      * Get each char
0000107E                           159  CONVERT_STRING 
0000107E  1219                     160          MOVE.B (A1)+, D1
00001080                           161      
00001080                           162      * Go to next instruction for converting
00001080  B23C 0039                163          CMP.B #$39, D1
00001084  6F00 000A                164          BLE NUMBER
00001088                           165          
00001088  B23C 003A                166          CMP.B #$3A, D1
0000108C  6C00 0012                167          BGE CHAR   
00001090                           168      
00001090                           169      * Convert Ascii numbers to hex
00001090                           170  NUMBER  
00001090  B23C 002F                171          CMP.B #$2F, D1
00001094                           172      * Number is out of range
00001094  6F00 0034                173          BLE ERROR       
00001098  0401 0030                174          SUB.B #48, D1
0000109C                           175          
0000109C                           176      * Need to be changed the name of label
0000109C  6000 001A                177          BRA STORE_ADDR    
000010A0                           178      
000010A0                           179      * Convert Ascii charaters to hex
000010A0                           180  CHAR    
000010A0  B27C 0040                181          CMP #$40, D1
000010A4                           182      * Number is out of range
000010A4  6F00 0024                183          BLE ERROR
000010A8                           184          
000010A8  B27C 0047                185          CMP #$47, D1
000010AC                           186      * Number is out of range
000010AC  6C00 001C                187          BGE ERROR
000010B0                           188          
000010B0  0401 0037                189          SUB.B #55, D1
000010B4  6000 0002                190          BRA STORE_ADDR
000010B8                           191          
000010B8                           192  STORE_ADDR
000010B8                           193      * Add converted nibble to overall number
000010B8  D801                     194          ADD.B D1, D4
000010BA                           195      * Clear D1 for reuse 
000010BA  4201                     196          CLR.B D1
000010BC                           197      * Subtract from counter
000010BC  5342                     198          SUB #1, D2
000010BE                           199      * If counter is 0, we compared all 8 hex numbers
000010BE  B43C 0000                200          CMP.B #0, D2
000010C2  6700 0016                201          BEQ ENDCONV
000010C6                           202      * Shift the overall number to the left by 1 nibble, so it will fit next hex number
000010C6  E98C                     203          LSL.L #4, D4
000010C8  60B4                     204          BRA CONVERT_STRING
000010CA                           205          
000010CA                           206      * Error handling
000010CA                           207  ERROR
000010CA  43F9 000025A2            208      LEA   ERROR_MSG, A1 
000010D0  103C 000E                209      MOVE.B #14, D0
000010D4  4E4F                     210      TRAP #15
000010D6  4EF8 100C                211      JMP   STARTING_MESSAGE
000010DA                           212  
000010DA                           213      
000010DA                           214  ENDCONV * Next instruction starts 
000010DA  4E75                     215          RTS
000010DC                           216         * MOVE.L D4, STARTING_ADDR 
000010DC                           217          
000010DC                           218  GO_THROUGH_MEMORY
000010DC                           219  
000010DC                           220  
000010DC                           221  
000010DC                           222  
000010DC                           223  
000010DC                           224  
000010DC                           225  
000010DC                           226  
000010DC                           227  
000010DC                           228  
000010DC                           229  
000010DC                           230  
000010DC                           231  
000010DC                           232  
000010DC                           233  
000010DC                           234  
000010DC                           235  
000010DC                           236  
000010DC                           237  
000010DC                           238  
000010DC                           239  
000010DC                           240  
000010DC                           241  
000010DC                           242  
000010DC                           243  
000010DC                           244  
000010DC                           245  -------------------- end include --------------------
000010DC                           246      INCLUDE 'MEMORY_PARSER.X68'
000010DC                           247  
000010DC  2A79 0000251C            248                  MOVEA.L   STARTING_ADDR, A5
000010E2  2C4D                     249                  MOVEA.L   A5, A6
000010E4  247C 0000001F            250                  MOVEA.L  #outputCountMax, A2
000010EA  267C 00000000            251                  MOVEA.L  #outputCountCurr, A3
000010F0                           252  PARSE_MEMORY      
000010F0  3A4E                     253                  MOVE.W   A6, A5
000010F2  43F9 000025DE            254                  LEA      CR_LF, A1
000010F8  103C 000E                255                  MOVE.B   #14, D0
000010FC  4E4F                     256                  TRAP #15  
000010FE                           257          
000010FE                           258  PARSE_MEMORY_FIRST    
000010FE  BBF9 00002520            259                  CMPA.L   ENDING_ADDR, A5
00001104  6700 1412                260                  BEQ      STOP
00001108  301E                     261                  MOVE.W   (A6)+, D0
0000110A                           262                  
0000110A  B7FC 0000001F            263                  CMPA.L   #outputCountMax, A3
00001110  6700 13DC                264                  BEQ       PRESS_ENTER_CONTINUE
00001114                           265  CONTINUE_PARSE
00001114  528B                     266                  ADDA.L    #1, A3
00001116                           267                  
00001116  4EF9 0000111C            268                  JMP      NEXT_INSTRUCTION
0000111C                           269                      
0000111C                           270  NEXT_INSTRUCTION
0000111C                           271                  INCLUDE 'JUMPTABLE DAMIAN-V1.X68'
0000111C                           272   
0000111C                           273  
0000111C  3015                     274                   MOVE.W  (A5),D0
0000111E                           275  
0000111E                           276  
0000111E                           277  
0000111E  41F9 00001136            278                   LEA     jmp_table,A0    *Index into the table
00001124                           279  
00001124  4280                     280                   CLR.L   D0              *Zero it
00001126                           281  
00001126  3015                     282                   MOVE.W  (A5),D0     *We'll play with it here
00001128                           283  
00001128  123C 000C                284                   MOVE.B  #shift,D1       *Shift 12 bits to the right  
0000112C                           285  
0000112C  E268                     286                   LSR.W   D1,D0           *Move the bits
0000112E                           287  
0000112E                           288  
0000112E                           289  
0000112E                           290  
0000112E                           291   
0000112E                           292  
0000112E  C0FC 0006                293                 MULU        #6,D0       *Form offset     
00001132                           294  
00001132  4EB0 0000                295                 JSR         0(A0,D0)   *Jump indirect with index
00001136                           296  
00001136                           297                      
00001136                           298  
00001136  4EF9 00001196            299  jmp_table      JMP         code0000
0000113C                           300  
0000113C  4EF9 0000119A            301                 JMP         code0001
00001142                           302  
00001142  4EF9 0000119E            303                 JMP         code0010
00001148                           304  
00001148  4EF9 000011A2            305                 JMP         code0011
0000114E                           306  
0000114E  4EF9 000011A6            307                 JMP         code0100
00001154                           308  
00001154  4EF9 000011AA            309                 JMP         code0101
0000115A                           310  
0000115A  4EF9 000011AE            311                 JMP         code0110
00001160                           312  
00001160  4EF9 000011B2            313                 JMP         code0111
00001166                           314  
00001166  4EF9 000011B6            315                 JMP         code1000
0000116C                           316  
0000116C  4EF9 000011BA            317                 JMP         code1001
00001172                           318  
00001172  4EF9 000011BE            319                 JMP         code1010
00001178                           320  
00001178  4EF9 000011C2            321                 JMP         code1011
0000117E                           322  
0000117E  4EF9 000011C6            323                 JMP         code1100
00001184                           324  
00001184  4EF9 000011CA            325                 JMP         code1101
0000118A                           326  
0000118A  4EF9 000011CE            327                 JMP         code1110
00001190                           328  
00001190  4EF9 000011D2            329                 JMP         code1111
00001196                           330  
00001196                           331          
00001196                           332  
00001196                           333   
00001196                           334  
00001196                           335  
00001196                           336   
00001196                           337  
00001196                           338   
00001196                           339  
00001196  6000 003E                340  code0000       BRA         ADDI
0000119A                           341  
0000119A  6000 0C70                342  code0001       BRA         MOVEB
0000119E                           343  
0000119E  6000 0CBE                344  code0010       BRA         MOVEL
000011A2                           345  
000011A2  6000 0C86                346  code0011       BRA         MOVEW
000011A6                           347  
000011A6  6000 0414                348  code0100       BRA         GROUP_0100_CODE
000011AA                           349  
000011AA  6000 0132                350  code0101       BRA         ADDQ   * Subroutine for ADDQ
000011AE                           351  
000011AE  4E72 2700                352  code0110       STOP        #$2700
000011B2                           353  
000011B2  6000 097A                354  code0111       BRA         MOVEQ
000011B6                           355  
000011B6  4E72 2700                356  code1000       STOP        #$2700
000011BA                           357  
Line 358 ERROR: Undefined symbol
000011BA  6000 A9D2                358  code1001       BRA         SUB    * Subroutine for SUB
000011BE                           359  
000011BE  4E72 2700                360  code1010       STOP        #$2700
000011C2                           361  
000011C2                           362   
000011C2                           363  
000011C2                           364  
000011C2                           365  
000011C2                           366  
000011C2                           367   * another jump table to the 8 possible op-codes at the next level.
000011C2                           368  
000011C2                           369   
000011C2                           370  
Line 371 ERROR: Undefined symbol
000011C2  6000 A9CA                371  code1011       BRA        CMP  * Subroutuine for CMP
000011C6                           372  
000011C6  4E72 2700                373  code1100       STOP        #$2700
000011CA                           374  
000011CA  6000 0D56                375  code1101       BRA         ADD_ADDA       *#$2700
000011CE                           376  
000011CE  6000 09C6                377  code1110       BRA         SHIFTS
000011D2                           378  
000011D2  4E72 2700                379  code1111       STOP        #$2700
000011D6                           380                   
000011D6                           381  
000011D6                           382                      
000011D6                           383              
000011D6                           384  
000011D6                           385  
000011D6                           386  
000011D6                           387  
000011D6                           388  
000011D6                           389  
000011D6                           390  
000011D6                           391  
000011D6                           392  
000011D6                           393  
000011D6                           394  
000011D6                           395  
000011D6                           396  
000011D6                           397  
000011D6                           398  
000011D6                           399  
000011D6                           400  -------------------- end include --------------------
000011D6                           401                  INCLUDE 'ADDI.X68'
000011D6                           402    
000011D6                           403  ADDI           * first check the first 4 bits after the op-code
000011D6  4280                     404                 CLR.L       D0
000011D8                           405  
000011D8  4281                     406                 CLR.L       D1
000011DA                           407                 
000011DA  3015                     408                 MOVE.W      (A5),D0
000011DC                           409                 
000011DC  123C 0008                410                 MOVE.B      #8, D1 * for shifting to the right by 8 bits
000011E0                           411                 
000011E0  E268                     412                 LSR.W       D1, D0
000011E2                           413                 
000011E2  B07C 0006                414                 CMP.W       #6, D0 * checking the first 4 bits 
000011E6                           415                 
000011E6  6600 FEE2                416                 BNE         ERROR  * go to error 
000011EA                           417                 
000011EA                           418                 * print the op-code 
000011EA  4280                     419                 CLR.L       D0
000011EC                           420  
000011EC  4281                     421                 CLR.L       D1
000011EE                           422                 
000011EE  43F9 000025E1            423                 LEA         ADDI_MESSAGE, A1    * NOTE - how do you know this is of size B ????? 
000011F4                           424                 
000011F4  103C 000E                425                 MOVE.B      #14, D0
000011F8                           426                 
000011F8  4E4F                     427                 TRAP #15
000011FA                           428                                
000011FA                           429                 * print the size
000011FA  4280                     430                 CLR.L       D0
000011FC                           431  
000011FC  4281                     432                 CLR.L       D1
000011FE                           433                 
000011FE  3015                     434                 MOVE.W      (A5),D0
00001200                           435                
00001200  E148                     436                 LSL.W       #8, D0
00001202                           437  
00001202  123C 000E                438                 MOVE.B      #14, D1 * for shifting to the right by 8 bits
00001206                           439                 
00001206  E268                     440                 LSR.W       D1, D0
00001208                           441                 
00001208                           442                 * D1 holds the size
00001208                           443    *             CLR.L       D1
00001208                           444                 
00001208                           445    *             MOVE.B      D0, D1
00001208                           446                   
00001208  B03C 0000                447                 CMP.B       #%00, D0
0000120C                           448                 
0000120C  6700 0038                449                 BEQ         ADDI_B_SIZE
00001210                           450                 
00001210  B03C 0001                451                 CMP.B       #%01, D0
00001214                           452                 
00001214  6700 0060                453                 BEQ         ADDI_W_SIZE
00001218                           454                 
00001218                           455                 *print size L
00001218  43F9 000026A8            456                 LEA         SIZE_L_PRINT, A1     
0000121E                           457                 
0000121E  103C 000E                458                 MOVE.B      #14, D0
00001222                           459                 
00001222  4E4F                     460                 TRAP #15
00001224                           461                 
00001224                           462                * print out pound sign and hex sign
00001224  43F9 000026AE            463                 LEA     POUND_SIGN, A1
0000122A                           464              
0000122A  103C 000E                465                 MOVE.B  #14, D0
0000122E                           466              
0000122E  4E4F                     467                 TRAP #15
00001230                           468              
00001230  43F9 000026B0            469                 LEA     HEX_SIGN, A1
00001236                           470              
00001236  4E4F                     471                 TRAP #15
00001238                           472                 
00001238  4285                     473                 CLR.L  D5
0000123A                           474          
0000123A  2A1E                     475                 MOVE.L (A6)+, D5 * we mimght change it later
0000123C                           476          
0000123C  4EB9 0000225E            477                 JSR  HEX_TO_ASCII
00001242                           478                 
00001242  6000 0062                479                 BRA         ADDI_EA   
00001246                           480                      
00001246                           481  ADDI_B_SIZE
00001246  43F9 0000269C            482                 LEA         SIZE_B_PRINT, A1     
0000124C                           483                 
0000124C  103C 000E                484                 MOVE.B      #14, D0
00001250                           485                 
00001250  4E4F                     486                 TRAP #15
00001252                           487                 
00001252                           488                * print out pound sign and hex sign
00001252  43F9 000026AE            489                 LEA     POUND_SIGN, A1
00001258                           490              
00001258  103C 000E                491                 MOVE.B  #14, D0
0000125C                           492              
0000125C  4E4F                     493                 TRAP #15
0000125E                           494              
0000125E  43F9 000026B0            495                 LEA     HEX_SIGN, A1
00001264                           496              
00001264  4E4F                     497                 TRAP #15
00001266                           498                 
00001266  4280                     499                 CLR.L D0
00001268                           500  
00001268  301E                     501                 MOVE.W (A6)+, D0 * we mimght change it later
0000126A                           502                 
0000126A  1A00                     503                 MOVE.B D0, D5
0000126C                           504     
0000126C  4EB9 0000225E            505                 JSR  HEX_TO_ASCII
00001272                           506                 
00001272  6000 0032                507                 BRA         ADDI_EA 
00001276                           508                  
00001276                           509  
00001276                           510  ADDI_W_SIZE
00001276  43F9 000026A2            511                 LEA         SIZE_W_PRINT, A1     
0000127C                           512                 
0000127C  103C 000E                513                 MOVE.B      #14, D0
00001280                           514                 
00001280  4E4F                     515                 TRAP #15
00001282                           516                 
00001282                           517                 * print out pound sign and hex sign
00001282  43F9 000026AE            518                 LEA     POUND_SIGN, A1
00001288                           519              
00001288  103C 000E                520                 MOVE.B  #14, D0
0000128C                           521              
0000128C  4E4F                     522                 TRAP #15
0000128E                           523              
0000128E  43F9 000026B0            524                 LEA     HEX_SIGN, A1
00001294                           525              
00001294  4E4F                     526                 TRAP #15
00001296                           527  
00001296  4285                     528                 CLR.L  D5
00001298                           529          
00001298  3A1E                     530                 MOVE.W (A6)+, D5
0000129A                           531          
0000129A  4EB9 0000225E            532                 JSR  HEX_TO_ASCII
000012A0                           533          
000012A0  4EF9 000012A6            534                 JMP  ADDI_EA
000012A6                           535  
000012A6                           536  
000012A6                           537  ADDI_EA      
000012A6  4EB9 0000206C            538                  JSR     PRINT_COMMA
000012AC                           539                  
000012AC  4280                     540                  CLR.L   D0
000012AE                           541                  
000012AE  4281                     542                  CLR.L   D1
000012B0                           543                  
000012B0                           544                  * set register
000012B0                           545                   
000012B0  3015                     546                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000012B2                           547                 
000012B2  123C 000D                548                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000012B6                           549  
000012B6  E368                     550                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000012B8                           551  
000012B8  123C 000D                552                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000012BC                           553  
000012BC  E268                     554                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000012BE                           555  
000012BE  1E00                     556                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
000012C0                           557                   
000012C0                           558                   * set mode
000012C0  4280                     559                   CLR.L D0                *clear D0
000012C2                           560                   
000012C2  4281                     561                   CLR.L D1                *clear D1
000012C4                           562                   
000012C4  3015                     563                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000012C6                           564                 
000012C6  123C 000A                565                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000012CA                           566  
000012CA  E368                     567                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000012CC                           568  
000012CC  123C 000D                569                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000012D0                           570  
000012D0  E268                     571                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000012D2                           572  
000012D2  1C00                     573                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
000012D4                           574  
000012D4                           575   
000012D4                           576                 * JSR     Set_Ea
000012D4                           577                   
000012D4  4EB9 000022FC            578                  JSR     PRINT_EA *by using jmp table
000012DA                           579                  
000012DA  4EF8 10F0                580                  JMP     PARSE_MEMORY
000012DE                           581                  
000012DE                           582                  
000012DE                           583                   
000012DE                           584                   
000012DE                           585  
000012DE                           586  
000012DE                           587                 
000012DE                           588  
000012DE                           589  
000012DE                           590  
000012DE                           591  
000012DE                           592  
000012DE                           593  
000012DE                           594  
000012DE                           595  
000012DE                           596  
000012DE                           597  
000012DE                           598  
000012DE                           599  
000012DE                           600  
000012DE                           601  
000012DE                           602  
000012DE                           603  
000012DE                           604  
000012DE                           605  
000012DE                           606  
000012DE                           607  
000012DE                           608  
000012DE                           609  
000012DE                           610  
000012DE                           611  
000012DE                           612  
000012DE                           613  -------------------- end include --------------------
000012DE                           614                  INCLUDE 'ADDQ.X68'
000012DE                           615  
000012DE                           616  
000012DE                           617  ADDQ
000012DE                           618  
000012DE  43F9 0000260B            619      LEA ADDQ_MESSAGE, A1  *print ADDQ
000012E4                           620                   
000012E4  103C 000E                621      MOVE.B #14, D0
000012E8                           622                   
000012E8  4E4F                     623      TRAP #15
000012EA                           624      
000012EA  3015                     625      MOVE.W (A5), D0
000012EC                           626      
000012EC  123C 0008                627      MOVE.B  #8,D1     
000012F0                           628  
000012F0  E368                     629      LSL.W   D1,D0
000012F2                           630                   
000012F2  123C 000E                631      MOVE.B  #14,D1
000012F6                           632  
000012F6  E268                     633      LSR.W   D1,D0  *DO now holds size
000012F8                           634                                              
000012F8  B03C 0002                635      CMP.B    #$2, D0        *if D0 holds 2, size is L
000012FC                           636      
000012FC  6700 003A                637      BEQ      ADDQL
00001300                           638                   
00001300  B03C 0001                639      CMP.B    #$1, D0        *if D0 holds 1, size is W
00001304                           640                                   
00001304  6700 001C                641      BEQ      ADDQW
00001308                           642  
00001308  6000 0002                643      BRA      ADDQB
0000130C                           644  
0000130C                           645  ADDQB  *Print B
0000130C                           646  
0000130C  43F9 0000269C            647      LEA SIZE_B_PRINT, A1  *print B
00001312                           648                   
00001312  103C 000E                649      MOVE.B #14, D0
00001316                           650                   
00001316  4E4F                     651      TRAP #15
00001318                           652      
00001318  1A3C 0000                653      MOVE.B #%00, D5
0000131C                           654      
0000131C  4EF9 0000134E            655      JMP PRINTADDQ
00001322                           656      
00001322                           657  ADDQW  *Print W
00001322                           658  
00001322  43F9 000026A2            659      LEA SIZE_W_PRINT, A1  *print W
00001328                           660                   
00001328  103C 000E                661      MOVE.B #14, D0
0000132C                           662                                    
0000132C  4E4F                     663      TRAP #15
0000132E                           664      
0000132E  1A3C 0001                665      MOVE.B #%01, D5
00001332                           666  
00001332  4EF9 0000134E            667      JMP PRINTADDQ
00001338                           668  
00001338                           669  ADDQL   *Print L
00001338                           670  
00001338  43F9 000026A8            671      LEA SIZE_L_PRINT, A1  *print L
0000133E                           672                   
0000133E  103C 000E                673      MOVE.B #14, D0
00001342                           674                   
00001342  4E4F                     675      TRAP #15
00001344                           676  
00001344  1A3C 0002                677      MOVE.B #%10, D5
00001348                           678      
00001348  4EF9 0000134E            679      JMP PRINTADDQ
0000134E                           680      
0000134E                           681  PRINTADDQ
0000134E                           682  
0000134E  43F9 000026AE            683      LEA POUND_SIGN, A1  *print W
00001354                           684                   
00001354  103C 000E                685      MOVE.B #14, D0
00001358                           686                                    
00001358  4E4F                     687      TRAP #15
0000135A                           688      
0000135A  3015                     689      MOVE.W (A5), D0
0000135C                           690  
0000135C  123C 0004                691      MOVE.B  #4,D1     
00001360                           692  
00001360  E368                     693      LSL.W   D1,D0
00001362                           694                   
00001362  123C 000D                695      MOVE.B  #13,D1
00001366                           696  
00001366  E268                     697      LSR.W   D1,D0  *D0 now holds Dn
00001368                           698      
00001368  4281                     699      CLR.L D1
0000136A                           700                                              
0000136A  3200                     701      MOVE.W D0, D1 *D6 holds Dn   
0000136C                           702  
0000136C  103C 0003                703      MOVE.B #3, D0
00001370                           704                 
00001370  4E4F                     705      TRAP #15
00001372                           706      
00001372  43F9 000026CE            707      LEA COMMA, A1  *print W
00001378                           708                   
00001378  103C 000E                709      MOVE.B #14, D0
0000137C                           710                                    
0000137C  4E4F                     711      TRAP #15
0000137E                           712      
0000137E  4286                     713      CLR.L D6
00001380                           714      
00001380  4287                     715      CLR.L D7
00001382                           716      
00001382  3015                     717      MOVE.W (A5), D0
00001384                           718  
00001384  123C 000A                719      MOVE.B  #10,D1     
00001388                           720  
00001388  E368                     721      LSL.W   D1,D0
0000138A                           722                   
0000138A  123C 000D                723      MOVE.B  #13,D1
0000138E                           724  
0000138E  E268                     725      LSR.W   D1,D0  *D0 now holds MODE
00001390                           726                                              
00001390  3C00                     727      MOVE.W D0, D6 *D6 holds mode
00001392                           728      
00001392  4281                     729      CLR.L D1
00001394                           730      
00001394  4280                     731      CLR.L D0
00001396                           732      
00001396  3015                     733      MOVE.W (A5), D0
00001398                           734  
00001398  123C 000D                735      MOVE.B  #13,D1     
0000139C                           736  
0000139C  E368                     737      LSL.W   D1,D0
0000139E                           738                   
0000139E  123C 000D                739      MOVE.B  #13,D1
000013A2                           740  
000013A2  E268                     741      LSR.W   D1,D0  *D0 now holds MODE
000013A4                           742                                              
000013A4  3E00                     743      MOVE.W D0, D7 *D6 holds Register   
000013A6                           744      
000013A6  4EB9 000022FC            745      JSR PRINT_EA
000013AC                           746      
000013AC  6000 FD42                747      BRA PARSE_MEMORY
000013B0                           748  
000013B0                           749      
000013B0                           750  
000013B0                           751  
000013B0                           752  
000013B0                           753  
000013B0                           754  
000013B0                           755  
000013B0                           756  
000013B0                           757  
000013B0                           758  
000013B0                           759  
000013B0                           760  
000013B0                           761  
000013B0                           762  
000013B0                           763  -------------------- end include --------------------
000013B0                           764                  INCLUDE 'TRYING_NOP.X68'
000013B0                           765  
000013B0                           766      
000013B0                           767   
000013B0                           768      *MOVE.W  #$4E75, D2          * hardcodiing nop
000013B0                           769  
000013B0                           770     * CMP.L       #$4E71, D2      * has to be NOP
000013B0                           771      *
000013B0                           772     * BEQ         NOP_OPCODE
000013B0                           773      
000013B0                           774     * CMP.L       #$4E75, D2      * has to be RTS
000013B0                           775      
000013B0                           776    *  BEQ         RTS_OPCODE
000013B0                           777     *BRA CLR_OPCODE  
000013B0                           778  LEA_OPCODE
000013B0                           779      
000013B0  43F9 00002611            780      LEA         LEA_MESSAGE, A1     * print out message for 'NOP'
000013B6                           781      
000013B6  103C 000E                782      MOVE.B      #14, D0
000013BA                           783      
000013BA  4E4F                     784      TRAP #15  
000013BC                           785      
000013BC  3015                     786      MOVE.W  (A5),D0     *D0 is the binary value to decode
000013BE                           787      
000013BE  123C 000D                788      MOVE.B  #13,D1     
000013C2                           789  
000013C2  E368                     790      LSL.W   D1,D0
000013C4                           791                   
000013C4  123C 000D                792      MOVE.B  #13,D1
000013C8                           793  
000013C8  E268                     794      LSR.W   D1,D0  *D0 now holds Register
000013CA                           795                                              
000013CA  3E00                     796      MOVE.W D0, D7 *D7 holds Register  
000013CC                           797  
000013CC  3015                     798      MOVE.W  (A5),D0     *D0 is the binary value to decode
000013CE                           799  
000013CE  123C 000A                800      MOVE.B  #10,D1     
000013D2                           801  
000013D2  E368                     802      LSL.W   D1,D0
000013D4                           803                   
000013D4  123C 000D                804      MOVE.B  #13,D1
000013D8                           805  
000013D8  E268                     806      LSR.W   D1,D0  *D0 now holds MODE
000013DA                           807                                              
000013DA  3C00                     808      MOVE.W D0, D6 *D6 holds MODE  
000013DC                           809      
000013DC  4EB9 000022FC            810      JSR PRINT_EA
000013E2                           811  
000013E2  43F9 000026CE            812      LEA         COMMA, A1     * print out message for 'NOP'
000013E8                           813      
000013E8  103C 000E                814      MOVE.B      #14, D0
000013EC                           815      
000013EC  4E4F                     816      TRAP #15 
000013EE                           817                                    
000013EE  3015                     818      MOVE.W  (A5),D0     *D0 is the binary value to decode 
000013F0                           819  
000013F0  7C01                     820      MOVE.L #%001, D6
000013F2                           821  
000013F2  123C 0004                822      MOVE.B  #4,D1     
000013F6                           823  
000013F6  E368                     824      LSL.W   D1,D0
000013F8                           825                   
000013F8  123C 000D                826      MOVE.B  #13,D1
000013FC                           827  
000013FC  E268                     828      LSR.W   D1,D0  
000013FE                           829                                              
000013FE  3E00                     830      MOVE.W D0, D7 
00001400                           831      
00001400  4EB9 000022FC            832      JSR PRINT_EA
00001406                           833      
00001406  4EF8 10F0                834      JMP     PARSE_MEMORY       
0000140A                           835            
0000140A                           836  NOP_OPCODE
0000140A  43F9 000025F4            837      LEA         NOP_MESSAGE, A1     * print out message for 'NOP'
00001410                           838      
00001410  103C 000E                839      MOVE.B      #14, D0
00001414                           840      
00001414  4E4F                     841      TRAP #15
00001416                           842      
00001416  6000 FCD8                843      BRA PARSE_MEMORY
0000141A                           844  RTS_OPCODE 
0000141A  43F9 00002603            845      LEA         RTS_MESSAGE, A1     * print out message for 'RTS'
00001420                           846      
00001420  103C 000E                847      MOVE.B      #14, D0
00001424                           848      
00001424  4E4F                     849      TRAP #15
00001426                           850      
00001426  6000 FCC8                851      BRA PARSE_MEMORY
0000142A                           852      
0000142A                           853  JSR_OPCODE 
0000142A  43F9 000025FF            854      LEA         JSR_MESSAGE, A1     * print out message for 'JSR'
00001430                           855      
00001430  103C 000E                856      MOVE.B      #14, D0
00001434                           857      
00001434  4E4F                     858      TRAP #15
00001436                           859      
00001436  2002                     860      MOVE.L D2, D0
00001438                           861  
00001438  123C 000D                862      MOVE.B  #13,D1     
0000143C                           863  
0000143C  E368                     864      LSL.W   D1,D0
0000143E                           865                   
0000143E  123C 000D                866      MOVE.B  #13,D1
00001442                           867  
00001442  E268                     868      LSR.W   D1,D0  *D0 now holds Register
00001444                           869                                              
00001444  3E00                     870      MOVE.W D0, D7 *D7 holds Register  
00001446                           871  
00001446  2002                     872      MOVE.L D2, D0
00001448                           873  
00001448  123C 000A                874      MOVE.B  #10,D1     
0000144C                           875  
0000144C  E368                     876      LSL.W   D1,D0
0000144E                           877                   
0000144E  123C 000D                878      MOVE.B  #13,D1
00001452                           879  
00001452  E268                     880      LSR.W   D1,D0  *D0 now holds MODE
00001454                           881                                              
00001454  3C00                     882      MOVE.W D0, D6 *D6 holds MODE  
00001456                           883      
00001456  4EB9 000022FC            884      JSR PRINT_EA
0000145C                           885      
0000145C  6000 FC92                886      BRA PARSE_MEMORY
00001460                           887         
00001460                           888  CLR_OPCODE 
00001460  43F9 00002607            889      LEA         CLR_MESSAGE, A1     * print out message for 'CLR'
00001466                           890      
00001466  103C 000E                891      MOVE.B      #14, D0
0000146A                           892      
0000146A  4E4F                     893      TRAP #15
0000146C                           894                     
0000146C  43F9 000026B2            895      LEA      PERIOD, A1
00001472                           896      
00001472  103C 000E                897      MOVE.B   #14, D0
00001476                           898      
00001476  4E4F                     899      TRAP #15 
00001478                           900                
00001478  3015                     901      MOVE.W      (A5), D0
0000147A                           902               
0000147A  123C 0006                903      MOVE.B      #6, D1
0000147E                           904                 
0000147E  E268                     905      LSR.W       D1, D0  *shift right 6 
00001480                           906                 
00001480  123C 000E                907      MOVE.B      #14, D1
00001484                           908                 
00001484  E368                     909      LSL.W       D1, D0  *shift left 15, only size is left
00001486                           910      
00001486  123C 000E                911      MOVE.B      #14, D1
0000148A                           912                 
0000148A  E268                     913      LSR.W       D1, D0  *shift right 15, size is left   
0000148C                           914      
0000148C  B07C 0000                915      CMP.W       #00, D0
00001490                           916  
00001490  6700 004A                917      BEQ         SIZE_B
00001494                           918      
00001494  B07C 0001                919      CMP.W       #01, D0
00001498                           920                 
00001498  6700 004C                921      BEQ         SIZE_W 
0000149C                           922      
0000149C  B07C 0002                923      CMP.W       #2, D0
000014A0                           924                 
000014A0  6700 004E                925      BEQ         SIZE_L
000014A4                           926  
000014A4                           927  PRINT_SIZE
000014A4                           928  
000014A4  103C 000E                929      MOVE.B      #14, D0
000014A8                           930      
000014A8  4E4F                     931      TRAP #15
000014AA                           932  
000014AA  4280                     933      CLR.L   D0
000014AC                           934                  
000014AC  4281                     935      CLR.L   D1
000014AE                           936                       * set register
000014AE                           937                   
000014AE  3015                     938      MOVE.W  (A5),D0     *D0 is the binary value to decode
000014B0                           939                 
000014B0  123C 000D                940      MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000014B4                           941  
000014B4  E368                     942      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000014B6                           943  
000014B6  123C 000D                944      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000014BA                           945  
000014BA  E268                     946      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000014BC                           947  
000014BC  1E00                     948      MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
000014BE                           949                   
000014BE                           950                   * set mode
000014BE  4280                     951      CLR.L D0                *clear D0
000014C0                           952                   
000014C0  4281                     953      CLR.L D1                *clear D1
000014C2                           954                   
000014C2  3015                     955      MOVE.W  (A5),D0     *D0 is the binary value to decode
000014C4                           956                 
000014C4  123C 000A                957      MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000014C8                           958  
000014C8  E368                     959      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000014CA                           960  
000014CA  123C 000D                961      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000014CE                           962  
000014CE  E268                     963      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000014D0                           964  
000014D0  2C00                     965      MOVE.L  D0, D6          *put D0 to data register into D7 for future printing
000014D2                           966                   
000014D2  4EB9 000022FC            967      JSR     PRINT_EA *by using jmp table
000014D8                           968  
000014D8  6000 FC16                969      BRA PARSE_MEMORY
000014DC                           970      
000014DC                           971  SIZE_B 
000014DC                           972                
000014DC  43F9 0000269C            973      LEA         SIZE_B_PRINT, A1 
000014E2                           974      
000014E2  4EF8 14A4                975      JMP PRINT_SIZE
000014E6                           976      
000014E6                           977  SIZE_W 
000014E6                           978                
000014E6  43F9 000026A2            979      LEA         SIZE_W_PRINT, A1 
000014EC                           980      
000014EC  4EF8 14A4                981      JMP PRINT_SIZE
000014F0                           982      
000014F0                           983  SIZE_L 
000014F0                           984                
000014F0  43F9 000026A8            985      LEA         SIZE_L_PRINT, A1 
000014F6                           986      
000014F6  4EF8 14A4                987      JMP PRINT_SIZE
000014FA                           988      
000014FA                           989  
000014FA                           990   *   END    START        ; last line of source
000014FA                           991  
000014FA                           992  
000014FA                           993  
000014FA                           994  
000014FA                           995  
000014FA                           996  
000014FA                           997  
000014FA                           998  
000014FA                           999  
000014FA                          1000  
000014FA                          1001  
000014FA                          1002  
000014FA                          1003  
000014FA                          1004  
000014FA                          1005  -------------------- end include --------------------
000014FA                          1006                  INCLUDE 'DIVU_OR.X68'
000014FA                          1007      
000014FA  4EB9 0000200C           1008  DIVU_OR          JSR      GET_SIZE_PURPLE  
00001500                          1009                                            
00001500  BA3C 0003               1010                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
00001504                          1011                   
00001504  6700 0008               1012                   BEQ      DIVU_CODE
00001508                          1013                   
00001508  4EF9 00001550           1014                   JMP      OR_CODE
0000150E                          1015                   
0000150E                          1016  DIVU_CODE  
0000150E                          1017                   * OP_CODE message
0000150E  43F9 00002654           1018                   LEA      DIVU_MESSAGE, A1
00001514  103C 000E               1019                   MOVE.B   #14, D0
00001518  4E4F                    1020                   TRAP #15
0000151A                          1021  
0000151A  3A3C 0001               1022                   MOVE    #%01, D5          
0000151E                          1023                   
0000151E  43F9 000026A2           1024                   LEA      SIZE_W_PRINT,    A1
00001524                          1025                   
00001524  103C 000E               1026                   MOVE.B   #14,             D0
00001528                          1027          
00001528  4E4F                    1028                   TRAP #15
0000152A                          1029                   
0000152A  4EB9 0000208C           1030                   JSR     Set_Ea
00001530                          1031                   
00001530  4EB9 000022FC           1032                   JSR     PRINT_EA *by using jmp table
00001536                          1033                   
00001536  4EB9 0000206C           1034                   JSR     PRINT_COMMA
0000153C                          1035                   
0000153C                          1036                    * for the first Dn 
0000153C  4EB9 0000207A           1037                   JSR     GET_Data_Register
00001542                          1038                   
00001542  1C3C 0000               1039                   MOVE.B  #%000, D6 * for mode
00001546                          1040  
00001546  4EB9 000022FC           1041                   JSR     PRINT_EA *by using jmp table
0000154C                          1042  
0000154C  4EF8 10F0               1043                   JMP     PARSE_MEMORY
00001550                          1044  
00001550                          1045  OR_CODE    
00001550                          1046                   * OP_CODE message
00001550  43F9 0000265A           1047                   LEA      OR_MESSAGE, A1
00001556  103C 000E               1048                   MOVE.B   #14, D0
0000155A  4E4F                    1049                   TRAP #15
0000155C                          1050  
0000155C  4EB9 00002022           1051                   JSR PRINTOUT_SIZE_PURPLE
00001562                          1052                   
00001562                          1053                     * check for dn and ea
00001562  4280                    1054                   CLR.L D0                *clear D0
00001564                          1055                   
00001564  4281                    1056                   CLR.L D1                *clear D1
00001566                          1057                   
00001566  3015                    1058                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001568                          1059                   
00001568  0800 0008               1060                   BTST    #8, D0
0000156C                          1061                   
0000156C  6700 0028               1062                   BEQ     OR_FIRST_EA
00001570                          1063                   
00001570                          1064                   * for the first Dn 
00001570  4EB9 0000207A           1065                   JSR     GET_Data_Register
00001576                          1066                   
00001576  1C3C 0000               1067                   MOVE.B  #%000, D6 * for mode
0000157A                          1068                   
0000157A  4EB9 000022FC           1069                   JSR     PRINT_EA *by using jmp table
00001580                          1070                   
00001580  4EB9 0000206C           1071                   JSR     PRINT_COMMA
00001586                          1072                   
00001586  4EB9 0000208C           1073                   JSR     Set_Ea
0000158C                          1074                   
0000158C  4EB9 000022FC           1075                   JSR     PRINT_EA *by using jmp table
00001592                          1076                   
00001592  4EF8 10F0               1077                   JMP     PARSE_MEMORY
00001596                          1078                   
00001596                          1079  OR_FIRST_EA
00001596  4EB9 0000208C           1080                   JSR     Set_Ea
0000159C                          1081                   
0000159C  4EB9 000022FC           1082                   JSR     PRINT_EA *by using jmp table
000015A2                          1083                   
000015A2  4EB9 0000206C           1084                   JSR     PRINT_COMMA
000015A8                          1085                   
000015A8                          1086                    * for the first Dn 
000015A8  4EB9 0000207A           1087                   JSR     GET_Data_Register
000015AE                          1088                   
000015AE  1C3C 0000               1089                   MOVE.B  #%000, D6 * for mode
000015B2                          1090  
000015B2  4EB9 000022FC           1091                   JSR     PRINT_EA *by using jmp table
000015B8                          1092                   
000015B8  4EF8 10F0               1093                   JMP     PARSE_MEMORY
000015BC                          1094  
000015BC                          1095  
000015BC                          1096  
000015BC                          1097  
000015BC                          1098  
000015BC                          1099  
000015BC                          1100  
000015BC                          1101  
000015BC                          1102  -------------------- end include --------------------
000015BC                          1103                  INCLUDE 'GROUP_0100_CODE.X68'
000015BC                          1104  GROUP_0100_CODE          *at this point we know the first 4 bits are 0100 -> NOP, RTS, JSR,  MOVEM, CLR
000015BC                          1105  
000015BC  4280                    1106                   CLR.L D0                *clear D0
000015BE                          1107                   
000015BE  4281                    1108                   CLR.L D1                *clear D1
000015C0                          1109                   
000015C0  3015                    1110                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000015C2                          1111  
000015C2  123C 0004               1112                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
000015C6                          1113  
000015C6  E368                    1114                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
000015C8                          1115                   
000015C8  123C 0004               1116                   MOVE.B  #4,D1           *4 bits is the number of times to shift to hold everything except the opcode
000015CC                          1117  
000015CC  E268                    1118                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds everything except opcode
000015CE                          1119                   
000015CE                          1120                                              
000015CE  B07C 0E71               1121                   CMP.W    #$E71, D0      *if D0 holds E71, the opcode is NOP
000015D2                          1122                   
000015D2  6700 FE36               1123                   BEQ      NOP_OPCODE       *Branch to NOP_CODE if the opcode is NOP
000015D6                          1124                   
000015D6                          1125                   
000015D6  B07C 0E75               1126                   CMP.W    #$E75, D0      *if D0 holds E75, the opcode is RTS
000015DA                          1127                   
000015DA  6700 FE3E               1128                   BEQ      RTS_OPCODE       *Branch to RTS_CODE if the opcode is RTS
000015DE                          1129                   
000015DE                          1130                   
000015DE  4280                    1131                   CLR.L D0                *clear D0
000015E0                          1132                   
000015E0                          1133                   
000015E0  4281                    1134                   CLR.L D1                *clear D1
000015E2                          1135                   
000015E2                          1136                   
000015E2  3015                    1137                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000015E4                          1138  
000015E4                          1139  
000015E4  123C 0004               1140                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
000015E8                          1141  
000015E8                          1142  
000015E8  E368                    1143                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
000015EA                          1144                   
000015EA  123C 000C               1145                   MOVE.B  #12,D1           *12 bits is the number of times to shift to hold the 4th-8th bits (counting left to right, non-inclusive)
000015EE                          1146  
000015EE  E268                    1147                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds 4th-8th bits (counting left to right, non-inclusive)
000015F0                          1148                   
000015F0  B07C 0002               1149                   CMP.W    #$2, D0        *if D0 holds #2, the opcode is CLR
000015F4                          1150                   
000015F4  6700 FE6A               1151                   BEQ      CLR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
000015F8                          1152                   
000015F8                          1153          
000015F8  B07C 000E               1154                   CMP.W    #$E, D0        *if D0 holds $E = 14, the opcode is JSR
000015FC                          1155                   
000015FC  6700 FE2C               1156                   BEQ      JSR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
00001600                          1157                   
00001600  4280                    1158                   CLR.L D0                *clear D0
00001602                          1159                   
00001602  4281                    1160                   CLR.L D1                *clear D1
00001604                          1161                   
00001604  3015                    1162                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001606                          1163  
00001606  123C 0007               1164                   MOVE.B  #7,D1 
0000160A                          1165  
0000160A  E368                    1166                   LSL.W   D1,D0 
0000160C                          1167                   
0000160C  123C 000D               1168                   MOVE.B  #13,D1 
00001610                          1169  
00001610  E268                    1170                   LSR.W   D1,D0     
00001612                          1171                   
00001612  B07C 0007               1172                   CMP.W    #%111, D0  
00001616                          1173                   
00001616  6700 FD98               1174                   BEQ LEA_OPCODE
0000161A                          1175                   
0000161A  6000 00C0               1176                   BRA      MOVEM_OPCODE     *else it is a MOVEM
0000161E                          1177  
0000161E                          1178      
0000161E                          1179  
0000161E                          1180  
0000161E                          1181  
0000161E                          1182  
0000161E                          1183  
0000161E                          1184  -------------------- end include --------------------
0000161E                          1185                  INCLUDE 'MULS_AND.X68'
0000161E                          1186   
0000161E  4EB9 0000200C           1187  MULS_AND         JSR      GET_SIZE_PURPLE
00001624                          1188                                              
00001624  BA3C 0003               1189                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
00001628                          1190                   
00001628  6700 0008               1191                   BEQ      MULS_CODE
0000162C                          1192                   
0000162C  4EF9 00001670           1193                   JMP      AND_CODE
00001632                          1194                   
00001632                          1195  MULS_CODE
00001632                          1196                   * OP_CODE message
00001632  43F9 00002668           1197                   LEA MULS_MESSAGE, A1
00001638                          1198                   
00001638  103C 000E               1199                   MOVE.B #14, D0
0000163C                          1200                   
0000163C  4E4F                    1201                   TRAP #15
0000163E                          1202  
0000163E  43F9 000026A2           1203                   LEA      SIZE_W_PRINT,    A1
00001644                          1204                   
00001644  103C 000E               1205                   MOVE.B   #14,             D0
00001648                          1206          
00001648  4E4F                    1207                   TRAP #15
0000164A                          1208                   
0000164A  4EB9 0000208C           1209                   JSR     Set_Ea
00001650                          1210                   
00001650  4EB9 000022FC           1211                   JSR     PRINT_EA *by using jmp table
00001656                          1212                   
00001656  4EB9 0000206C           1213                   JSR     PRINT_COMMA
0000165C                          1214                   
0000165C                          1215                    * for the first Dn 
0000165C  4EB9 0000207A           1216                   JSR     GET_Data_Register
00001662                          1217                   
00001662  1C3C 0000               1218                   MOVE.B  #%000, D6 * for mode
00001666                          1219  
00001666  4EB9 000022FC           1220                   JSR     PRINT_EA *by using jmp table
0000166C                          1221  
0000166C  4EF8 10F0               1222                   JMP      PARSE_MEMORY
00001670                          1223  
00001670                          1224  AND_CODE
00001670                          1225                   * OP_CODE message
00001670  43F9 0000266E           1226                   LEA AND_MESSAGE, A1
00001676  103C 000E               1227                   MOVE.B #14, D0
0000167A  4E4F                    1228                   TRAP #15
0000167C                          1229                   
0000167C  4EB9 00002022           1230                   JSR PRINTOUT_SIZE_PURPLE
00001682                          1231                   
00001682                          1232                     * check for dn and ea
00001682  4280                    1233                   CLR.L D0                *clear D0
00001684                          1234                   
00001684  4281                    1235                   CLR.L D1                *clear D1
00001686                          1236                   
00001686  3015                    1237                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001688                          1238                   
00001688  0800 0008               1239                   BTST    #8, D0
0000168C                          1240                   
0000168C  6700 0028               1241                   BEQ     AND_FIRST_EA
00001690                          1242                   
00001690                          1243                   * for the first Dn 
00001690  4EB9 0000207A           1244                   JSR     GET_Data_Register
00001696                          1245                   
00001696  1C3C 0000               1246                   MOVE.B  #%000, D6 * for mode
0000169A                          1247                   
0000169A  4EB9 000022FC           1248                   JSR     PRINT_EA *by using jmp table
000016A0                          1249                   
000016A0  4EB9 0000206C           1250                   JSR     PRINT_COMMA
000016A6                          1251                   
000016A6  4EB9 0000208C           1252                   JSR     Set_Ea
000016AC                          1253                   
000016AC  4EB9 000022FC           1254                   JSR     PRINT_EA *by using jmp table
000016B2                          1255                   
000016B2  4EF8 10F0               1256                   JMP      PARSE_MEMORY
000016B6                          1257                   
000016B6                          1258  AND_FIRST_EA
000016B6  4EB9 0000208C           1259                   JSR     Set_Ea
000016BC                          1260                   
000016BC  4EB9 000022FC           1261                   JSR     PRINT_EA *by using jmp table
000016C2                          1262                   
000016C2  4EB9 0000206C           1263                   JSR     PRINT_COMMA
000016C8                          1264                   
000016C8                          1265                    * for the first Dn 
000016C8  4EB9 0000207A           1266                   JSR     GET_Data_Register
000016CE                          1267                   
000016CE  1C3C 0000               1268                   MOVE.B  #%000, D6 * for mode
000016D2                          1269  
000016D2  4EB9 000022FC           1270                   JSR     PRINT_EA *by using jmp table
000016D8                          1271                   
000016D8  4EF8 10F0               1272                   JMP      PARSE_MEMORY
000016DC                          1273  
000016DC                          1274  
000016DC                          1275  
000016DC                          1276  
000016DC                          1277  
000016DC                          1278  
000016DC                          1279  
000016DC                          1280  
000016DC                          1281  
000016DC                          1282  -------------------- end include --------------------
000016DC                          1283                  INCLUDE 'MOVEM.X68'
000016DC                          1284     
000016DC                          1285  
000016DC                          1286  MOVEM_OPCODE
000016DC                          1287  
000016DC  4280                    1288     CLR.L       D0               *Zero it
000016DE                          1289     
000016DE  4286                    1290     CLR.L       D6
000016E0                          1291  
000016E0  3015                    1292     MOVE.W      (A5), D0     *We'll play with it here
000016E2                          1293  
000016E2  43F9 000025F8           1294     LEA MOVEM_MESSAGE, A1
000016E8                          1295            
000016E8  103C 000E               1296     MOVE.B #14, D0
000016EC                          1297                   
000016EC  4E4F                    1298     TRAP #15    
000016EE                          1299  
000016EE  3015                    1300    MOVE.W     (A5), D0
000016F0                          1301  
000016F0  0800 0006               1302    BTST       #6,  D0      
000016F4                          1303  
000016F4  6600 0012               1304    BNE        PRINT_SIZE_L_MOVEM
000016F8                          1305  
000016F8  43F9 000026A2           1306    LEA SIZE_W_PRINT, A1
000016FE                          1307            
000016FE  103C 000E               1308    MOVE.B #14, D0
00001702                          1309                   
00001702  4E4F                    1310    TRAP #15    
00001704                          1311   
00001704  6000 000E               1312    BRA          DR_FIELD
00001708                          1313      
00001708                          1314    * Print out size for W
00001708                          1315  PRINT_SIZE_L_MOVEM
00001708                          1316  
00001708  43F9 000026A8           1317    LEA SIZE_L_PRINT, A1
0000170E                          1318            
0000170E  103C 000E               1319    MOVE.B #14, D0
00001712                          1320                   
00001712  4E4F                    1321    TRAP #15    
00001714                          1322  
00001714                          1323  DR_FIELD
00001714                          1324                 
00001714  0800 000A               1325    BTST        #10,  D0    * BIT TEST
00001718                          1326  
00001718  6700 000C               1327    BEQ         Regitset_Memory *if D0 holds a 1
0000171C                          1328  
0000171C  6000 0062               1329    BRA         Memory_Register *If D0 hollds a 0
00001720                          1330  
00001720  4284                    1331    CLR.L D4
00001722                          1332  
00001722  183C 000F               1333    MOVE.B #15, D4
00001726                          1334  
00001726                          1335  Regitset_Memory
00001726  361E                    1336      MOVE.W      (A6)+, D3
00001728                          1337      
00001728                          1338      * CHECK IF PRE DECREMEMNT
00001728  3015                    1339      MOVE.W (A5), D0
0000172A                          1340      
0000172A  123C 000A               1341      MOVE.B      #10, D1
0000172E                          1342      
0000172E  E368                    1343      LSL.W       D1, D0
00001730                          1344  
00001730  123C 000D               1345      MOVE.B      #13, D1
00001734                          1346  
00001734  E268                    1347      LSR.W       D1, D0
00001736                          1348  
00001736  B03C 0004               1349      CMP.B       #%100, D0
0000173A                          1350  
0000173A  6700 0064               1351      BEQ         OPPOSITE_LOOP 
0000173E                          1352      * NOW IT CAN BE IN REGULAR ORDER
0000173E                          1353      
0000173E  183C 000F               1354      MOVE.B      #15, D4
00001742                          1355      
00001742  4EB9 00001976           1356      JSR         LOOP_MOVEM
00001748                          1357      
00001748  43F9 000026CE           1358      LEA COMMA, A1
0000174E                          1359      
0000174E  103C 000E               1360      MOVE.B      #14, D0
00001752                          1361      
00001752  4E4F                    1362      TRAP #15
00001754                          1363      
00001754  4EB9 0000175E           1364      JSR PRINT_ADDRESS
0000175A                          1365      
0000175A  6000 F994               1366      BRA PARSE_MEMORY
0000175E                          1367  
0000175E                          1368  PRINT_ADDRESS 
0000175E  3015                    1369      MOVE.W      (A5), D0
00001760                          1370  
00001760  123C 000A               1371      MOVE.B      #10, D1
00001764                          1372      
00001764  E368                    1373      LSL.W       D1, D0
00001766                          1374      
00001766  123C 000D               1375      MOVE.B      #13, D1
0000176A                          1376  
0000176A  E268                    1377      LSR.W       D1, D0
0000176C                          1378      
0000176C  1C00                    1379      MOVE.B      D0, D6
0000176E                          1380      
0000176E  3015                    1381      MOVE.W      (A5), D0
00001770                          1382      
00001770  E368                    1383      LSL.W       D1, D0
00001772                          1384      
00001772  E268                    1385      LSR.W       D1, D0
00001774                          1386      
00001774  4287                    1387      CLR.L       D7
00001776                          1388      
00001776  1E00                    1389      MOVE.B      D0, D7
00001778                          1390      
00001778  4EB9 000022FC           1391      JSR PRINT_EA
0000177E                          1392      
0000177E  4E75                    1393      RTS
00001780                          1394  
00001780                          1395  Memory_Register
00001780  361E                    1396      MOVE.W (A6)+, D3
00001782                          1397      
00001782  4EB8 175E               1398      JSR         PRINT_ADDRESS
00001786                          1399      
00001786  43F9 000026CE           1400      LEA         COMMA, A1
0000178C                          1401      
0000178C  103C 000E               1402      MOVE.B      #14, D0
00001790                          1403      
00001790  4E4F                    1404      TRAP #15
00001792                          1405          
00001792                          1406      *MOVE.W      (A6)+, D3
00001792                          1407      
00001792  183C 000F               1408      MOVE.B      #15, D4
00001796                          1409      
00001796  4EB9 00001976           1410      JSR         LOOP_MOVEM
0000179C                          1411      
0000179C  6000 F952               1412      BRA PARSE_MEMORY
000017A0                          1413  
000017A0                          1414  
000017A0                          1415  OPPOSITE_LOOP
000017A0  4241                    1416      CLR         D1
000017A2                          1417  
000017A2                          1418      *MOVE.W      (A6)+, D3
000017A2                          1419      
000017A2  183C 000F               1420      MOVE.B      #15, D4
000017A6                          1421      
000017A6  4EB9 000017C0           1422      JSR OPPOSITE_LOOP_MOVEM
000017AC                          1423      
000017AC  43F9 000026CE           1424      LEA COMMA, A1
000017B2                          1425      
000017B2  103C 000E               1426      MOVE.B      #14, D0
000017B6                          1427      
000017B6  4E4F                    1428      TRAP #15
000017B8                          1429      
000017B8  4EB8 175E               1430      JSR PRINT_ADDRESS
000017BC                          1431      
000017BC  6000 F932               1432      BRA PARSE_MEMORY
000017C0                          1433  
000017C0                          1434          
000017C0                          1435  OPPOSITE_LOOP_MOVEM
000017C0                          1436          
000017C0  0903                    1437      BTST        D4, D3     * BIT TEST
000017C2                          1438  
000017C2  6600 0020               1439      BNE         OPPOSITE_IS_USED_FIRST
000017C6                          1440  
000017C6  5304                    1441      SUB.B       #1, D4
000017C8                          1442      
000017C8                          1443  OPPOSITE_CHECK
000017C8  B83C 00FF               1444      CMP.B       #-1,  D4
000017CC                          1445  
000017CC  6700 0D1A               1446      BEQ         DONE
000017D0                          1447  
000017D0  60EE                    1448      BRA         OPPOSITE_LOOP_MOVEM
000017D2                          1449      
000017D2                          1450  OPPOSITE_LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
000017D2  0903                    1451      BTST        D4, D3     * BIT TEST
000017D4                          1452  
000017D4  6600 0018               1453      BNE         OPPOSITE_IS_USED
000017D8                          1454  
000017D8  5304                    1455      SUB.B       #1, D4
000017DA                          1456      
000017DA                          1457  OPPOSITE_CHECK_SECOND
000017DA  B83C 00FF               1458      CMP.B       #-1,  D4
000017DE                          1459  
000017DE  6700 0D08               1460      BEQ         DONE
000017E2                          1461  
000017E2  60EE                    1462      BRA         OPPOSITE_LOOP_MOVEM_SECOND
000017E4                          1463  
000017E4                          1464  OPPOSITE_IS_USED_FIRST
000017E4  4EB9 00001804           1465      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
000017EA                          1466  
000017EA  5304                    1467      SUB.B       #1, D4
000017EC                          1468  
000017EC  60EC                    1469      BRA         OPPOSITE_CHECK_SECOND
000017EE                          1470  
000017EE                          1471  
000017EE                          1472  OPPOSITE_IS_USED
000017EE  43F9 000026B7           1473      LEA         SLASH, A1
000017F4                          1474  
000017F4  103C 000E               1475      MOVE.B      #14, D0
000017F8                          1476  
000017F8  4E4F                    1477      TRAP #15
000017FA                          1478      
000017FA  4EB9 00001804           1479      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
00001800                          1480  
00001800  5304                    1481      SUB.B       #1, D4
00001802                          1482  
00001802  60D6                    1483      BRA         OPPOSITE_CHECK_SECOND
00001804                          1484  
00001804                          1485      
00001804                          1486      
00001804                          1487  OPPOSITE_PRINT_REGISTER_MOVEM
00001804  41F9 00001816           1488      LEA        OPPOSITE_jmp_table_MOVEM, A0
0000180A  4242                    1489      CLR        D2
0000180C  143C 0006               1490      MOVE.B     #6, D2
00001810  C4C4                    1491      MULU       D4, D2                           
00001812  4EF0 2000               1492      JMP        0(A0,D2)   *Jump indirect with index
00001816                          1493                      
00001816                          1494  OPPOSITE_jmp_table_MOVEM      
00001816  4EF9 00001876           1495      JMP         OPPOSITE_bit0
0000181C  4EF9 00001886           1496                 JMP         OPPOSITE_bit1
00001822  4EF9 00001896           1497                 JMP         OPPOSITE_bit2
00001828  4EF9 000018A6           1498                 JMP         OPPOSITE_bit3
0000182E  4EF9 000018B6           1499                 JMP         OPPOSITE_bit4
00001834  4EF9 000018C6           1500                 JMP         OPPOSITE_bit5
0000183A  4EF9 000018D6           1501                 JMP         OPPOSITE_bit6
00001840  4EF9 000018E6           1502                 JMP         OPPOSITE_bit7
00001846  4EF9 000018F6           1503                 JMP         OPPOSITE_bit8
0000184C  4EF9 00001906           1504                 JMP         OPPOSITE_bit9
00001852  4EF9 00001916           1505                 JMP         OPPOSITE_bit10
00001858  4EF9 00001926           1506                 JMP         OPPOSITE_bit11
0000185E  4EF9 00001936           1507                 JMP         OPPOSITE_bit12
00001864  4EF9 00001946           1508                 JMP         OPPOSITE_bit13
0000186A  4EF9 00001956           1509                 JMP         OPPOSITE_bit14
00001870  4EF9 00001966           1510                 JMP         OPPOSITE_bit15
00001876                          1511          
00001876                          1512   
00001876                          1513   
00001876                          1514   
00001876                          1515  OPPOSITE_bit0    * D0
00001876  1E3C 0007               1516      MOVE.B    #%111, D7    * REGISTER
0000187A                          1517      
0000187A  1C3C 0001               1518      MOVE.B    #%001, D6    * MODE
0000187E                          1519  
0000187E  4EB9 000022FC           1520      JSR        PRINT_EA
00001884                          1521  
00001884  4E75                    1522      RTS    
00001886                          1523  
00001886                          1524  OPPOSITE_bit1    * D1
00001886  1E3C 0006               1525      MOVE.B    #%110, D7    * REGISTER
0000188A                          1526      
0000188A  1C3C 0001               1527      MOVE.B    #%001, D6    * MODE
0000188E                          1528  
0000188E  4EB9 000022FC           1529      JSR        PRINT_EA
00001894                          1530  
00001894  4E75                    1531      RTS    
00001896                          1532  
00001896                          1533  OPPOSITE_bit2    * D2
00001896  1E3C 0005               1534      MOVE.B    #%101, D7    * REGISTER
0000189A                          1535      
0000189A  1C3C 0001               1536      MOVE.B    #%001, D6    * MODE
0000189E                          1537  
0000189E  4EB9 000022FC           1538      JSR        PRINT_EA    
000018A4                          1539  
000018A4  4E75                    1540      RTS
000018A6                          1541  
000018A6                          1542  OPPOSITE_bit3    * D3
000018A6  1E3C 0004               1543      MOVE.B    #%100, D7    * REGISTER
000018AA                          1544      
000018AA  1C3C 0001               1545      MOVE.B    #%001, D6    * MODE
000018AE                          1546  
000018AE  4EB9 000022FC           1547      JSR        PRINT_EA
000018B4                          1548  
000018B4  4E75                    1549      RTS    
000018B6                          1550  
000018B6                          1551  OPPOSITE_bit4    * D4
000018B6  1E3C 0003               1552      MOVE.B    #%011, D7    * REGISTER
000018BA                          1553  
000018BA  1C3C 0001               1554      MOVE.B    #%001, D6    * MODE
000018BE                          1555  
000018BE  4EB9 000022FC           1556      JSR        PRINT_EA
000018C4                          1557  
000018C4  4E75                    1558      RTS    
000018C6                          1559  
000018C6                          1560  
000018C6                          1561  OPPOSITE_bit5    * D5
000018C6  1E3C 0002               1562      MOVE.B    #%010, D7    * REGISTER
000018CA                          1563      
000018CA  1C3C 0001               1564      MOVE.B    #%001, D6    * MODE
000018CE                          1565  
000018CE  4EB9 000022FC           1566      JSR        PRINT_EA
000018D4                          1567  
000018D4  4E75                    1568      RTS    
000018D6                          1569  
000018D6                          1570  OPPOSITE_bit6    * D6
000018D6  1E3C 0001               1571      MOVE.B    #%001, D7    * REGISTER
000018DA                          1572      
000018DA  1C3C 0001               1573      MOVE.B    #%001, D6    * MODE
000018DE                          1574  
000018DE  4EB9 000022FC           1575      JSR        PRINT_EA
000018E4                          1576  
000018E4  4E75                    1577      RTS    
000018E6                          1578  
000018E6                          1579  OPPOSITE_bit7    * D7
000018E6  1E3C 0000               1580      MOVE.B    #%000, D7    * REGISTER
000018EA                          1581      
000018EA  1C3C 0001               1582      MOVE.B    #%001, D6    * MODE
000018EE                          1583  
000018EE  4EB9 000022FC           1584      JSR        PRINT_EA
000018F4                          1585  
000018F4  4E75                    1586      RTS    
000018F6                          1587  
000018F6                          1588  OPPOSITE_bit8    * A0
000018F6  1E3C 0007               1589      MOVE.B    #%111, D7    * REGISTER
000018FA                          1590      
000018FA  1C3C 0000               1591      MOVE.B    #%000, D6    * MODE
000018FE                          1592  
000018FE  4EB9 000022FC           1593      JSR        PRINT_EA
00001904                          1594  
00001904  4E75                    1595      RTS    
00001906                          1596  
00001906                          1597  OPPOSITE_bit9    * A1
00001906  1E3C 0006               1598      MOVE.B    #%110, D7    * REGISTER
0000190A                          1599      
0000190A  1C3C 0000               1600      MOVE.B    #%000, D6    * MODE
0000190E                          1601  
0000190E  4EB9 000022FC           1602      JSR        PRINT_EA
00001914                          1603  
00001914  4E75                    1604      RTS    
00001916                          1605  
00001916                          1606  OPPOSITE_bit10    * A2
00001916  1E3C 0005               1607      MOVE.B    #%101, D7    * REGISTER
0000191A                          1608      
0000191A  1C3C 0000               1609      MOVE.B    #%000, D6    * MODE
0000191E                          1610  
0000191E  4EB9 000022FC           1611      JSR        PRINT_EA
00001924                          1612  
00001924  4E75                    1613      RTS    
00001926                          1614  
00001926                          1615  
00001926                          1616  OPPOSITE_bit11    * A5
00001926  1E3C 0002               1617      MOVE.B    #%010, D7    * REGISTER
0000192A                          1618      
0000192A  1C3C 0000               1619      MOVE.B    #%000, D6    * MODE
0000192E                          1620  
0000192E  4EB9 000022FC           1621      JSR        PRINT_EA
00001934                          1622  
00001934  4E75                    1623      RTS    
00001936                          1624  
00001936                          1625  OPPOSITE_bit12    * A4
00001936  1E3C 0003               1626      MOVE.B    #%011, D7    * REGISTER
0000193A                          1627      
0000193A  1C3C 0000               1628      MOVE.B    #%000, D6    * MODE
0000193E                          1629  
0000193E  4EB9 000022FC           1630      JSR        PRINT_EA
00001944                          1631  
00001944  4E75                    1632      RTS    
00001946                          1633  
00001946                          1634  
00001946                          1635  OPPOSITE_bit13    * A5
00001946  1E3C 0002               1636      MOVE.B    #%010, D7    * REGISTER
0000194A                          1637      
0000194A  1C3C 0000               1638      MOVE.B    #%000, D6    * MODE
0000194E                          1639  
0000194E  4EB9 000022FC           1640      JSR        PRINT_EA
00001954                          1641  
00001954  4E75                    1642      RTS    
00001956                          1643  
00001956                          1644  
00001956                          1645  OPPOSITE_bit14     * A6
00001956  1E3C 0001               1646      MOVE.B    #%001, D7    * REGISTER
0000195A                          1647      
0000195A  1C3C 0000               1648      MOVE.B    #%000, D6    * MODE
0000195E                          1649  
0000195E  4EB9 000022FC           1650      JSR        PRINT_EA
00001964                          1651  
00001964  4E75                    1652      RTS        
00001966                          1653  
00001966                          1654  
00001966                          1655  OPPOSITE_bit15    * A7
00001966  1E3C 0000               1656      MOVE.B    #%000, D7    * REGISTER
0000196A                          1657      
0000196A  1C3C 0000               1658      MOVE.B    #%000, D6    * MODE
0000196E                          1659  
0000196E  4EB9 000022FC           1660      JSR        PRINT_EA
00001974                          1661  
00001974  4E75                    1662      RTS    
00001976                          1663  
00001976                          1664  
00001976                          1665  
00001976                          1666  
00001976                          1667  
00001976                          1668  LOOP_MOVEM
00001976                          1669          
00001976  0903                    1670      BTST        D4, D3     * BIT TEST
00001978                          1671  
00001978  6600 0020               1672      BNE         IS_USED_FIRST
0000197C                          1673  
0000197C  5304                    1674      SUB.B       #1, D4
0000197E                          1675      
0000197E                          1676  CHECK
0000197E  B83C 00FF               1677      CMP.B       #-1,  D4
00001982                          1678  
00001982  6700 0B64               1679      BEQ         DONE
00001986                          1680  
00001986  60EE                    1681      BRA         LOOP_MOVEM
00001988                          1682      
00001988                          1683  LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
00001988  0903                    1684      BTST        D4, D3     * BIT TEST
0000198A                          1685  
0000198A  6600 0018               1686      BNE         IS_USED
0000198E                          1687  
0000198E  5304                    1688      SUB.B       #1, D4
00001990                          1689      
00001990                          1690  CHECK_SECOND
00001990  B83C 00FF               1691      CMP.B       #-1,  D4
00001994                          1692  
00001994  6700 0B52               1693      BEQ         DONE
00001998                          1694  
00001998  60EE                    1695      BRA         LOOP_MOVEM_SECOND
0000199A                          1696  
0000199A                          1697  IS_USED_FIRST
0000199A  4EB9 000019BA           1698      JSR         PRINT_REGISTER_MOVEM
000019A0                          1699  
000019A0  5304                    1700      SUB.B       #1, D4
000019A2                          1701  
000019A2  60EC                    1702      BRA         CHECK_SECOND
000019A4                          1703  
000019A4                          1704  
000019A4                          1705  IS_USED
000019A4  43F9 000026B7           1706      LEA         SLASH, A1
000019AA                          1707  
000019AA  103C 000E               1708      MOVE.B      #14, D0
000019AE                          1709  
000019AE  4E4F                    1710      TRAP #15
000019B0                          1711      
000019B0  4EB9 000019BA           1712      JSR         PRINT_REGISTER_MOVEM
000019B6                          1713  
000019B6  5304                    1714      SUB.B       #1, D4
000019B8                          1715  
000019B8  60D6                    1716      BRA         CHECK_SECOND
000019BA                          1717  
000019BA                          1718  
000019BA                          1719  
000019BA                          1720  
000019BA                          1721  
000019BA                          1722  PRINT_REGISTER_MOVEM
000019BA  41F9 000019CC           1723      LEA         jmp_table_MOVEM, A0
000019C0  4242                    1724      CLR         D2
000019C2  143C 0006               1725      MOVE.B      #6, D2
000019C6  C4C4                    1726      MULU        D4, D2                           
000019C8  4EF0 2000               1727      JMP         0(A0,D2)   *Jump indirect with index
000019CC                          1728                      
000019CC                          1729  jmp_table_MOVEM      
000019CC  4EF9 00001A2C           1730      JMP         bit0
000019D2  4EF9 00001A3C           1731                 JMP         bit1
000019D8  4EF9 00001A4C           1732                 JMP         bit2
000019DE  4EF9 00001A5C           1733                 JMP         bit3
000019E4  4EF9 00001A6C           1734                 JMP         bit4
000019EA  4EF9 00001A7C           1735                 JMP         bit5
000019F0  4EF9 00001A8C           1736                 JMP         bit6
000019F6  4EF9 00001A9C           1737                 JMP         bit7
000019FC  4EF9 00001AAC           1738                 JMP         bit8
00001A02  4EF9 00001ABC           1739                 JMP         bit9
00001A08  4EF9 00001ACC           1740                 JMP         bit10
00001A0E  4EF9 00001ADC           1741                 JMP         bit11
00001A14  4EF9 00001AEC           1742                 JMP         bit12
00001A1A  4EF9 00001AFC           1743                 JMP         bit13
00001A20  4EF9 00001B0C           1744                 JMP         bit14
00001A26  4EF9 00001B1C           1745                 JMP         bit15
00001A2C                          1746          
00001A2C                          1747   
00001A2C                          1748   
00001A2C                          1749   
00001A2C                          1750  bit0    * D0
00001A2C  1E3C 0000               1751      MOVE.B    #%000, D7    * REGISTER
00001A30                          1752      
00001A30  1C3C 0000               1753      MOVE.B    #%000, D6    * MODE
00001A34                          1754  
00001A34  4EB9 000022FC           1755      JSR        PRINT_EA
00001A3A                          1756  
00001A3A  4E75                    1757      RTS    
00001A3C                          1758  
00001A3C                          1759  bit1    * D1
00001A3C  1E3C 0001               1760      MOVE.B    #%001, D7    * REGISTER
00001A40                          1761      
00001A40  1C3C 0000               1762      MOVE.B    #%000, D6    * MODE
00001A44                          1763  
00001A44  4EB9 000022FC           1764      JSR        PRINT_EA
00001A4A                          1765  
00001A4A  4E75                    1766      RTS    
00001A4C                          1767  
00001A4C                          1768  bit2    * D2
00001A4C  1E3C 0002               1769      MOVE.B    #%010, D7    * REGISTER
00001A50                          1770      
00001A50  1C3C 0000               1771      MOVE.B    #%000, D6    * MODE
00001A54                          1772  
00001A54  4EB9 000022FC           1773      JSR        PRINT_EA    
00001A5A                          1774  
00001A5A  4E75                    1775      RTS
00001A5C                          1776  
00001A5C                          1777  bit3    * D3
00001A5C  1E3C 0003               1778      MOVE.B    #%011, D7    * REGISTER
00001A60                          1779      
00001A60  1C3C 0000               1780      MOVE.B    #%000, D6    * MODE
00001A64                          1781  
00001A64  4EB9 000022FC           1782      JSR        PRINT_EA
00001A6A                          1783  
00001A6A  4E75                    1784      RTS    
00001A6C                          1785  
00001A6C                          1786  bit4    * D4
00001A6C  1E3C 0004               1787      MOVE.B    #%100, D7    * REGISTER
00001A70                          1788  
00001A70  1C3C 0000               1789      MOVE.B    #%000, D6    * MODE
00001A74                          1790  
00001A74  4EB9 000022FC           1791      JSR        PRINT_EA
00001A7A                          1792  
00001A7A  4E75                    1793      RTS    
00001A7C                          1794  
00001A7C                          1795  
00001A7C                          1796  bit5    * D5
00001A7C  1E3C 0005               1797      MOVE.B    #%101, D7    * REGISTER
00001A80                          1798      
00001A80  1C3C 0000               1799      MOVE.B    #%000, D6    * MODE
00001A84                          1800  
00001A84  4EB9 000022FC           1801      JSR        PRINT_EA
00001A8A                          1802  
00001A8A  4E75                    1803      RTS    
00001A8C                          1804  
00001A8C                          1805  bit6    * D6
00001A8C  1E3C 0006               1806      MOVE.B    #%110, D7    * REGISTER
00001A90                          1807      
00001A90  1C3C 0000               1808      MOVE.B    #%000, D6    * MODE
00001A94                          1809  
00001A94  4EB9 000022FC           1810      JSR        PRINT_EA
00001A9A                          1811  
00001A9A  4E75                    1812      RTS    
00001A9C                          1813  
00001A9C                          1814  bit7    * D7
00001A9C  1E3C 0007               1815      MOVE.B    #%111, D7    * REGISTER
00001AA0                          1816      
00001AA0  1C3C 0000               1817      MOVE.B    #%000, D6    * MODE
00001AA4                          1818  
00001AA4  4EB9 000022FC           1819      JSR        PRINT_EA
00001AAA                          1820  
00001AAA  4E75                    1821      RTS    
00001AAC                          1822  
00001AAC                          1823  bit8    * A0
00001AAC  1E3C 0000               1824      MOVE.B    #%000, D7    * REGISTER
00001AB0                          1825      
00001AB0  1C3C 0001               1826      MOVE.B    #%001, D6    * MODE
00001AB4                          1827  
00001AB4  4EB9 000022FC           1828      JSR        PRINT_EA
00001ABA                          1829  
00001ABA  4E75                    1830      RTS    
00001ABC                          1831  
00001ABC                          1832  bit9    * A1
00001ABC  1E3C 0001               1833      MOVE.B    #%001, D7    * REGISTER
00001AC0                          1834      
00001AC0  1C3C 0001               1835      MOVE.B    #%001, D6    * MODE
00001AC4                          1836  
00001AC4  4EB9 000022FC           1837      JSR        PRINT_EA
00001ACA                          1838  
00001ACA  4E75                    1839      RTS    
00001ACC                          1840  
00001ACC                          1841  bit10    * A2
00001ACC  1E3C 0002               1842      MOVE.B    #%010, D7    * REGISTER
00001AD0                          1843      
00001AD0  1C3C 0001               1844      MOVE.B    #%001, D6    * MODE
00001AD4                          1845  
00001AD4  4EB9 000022FC           1846      JSR        PRINT_EA
00001ADA                          1847  
00001ADA  4E75                    1848      RTS    
00001ADC                          1849  
00001ADC                          1850  
00001ADC                          1851  bit11    * A5
00001ADC  1E3C 0003               1852      MOVE.B    #%011, D7    * REGISTER
00001AE0                          1853      
00001AE0  1C3C 0001               1854      MOVE.B    #%001, D6    * MODE
00001AE4                          1855  
00001AE4  4EB9 000022FC           1856      JSR        PRINT_EA
00001AEA                          1857  
00001AEA  4E75                    1858      RTS    
00001AEC                          1859  
00001AEC                          1860  bit12    * A4
00001AEC  1E3C 0004               1861      MOVE.B    #%100, D7    * REGISTER
00001AF0                          1862      
00001AF0  1C3C 0001               1863      MOVE.B    #%001, D6    * MODE
00001AF4                          1864  
00001AF4  4EB9 000022FC           1865      JSR        PRINT_EA
00001AFA                          1866  
00001AFA  4E75                    1867      RTS    
00001AFC                          1868  
00001AFC                          1869  
00001AFC                          1870  bit13    * A5
00001AFC  1E3C 0005               1871      MOVE.B    #%101, D7    * REGISTER
00001B00                          1872      
00001B00  1C3C 0001               1873      MOVE.B    #%001, D6    * MODE
00001B04                          1874  
00001B04  4EB9 000022FC           1875      JSR        PRINT_EA
00001B0A                          1876  
00001B0A  4E75                    1877      RTS    
00001B0C                          1878  
00001B0C                          1879  
00001B0C                          1880  bit14     * A6
00001B0C  1E3C 0006               1881      MOVE.B    #%110, D7    * REGISTER
00001B10                          1882      
00001B10  1C3C 0001               1883      MOVE.B    #%001, D6    * MODE
00001B14                          1884  
00001B14  4EB9 000022FC           1885      JSR        PRINT_EA
00001B1A                          1886  
00001B1A  4E75                    1887      RTS        
00001B1C                          1888  
00001B1C                          1889  
00001B1C                          1890  bit15    * A7
00001B1C  1E3C 0007               1891      MOVE.B    #%111, D7    * REGISTER
00001B20                          1892      
00001B20  1C3C 0001               1893      MOVE.B    #%001, D6    * MODE
00001B24                          1894  
00001B24  4EB9 000022FC           1895      JSR        PRINT_EA
00001B2A                          1896  
00001B2A  4E75                    1897      RTS    
00001B2C                          1898  
00001B2C                          1899  DONE_MOVEM_LOOP
00001B2C  4E75                    1900      RTS
00001B2E                          1901  
00001B2E                          1902     * SIMHALT             ; halt simulator
00001B2E                          1903      *INCLUDE 'MESSAGE_Data.X68'
00001B2E                          1904     * INCLUDE 'JUMPTABLE EA.X68'
00001B2E                          1905  
00001B2E                          1906  
00001B2E                          1907     * END    START        ; last line of source
00001B2E                          1908  
00001B2E                          1909  
00001B2E                          1910  
00001B2E                          1911  
00001B2E                          1912  
00001B2E                          1913  
00001B2E                          1914  
00001B2E                          1915  
00001B2E                          1916  
00001B2E                          1917  
00001B2E                          1918  
00001B2E                          1919  
00001B2E                          1920  
00001B2E                          1921  
00001B2E                          1922  
00001B2E                          1923  
00001B2E                          1924  
00001B2E                          1925  
00001B2E                          1926  
00001B2E                          1927  
00001B2E                          1928  
00001B2E                          1929  
00001B2E                          1930  
00001B2E                          1931  
00001B2E                          1932  
00001B2E                          1933  
00001B2E                          1934  
00001B2E                          1935  
00001B2E                          1936  
00001B2E                          1937  
00001B2E                          1938  
00001B2E                          1939  
00001B2E                          1940  
00001B2E                          1941  
00001B2E                          1942  
00001B2E                          1943  
00001B2E                          1944  
00001B2E                          1945  
00001B2E                          1946  -------------------- end include --------------------
00001B2E                          1947                  INCLUDE 'MOVEQ.X68'
00001B2E                          1948  
00001B2E                          1949  MOVEQ 
00001B2E                          1950  
00001B2E                          1951                   * ADD message
00001B2E  43F9 0000264D           1952                   LEA      MOVEQ_MESSAGE,    A1
00001B34  103C 000E               1953                   MOVE.B   #14,            D0
00001B38  4E4F                    1954                   TRAP #15
00001B3A                          1955                   
00001B3A                          1956                   * print out size L
00001B3A  43F9 000026A8           1957                   LEA      SIZE_L_PRINT,    A1
00001B40  103C 000E               1958                   MOVE.B   #14,             D0          
00001B44  4E4F                    1959                   TRAP #15   
00001B46                          1960                   
00001B46                          1961                   * print out immediate Data
00001B46                          1962                   
00001B46  43F9 000026AE           1963                  LEA     POUND_SIGN, A1
00001B4C                          1964              
00001B4C  103C 000E               1965                  MOVE.B  #14, D0
00001B50                          1966              
00001B50  4E4F                    1967                  TRAP #15
00001B52                          1968              
00001B52  43F9 000026B0           1969                  LEA     HEX_SIGN, A1
00001B58                          1970              
00001B58  4E4F                    1971                  TRAP #15
00001B5A                          1972                  
00001B5A  4280                    1973                  CLR.L       D0              *Zero it
00001B5C                          1974  
00001B5C  3015                    1975                  MOVE.W      (A5),D0     *We'll play with it here
00001B5E                          1976                 
00001B5E  123C 0008               1977                  MOVE.B      #8, D1
00001B62                          1978                 
00001B62  E368                    1979                  LSL.W       D1, D0
00001B64                          1980  
00001B64  123C 0008               1981                  MOVE.B      #8,D1       *Shift 12 bits to the right  
00001B68                          1982  
00001B68  E268                    1983                  LSR.W       D1,D0           *Move the bits -> D0 holds DATA
00001B6A                          1984                      
00001B6A  4285                    1985                  CLR.L D5
00001B6C                          1986                 
00001B6C  3A00                    1987                  MOVE.W D0, D5      
00001B6E                          1988          
00001B6E  4EB9 0000225E           1989                  JSR         HEX_TO_ASCII
00001B74                          1990                  
00001B74  43F9 000026CE           1991                  LEA      COMMA,    A1
00001B7A  103C 000E               1992                  MOVE.B   #14,            D0
00001B7E  4E4F                    1993                  TRAP #15
00001B80                          1994                   
00001B80                          1995                  * for the first Dn 
00001B80  4286                    1996                  CLR.L D6
00001B82                          1997                  
00001B82  4EB9 0000207A           1998                  JSR     GET_Data_Register
00001B88                          1999                  
00001B88  1C3C 0000               2000                  MOVE.B  #%000, D6 * for mode
00001B8C                          2001                   
00001B8C  4EB9 000022FC           2002                  JSR     PRINT_EA *by using jmp table
00001B92                          2003                   
00001B92  6000 F55C               2004                  BRA PARSE_MEMORY
00001B96                          2005          
00001B96                          2006  
00001B96                          2007  
00001B96                          2008  
00001B96                          2009  
00001B96                          2010  
00001B96                          2011  
00001B96                          2012  
00001B96                          2013  
00001B96                          2014  
00001B96                          2015  
00001B96                          2016  
00001B96                          2017  
00001B96                          2018  -------------------- end include --------------------
00001B96                          2019                  INCLUDE 'DAMIAN_OP_CODE.X68'
00001B96  4280                    2020  SHIFTS           CLR.L D0
00001B98                          2021                      
00001B98  4286                    2022                   CLR.L D6
00001B9A                          2023  
00001B9A  4281                    2024                   CLR.L D1
00001B9C                          2025                   
00001B9C  3015                    2026                   MOVE.W (A5), D0
00001B9E                          2027                   
00001B9E  E148                    2028                   LSL.W #8, D0
00001BA0                          2029                   
00001BA0  123C 000E               2030                   MOVE.B #14, D1
00001BA4                          2031                   
00001BA4  E268                    2032                   LSR.W D1, D0
00001BA6                          2033                   
00001BA6  B03C 0003               2034                   CMP.B  #%11, D0            * check to see if its memory shift
00001BAA                          2035                   
00001BAA  6700 0024               2036                   BEQ MEMORY_SHIFTS
00001BAE                          2037                   
00001BAE  3015                    2038                   MOVE.W     (A5), D0
00001BB0                          2039                   
00001BB0  123C 000B               2040                   MOVE.B     #11, D1
00001BB4                          2041                   
00001BB4  E368                    2042                   LSL.W      D1, D0
00001BB6                          2043                   
00001BB6  123C 000E               2044                   MOVE.B     #14, D1
00001BBA                          2045                   
00001BBA  E268                    2046                   LSR.W      D1, D0
00001BBC                          2047                   
00001BBC  B03C 0000               2048                   CMP.B      #%00, D0
00001BC0                          2049                   
00001BC0  6700 010A               2050                   BEQ        ASD
00001BC4                          2051                   
00001BC4  B03C 0001               2052                   CMP.B      #%01, D0
00001BC8                          2053                   
00001BC8  6700 0032               2054                   BEQ        LSD
00001BCC                          2055                   
00001BCC  6000 0096               2056                   BRA        ROD
00001BD0                          2057                   
00001BD0                          2058                   
00001BD0                          2059  MEMORY_SHIFTS
00001BD0  3015                    2060                   MOVE.W (A5),D0
00001BD2                          2061                   
00001BD2  E948                    2062                   LSL.W #4,D0            *shift out the opcode
00001BD4                          2063                   
00001BD4  123C 000D               2064                   MOVE.B #13,D1          
00001BD8                          2065                   
00001BD8  E268                    2066                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there
00001BDA                          2067                   
00001BDA  B03C 0001               2068                   CMP.B #1,D0            
00001BDE                          2069                   
00001BDE  6700 001C               2070                   BEQ LSD                *if the bits are 1, it is a logical shift
00001BE2                          2071                   
00001BE2  B03C 0003               2072                   CMP.B #3,D0
00001BE6                          2073                   
00001BE6  6700 007C               2074                   BEQ ROD                *if the bits are 3, it is a rotation
00001BEA                          2075                   
00001BEA  3015                    2076                   MOVE.W (A5),D0
00001BEC                          2077                   
00001BEC  E948                    2078                   LSL.W #4,D0            *shift out the opcode
00001BEE                          2079                   
00001BEE  123C 000D               2080                   MOVE.B #13,D1          
00001BF2                          2081                   
00001BF2  E268                    2082                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there   
00001BF4                          2083                      
00001BF4  B03C 0000               2084                   CMP.B  #0, D0
00001BF8                          2085                   
00001BF8  6700 00D2               2086                   BEQ    ASD
00001BFC                          2087                   
00001BFC                          2088  
00001BFC  4280                    2089  LSD              CLR.L D0               *still need to do checks, since an asd shift could still be a possibility
00001BFE                          2090                   
00001BFE  4281                    2091                   CLR.L D1
00001C00                          2092                                                 
00001C00  3015                    2093                   MOVE.W (A5), D0
00001C02                          2094                   
00001C02  EF48                    2095                   LSL.W  #7, D0
00001C04                          2096                   
00001C04  123C 000F               2097                   MOVE.B #15, D1
00001C08                          2098                   
00001C08  E268                    2099                   LSR.W  D1, D0
00001C0A                          2100                   
00001C0A  B03C 0001               2101                   CMP.B  #1, D0
00001C0E                          2102                   
00001C0E  6700 0006               2103                   BEQ LSL
00001C12                          2104                   
00001C12  6000 0024               2105                   BRA LSR
00001C16                          2106                   
00001C16                          2107  
00001C16                          2108  LSL
00001C16  43F9 0000267E           2109                   LEA LSL_MESSAGE, A1    * print message
00001C1C                          2110                   
00001C1C  103C 000E               2111                   MOVE.B #14, D0
00001C20                          2112                   
00001C20  4E4F                    2113                   TRAP #15
00001C22                          2114              
00001C22  3015                    2115                   MOVE.W (A5), D0
00001C24                          2116                   
00001C24  E148                    2117                   LSL.W #8, D0
00001C26                          2118                   
00001C26  123C 000E               2119                   MOVE.B #14, D1
00001C2A                          2120                   
00001C2A  E268                    2121                   LSR.W D1, D0
00001C2C                          2122                   
00001C2C  B03C 0003               2123                   CMP.B  #%11, D0        * check to see if it is memory and not register shift
00001C30                          2124                   
00001C30  6700 0028               2125                   BEQ LSD_MEMORY
00001C34                          2126                   
00001C34  6000 00FA               2127                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001C38                          2128  
00001C38                          2129  LSR              
00001C38  43F9 0000268D           2130                   LEA LSR_MESSAGE, A1            * print message
00001C3E                          2131                   
00001C3E  103C 000E               2132                   MOVE.B #14, D0
00001C42                          2133                   
00001C42  4E4F                    2134                   TRAP #15
00001C44                          2135          
00001C44  3015                    2136                   MOVE.W (A5), D0
00001C46                          2137                   
00001C46  E148                    2138                   LSL.W #8, D0
00001C48                          2139                   
00001C48  123C 000E               2140                   MOVE.B #14, D1
00001C4C                          2141                   
00001C4C  E268                    2142                   LSR.W D1, D0
00001C4E                          2143                   
00001C4E  B03C 0003               2144                   CMP.B  #%11, D0            * check to see if memory shift
00001C52                          2145                   
00001C52  6700 0006               2146                   BEQ LSD_MEMORY
00001C56                          2147                   
00001C56  6000 00D8               2148                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001C5A                          2149                   
00001C5A                          2150  LSD_MEMORY
00001C5A  4EB9 00001DDC           2151                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001C60                          2152                   
00001C60  6000 F48E               2153                   BRA PARSE_MEMORY
00001C64                          2154              
00001C64                          2155  
00001C64  4280                    2156  ROD              CLR.L D0               *same check as logical shift, since an arithmetic shift could still be possible
00001C66                          2157                   
00001C66  4281                    2158                   CLR.L D1
00001C68                          2159                   
00001C68  3015                    2160                   MOVE.W (A5), D0
00001C6A                          2161                   
00001C6A  EF48                    2162                   LSL.W  #7, D0
00001C6C                          2163                   
00001C6C  123C 000F               2164                   MOVE.B #15, D1
00001C70                          2165                   
00001C70  E268                    2166                   LSR.W  D1, D0
00001C72                          2167                   
00001C72  B03C 0001               2168                   CMP.B  #1, D0
00001C76                          2169                   
00001C76  6700 0006               2170                   BEQ ROL
00001C7A                          2171                   
00001C7A  6000 0024               2172                   BRA ROR
00001C7E                          2173  
00001C7E                          2174  ROL              
00001C7E  43F9 00002688           2175                   LEA ROL_MESSAGE, A1
00001C84                          2176                   
00001C84  103C 000E               2177                   MOVE.B #14, D0
00001C88                          2178                   
00001C88  4E4F                    2179                   TRAP #15
00001C8A                          2180  
00001C8A  3015                    2181                   MOVE.W (A5), D0
00001C8C                          2182                   
00001C8C  E148                    2183                   LSL.W #8, D0
00001C8E                          2184                   
00001C8E  123C 000E               2185                   MOVE.B #14, D1
00001C92                          2186                   
00001C92  E268                    2187                   LSR.W D1, D0
00001C94                          2188                   
00001C94  B03C 0003               2189                   CMP.B  #%11, D0            * check to see if its memory shift
00001C98                          2190                   
00001C98  6700 0028               2191                   BEQ ROD_MEMORY
00001C9C                          2192                   
00001C9C  6000 0092               2193                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001CA0                          2194  
00001CA0                          2195  ROR       
00001CA0  43F9 00002697           2196                   LEA ROR_MESSAGE, A1
00001CA6                          2197                   
00001CA6  103C 000E               2198                   MOVE.B #14, D0
00001CAA                          2199                   
00001CAA  4E4F                    2200                   TRAP #15
00001CAC                          2201                   
00001CAC  3015                    2202                   MOVE.W (A5), D0
00001CAE                          2203                   
00001CAE  E148                    2204                   LSL.W #8, D0
00001CB0                          2205                   
00001CB0  123C 000E               2206                   MOVE.B #14, D1
00001CB4                          2207                   
00001CB4  E268                    2208                   LSR.W D1, D0
00001CB6                          2209                   
00001CB6  B03C 0003               2210                   CMP.B  #%11, D0            * check to see if its memory shift
00001CBA                          2211                   
00001CBA  6700 0006               2212                   BEQ ROD_MEMORY
00001CBE                          2213                   
00001CBE  6000 0070               2214                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001CC2                          2215  
00001CC2                          2216  ROD_MEMORY       
00001CC2  4EB9 00001DDC           2217                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001CC8                          2218                   
00001CC8  6000 F426               2219                   BRA PARSE_MEMORY
00001CCC                          2220                   
00001CCC                          2221                   
00001CCC  3015                    2222  ASD              MOVE.W (A5), D0
00001CCE                          2223                   
00001CCE  EF48                    2224                   LSL.W  #7, D0
00001CD0                          2225                   
00001CD0  123C 000F               2226                   MOVE.B #15, D1
00001CD4                          2227                   
00001CD4  E268                    2228                   LSR.W  D1, D0
00001CD6                          2229                   
00001CD6  B03C 0001               2230                   CMP.B  #1, D0
00001CDA                          2231                   
00001CDA  6700 0006               2232                   BEQ ASL
00001CDE                          2233                   
00001CDE  6000 0024               2234                   BRA ASR
00001CE2                          2235                   
00001CE2                          2236  ASL
00001CE2  43F9 00002683           2237                   LEA ASL_MESSAGE, A1
00001CE8                          2238                   
00001CE8  103C 000E               2239                   MOVE.B #14, D0
00001CEC                          2240                   
00001CEC  4E4F                    2241                   TRAP #15
00001CEE                          2242                   
00001CEE  3015                    2243                   MOVE.W (A5), D0
00001CF0                          2244                   
00001CF0  E148                    2245                   LSL.W #8, D0
00001CF2                          2246                   
00001CF2  123C 000E               2247                   MOVE.B #14, D1
00001CF6                          2248                   
00001CF6  E268                    2249                   LSR.W D1, D0
00001CF8                          2250                   
00001CF8  B03C 0003               2251                   CMP.B  #%11, D0            * check to see if its memory shift
00001CFC                          2252                   
00001CFC  6700 0028               2253                   BEQ ASD_MEMORY
00001D00                          2254                   
00001D00  6000 002E               2255                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001D04                          2256                                    
00001D04                          2257  
00001D04                          2258  ASR              
00001D04  43F9 00002692           2259                   LEA ASR_MESSAGE, A1
00001D0A                          2260                   
00001D0A  103C 000E               2261                   MOVE.B #14, D0
00001D0E                          2262                   
00001D0E  4E4F                    2263                   TRAP #15
00001D10                          2264                   
00001D10  3015                    2265                   MOVE.W (A5), D0
00001D12                          2266                   
00001D12  E148                    2267                   LSL.W #8, D0
00001D14                          2268                   
00001D14  123C 000E               2269                   MOVE.B #14, D1
00001D18                          2270                   
00001D18  E268                    2271                   LSR.W D1, D0
00001D1A                          2272                   
00001D1A  B03C 0003               2273                   CMP.B  #%11, D0            * check to see if its memory shift
00001D1E                          2274                   
00001D1E  6700 0006               2275                   BEQ ASD_MEMORY
00001D22                          2276                   
00001D22  6000 000C               2277                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001D26                          2278  
00001D26                          2279  ASD_MEMORY
00001D26  4EB9 00001DDC           2280                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001D2C                          2281                   
00001D2C  6000 F3C2               2282                   BRA PARSE_MEMORY
00001D30                          2283                   
00001D30                          2284  PRINTOUT_REGISTER_SHIFTS_EA
00001D30  43F9 000026B2           2285                   LEA PERIOD, A1
00001D36                          2286                   
00001D36  103C 000E               2287                   MOVE.B #14, D0
00001D3A                          2288                   
00001D3A  4E4F                    2289                   TRAP #15
00001D3C                          2290                  
00001D3C  4EB9 0000200C           2291                   JSR GET_SIZE_PURPLE
00001D42                          2292                   
00001D42  4EB9 00002022           2293                   JSR PRINTOUT_SIZE_PURPLE
00001D48                          2294  
00001D48  3015                    2295                   MOVE.W (A5), D0
00001D4A                          2296                   
00001D4A  123C 000A               2297                   MOVE.B #10, D1
00001D4E                          2298                   
00001D4E  E368                    2299                   LSL.W D1, D0
00001D50                          2300                   
00001D50  123C 000F               2301                   MOVE.B #15, D1
00001D54                          2302                   
00001D54  E268                    2303                   LSR.W D1, D0
00001D56                          2304                   
00001D56  B03C 0001               2305                   CMP.B #1, D0
00001D5A                          2306                   
00001D5A  6700 0048               2307                   BEQ PRINTOUT_REGISTER
00001D5E                          2308                   
00001D5E  6000 0002               2309                   BRA PRINTOUT_COUNT
00001D62                          2310  
00001D62                          2311                   
00001D62                          2312  PRINTOUT_COUNT
00001D62  43F9 000026AE           2313                   LEA POUND_SIGN, A1
00001D68                          2314  
00001D68  103C 000E               2315                   MOVE.B #14, D0
00001D6C                          2316  
00001D6C  4E4F                    2317                   TRAP #15     
00001D6E                          2318                 
00001D6E  3015                    2319                   MOVE.W (A5), D0
00001D70                          2320                   
00001D70  E948                    2321                   LSL.W #4, D0
00001D72                          2322                   
00001D72  123C 000D               2323                   MOVE.B #13, D1
00001D76                          2324                   
00001D76  E268                    2325                   LSR.W D1, D0
00001D78                          2326                   
00001D78  1200                    2327                   MOVE.B D0, D1
00001D7A                          2328                   
00001D7A  103C 0003               2329                   MOVE.B #3, D0
00001D7E                          2330                   
00001D7E  4E4F                    2331                   TRAP #15                  * print out the amount that the ea is being shifted by
00001D80                          2332                   
00001D80  43F9 000026CE           2333                   LEA COMMA, A1
00001D86                          2334                   
00001D86  103C 000E               2335                   MOVE.B #14, D0
00001D8A                          2336                   
00001D8A  4E4F                    2337                   TRAP #15
00001D8C                          2338                   
00001D8C  3015                    2339                   MOVE.W (A5), D0
00001D8E                          2340                   
00001D8E  123C 000D               2341                   MOVE.B #13, D1                * to print out the ea that is being shifted
00001D92                          2342                   
00001D92  E368                    2343                   LSL.W D1, D0
00001D94                          2344                   
00001D94  E268                    2345                   LSR.W D1, D0
00001D96                          2346                   
00001D96  1E00                    2347                   MOVE.B D0, D7
00001D98                          2348                   
00001D98  7C00                    2349                   MOVE.L #%000, D6              * we know it is a data register
00001D9A                          2350                   
00001D9A  4EB9 000022FC           2351                   JSR PRINT_EA
00001DA0                          2352                   
00001DA0  6000 F34E               2353                   BRA PARSE_MEMORY
00001DA4                          2354                   
00001DA4                          2355  
00001DA4                          2356  PRINTOUT_REGISTER
00001DA4  3015                    2357                   MOVE.W (A5), D0
00001DA6                          2358                   
00001DA6  E948                    2359                   LSL.W #4, D0
00001DA8                          2360                   
00001DA8  123C 000D               2361                   MOVE.B #13, D1
00001DAC                          2362                   
00001DAC  E268                    2363                   LSR.W D1, D0
00001DAE                          2364                   
00001DAE  1E00                    2365                   MOVE.B D0, D7
00001DB0                          2366                   
00001DB0  7C00                    2367                   MOVE.L #%000, D6
00001DB2                          2368                   
00001DB2  4EB9 000022FC           2369                   JSR PRINT_EA                  * to print out the data register
00001DB8                          2370                   
00001DB8  43F9 000026CE           2371                   LEA COMMA, A1
00001DBE                          2372                   
00001DBE  103C 000E               2373                   MOVE.B #14, D0
00001DC2                          2374                   
00001DC2  4E4F                    2375                   TRAP #15
00001DC4                          2376                   
00001DC4  3015                    2377                   MOVE.W (A5), D0
00001DC6                          2378                   
00001DC6  123C 000D               2379                   MOVE.B #13, D1                * to print out the ea that is being shifted
00001DCA                          2380                   
00001DCA  E368                    2381                   LSL.W D1, D0
00001DCC                          2382                   
00001DCC  E268                    2383                   LSR.W D1, D0
00001DCE                          2384                   
00001DCE  1E00                    2385                   MOVE.B D0, D7
00001DD0                          2386                   
00001DD0  7C00                    2387                   MOVE.L #%000, D6              * we know it is a data register
00001DD2                          2388                   
00001DD2  4EB9 000022FC           2389                   JSR PRINT_EA
00001DD8                          2390                   
00001DD8  6000 F316               2391                   BRA PARSE_MEMORY
00001DDC                          2392                                   
00001DDC                          2393  
00001DDC                          2394  PRINTOUT_MEMORY_SHIFTS_EA   * gets the mode and register of the memory ea, and prints it out
00001DDC                          2395                   *JSR GET_SIZE_PURPLE
00001DDC                          2396                   
00001DDC                          2397                   *JSR PRINTOUT_SIZE_PURPLE
00001DDC                          2398                   
00001DDC  43F9 000026B4           2399                   LEA SPACE, A1
00001DE2                          2400                   
00001DE2  103C 000E               2401                   MOVE.B #14, D0
00001DE6                          2402                   
00001DE6  4E4F                    2403                   TRAP #15
00001DE8                          2404  
00001DE8  3015                    2405                   MOVE.W (A5), D0
00001DEA                          2406                   
00001DEA  123C 000A               2407                   MOVE.B #10, D1
00001DEE                          2408                   
00001DEE  E368                    2409                   LSL.W D1, D0
00001DF0                          2410                   
00001DF0  123C 000D               2411                   MOVE.B #13, D1
00001DF4                          2412                   
00001DF4  E268                    2413                   LSR.W D1, D0
00001DF6                          2414                   
00001DF6  2C00                    2415                   MOVE.L D0, D6
00001DF8                          2416                   
00001DF8  3015                    2417                   MOVE.W (A5), D0
00001DFA                          2418                   
00001DFA  123C 000D               2419                   MOVE.B #13, D1
00001DFE                          2420                   
00001DFE  E368                    2421                   LSL.W D1, D0
00001E00                          2422                   
00001E00  E268                    2423                   LSR.W D1, D0
00001E02                          2424                   
00001E02  2E00                    2425                   MOVE.L D0, D7
00001E04                          2426                   
00001E04  4EB9 000022FC           2427                   JSR PRINT_EA
00001E0A                          2428                   
00001E0A  4E75                    2429                   RTS
00001E0C                          2430                                   
00001E0C                          2431                
00001E0C  43F9 000025EE           2432  MOVEB            LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00001E12                          2433  
00001E12  4280                    2434                   CLR.L  D0
00001E14                          2435                   
00001E14  103C 000E               2436                   MOVE.B #14, D0
00001E18                          2437                   
00001E18  4E4F                    2438                   TRAP #15
00001E1A                          2439                   
00001E1A  43F9 0000269C           2440                   LEA SIZE_B_PRINT, A1
00001E20                          2441                   
00001E20  4E4F                    2442                   TRAP #15               * done printing opcode and size
00001E22                          2443                   
00001E22  1A3C 0000               2444                   MOVE.B     #%00, D5
00001E26                          2445                   
00001E26  6000 00A6               2446                   BRA PRINTOUT_MOVE_EA
00001E2A                          2447  
00001E2A  4280                    2448  MOVEW            CLR.L D0
00001E2C                          2449                   
00001E2C  4281                    2450                   CLR.L D1
00001E2E                          2451                   
00001E2E  3015                    2452                   MOVE.W (A5),D0
00001E30                          2453                   
00001E30  EF48                    2454                   LSL.W #7,D0
00001E32                          2455                   
00001E32  123C 000D               2456                   MOVE.B #13,D1
00001E36                          2457                   
00001E36  E268                    2458                   LSR.W D1,D0
00001E38                          2459                   
00001E38  B03C 0001               2460                   CMP.B #1,D0            *check to see if the mode of the destination is an address register
00001E3C                          2461                   
00001E3C  6700 0054               2462                   BEQ MOVEAW             *if the destination is an address, it is MOVEA
00001E40                          2463                   
00001E40  43F9 000025EE           2464                   LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00001E46                          2465                   
00001E46  4280                    2466                   CLR.L D0
00001E48                          2467                   
00001E48  103C 000E               2468                   MOVE.B #14, D0
00001E4C                          2469                   
00001E4C  4E4F                    2470                   TRAP #15
00001E4E                          2471                   
00001E4E  43F9 000026A2           2472                   LEA SIZE_W_PRINT, A1
00001E54                          2473                   
00001E54  4E4F                    2474                   TRAP #15               * done printing opcode and size
00001E56                          2475                   
00001E56  1A3C 0001               2476                   MOVE.B     #%01, D5
00001E5A                          2477                      
00001E5A  6000 0072               2478                   BRA PRINTOUT_MOVE_EA
00001E5E                          2479                
00001E5E                          2480  
00001E5E  4280                    2481  MOVEL            CLR.L D0
00001E60                          2482                   
00001E60  4281                    2483                   CLR.L D1
00001E62                          2484                   
00001E62  3015                    2485                   MOVE.W (A5),D0
00001E64                          2486                   
00001E64  EF48                    2487                   LSL.W #7,D0
00001E66                          2488                   
00001E66  123C 000D               2489                   MOVE.B #13,D1
00001E6A                          2490                   
00001E6A  E268                    2491                   LSR.W D1,D0
00001E6C                          2492                   
00001E6C  B03C 0001               2493                   CMP.B #1,D0            *check to see if the mode of the destination is equal to 1
00001E70                          2494                   
00001E70  6700 003E               2495                   BEQ MOVEAL             *if the mode is 1, then it is an address register, and the opcode is MOVEA
00001E74                          2496                   
00001E74  43F9 000025EE           2497                   LEA MOVE_MESSAGE, A1   * printing out opcode and size
00001E7A                          2498                   
00001E7A  4280                    2499                   CLR.L D0
00001E7C                          2500                   
00001E7C  103C 000E               2501                   MOVE.B #14, D0
00001E80                          2502                   
00001E80  4E4F                    2503                   TRAP #15
00001E82                          2504                   
00001E82  43F9 000026A8           2505                   LEA SIZE_L_PRINT, A1
00001E88                          2506                   
00001E88  4E4F                    2507                   TRAP #15               * done printing opcode and size
00001E8A                          2508                   
00001E8A  1A3C 0002               2509                   MOVE.B     #%10, D5
00001E8E                          2510                   
00001E8E  6000 003E               2511                   BRA PRINTOUT_MOVE_EA
00001E92                          2512                   
00001E92                          2513                   
00001E92  43F9 000025E7           2514  MOVEAW           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
00001E98                          2515  
00001E98  4280                    2516                   CLR.L D0
00001E9A                          2517                   
00001E9A  103C 000E               2518                   MOVE.B #14, D0
00001E9E                          2519                   
00001E9E  4E4F                    2520                   TRAP #15
00001EA0                          2521                   
00001EA0  43F9 000026A2           2522                   LEA SIZE_W_PRINT, A1
00001EA6                          2523                   
00001EA6  4E4F                    2524                   TRAP #15               * done printing out opcode and size
00001EA8                          2525                   
00001EA8  1A3C 0001               2526                   MOVE.B     #%01, D5
00001EAC                          2527                   
00001EAC  6000 0020               2528                   BRA PRINTOUT_MOVE_EA
00001EB0                          2529  
00001EB0  43F9 000025E7           2530  MOVEAL           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
00001EB6                          2531  
00001EB6  4280                    2532                   CLR.L D0
00001EB8                          2533                   
00001EB8  103C 000E               2534                   MOVE.B #14, D0
00001EBC                          2535                   
00001EBC  4E4F                    2536                   TRAP #15
00001EBE                          2537                   
00001EBE  43F9 000026A8           2538                   LEA SIZE_L_PRINT, A1
00001EC4                          2539                   
00001EC4  4E4F                    2540                   TRAP #15               * done printing out opcode and size
00001EC6                          2541                   
00001EC6  1A3C 0002               2542                   MOVE.B     #%10, D5
00001ECA                          2543                   
00001ECA  6000 0002               2544                   BRA PRINTOUT_MOVE_EA
00001ECE                          2545  
00001ECE                          2546  PRINTOUT_MOVE_EA
00001ECE  4247                    2547                   CLR    D7 
00001ED0                          2548                   
00001ED0  4246                    2549                   CLR    D6               
00001ED2                          2550                   
00001ED2  3015                    2551                   MOVE.W (A5), D0
00001ED4                          2552                   
00001ED4  123C 000A               2553                   MOVE.B #10, D1
00001ED8                          2554                   
00001ED8  E368                    2555                   LSL.W D1, D0
00001EDA                          2556                   
00001EDA  123C 000D               2557                   MOVE.B #13, D1
00001EDE                          2558                   
00001EDE  E268                    2559                   LSR.W D1, D0
00001EE0                          2560                   
00001EE0  1C00                    2561                   MOVE.B D0, D6          * getting the mode of the second ea
00001EE2                          2562                   
00001EE2  3015                    2563                   MOVE.W (A5), D0
00001EE4                          2564                   
00001EE4  123C 000D               2565                   MOVE.B #13, D1
00001EE8                          2566                   
00001EE8  E368                    2567                   LSL.W D1, D0
00001EEA                          2568                   
00001EEA  E268                    2569                   LSR.W D1, D0
00001EEC                          2570                   
00001EEC  1E00                    2571                   MOVE.B D0, D7          * getting the register of the second ea
00001EEE                          2572                   
00001EEE  4EB9 000022FC           2573                   JSR PRINT_EA
00001EF4                          2574                   
00001EF4  43F9 000026CE           2575                   LEA COMMA, A1
00001EFA                          2576                   
00001EFA  103C 000E               2577                   MOVE.B #14, D0
00001EFE                          2578                   
00001EFE  4E4F                    2579                   TRAP #15
00001F00                          2580                   
00001F00  3015                    2581                   MOVE.W (A5), D0
00001F02                          2582                   
00001F02  E948                    2583                   LSL.W #4, D0
00001F04                          2584                   
00001F04  123C 000D               2585                   MOVE.B #13, D1
00001F08                          2586                   
00001F08  E268                    2587                   LSR.W D1, D0
00001F0A                          2588                   
00001F0A  1E00                    2589                   MOVE.B D0, D7          * getting the register of the first ea
00001F0C                          2590                   
00001F0C  3015                    2591                   MOVE.W (A5), D0
00001F0E                          2592                   
00001F0E  EF48                    2593                   LSL.W #7, D0
00001F10                          2594                   
00001F10  123C 000D               2595                   MOVE.B #13, D1
00001F14                          2596                   
00001F14  E268                    2597                   LSR.W D1, D0
00001F16                          2598                   
00001F16  1C00                    2599                   MOVE.B D0, D6          * getting the mode of the first ea
00001F18                          2600                   
00001F18  4EB9 000022FC           2601                   JSR PRINT_EA
00001F1E                          2602                   
00001F1E  6000 F1D0               2603                   BRA PARSE_MEMORY
00001F22                          2604  
00001F22                          2605  
00001F22                          2606  
00001F22                          2607  
00001F22                          2608  
00001F22                          2609  
00001F22                          2610  -------------------- end include --------------------
00001F22                          2611                  INCLUDE 'ADD_ADDA.X68'
00001F22                          2612    
00001F22                          2613  
00001F22                          2614          
00001F22                          2615  
00001F22                          2616                  * INCLUDE 'CMP.X68'
00001F22                          2617                  * INCLUDE 'SUB.X68'
00001F22                          2618                  * INCLUDE 'DIVU_OR.X68'
00001F22                          2619                  * INCLUDE 'MULS_AND.X68'
00001F22                          2620    
00001F22                          2621  ADD_ADDA  *at this point we know the first 4 bits are 1101 -> ADD or ADDA -> compare the destination opmode
00001F22                          2622                   
00001F22  4EB9 0000200C           2623                   JSR      GET_SIZE_PURPLE
00001F28                          2624                                              
00001F28  BA3C 0003               2625                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is ADDA
00001F2C                          2626                   
00001F2C  6700 0008               2627                   BEQ      ADDA_CODE
00001F30                          2628                   
00001F30  4EF9 00001FA4           2629                   JMP      ADD_CODE
00001F36                          2630                   
00001F36                          2631  ADDA_CODE 
00001F36                          2632                   * ADDA opcode message
00001F36  43F9 00002678           2633                   LEA ADDA_MESSAGE, A1
00001F3C                          2634                   
00001F3C  103C 000E               2635                   MOVE.B #14, D0
00001F40                          2636                   
00001F40  4E4F                    2637                   TRAP #15
00001F42                          2638                   
00001F42  4285                    2639                   CLR.L   D5         * clear for the size since this is not for the size purple
00001F44                          2640                   
00001F44  4280                    2641                   CLR.L D0                *clear D0
00001F46                          2642                   
00001F46  4281                    2643                   CLR.L D1                *clear D1
00001F48                          2644                   
00001F48  3010                    2645                   MOVE.W  (A0),D0     *D0 is the binary value to decode
00001F4A                          2646                   
00001F4A  0800 0008               2647                   BTST    #8, D0
00001F4E                          2648                   
00001F4E  6700 0030               2649                   BEQ     PRINTOUT_SIZE_W
00001F52                          2650                   
00001F52  4EF9 00001F92           2651                   JMP     PRINTOUT_SIZE_L
00001F58                          2652                   
00001F58                          2653  FINISH_PRINTING_SIZE
00001F58                          2654  
00001F58  4EB9 0000208C           2655                   JSR     Set_Ea
00001F5E                          2656                   
00001F5E  4EB9 000022FC           2657                   JSR     PRINT_EA *by using jmp table
00001F64                          2658                   
00001F64  4EB9 0000206C           2659                   JSR     PRINT_COMMA
00001F6A                          2660                   
00001F6A                          2661                    * for the first Dn 
00001F6A  4EB9 0000207A           2662                   JSR     GET_Data_Register
00001F70                          2663                   
00001F70  4286                    2664                   CLR.L   D6
00001F72                          2665                   
00001F72  1C3C 0001               2666                   MOVE.B  #%001, D6 * for mode
00001F76                          2667  
00001F76  4EB9 000022FC           2668                   JSR     PRINT_EA *by using jmp table
00001F7C                          2669  
00001F7C  4EF8 10F0               2670                   JMP     PARSE_MEMORY
00001F80                          2671                   
00001F80                          2672  PRINTOUT_SIZE_W
00001F80                          2673                   
00001F80  3A3C 0001               2674                   MOVE    #%01, D5          
00001F84                          2675                   
00001F84  43F9 000026A2           2676                   LEA      SIZE_W_PRINT,    A1
00001F8A                          2677                   
00001F8A  103C 000E               2678                   MOVE.B   #14,             D0
00001F8E                          2679          
00001F8E  4E4F                    2680                   TRAP #15
00001F90                          2681                   
00001F90  60C6                    2682                   BRA     FINISH_PRINTING_SIZE
00001F92                          2683                   
00001F92                          2684  PRINTOUT_SIZE_L                           
00001F92  3A3C 0002               2685                   MOVE    #%10, D5          
00001F96                          2686                   
00001F96  43F9 000026A8           2687                   LEA      SIZE_L_PRINT,    A1
00001F9C                          2688                   
00001F9C  103C 000E               2689                   MOVE.B   #14,             D0 
00001FA0                          2690         
00001FA0  4E4F                    2691                   TRAP #15
00001FA2                          2692                   
00001FA2  60B4                    2693                   BRA     FINISH_PRINTING_SIZE
00001FA4                          2694  
00001FA4                          2695  ADD_CODE
00001FA4                          2696                   * ADD message
00001FA4  43F9 00002673           2697                   LEA      ADD_MESSAGE,    A1
00001FAA  103C 000E               2698                   MOVE.B   #14,            D0
00001FAE  4E4F                    2699                   TRAP #15
00001FB0                          2700                   
00001FB0  4EB9 00002022           2701                   JSR     PRINTOUT_SIZE_PURPLE
00001FB6                          2702                   
00001FB6                          2703                   * check for dn and ea
00001FB6  4280                    2704                   CLR.L D0                *clear D0
00001FB8                          2705                   
00001FB8  4281                    2706                   CLR.L D1                *clear D1
00001FBA                          2707                   
00001FBA  3015                    2708                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001FBC                          2709                   
00001FBC  0800 0008               2710                   BTST    #8, D0
00001FC0                          2711                   
00001FC0  6700 0028               2712                   BEQ     ADD_FIRST_EA
00001FC4                          2713                   
00001FC4                          2714                   * for the first Dn 
00001FC4  4EB9 0000207A           2715                   JSR     GET_Data_Register
00001FCA                          2716                   
00001FCA  1C3C 0000               2717                   MOVE.B  #%000, D6 * for mode
00001FCE                          2718                   
00001FCE  4EB9 000022FC           2719                   JSR     PRINT_EA *by using jmp table
00001FD4                          2720                   
00001FD4  4EB9 0000206C           2721                   JSR     PRINT_COMMA
00001FDA                          2722                   
00001FDA  4EB9 0000208C           2723                   JSR     Set_Ea
00001FE0                          2724                   
00001FE0  4EB9 000022FC           2725                   JSR     PRINT_EA *by using jmp table
00001FE6                          2726                   
00001FE6  4EF8 10F0               2727                   JMP     PARSE_MEMORY
00001FEA                          2728                   
00001FEA                          2729  ADD_FIRST_EA
00001FEA  4EB9 0000208C           2730                   JSR     Set_Ea
00001FF0                          2731                   
00001FF0  4EB9 000022FC           2732                   JSR     PRINT_EA *by using jmp table
00001FF6                          2733                   
00001FF6  4EB9 0000206C           2734                   JSR     PRINT_COMMA
00001FFC                          2735                   
00001FFC                          2736                    * for the first Dn 
00001FFC  4EB9 0000207A           2737                   JSR     GET_Data_Register
00002002                          2738                   
00002002  1C3C 0000               2739                   MOVE.B  #%000, D6 * for mode
00002006                          2740  
00002006  4EB9 000022FC           2741                   JSR     PRINT_EA *by using jmp table
0000200C                          2742                   
0000200C                          2743                   
0000200C                          2744  GET_SIZE_PURPLE * get the op-code 
0000200C                          2745  
0000200C  4280                    2746                   CLR.L D0                *clear D0
0000200E                          2747                   
0000200E  4281                    2748                   CLR.L D1                *clear D1
00002010                          2749                   
00002010  3015                    2750                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002012                          2751  
00002012  123C 0008               2752                   MOVE.B  #8,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002016                          2753  
00002016  E368                    2754                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002018                          2755                   
00002018  123C 000E               2756                   MOVE.B  #14,D1          *14 bits is the number of times to shift to hold the mode number
0000201C                          2757  
0000201C  E268                    2758                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
0000201E                          2759                   
0000201E  1A00                    2760                   MOVE.B  D0, D5          *push the size to the Data register 5 for the future use
00002020                          2761                   
00002020  4E75                    2762                   RTS 
00002022                          2763  
00002022                          2764  PRINTOUT_SIZE_PURPLE * get the size for ADDI, CLR, ADDQ, OR, SUB, CMP, AND, ADD
00002022                          2765                       
00002022  BA7C 0000               2766                   CMP    #%00, D5          
00002026                          2767                   
00002026  6700 0014               2768                   BEQ    PRINT_B
0000202A                          2769                   
0000202A  BA7C 0001               2770                   CMP    #%01, D5          
0000202E                          2771                   
0000202E  6700 001C               2772                   BEQ    PRINT_W
00002032                          2773                   
00002032  BA7C 0002               2774                   CMP    #%10, D5          
00002036                          2775                   
00002036  6700 0024               2776                   BEQ    PRINT_L
0000203A                          2777                   
0000203A                          2778  DONE_PRINTING
0000203A  4E75                    2779                   RTS 
0000203C                          2780                   
0000203C                          2781  PRINT_B          
0000203C  43F9 0000269C           2782                   LEA      SIZE_B_PRINT,    A1
00002042  103C 000E               2783                   MOVE.B   #14,            D0          
00002046  4E4F                    2784                   TRAP #15
00002048                          2785  
00002048  4EF8 203A               2786                   JMP      DONE_PRINTING
0000204C                          2787                   
0000204C                          2788  PRINT_W     
0000204C  43F9 000026A2           2789                   LEA      SIZE_W_PRINT,    A1
00002052  103C 000E               2790                   MOVE.B   #14,             D0          
00002056  4E4F                    2791                   TRAP #15
00002058                          2792  
00002058  4EF8 203A               2793                   JMP      DONE_PRINTING
0000205C                          2794  
0000205C                          2795  
0000205C                          2796  PRINT_L          
0000205C  43F9 000026A8           2797                   LEA      SIZE_L_PRINT,    A1
00002062  103C 000E               2798                   MOVE.B   #14,             D0          
00002066  4E4F                    2799                   TRAP #15   
00002068                          2800                      
00002068  4EF8 203A               2801                   JMP    DONE_PRINTING
0000206C                          2802                   
0000206C                          2803  PRINT_COMMA
0000206C                          2804  
0000206C  43F9 000026CE           2805                   LEA COMMA, A1
00002072  103C 000E               2806                   MOVE.B #14, D0
00002076  4E4F                    2807                   TRAP #15
00002078                          2808                   
00002078  4E75                    2809                   RTS
0000207A                          2810                   
0000207A                          2811  GET_Data_Register
0000207A  4280                    2812                   CLR.L D0                *clear D0
0000207C                          2813                   
0000207C  4281                    2814                   CLR.L D1                *clear D1
0000207E                          2815                   
0000207E  3015                    2816                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002080                          2817  
00002080  E948                    2818                   LSL.W   #4,D0           *Shift the bits 4 times -> D0 now removes the opcode & reg#
00002082                          2819                   
00002082  123C 000D               2820                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00002086                          2821  
00002086  E268                    2822                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00002088                          2823  
00002088  1E00                    2824                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
0000208A                          2825                   
0000208A  4E75                    2826                   RTS
0000208C                          2827                   
0000208C                          2828  Set_Ea
0000208C                          2829  
0000208C                          2830                   * set register
0000208C  4280                    2831                   CLR.L D0                *clear D0
0000208E                          2832                   
0000208E  4281                    2833                   CLR.L D1                *clear D1
00002090                          2834                   
00002090  3015                    2835                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002092                          2836                 
00002092  123C 000D               2837                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002096                          2838  
00002096  E368                    2839                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002098                          2840  
00002098  123C 000D               2841                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
0000209C                          2842  
0000209C  E268                    2843                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
0000209E                          2844  
0000209E  1E00                    2845                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
000020A0                          2846                   
000020A0                          2847                   * set mode
000020A0  4280                    2848                   CLR.L D0                *clear D0
000020A2                          2849                   
000020A2  4281                    2850                   CLR.L D1                *clear D1
000020A4                          2851                   
000020A4  3015                    2852                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000020A6                          2853                 
000020A6  123C 000A               2854                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000020AA                          2855  
000020AA  E368                    2856                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000020AC                          2857  
000020AC  123C 000D               2858                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000020B0                          2859  
000020B0  E268                    2860                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000020B2                          2861  
000020B2  1C00                    2862                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
000020B4                          2863                   
000020B4  4E75                    2864                   RTS
000020B6                          2865                   
000020B6                          2866                  
000020B6                          2867  
000020B6                          2868  
000020B6                          2869  
000020B6                          2870  
000020B6                          2871  
000020B6                          2872  
000020B6                          2873  
000020B6                          2874  
000020B6                          2875  
000020B6                          2876  
000020B6                          2877  
000020B6                          2878  
000020B6                          2879  
000020B6                          2880  
000020B6                          2881  
000020B6                          2882  
000020B6                          2883  
000020B6                          2884  
000020B6                          2885  -------------------- end include --------------------
000020B6                          2886                  INCLUDE 'BCC.X68'
000020B6                          2887  
000020B6                          2888  
000020B6                          2889  BCC           
000020B6  4240                    2890                 CLR       D0              *Zero it
000020B8                          2891  
000020B8  3015                    2892                 MOVE.W      (A5),D0     *We'll play with it here
000020BA                          2893                 
000020BA  4241                    2894                 CLR       D1
000020BC                          2895  
000020BC                          2896                 
000020BC  123C 0004               2897                 MOVE.B      #4, D1
000020C0                          2898                 
000020C0  E368                    2899                 LSL.W       D1, D0
000020C2                          2900  
000020C2  123C 000C               2901                 MOVE.B      #12,D1       *Shift 12 bits to the right  
000020C6                          2902  
000020C6  E268                    2903                 LSR.W       D1,D0           *Move the bi
000020C8                          2904                 
000020C8  B03C 0004               2905                 CMP.B       #%0100, D0
000020CC                          2906                 
000020CC  6700 001A               2907                 BEQ         CC
000020D0                          2908                 
000020D0  B03C 000E               2909                 CMP.B       #%1110, D0
000020D4                          2910                 
000020D4  6700 003A               2911                 BEQ         GT
000020D8                          2912                 
000020D8  B03C 000F               2913                 CMP.B       #%1111, D0
000020DC                          2914                 
000020DC  6700 0036               2915                 BEQ         LE
000020E0                          2916                 
000020E0                          2917  
000020E0                          2918                      
000020E0                          2919  
000020E0  6000 0036               2920  HI             BRA         PRINT_BHI 
000020E4                          2921  
000020E4  6000 0042               2922  LS             BRA         PRINT_BLS  
000020E8                          2923  
000020E8  6000 004E               2924  CC             BRA         PRINT_BCC
000020EC                          2925  
000020EC  6000 005A               2926  CS             BRA         PRINT_BCS 
000020F0                          2927  
000020F0  6000 0066               2928  NE             BRA         PRINT_BNE 
000020F4                          2929  
000020F4  6000 0072               2930  EQ             BRA         PRINT_BEQ
000020F8                          2931  
000020F8  6000 007E               2932  VC             BRA         PRINT_BVC
000020FC                          2933  
000020FC  6000 008A               2934  VS             BRA         PRINT_BVS
00002100                          2935  
00002100  6000 0096               2936  PL             BRA         PRINT_BPL
00002104                          2937  
00002104  6000 00A2               2938  MI             BRA         PRINT_BMI 
00002108                          2939  
00002108  6000 00AE               2940  GE             BRA         PRINT_BGE 
0000210C                          2941  
0000210C  6000 00BA               2942  LT             BRA         PRINT_BLT
00002110                          2943  
00002110  6000 00C6               2944  GT             BRA         PRINT_BGT      
00002114                          2945  
00002114  6000 00D2               2946  LE             BRA         PRINT_BLE 
00002118                          2947  
00002118                          2948  
00002118                          2949  PRINT_BHI      
00002118  43F9 0000262D           2950                 LEA BHI_MESSAGE, A1
0000211E                          2951            
0000211E  103C 000E               2952                 MOVE.B #14, D0
00002122                          2953                   
00002122  4E4F                    2954                 TRAP #15    
00002124                          2955                 
00002124  6000 00CE               2956                 BRA DISPLACEMENT
00002128                          2957                 
00002128                          2958  PRINT_BLS
00002128  43F9 00002635           2959                 LEA BLS_MESSAGE, A1
0000212E                          2960                   
0000212E  103C 000E               2961                 MOVE.B #14, D0
00002132                          2962                   
00002132  4E4F                    2963                 TRAP #15
00002134                          2964                 
00002134  6000 00BE               2965                 BRA DISPLACEMENT
00002138                          2966  PRINT_BCC
00002138  43F9 00002615           2967                 LEA BCC_MESSAGE, A1
0000213E                          2968                   
0000213E  103C 000E               2969                 MOVE.B #14, D0
00002142                          2970                   
00002142  4E4F                    2971                 TRAP #15
00002144                          2972                 
00002144  6000 00AE               2973                 BRA DISPLACEMENT
00002148                          2974  PRINT_BCS
00002148  43F9 00002621           2975                 LEA BCS_MESSAGE, A1
0000214E                          2976                   
0000214E  103C 000E               2977                 MOVE.B #14, D0
00002152                          2978                   
00002152  4E4F                    2979                 TRAP #15
00002154                          2980                 
00002154  6000 009E               2981                 BRA DISPLACEMENT
00002158                          2982  PRINT_BNE
00002158  43F9 0000261D           2983                 LEA BNE_MESSAGE, A1
0000215E                          2984                   
0000215E  103C 000E               2985                 MOVE.B #14, D0
00002162                          2986                   
00002162  4E4F                    2987                 TRAP #15
00002164                          2988                 
00002164  6000 008E               2989                 BRA DISPLACEMENT
00002168                          2990  PRINT_BEQ
00002168  43F9 00002619           2991                 LEA BEQ_MESSAGE, A1
0000216E                          2992                   
0000216E  103C 000E               2993                 MOVE.B #14, D0
00002172                          2994                   
00002172  4E4F                    2995                 TRAP #15
00002174                          2996                 
00002174  6000 007E               2997                 BRA DISPLACEMENT
00002178                          2998  PRINT_BVC
00002178  43F9 00002645           2999                 LEA BVC_MESSAGE, A1
0000217E                          3000                   
0000217E  103C 000E               3001                 MOVE.B #14, D0
00002182                          3002                   
00002182  4E4F                    3003                 TRAP #15     
00002184                          3004                 
00002184  6000 006E               3005                 BRA DISPLACEMENT
00002188                          3006  PRINT_BVS
00002188  43F9 00002649           3007                 LEA BVS_MESSAGE, A1
0000218E                          3008                   
0000218E  103C 000E               3009                 MOVE.B #14, D0
00002192                          3010                   
00002192  4E4F                    3011                 TRAP #15
00002194                          3012                 
00002194  6000 005E               3013                 BRA DISPLACEMENT
00002198                          3014  PRINT_BPL
00002198  43F9 00002641           3015                 LEA BPL_MESSAGE, A1
0000219E                          3016                   
0000219E  103C 000E               3017                 MOVE.B #14, D0
000021A2                          3018                   
000021A2  4E4F                    3019                 TRAP #15
000021A4                          3020                 
000021A4  6000 004E               3021                 BRA DISPLACEMENT
000021A8                          3022  PRINT_BMI
000021A8  43F9 0000263D           3023                 LEA BMI_MESSAGE, A1
000021AE                          3024                   
000021AE  103C 000E               3025                 MOVE.B #14, D0
000021B2                          3026                   
000021B2  4E4F                    3027                 TRAP #15
000021B4                          3028                 
000021B4  6000 003E               3029                 BRA DISPLACEMENT
000021B8                          3030  PRINT_BGE
000021B8  43F9 00002625           3031                 LEA BGE_MESSAGE, A1
000021BE                          3032                   
000021BE  103C 000E               3033                 MOVE.B #14, D0
000021C2                          3034                   
000021C2  4E4F                    3035                 TRAP #15
000021C4                          3036                 
000021C4  6000 002E               3037                 BRA DISPLACEMENT
000021C8                          3038  PRINT_BLT
000021C8  43F9 00002639           3039                 LEA BLT_MESSAGE, A1
000021CE                          3040                   
000021CE  103C 000E               3041                 MOVE.B #14, D0
000021D2                          3042                   
000021D2  4E4F                    3043                 TRAP #15
000021D4                          3044                 
000021D4  6000 001E               3045                 BRA DISPLACEMENT
000021D8                          3046  PRINT_BGT
000021D8  43F9 00002629           3047                 LEA BGT_MESSAGE, A1
000021DE                          3048                   
000021DE  103C 000E               3049                 MOVE.B #14, D0
000021E2                          3050                   
000021E2  4E4F                    3051                 TRAP #15
000021E4                          3052                 
000021E4  6000 000E               3053                 BRA DISPLACEMENT
000021E8                          3054  PRINT_BLE
000021E8  43F9 00002631           3055                 LEA BLE_MESSAGE, A1
000021EE                          3056                   
000021EE  103C 000E               3057                 MOVE.B #14, D0
000021F2                          3058                   
000021F2  4E4F                    3059                 TRAP #15
000021F4                          3060                 
000021F4                          3061  DISPLACEMENT   
000021F4                          3062  
000021F4  43F9 000026B4           3063                 LEA     SPACE, A1
000021FA                          3064  
000021FA  103C 000E               3065                 MOVE.B #14, D0
000021FE                          3066  
000021FE  4E4F                    3067                 TRAP #15 
00002200                          3068  
00002200  43F9 000026AE           3069                 LEA     POUND_SIGN, A1
00002206                          3070              
00002206  103C 000E               3071                 MOVE.B  #14, D0
0000220A                          3072              
0000220A  4E4F                    3073                 TRAP #15
0000220C                          3074              
0000220C  43F9 000026B0           3075                 LEA     HEX_SIGN, A1
00002212                          3076              
00002212  4E4F                    3077                 TRAP #15
00002214                          3078  
00002214  4280                    3079                 CLR.L       D0              *Zero it
00002216                          3080  
00002216  3015                    3081                 MOVE.W      (A5),D0     *We'll play with it here
00002218                          3082                 
00002218  123C 0008               3083                 MOVE.B      #8, D1
0000221C                          3084                 
0000221C  E368                    3085                 LSL.W       D1, D0
0000221E                          3086  
0000221E  123C 0008               3087                 MOVE.B      #8,D1       *Shift 12 bits to the right  
00002222                          3088  
00002222  E268                    3089                 LSR.W       D1,D0           *Move the bits
00002224                          3090                 
00002224                          3091                 *chk the D0 for 8, 16, or 32 but displacement
00002224                          3092                  
00002224  B03C 0000               3093                 CMP.B  #$00, D0
00002228                          3094  
00002228  6700 0018               3095                 BEQ  a_16_BIT 
0000222C                          3096  
0000222C  B03C 00FF               3097                 CMP.B #$FF, D0   
00002230                          3098  
00002230  6700 001E               3099                 BEQ  a_32_BIT
00002234                          3100                  
00002234                          3101                  *else 
00002234                          3102                  
00002234  4285                    3103                 CLR.L D5
00002236                          3104                 
00002236  3A00                    3105                 MOVE.W D0, D5      
00002238                          3106          
00002238  4EB9 0000225E           3107                 JSR  HEX_TO_ASCII
0000223E                          3108                 
0000223E  4EF8 10F0               3109                 JMP PARSE_MEMORY
00002242                          3110                            
00002242                          3111  a_16_BIT
00002242  4285                    3112          CLR.L  D5
00002244                          3113          
00002244  3A1E                    3114          MOVE.W (A6)+, D5
00002246                          3115          
00002246  4EB9 0000225E           3116          JSR  HEX_TO_ASCII
0000224C                          3117          
0000224C  4EF8 10F0               3118          JMP PARSE_MEMORY
00002250                          3119  a_32_BIT
00002250                          3120  
00002250  4285                    3121          CLR.L  D5
00002252                          3122          
00002252  2A1E                    3123          MOVE.L (A6)+, D5
00002254                          3124          
00002254  4EB9 0000225E           3125          JSR  HEX_TO_ASCII
0000225A                          3126          
0000225A  4EF8 10F0               3127          JMP PARSE_MEMORY
0000225E                          3128            
0000225E                          3129  
0000225E                          3130  
0000225E                          3131  
0000225E                          3132  
0000225E                          3133  
0000225E                          3134  
0000225E                          3135  
0000225E                          3136  
0000225E                          3137  
0000225E                          3138  
0000225E                          3139  
0000225E                          3140  -------------------- end include --------------------
0000225E                          3141                  INCLUDE 'HEX_TO_ASCII_V1.X68'
0000225E                          3142      *ORG    $5000
0000225E                          3143  
0000225E                          3144  
0000225E                          3145  HEX_TO_ASCII      
0000225E  4283                    3146       CLR.L      D3
00002260                          3147       
00002260  BABC 00000000           3148       CMP.L       #0, D5
00002266                          3149       
00002266  6700 0086               3150       BEQ         PRINT_ZERO
0000226A                          3151      
0000226A                          3152       *MOVE.L     #$ABCDEF, D5
0000226A                          3153       
0000226A                          3154  LOOP     
0000226A  2C05                    3155       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
0000226C                          3156       
0000226C  4282                    3157       CLR.L      D2
0000226E                          3158       
0000226E  143C 001C               3159       MOVE.B     #28, D2
00002272                          3160  
00002272  E4AE                    3161       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
00002274                          3162       
00002274  BC3C 000A               3163       CMP.B      #10, D6
00002278                          3164       
00002278  6C00 0006               3165       BGE        LETTER_1                  * determine if a letter or a number
0000227C                          3166       
0000227C  6000 000C               3167       BRA        NUMBER_1
00002280                          3168       
00002280                          3169  LETTER_1
00002280  0606 0037               3170       ADD.B      #55, D6
00002284                          3171       
00002284  1206                    3172       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00002286                          3173       
00002286  6000 000C               3174       BRA        PRINTOUT_NIBBLE
0000228A                          3175  
0000228A                          3176  NUMBER_1     
0000228A  0606 0030               3177       ADD.B      #48, D6
0000228E                          3178       
0000228E  1206                    3179       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00002290                          3180       
00002290  6000 0002               3181       BRA        PRINTOUT_NIBBLE
00002294                          3182  
00002294                          3183  
00002294                          3184  PRINTOUT_NIBBLE
00002294  E98D                    3185      LSL.L      #4, D5                   * shift out the nibble you just read from the source
00002296                          3186      
00002296  5203                    3187      ADD.B      #1, D3
00002298                          3188      
00002298  BC3C 0030               3189      CMP.B      #$30, D6
0000229C                          3190  
0000229C  67CC                    3191      BEQ        LOOP             
0000229E                          3192      
0000229E  103C 0006               3193      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
000022A2                          3194      
000022A2  4E4F                    3195      TRAP #15
000022A4                          3196       
000022A4  B63C 0008               3197      CMP.B      #8, D3                   * compare to the counter to check if you are done
000022A8                          3198       
000022A8  6700 023E               3199      BEQ        DONE
000022AC                          3200          
000022AC  6000 0002               3201      BRA LOOP_ZERO                            * continue the loop and print next nibble
000022B0                          3202      
000022B0                          3203      
000022B0                          3204  LOOP_ZERO    
000022B0  2C05                    3205       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
000022B2                          3206       
000022B2  4282                    3207       CLR.L      D2
000022B4                          3208       
000022B4  143C 001C               3209       MOVE.B     #28, D2
000022B8                          3210  
000022B8  E4AE                    3211       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
000022BA                          3212       
000022BA  BC3C 000A               3213       CMP.B      #10, D6
000022BE                          3214       
000022BE  6C00 0006               3215       BGE        LETTER_1_ZERO                  * determine if a letter or a number
000022C2                          3216       
000022C2  6000 000C               3217       BRA        NUMBER_1_ZERO
000022C6                          3218       
000022C6                          3219  LETTER_1_ZERO
000022C6  0606 0037               3220       ADD.B      #55, D6
000022CA                          3221       
000022CA  1206                    3222       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000022CC                          3223       
000022CC  6000 000C               3224       BRA        PRINTOUT_NIBBLE_ZERO
000022D0                          3225  
000022D0                          3226  NUMBER_1_ZERO    
000022D0  0606 0030               3227       ADD.B      #48, D6
000022D4                          3228       
000022D4  1206                    3229       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000022D6                          3230       
000022D6  6000 0002               3231       BRA        PRINTOUT_NIBBLE_ZERO
000022DA                          3232  
000022DA                          3233  
000022DA                          3234  PRINTOUT_NIBBLE_ZERO
000022DA  E98D                    3235      LSL.L      #4, D5                   * shift out the nibble you just read from the source
000022DC                          3236      
000022DC  5203                    3237      ADD.B      #1, D3            
000022DE                          3238      
000022DE  103C 0006               3239      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
000022E2                          3240      
000022E2  4E4F                    3241      TRAP #15
000022E4                          3242       
000022E4  B63C 0008               3243      CMP.B      #8, D3                   * compare to the counter to check if you are done
000022E8                          3244       
000022E8  6700 01FE               3245      BEQ        DONE
000022EC                          3246      
000022EC  60C2                    3247      BRA LOOP_ZERO                            * continue the loop and print next nibble
000022EE                          3248          
000022EE                          3249  
000022EE                          3250       
000022EE                          3251  PRINT_ZERO
000022EE  123C 0030               3252      MOVE.B      #$30, D1
000022F2                          3253  
000022F2  103C 0006               3254      MOVE.B      #6, D0  
000022F6                          3255  
000022F6  4E4F                    3256      TRAP #15 
000022F8                          3257  
000022F8  6000 01EE               3258      BRA DONE  
000022FC                          3259  
000022FC                          3260  
000022FC                          3261      *SIMHALT             ; halt simulator
000022FC                          3262  
000022FC                          3263  
000022FC                          3264      *END    START       ; last line of source
000022FC                          3265  -------------------- end include --------------------
000022FC                          3266                  INCLUDE 'JUMPTABLE-EA.X68'
000022FC                          3267   *ORG     $400
000022FC                          3268  
000022FC                          3269  
000022FC                          3270  
000022FC                          3271  
000022FC                          3272  
000022FC                          3273                 *MOVE.B       #%00, D5         *SIZE
000022FC                          3274                
000022FC                          3275                 *MOVE.B       #%111,D6         *MODE
000022FC                          3276                 
000022FC                          3277                 *MOVE.B       #%100,D7         *REGISTER
000022FC                          3278                 
000022FC                          3279                 *MOVE.L       #$4000, A5
000022FC                          3280  
000022FC                          3281                 *MOVE.B       #$0040, (A5)  
000022FC                          3282  PRINT_EA 
000022FC                          3283                 
000022FC  41F9 0000230A           3284                 LEA     jmp_table_ea,A0      *Index into the table
00002302                          3285  
00002302  CCFC 0006               3286                 MULU        #6,D6            *Form offset     
00002306                          3287  
00002306  4EF0 6000               3288                 JMP         0(A0,D6)         *Jump indirect with index
0000230A                          3289   
0000230A  4EF9 0000233A           3290  jmp_table_ea   JMP         code000
00002310                          3291  
00002310  4EF9 0000233E           3292                 JMP         code001
00002316                          3293  
00002316  4EF9 00002342           3294                 JMP         code010
0000231C                          3295  
0000231C  4EF9 00002346           3296                 JMP         code011
00002322                          3297  
00002322  4EF9 0000234A           3298                 JMP         code100
00002328                          3299  
00002328  4EF9 0000234E           3300                 JMP         code101
0000232E                          3301  
0000232E  4EF9 00002352           3302                 JMP         code110
00002334                          3303  
00002334  4EF9 00002356           3304                 JMP         code111
0000233A                          3305          
0000233A                          3306  
0000233A                          3307   
0000233A                          3308  
0000233A                          3309  
0000233A                          3310   
0000233A                          3311  
0000233A                          3312   
0000233A                          3313  
0000233A  6000 001E               3314  code000       BRA         DATA_REGISTER
0000233E                          3315  
0000233E  6000 0036               3316  code001       BRA         ADDRESS_REGISTER
00002342                          3317  
00002342  6000 004E               3318  code010       BRA         INDIRECT_ADDRESS
00002346                          3319  
00002346  6000 0074               3320  code011       BRA         ADDRESS_PI    * post increment
0000234A                          3321  
0000234A  6000 009A               3322  code100       BRA         ADDRESS_PD    * pre decrement
0000234E                          3323  
0000234E  6000 00C0               3324  code101       BRA         ADDRESS_W_DISPLACEMENT
00002352                          3325  
00002352  6000 00C0               3326  code110       BRA         ADDRESS_W_INDEX
00002356                          3327  
00002356  6000 00C0               3328  code111       BRA         GROUP_111
0000235A                          3329  
0000235A                          3330   
0000235A                          3331  DATA_REGISTER
0000235A                          3332  
0000235A  43F9 000026B9           3333              LEA D_REGISTER, A1
00002360                          3334              
00002360  4280                    3335              CLR.L D0
00002362                          3336              
00002362  103C 000E               3337              MOVE.B #14, D0
00002366                          3338              
00002366  4E4F                    3339              TRAP #15                * print out 'D' for data register
00002368                          3340              
00002368  4281                    3341              CLR.L D1
0000236A                          3342              
0000236A  1207                    3343              MOVE.B D7, D1
0000236C                          3344              
0000236C  103C 0003               3345              MOVE.B #3, D0           * print out the number in the register
00002370                          3346              
00002370  4E4F                    3347              TRAP #15
00002372                          3348              
00002372  6000 0174               3349              BRA DONE
00002376                          3350              
00002376                          3351  
00002376                          3352  ADDRESS_REGISTER
00002376  43F9 000026BB           3353              LEA A_REGISTER, A1
0000237C                          3354              
0000237C  4280                    3355              CLR.L D0
0000237E                          3356              
0000237E  103C 000E               3357              MOVE.B #14, D0          * print out the 'A' for address register
00002382                          3358              
00002382  4E4F                    3359              TRAP #15
00002384                          3360              
00002384  4281                    3361              CLR.L D1
00002386                          3362              
00002386  1207                    3363              MOVE.B D7, D1
00002388                          3364              
00002388  103C 0003               3365              MOVE.B #3, D0
0000238C                          3366              
0000238C  4E4F                    3367              TRAP #15                * print out the value in the data register
0000238E                          3368  
0000238E  6000 0158               3369              BRA DONE
00002392                          3370              
00002392                          3371  INDIRECT_ADDRESS
00002392  43F9 000026BD           3372              LEA IA_START, A1
00002398                          3373              
00002398  4280                    3374              CLR.L D0
0000239A                          3375              
0000239A  103C 000E               3376              MOVE.B #14, D0          * print out the '(A' for start of indirect address register
0000239E                          3377              
0000239E  4E4F                    3378              TRAP #15
000023A0                          3379              
000023A0  4281                    3380              CLR.L D1
000023A2                          3381              
000023A2  1207                    3382              MOVE.B D7, D1
000023A4                          3383              
000023A4  103C 0003               3384              MOVE.B #3, D0
000023A8                          3385              
000023A8  4E4F                    3386              TRAP #15                * print out the value in the data register
000023AA                          3387              
000023AA  43F9 000026C0           3388              LEA IA_END, A1
000023B0                          3389  
000023B0  4280                    3390              CLR.L D0
000023B2                          3391              
000023B2  103C 000E               3392              MOVE.B #14, D0          * print out the ')' for end of post increment address register
000023B6                          3393              
000023B6  4E4F                    3394              TRAP #15
000023B8                          3395              
000023B8  6000 012E               3396              BRA DONE
000023BC                          3397  
000023BC                          3398  ADDRESS_PI
000023BC  43F9 000026C2           3399              LEA A_PI_START, A1
000023C2                          3400              
000023C2  4280                    3401              CLR.L D0
000023C4                          3402              
000023C4  103C 000E               3403              MOVE.B #14, D0          * print out the '(A' for start of post increment address register
000023C8                          3404              
000023C8  4E4F                    3405              TRAP #15
000023CA                          3406              
000023CA  4281                    3407              CLR.L D1
000023CC                          3408              
000023CC  1207                    3409              MOVE.B D7, D1
000023CE                          3410              
000023CE  103C 0003               3411              MOVE.B #3, D0
000023D2                          3412              
000023D2  4E4F                    3413              TRAP #15                * print out the value in the data register
000023D4                          3414              
000023D4  43F9 000026C5           3415              LEA A_PI_END, A1
000023DA                          3416  
000023DA  4280                    3417              CLR.L D0
000023DC                          3418              
000023DC  103C 000E               3419              MOVE.B #14, D0          * print out the ')+' for end of post increment address register
000023E0                          3420     
000023E0  4E4F                    3421              TRAP #15
000023E2                          3422              
000023E2  6000 0104               3423              BRA DONE  
000023E6                          3424         
000023E6                          3425  ADDRESS_PD
000023E6                          3426  
000023E6  43F9 000026C8           3427              LEA A_PD_START, A1
000023EC                          3428              
000023EC  4280                    3429              CLR.L D0
000023EE                          3430              
000023EE  103C 000E               3431              MOVE.B #14, D0          * print out the '-(A' for start of pre decrement address register
000023F2                          3432              
000023F2  4E4F                    3433              TRAP #15
000023F4                          3434              
000023F4  4281                    3435              CLR.L D1
000023F6                          3436              
000023F6  1207                    3437              MOVE.B D7, D1
000023F8                          3438              
000023F8  103C 0003               3439              MOVE.B #3, D0
000023FC                          3440              
000023FC  4E4F                    3441              TRAP #15                * print out the value in the data register
000023FE                          3442              
000023FE  43F9 000026CC           3443              LEA A_PD_END, A1
00002404                          3444  
00002404  4280                    3445              CLR.L D0
00002406                          3446              
00002406  103C 000E               3447              MOVE.B #14, D0          * print out the ')-' for end of pre decrement
0000240A                          3448  
0000240A  4E4F                    3449              TRAP #15
0000240C                          3450              
0000240C  6000 00DA               3451              BRA DONE
00002410                          3452              
00002410                          3453  ADDRESS_W_DISPLACEMENT
00002410  6000 00D6               3454              BRA DONE
00002414                          3455  
00002414                          3456  ADDRESS_W_INDEX
00002414  6000 00D2               3457              BRA DONE
00002418                          3458  
00002418                          3459  GROUP_111
00002418                          3460  
00002418  41F9 00002426           3461                 LEA         jmp_table_ea_111,A0    *Index into the table
0000241E                          3462  
0000241E  CEFC 0006               3463                 MULU        #6,D7       *Form offset     
00002422                          3464  
00002422  4EF0 7000               3465                 JMP         0(A0,D7)   *Jump indirect with index
00002426                          3466                 
00002426                          3467  jmp_table_ea_111   
00002426  4EF9 0000244C           3468                 JMP         reg000
0000242C                          3469  
0000242C  4EF9 00002450           3470                 JMP         reg001
00002432                          3471  
00002432  4EF9 00002444           3472                 JMP         reg010
00002438                          3473  
00002438  4EF9 00002448           3474                 JMP         reg011
0000243E                          3475  
0000243E  4EF9 00002454           3476                 JMP         reg100
00002444                          3477          
00002444                          3478  
00002444  6000 0012               3479  reg010       BRA         PC_W_DISPLACEMENT
00002448                          3480  
00002448  6000 0012               3481  reg011       BRA         PC_W_INDEX
0000244C                          3482  
0000244C  6000 0012               3483  reg000       BRA         ABSOLUTE_SHORT
00002450                          3484  
00002450  6000 002C               3485  reg001       BRA         ABSOLUTE_LONG
00002454                          3486  
00002454  6000 0046               3487  reg100       BRA         IMMEDIATE
00002458                          3488  
00002458                          3489  
00002458                          3490  PC_W_DISPLACEMENT
00002458  6000 008E               3491              BRA DONE
0000245C                          3492  
0000245C                          3493  PC_W_INDEX
0000245C  6000 008A               3494              BRA DONE
00002460                          3495  
00002460                          3496  ABSOLUTE_SHORT
00002460  43F9 000026B0           3497              LEA         HEX_SIGN, A1
00002466                          3498              
00002466  103C 000E               3499              MOVE.B      #14, D0
0000246A                          3500              
0000246A  4E4F                    3501              TRAP #15
0000246C                          3502              
0000246C  4281                    3503              CLR.L       D1
0000246E                          3504              
0000246E  321E                    3505              MOVE.W      (A6)+, D1
00002470                          3506              
00002470  103C 000F               3507              MOVE.B      #15, D0
00002474                          3508              
00002474  143C 0010               3509              MOVE.B      #16, D2
00002478                          3510              
00002478  4E4F                    3511              TRAP #15
0000247A                          3512              
0000247A  6000 006C               3513              BRA DONE  
0000247E                          3514  
0000247E                          3515  
0000247E                          3516  ABSOLUTE_LONG
0000247E  43F9 000026B0           3517              LEA         HEX_SIGN, A1
00002484                          3518              
00002484  103C 000E               3519              MOVE.B      #14, D0
00002488                          3520              
00002488  4E4F                    3521              TRAP #15
0000248A                          3522              
0000248A  4281                    3523              CLR.L       D1
0000248C                          3524              
0000248C  221E                    3525              MOVE.L      (A6)+, D1
0000248E                          3526              
0000248E  103C 000F               3527              MOVE.B      #15, D0
00002492                          3528              
00002492  143C 0010               3529              MOVE.B      #16, D2
00002496                          3530              
00002496  4E4F                    3531              TRAP #15
00002498                          3532                          
00002498  6000 004E               3533              BRA DONE  
0000249C                          3534  
0000249C                          3535  
0000249C                          3536  IMMEDIATE
0000249C  43F9 000026AE           3537              LEA     POUND_SIGN, A1
000024A2                          3538              
000024A2  103C 000E               3539              MOVE.B  #14, D0
000024A6                          3540              
000024A6  4E4F                    3541              TRAP #15
000024A8                          3542              
000024A8  43F9 000026B0           3543              LEA     HEX_SIGN, A1
000024AE                          3544              
000024AE  4E4F                    3545              TRAP #15
000024B0                          3546              
000024B0  BA3C 0000               3547              CMP.B   #%00, D5
000024B4                          3548              
000024B4  6700 000E               3549              BEQ     IMMEDIATE_B
000024B8                          3550              
000024B8  BA3C 0001               3551              CMP.B   #%01, D5
000024BC                          3552              
000024BC  6700 0012               3553              BEQ     IMMEDIATE_W
000024C0                          3554              
000024C0  6000 001A               3555              BRA     IMMEDIATE_L
000024C4                          3556              
000024C4                          3557  IMMEDIATE_B
000024C4  4285                    3558              CLR.L       D5
000024C6                          3559     
000024C6  3A1E                    3560              MOVE.W      (A6)+, D5
000024C8                          3561              
000024C8  4EB8 225E               3562              JSR         HEX_TO_ASCII
000024CC                          3563              
000024CC  6000 001A               3564              BRA DONE
000024D0                          3565  
000024D0                          3566  IMMEDIATE_W
000024D0  4285                    3567              CLR.L       D5
000024D2                          3568  
000024D2  3A1E                    3569              MOVE.W      (A6)+, D5
000024D4                          3570              
000024D4  4EB8 225E               3571              JSR         HEX_TO_ASCII
000024D8                          3572              
000024D8                          3573              *MOVE.B      #15, D0
000024D8                          3574              
000024D8                          3575              *MOVE.B      #16, D2
000024D8                          3576              
000024D8                          3577              *TRAP #15 
000024D8                          3578              
000024D8  6000 000E               3579              BRA DONE        
000024DC                          3580  
000024DC                          3581  IMMEDIATE_L 
000024DC  4285                    3582              CLR.L       D5
000024DE                          3583              
000024DE  2A1E                    3584              MOVE.L      (A6)+, D5
000024E0                          3585      
000024E0  4EB8 225E               3586              JSR         HEX_TO_ASCII
000024E4                          3587              
000024E4  6000 0002               3588              BRA DONE
000024E8                          3589              
000024E8                          3590  DONE 
000024E8  4E75                    3591      RTS
000024EA                          3592      
000024EA                          3593   * INCLUDE 'MESSAGE_Data.X68'
000024EA                          3594   * INCLUDE 'HEX_TO_ASCII_V1.X68'
000024EA                          3595       
000024EA                          3596          
000024EA                          3597  
000024EA                          3598  
000024EA                          3599  
000024EA                          3600  
000024EA                          3601  
000024EA                          3602  
000024EA                          3603  
000024EA                          3604  
000024EA                          3605  -------------------- end include --------------------
000024EA                          3606                  
000024EA  4EF8 10F0               3607                  JMP      PARSE_MEMORY
000024EE                          3608                  
000024EE                          3609  PRESS_ENTER_CONTINUE
000024EE  267C 00000000           3610                   MOVEA.L  #outputCountCurr, A3  *reset to 0
000024F4  43F9 0000258F           3611                   LEA ENTER, A1
000024FA  103C 000E               3612                   MOVE.B #14, D0
000024FE  4E4F                    3613                   TRAP #15
00002500                          3614                   
00002500  103C 0005               3615                   MOVE.B #5, D0
00002504  4E4F                    3616                   TRAP #15
00002506                          3617                   
00002506  B23C 000D               3618                   CMP.B #$D, D1
0000250A                          3619  
0000250A  103C 000B               3620                   MOVE.B #11, D0   *clear display
0000250E  323C FF00               3621                   MOVE.W #$FF00, D1
00002512  4E4F                    3622                   TRAP #15
00002514                          3623  
00002514  4EF8 1114               3624                   JMP CONTINUE_PARSE
00002518                          3625                  
00002518                          3626                 
00002518                          3627                  
00002518                          3628  STOP
00002518                          3629  
00002518                          3630  
00002518                          3631  
00002518                          3632  
00002518                          3633  
00002518                          3634  
00002518                          3635  
00002518                          3636  
00002518                          3637  
00002518                          3638  
00002518                          3639  
00002518                          3640  
00002518                          3641  
00002518                          3642  
00002518                          3643  
00002518                          3644  
00002518                          3645  
00002518                          3646  
00002518                          3647  
00002518                          3648  
00002518                          3649  
00002518                          3650  
00002518                          3651  
00002518                          3652  
00002518                          3653  
00002518                          3654  -------------------- end include --------------------
00002518                          3655  
00002518  FFFF FFFF               3656      SIMHALT             ; halt simulator
0000251C                          3657  
0000251C                          3658      INCLUDE 'DS_Data.X68' * STARTING_ADDR ** ENDING_ADDR
0000251C                          3659  
0000251C                          3660  STARTING_ADDR   DS.L 1
00002520                          3661  
00002520                          3662  ENDING_ADDR     DS.L 1
00002520                          3663  -------------------- end include --------------------
00002524                          3664      INCLUDE 'MESSAGE_Data.X68' 
00002524                          3665  
00002524  =0000000D               3666  CR  EQU $0D
00002524  =0000000A               3667  LF  EQU $0A 
00002524                          3668  
00002524= 57 65 6C 63 6F 6D ...   3669  WELCOME_MESSAGE DC.B 'Welcome to our Team wild pokemon disassembly!!', CR, LF, 0
00002555= 45 6E 74 65 72 20 ...   3670  STARTING        DC.B 'Enter the starting location: ', 0
00002573= 45 6E 74 65 72 20 ...   3671  ENDING          DC.B 'Enter the ending locaiton: ', 0
0000258F= 45 6E 74 65 72 20 ...   3672  ENTER           DC.B 'Enter to continue ', 0
000025A2= 49 6E 76 61 6C 69 ...   3673  ERROR_MSG       DC.B 'Invalid Input, must be 8 characters, (0-9), (A-F), re-do ',CR, LF, 0
000025DE= 0D 0A 00                3674  CR_LF           DC.B '', CR, LF, 0
000025E1                          3675      
000025E1= 41 44 44 49 2E 00       3676  ADDI_MESSAGE    DC.B 'ADDI.',0
000025E7= 4D 4F 56 45 41 2E 00    3677  MOVEA_MESSAGE   DC.B 'MOVEA.',0
000025EE= 4D 4F 56 45 2E 00       3678  MOVE_MESSAGE    DC.B 'MOVE.',0
000025F4= 4E 4F 50 00             3679  NOP_MESSAGE     DC.B 'NOP',0
000025F8= 4D 4F 56 45 4D 2E 00    3680  MOVEM_MESSAGE   DC.B 'MOVEM.',0
000025FF= 4A 53 52 00             3681  JSR_MESSAGE     DC.B 'JSR',0
00002603= 52 54 53 00             3682  RTS_MESSAGE     DC.B 'RTS',0
00002607= 43 4C 52 00             3683  CLR_MESSAGE     DC.B 'CLR',0
0000260B= 41 44 44 51 2E 00       3684  ADDQ_MESSAGE    DC.B 'ADDQ.',0
00002611= 4C 45 41 00             3685  LEA_MESSAGE     DC.B 'LEA',0
00002615                          3686  
00002615                          3687  
00002615= 42 43 43 00             3688  BCC_MESSAGE     DC.B 'BCC',0   *//
00002619= 42 45 51 00             3689  BEQ_MESSAGE     DC.B 'BEQ',0   *//
0000261D= 42 4E 45 00             3690  BNE_MESSAGE     DC.B 'BNE',0   *//
00002621= 42 43 53 00             3691  BCS_MESSAGE     DC.B 'BCS',0   *//
00002625= 42 47 45 00             3692  BGE_MESSAGE     DC.B 'BGE',0   *//
00002629= 42 47 54 00             3693  BGT_MESSAGE     DC.B 'BGT',0   *//
0000262D= 42 48 49 00             3694  BHI_MESSAGE     DC.B 'BHI',0   *//
00002631= 42 4C 45 00             3695  BLE_MESSAGE     DC.B 'BLE',0   *//
00002635= 42 4C 53 00             3696  BLS_MESSAGE     DC.B 'BLS',0   *//
00002639= 42 4C 54 00             3697  BLT_MESSAGE     DC.B 'BLT',0   *//
0000263D= 42 4D 49 00             3698  BMI_MESSAGE     DC.B 'BMI',0   *//
00002641= 42 50 4C 00             3699  BPL_MESSAGE     DC.B 'BPL',0   *//
00002645= 42 56 43 00             3700  BVC_MESSAGE     DC.B 'BVC',0   *//
00002649= 42 56 53 00             3701  BVS_MESSAGE     DC.B 'BVS',0   *//
0000264D                          3702  
0000264D= 4D 4F 56 45 51 2E 00    3703  MOVEQ_MESSAGE   DC.B 'MOVEQ.',0
00002654= 44 49 56 55 2E 00       3704  DIVU_MESSAGE    DC.B 'DIVU.',0
0000265A= 4F 52 2E 00             3705  OR_MESSAGE      DC.B 'OR.',0
0000265E= 53 55 42 2E 00          3706  SUB_MESSAGE     DC.B 'SUB.',0
00002663= 43 4D 50 2E 00          3707  CMP_MESSAGE     DC.B 'CMP.',0
00002668= 4D 55 4C 53 2E 00       3708  MULS_MESSAGE    DC.B 'MULS.',0
0000266E= 41 4E 44 2E 00          3709  AND_MESSAGE     DC.B 'AND.',0
00002673= 41 44 44 2E 00          3710  ADD_MESSAGE     DC.B 'ADD.',0
00002678= 41 44 44 41 2E 00       3711  ADDA_MESSAGE    DC.B 'ADDA.',0
0000267E= 4C 53 4C 2E 00          3712  LSL_MESSAGE     DC.B 'LSL.',0 *//
00002683= 41 53 4C 2E 00          3713  ASL_MESSAGE     DC.B 'ASL.',0
00002688= 52 4F 4C 2E 00          3714  ROL_MESSAGE     DC.B 'ROL.',0
0000268D= 4C 53 52 2E 00          3715  LSR_MESSAGE     DC.B 'LSR.',0 *//
00002692= 41 53 52 2E 00          3716  ASR_MESSAGE     DC.B 'ASR.',0
00002697= 52 4F 52 2E 00          3717  ROR_MESSAGE     DC.B 'ROR.',0
0000269C= 42 20 20 20 20 00       3718  SIZE_B_PRINT    DC.B 'B    ',0
000026A2= 57 20 20 20 20 00       3719  SIZE_W_PRINT    DC.B 'W    ',0
000026A8= 4C 20 20 20 20 00       3720  SIZE_L_PRINT    DC.B 'L    ',0
000026AE= 23 00                   3721  POUND_SIGN      DC.B '#',0
000026B0= 24 00                   3722  HEX_SIGN        DC.B '$',0
000026B2= 2E 00                   3723  PERIOD          DC.B '.',0
000026B4= 20 20 00                3724  SPACE           DC.B '  ',0
000026B7= 2F 00                   3725  SLASH           DC.B '/', 0
000026B9                          3726  
000026B9= 44 00                   3727  D_REGISTER      DC.B 'D',0
000026BB= 41 00                   3728  A_REGISTER      DC.B 'A',0
000026BD= 28 41 00                3729  IA_START        DC.B '(A',0
000026C0= 29 00                   3730  IA_END          DC.B ')',0
000026C2= 28 41 00                3731  A_PI_START      DC.B '(A',0
000026C5= 29 2B 00                3732  A_PI_END        DC.B ')+',0
000026C8= 2D 28 41 00             3733  A_PD_START      DC.B '-(A',0
000026CC= 29 00                   3734  A_PD_END        DC.B ')',0
000026CE= 2C 20 00                3735  COMMA           DC.B ', ',0
000026D1                          3736  
000026D1                          3737  
000026D1                          3738  
000026D1                          3739  
000026D1                          3740  
000026D1                          3741  
000026D1                          3742  
000026D1                          3743  
000026D1                          3744  
000026D1                          3745  
000026D1                          3746  
000026D1                          3747  
000026D1                          3748  
000026D1                          3749  
000026D1                          3750  
000026D1                          3751  
000026D1                          3752  
000026D1                          3753  
000026D1                          3754  
000026D1                          3755  -------------------- end include --------------------
000026D1                          3756      *MOVE.B    #3, D2
000026D1                          3757      *MOVE.B    #0, D5
000026D2  307C 0400               3758      MOVEA.W   #$400, A0
000026D6                          3759      
000026D6                          3760      
000026D6                          3761      
000026D6                          3762  
000026D6                          3763      END    START        ; last line of source

2 errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_LONG       247E
ABSOLUTE_SHORT      2460
ADDA_CODE           1F36
ADDA_MESSAGE        2678
ADDI                11D6
ADDI_B_SIZE         1246
ADDI_EA             12A6
ADDI_MESSAGE        25E1
ADDI_W_SIZE         1276
ADDQ                12DE
ADDQB               130C
ADDQL               1338
ADDQW               1322
ADDQ_MESSAGE        260B
ADDRESS_PD          23E6
ADDRESS_PI          23BC
ADDRESS_REGISTER    2376
ADDRESS_W_DISPLACEMENT  2410
ADDRESS_W_INDEX     2414
ADD_ADDA            1F22
ADD_CODE            1FA4
ADD_FIRST_EA        1FEA
ADD_MESSAGE         2673
AND_CODE            1670
AND_FIRST_EA        16B6
AND_MESSAGE         266E
ASD                 1CCC
ASD_MEMORY          1D26
ASL                 1CE2
ASL_MESSAGE         2683
ASR                 1D04
ASR_MESSAGE         2692
A_16_BIT            2242
A_32_BIT            2250
A_PD_END            26CC
A_PD_START          26C8
A_PI_END            26C5
A_PI_START          26C2
A_REGISTER          26BB
BCC                 20B6
BCC_MESSAGE         2615
BCS_MESSAGE         2621
BEQ_MESSAGE         2619
BGE_MESSAGE         2625
BGT_MESSAGE         2629
BHI_MESSAGE         262D
BIT0                1A2C
BIT1                1A3C
BIT10               1ACC
BIT11               1ADC
BIT12               1AEC
BIT13               1AFC
BIT14               1B0C
BIT15               1B1C
BIT2                1A4C
BIT3                1A5C
BIT4                1A6C
BIT5                1A7C
BIT6                1A8C
BIT7                1A9C
BIT8                1AAC
BIT9                1ABC
BLE_MESSAGE         2631
BLS_MESSAGE         2635
BLT_MESSAGE         2639
BMI_MESSAGE         263D
BNE_MESSAGE         261D
BPL_MESSAGE         2641
BVC_MESSAGE         2645
BVS_MESSAGE         2649
CC                  20E8
CHAR                10A0
CHECK               197E
CHECK_SECOND        1990
CLR_MESSAGE         2607
CLR_OPCODE          1460
CMP_MESSAGE         2663
CODE000             233A
CODE0000            1196
CODE0001            119A
CODE001             233E
CODE0010            119E
CODE0011            11A2
CODE010             2342
CODE0100            11A6
CODE0101            11AA
CODE011             2346
CODE0110            11AE
CODE0111            11B2
CODE100             234A
CODE1000            11B6
CODE1001            11BA
CODE101             234E
CODE1010            11BE
CODE1011            11C2
CODE110             2352
CODE1100            11C6
CODE1101            11CA
CODE111             2356
CODE1110            11CE
CODE1111            11D2
COMMA               26CE
CONTINUE_PARSE      1114
CONVERT_STRING      107E
CR                  D
CR_LF               25DE
CS                  20EC
DATA_REGISTER       235A
DIRECTION_LEFT      1
DIRECTION_RIGHT     0
DISPLACEMENT        21F4
DIVU_CODE           150E
DIVU_MESSAGE        2654
DIVU_OR             14FA
DONE                24E8
DONE_MOVEM_LOOP     1B2C
DONE_PRINTING       203A
DR_FIELD            1714
D_REGISTER          26B9
ENDCONV             10DA
ENDING              2573
ENDING_ADDR         2520
ENDING_MESSAGE      103C
ENTER               258F
EQ                  20F4
ERROR               10CA
ERROR_MSG           25A2
EXAMPLE             606
EXAMPLE1            DE61
FINISH_PRINTING_SIZE  1F58
GE                  2108
GET_DATA_REGISTER   207A
GET_SIZE_PURPLE     200C
GO_THROUGH_MEMORY   10DC
GROUP_0100_CODE     15BC
GROUP_111           2418
GT                  2110
HEX_SIGN            26B0
HEX_TO_ASCII        225E
HI                  20E0
IA_END              26C0
IA_START            26BD
IMMEDIATE           249C
IMMEDIATE_B         24C4
IMMEDIATE_L         24DC
IMMEDIATE_W         24D0
INDIRECT_ADDRESS    2392
IS_USED             19A4
IS_USED_FIRST       199A
JMP_TABLE           1136
JMP_TABLE_EA        230A
JMP_TABLE_EA_111    2426
JMP_TABLE_MOVEM     19CC
JSR_MESSAGE         25FF
JSR_OPCODE          142A
LE                  2114
LEA_MESSAGE         2611
LEA_OPCODE          13B0
LETTER_1            2280
LETTER_1_ZERO       22C6
LF                  A
LOOP                226A
LOOP_MOVEM          1976
LOOP_MOVEM_SECOND   1988
LOOP_ZERO           22B0
LS                  20E4
LSD                 1BFC
LSD_MEMORY          1C5A
LSL                 1C16
LSL_MESSAGE         267E
LSR                 1C38
LSR_MESSAGE         268D
LT                  210C
MAX_USER_INPUT      8
MEMORY_REGISTER     1780
MEMORY_SHIFTS       1BD0
MI                  2104
MODE_AL             7
MODE_AN             1
MODE_AS             7
MODE_AWD            5
MODE_AWI            6
MODE_DN             0
MODE_IAN            2
MODE_ID             7
MODE_M_DN           0
MODE_M_PDAN         1
MODE_PCWD           7
MODE_PCWI           7
MODE_PDAN           4
MODE_PIAN           3
MOVEAL              1EB0
MOVEAW              1E92
MOVEA_MESSAGE       25E7
MOVEB               1E0C
MOVEL               1E5E
MOVEM_MESSAGE       25F8
MOVEM_OPCODE        16DC
MOVEQ               1B2E
MOVEQ_MESSAGE       264D
MOVEW               1E2A
MOVE_MESSAGE        25EE
MULS_AND            161E
MULS_CODE           1632
MULS_MESSAGE        2668
NE                  20F0
NEXT_INSTRUCTION    111C
NOP_MESSAGE         25F4
NOP_OPCODE          140A
NUMBER              1090
NUMBER_1            228A
NUMBER_1_ZERO       22D0
OPPOSITE_BIT0       1876
OPPOSITE_BIT1       1886
OPPOSITE_BIT10      1916
OPPOSITE_BIT11      1926
OPPOSITE_BIT12      1936
OPPOSITE_BIT13      1946
OPPOSITE_BIT14      1956
OPPOSITE_BIT15      1966
OPPOSITE_BIT2       1896
OPPOSITE_BIT3       18A6
OPPOSITE_BIT4       18B6
OPPOSITE_BIT5       18C6
OPPOSITE_BIT6       18D6
OPPOSITE_BIT7       18E6
OPPOSITE_BIT8       18F6
OPPOSITE_BIT9       1906
OPPOSITE_CHECK      17C8
OPPOSITE_CHECK_SECOND  17DA
OPPOSITE_IS_USED    17EE
OPPOSITE_IS_USED_FIRST  17E4
OPPOSITE_JMP_TABLE_MOVEM  1816
OPPOSITE_LOOP       17A0
OPPOSITE_LOOP_MOVEM  17C0
OPPOSITE_LOOP_MOVEM_SECOND  17D2
OPPOSITE_PRINT_REGISTER_MOVEM  1804
OR_CODE             1550
OR_FIRST_EA         1596
OR_MESSAGE          265A
OUTPUTCOUNTCURR     0
OUTPUTCOUNTMAX      1F
PARSE_MEMORY        10F0
PARSE_MEMORY_FIRST  10FE
PC_W_DISPLACEMENT   2458
PC_W_INDEX          245C
PERIOD              26B2
PL                  2100
POUND_SIGN          26AE
PRESS_ENTER_CONTINUE  24EE
PRINTADDQ           134E
PRINTOUT_COUNT      1D62
PRINTOUT_MEMORY_SHIFTS_EA  1DDC
PRINTOUT_MOVE_EA    1ECE
PRINTOUT_NIBBLE     2294
PRINTOUT_NIBBLE_ZERO  22DA
PRINTOUT_REGISTER   1DA4
PRINTOUT_REGISTER_SHIFTS_EA  1D30
PRINTOUT_SIZE_L     1F92
PRINTOUT_SIZE_PURPLE  2022
PRINTOUT_SIZE_W     1F80
PRINT_ADDRESS       175E
PRINT_B             203C
PRINT_BCC           2138
PRINT_BCS           2148
PRINT_BEQ           2168
PRINT_BGE           21B8
PRINT_BGT           21D8
PRINT_BHI           2118
PRINT_BLE           21E8
PRINT_BLS           2128
PRINT_BLT           21C8
PRINT_BMI           21A8
PRINT_BNE           2158
PRINT_BPL           2198
PRINT_BVC           2178
PRINT_BVS           2188
PRINT_COMMA         206C
PRINT_EA            22FC
PRINT_L             205C
PRINT_REGISTER_MOVEM  19BA
PRINT_SIZE          14A4
PRINT_SIZE_L_MOVEM  1708
PRINT_W             204C
PRINT_ZERO          22EE
REG000              244C
REG001              2450
REG010              2444
REG011              2448
REG100              2454
REGITSET_MEMORY     1726
ROD                 1C64
ROD_MEMORY          1CC2
ROL                 1C7E
ROL_MESSAGE         2688
ROR                 1CA0
ROR_MESSAGE         2697
RO_IMMEDATE         0
RO_REGISTER         1
RTS_MESSAGE         2603
RTS_OPCODE          141A
SET_EA              208C
SHIFT               C
SHIFTS              1B96
SIZE_B              14DC
SIZE_BYTE           0
SIZE_B_PRINT        269C
SIZE_L              14F0
SIZE_LONG           3
SIZE_L_PRINT        26A8
SIZE_W              14E6
SIZE_WORD           1
SIZE_W_PRINT        26A2
SLASH               26B7
SPACE               26B4
START               1000
STARTING            2555
STARTING_ADDR       251C
STARTING_MESSAGE    100C
STOP                2518
STORE_ADDR          10B8
SUB_MESSAGE         265E
VC                  20F8
VS                  20FC
WELCOME_MESSAGE     2524
XN_AL               1
XN_AS               0
XN_ID               4
XN_PCWD             2
XN_PCWI             3
