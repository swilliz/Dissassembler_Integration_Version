00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/1/16 10:10:08 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Dissassembler Integration
00000000                             3  * Written by : Samuel Williams
00000000                             4  * Date       : 5/25/2016
00000000                             5  * Description: The file which includes all files
00000000                             6  *              to create a complete dissassembler 
00000000                             7  *-----------------------------------------------------------
00001000                             8      ORG    $1000
00001000                             9  START:                  ; first instruction of program
00001000                            10      
00001000                            11      *INCLUDE 'TEST_CODE_DAMIAN.X68'
00001000                            12      INCLUDE 'EQU_Data.X68'
00001000                            13  
00001000                            14  
00001000  =00000008                 15  MAX_USER_INPUT  EQU 8 
00001000                            16  
00001000                            17  
00001000  =00000606                 18  example          EQU     %0000011000000110
00001000                            19  
00001000  =0000DE61                 20  example1         EQU     %1101111001100001    * I made up bits 0 to 11      
00001000                            21  
00001000  =0000000C                 22  shift            EQU     12                   * Shift 12 bits 
00001000                            23  
00001000  =00000000                 24  mode_dn          EQU     %000
00001000                            25  
00001000  =00000001                 26  mode_an          EQU     %001
00001000                            27  
00001000  =00000002                 28  mode_ian         EQU     %010
00001000                            29  
00001000  =00000003                 30  mode_pian        EQU     %011
00001000                            31  
00001000  =00000004                 32  mode_pdan        EQU     %100
00001000                            33  
00001000  =00000005                 34  mode_awd         EQU     %101
00001000                            35  
00001000  =00000006                 36  mode_awi         EQU     %110
00001000                            37  
00001000  =00000007                 38  mode_pcwd        EQU     %111
00001000                            39  
00001000  =00000002                 40  xn_pcwd          EQU     %010
00001000                            41  
00001000  =00000007                 42  mode_pcwi        EQU     %111
00001000                            43  
00001000  =00000003                 44  xn_pcwi          EQU     %011
00001000                            45  
00001000  =00000007                 46  mode_as          EQU     %111
00001000                            47  
00001000  =00000000                 48  xn_as            EQU     %000
00001000                            49  
00001000  =00000007                 50  mode_al          EQU     %111
00001000                            51  
00001000  =00000001                 52  xn_al            EQU     %001
00001000                            53  
00001000  =00000007                 54  mode_id          EQU     %111
00001000                            55  
00001000  =00000004                 56  xn_id            EQU     %100
00001000                            57  
00001000  =00000000                 58  size_byte        EQU     %00
00001000                            59  
00001000  =00000001                 60  size_word        EQU     %01
00001000                            61  
00001000  =00000003                 62  size_long        EQU     %11
00001000                            63  
00001000  =00000000                 64  direction_right  EQU     %0
00001000                            65  
00001000  =00000001                 66  direction_left   EQU     %1
00001000                            67  
00001000  =00000000                 68  ro_immedate      EQU     %0
00001000                            69  
00001000  =00000001                 70  ro_register      EQU     %1
00001000                            71  
00001000  =00000000                 72  mode_m_dn        EQU     %0
00001000                            73  
00001000  =00000001                 74  mode_m_pdan      EQU     %1
00001000                            75  
00001000  =0000001F                 76  outputCountMax   EQU     31
00001000                            77  
00001000  =00000000                 78  outputCountCurr  EQU     0
00001000                            79            
00001000  =0000000D                 80  CR  EQU $0D
00001000                            81  
00001000  =0000000A                 82  LF  EQU $0A
00001000                            83  
00001000                            84  
00001000                            85  
00001000                            86  
00001000                            87  
00001000                            88  
00001000                            89  -------------------- end include --------------------
00001000                            90      INCLUDE 'INPUT.X68'
00001000                            91      * I/O 
00001000                            92      
00001000                            93      * Welcome message
00001000  43F9 00002546             94          LEA WELCOME_MESSAGE, A1
00001006  103C 000E                 95          MOVE.B #14, D0
0000100A  4E4F                      96          TRAP #15
0000100C                            97          
0000100C                            98  STARTING_MESSAGE    
0000100C                            99      * Printing out the Starting address message
0000100C  43F9 00002577            100          LEA STARTING, A1
00001012  103C 000E                101          MOVE.B #14, D0
00001016  4E4F                     102          TRAP #15
00001018                           103      
00001018                           104      * Code for input
00001018  227C 00002000            105          MOVEA.L #$2000, A1 *we have to change this addr later
0000101E  103C 0002                106          MOVE.B #2, D0
00001022  4E4F                     107          TRAP #15
00001024  143C 0008                108          MOVE.B #MAX_USER_INPUT, D2
00001028                           109      
00001028                           110      * JSR to convert string function
00001028  4EB9 0000107E            111          JSR CONVERT_STRING   
0000102E                           112      * check if the address is even number
0000102E  E25C                     113          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001030  65DA                     114          BCS STARTING_MESSAGE   *if carry is set then the user typed in an odd address
00001032  E35C                     115          ROL #1, D4     *PUT D4 BACK
00001034                           116         
00001034                           117      * store hex value of inputted string 
00001034  23C4 0000253E            118          MOVE.L D4, STARTING_ADDR 
0000103A                           119      * reset the D4
0000103A  4284                     120          CLR.L  D4
0000103C                           121          
0000103C                           122  ENDING_MESSAGE
0000103C                           123      * message user to input
0000103C  43F9 00002595            124          LEA ENDING, A1   
00001042  103C 000E                125          MOVE.B #14, D0
00001046  4E4F                     126          TRAP #15
00001048                           127      * read user input
00001048  227C 00002000            128          MOVEA.L #$2000, A1 *we have to change this addr later
0000104E  103C 0002                129          MOVE.B #2, D0   
00001052  4E4F                     130          TRAP #15
00001054                           131      * counter for loop
00001054  143C 0008                132          MOVE.B #MAX_USER_INPUT, D2   
00001058                           133      * JSR to convert string function
00001058  4EB9 0000107E            134          JSR CONVERT_STRING 
0000105E                           135          
0000105E                           136      * check if the address is even number
0000105E  E25C                     137          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001060  65DA                     138          BCS ENDING_MESSAGE   *if carry is set then the user typed in an odd address
00001062  E35C                     139          ROL #1, D4     *PUT D4 BACK        
00001064                           140          
00001064                           141      * Check if the starting and ending address is the same
00001064                           142         ; CMP.L #STARTING_ADDR, D4
00001064                           143         * MOVE.L #STARTING_ADDR, D5
00001064  2C39 0000253E            144          MOVE.L STARTING_ADDR, D6
0000106A  B886                     145          CMP.L  D6, D4
0000106C  6FCE                     146          BLE   ENDING_MESSAGE
0000106E                           147      * store hex value of inputted string   
0000106E  23C4 00002542            148          MOVE.L D4, ENDING_ADDR   
00001074                           149          
00001074                           150      * clear the unused data in the data and address regisgter
00001074  4280                     151          CLR.L D0
00001076  4284                     152          CLR.L D4
00001078                           153          
00001078                           154          * Do error handling here Sam
00001078                           155          
00001078  4EF9 000010C4            156          JMP GO_THROUGH_MEMORY
0000107E                           157      
0000107E                           158      * Get each char
0000107E                           159  CONVERT_STRING 
0000107E  1219                     160          MOVE.B (A1)+, D1
00001080                           161      
00001080                           162      * Go to next instruction for converting
00001080  B23C 0039                163          CMP.B #$39, D1
00001084  6F00 000A                164          BLE NUMBER
00001088                           165          
00001088  B23C 0041                166          CMP.B #$41, D1
0000108C  6C00 0012                167          BGE CHAR   
00001090                           168      
00001090                           169      * Convert Ascii numbers to hex
00001090  B23C 002F                170  NUMBER  CMP.B #$2F, D1
00001094                           171      * Number is out of range
00001094  6F00 002C                172          BLE ERROR       
00001098  0401 0030                173          SUB.B #48, D1
0000109C                           174          
0000109C                           175      * Need to be changed the name of label
0000109C  6000 0012                176          BRA STORE_ADDR    
000010A0                           177      
000010A0                           178      * Convert Ascii charaters to hex
000010A0  B27C 005B                179  CHAR    CMP #$5B, D1
000010A4                           180      * Number is out of range
000010A4  6C00 001C                181          BGE ERROR
000010A8                           182          
000010A8  0401 0037                183          SUB.B #55, D1
000010AC  6000 0002                184          BRA STORE_ADDR
000010B0                           185          
000010B0                           186  STORE_ADDR
000010B0                           187      * Add converted nibble to overall number
000010B0  D801                     188          ADD.B D1, D4
000010B2                           189      * Clear D1 for reuse 
000010B2  4201                     190          CLR.B D1
000010B4                           191      * Subtract from counter
000010B4  5342                     192          SUB #1, D2
000010B6                           193      * If counter is 0, we compared all 8 hex numbers
000010B6  B43C 0000                194          CMP.B #0, D2
000010BA  6700 0006                195          BEQ ENDCONV
000010BE                           196      * Shift the overall number to the left by 1 nibble, so it will fit next hex number
000010BE  E98C                     197          LSL.L #4, D4
000010C0  60BC                     198          BRA CONVERT_STRING
000010C2                           199          
000010C2                           200      * Error handling
000010C2                           201  ERROR 
000010C2                           202      
000010C2                           203  ENDCONV * Next instruction starts 
000010C2  4E75                     204          RTS
000010C4                           205         * MOVE.L D4, STARTING_ADDR 
000010C4                           206          
000010C4                           207  GO_THROUGH_MEMORY
000010C4                           208  
000010C4                           209  
000010C4                           210  
000010C4                           211  
000010C4                           212  
000010C4                           213  
000010C4                           214  
000010C4                           215  
000010C4                           216  
000010C4                           217  
000010C4                           218  
000010C4                           219  
000010C4                           220  
000010C4                           221  
000010C4                           222  
000010C4                           223  
000010C4                           224  
000010C4                           225  
000010C4                           226  
000010C4                           227  
000010C4                           228  
000010C4                           229  
000010C4                           230  -------------------- end include --------------------
000010C4                           231      INCLUDE 'MEMORY_PARSER.X68'
000010C4                           232  
000010C4  2A79 0000253E            233                  MOVEA.L   STARTING_ADDR, A5
000010CA  2C4D                     234                  MOVEA.L   A5, A6
000010CC  247C 0000001F            235                  MOVEA.L  #outputCountMax, A2
000010D2  267C 00000000            236                  MOVEA.L  #outputCountCurr, A3
000010D8                           237  PARSE_MEMORY      
000010D8  3A4E                     238                  MOVE.W   A6, A5
000010DA  43F9 000025C4            239                  LEA      CR_LF, A1
000010E0  103C 000E                240                  MOVE.B   #14, D0
000010E4  4E4F                     241                  TRAP #15  
000010E6                           242          
000010E6                           243  PARSE_MEMORY_FIRST    
000010E6  BBF9 00002542            244                  CMPA.L   ENDING_ADDR, A5
000010EC  6700 144C                245                  BEQ      STOP
000010F0  301E                     246                  MOVE.W   (A6)+, D0
000010F2                           247                  
000010F2  B7FC 0000001F            248                  CMPA.L   #outputCountMax, A3
000010F8  6700 1416                249                  BEQ       PRESS_ENTER_CONTINUE
000010FC                           250  CONTINUE_PARSE
000010FC  528B                     251                  ADDA.L    #1, A3
000010FE                           252                  
000010FE  4EF9 00001104            253                  JMP      NEXT_INSTRUCTION
00001104                           254                      
00001104                           255  NEXT_INSTRUCTION
00001104                           256                  INCLUDE 'JUMPTABLE DAMIAN-V1.X68'
00001104                           257   
00001104                           258  
00001104  3015                     259                   MOVE.W  (A5),D0
00001106                           260  
00001106                           261  
00001106                           262  
00001106  41F9 0000111E            263                   LEA     jmp_table,A0    *Index into the table
0000110C                           264  
0000110C  4280                     265                   CLR.L   D0              *Zero it
0000110E                           266  
0000110E  3015                     267                   MOVE.W  (A5),D0     *We'll play with it here
00001110                           268  
00001110  123C 000C                269                   MOVE.B  #shift,D1       *Shift 12 bits to the right  
00001114                           270  
00001114  E268                     271                   LSR.W   D1,D0           *Move the bits
00001116                           272  
00001116                           273  
00001116                           274  
00001116                           275  
00001116                           276   
00001116                           277  
00001116  C0FC 0006                278                 MULU        #6,D0       *Form offset     
0000111A                           279  
0000111A  4EB0 0000                280                 JSR         0(A0,D0)   *Jump indirect with index
0000111E                           281  
0000111E                           282                      
0000111E                           283  
0000111E  4EF9 0000117E            284  jmp_table      JMP         code0000
00001124                           285  
00001124  4EF9 00001182            286                 JMP         code0001
0000112A                           287  
0000112A  4EF9 00001186            288                 JMP         code0010
00001130                           289  
00001130  4EF9 0000118A            290                 JMP         code0011
00001136                           291  
00001136  4EF9 0000118E            292                 JMP         code0100
0000113C                           293  
0000113C  4EF9 00001192            294                 JMP         code0101
00001142                           295  
00001142  4EF9 00001196            296                 JMP         code0110
00001148                           297  
00001148  4EF9 0000119A            298                 JMP         code0111
0000114E                           299  
0000114E  4EF9 0000119E            300                 JMP         code1000
00001154                           301  
00001154  4EF9 000011A2            302                 JMP         code1001
0000115A                           303  
0000115A  4EF9 000011A6            304                 JMP         code1010
00001160                           305  
00001160  4EF9 000011AA            306                 JMP         code1011
00001166                           307  
00001166  4EF9 000011AE            308                 JMP         code1100
0000116C                           309  
0000116C  4EF9 000011B2            310                 JMP         code1101
00001172                           311  
00001172  4EF9 000011B6            312                 JMP         code1110
00001178                           313  
00001178  4EF9 000011BA            314                 JMP         code1111
0000117E                           315  
0000117E                           316          
0000117E                           317  
0000117E                           318   
0000117E                           319  
0000117E                           320  
0000117E                           321   
0000117E                           322  
0000117E                           323   
0000117E                           324  
0000117E  6000 003E                325  code0000       BRA         ADDI
00001182                           326  
00001182  6000 0C70                327  code0001       BRA         MOVEB
00001186                           328  
00001186  6000 0CB6                329  code0010       BRA         MOVEL
0000118A                           330  
0000118A  6000 0C82                331  code0011       BRA         MOVEW
0000118E                           332  
0000118E  6000 0470                333  code0100       BRA         GROUP_0100_CODE
00001192                           334  
00001192  6000 0208                335  code0101       BRA         ADDQ   * Subroutine for ADDQ
00001196                           336  
00001196  4E72 2700                337  code0110       STOP        #$2700
0000119A                           338  
0000119A  4E72 2700                339  code0111       STOP        #$2700
0000119E                           340  
0000119E  4E72 2700                341  code1000       STOP        #$2700
000011A2                           342  
000011A2  6000 0122                343  code1001       BRA         SUB    * Subroutine for SUB
000011A6                           344  
000011A6  4E72 2700                345  code1010       STOP        #$2700
000011AA                           346  
000011AA                           347   
000011AA                           348  
000011AA                           349  
000011AA                           350  
000011AA                           351  
000011AA                           352   * another jump table to the 8 possible op-codes at the next level.
000011AA                           353  
000011AA                           354   
000011AA                           355  
000011AA  6000 012C                356  code1011       BRA        CMP  * Subroutuine for CMP
000011AE                           357  
000011AE  4E72 2700                358  code1100       STOP        #$2700
000011B2                           359  
000011B2  6000 0D42                360  code1101       BRA         ADD_ADDA       *#$2700
000011B6                           361  
000011B6  6000 09EC                362  code1110       BRA         SHIFTS
000011BA                           363  
000011BA  4E72 2700                364  code1111       STOP        #$2700
000011BE                           365                   
000011BE                           366  
000011BE                           367                      
000011BE                           368              
000011BE                           369  
000011BE                           370  
000011BE                           371  
000011BE                           372  
000011BE                           373  
000011BE                           374  
000011BE                           375  
000011BE                           376  
000011BE                           377  
000011BE                           378  
000011BE                           379  
000011BE                           380  
000011BE                           381  
000011BE                           382  
000011BE                           383  
000011BE                           384  -------------------- end include --------------------
000011BE                           385                  INCLUDE 'ADDI.X68'
000011BE                           386    
000011BE                           387  ADDI           * first check the first 4 bits after the op-code
000011BE  4280                     388                 CLR.L       D0
000011C0                           389  
000011C0  4281                     390                 CLR.L       D1
000011C2                           391                 
000011C2  3015                     392                 MOVE.W      (A5),D0
000011C4                           393                 
000011C4  123C 0008                394                 MOVE.B      #8, D1 * for shifting to the right by 8 bits
000011C8                           395                 
000011C8  E268                     396                 LSR.W       D1, D0
000011CA                           397                 
000011CA  B07C 0006                398                 CMP.W       #6, D0 * checking the first 4 bits 
000011CE                           399                 
000011CE  6600 FEF2                400                 BNE         ERROR  * go to error 
000011D2                           401                 
000011D2                           402                 * print the op-code 
000011D2  4280                     403                 CLR.L       D0
000011D4                           404  
000011D4  4281                     405                 CLR.L       D1
000011D6                           406                 
000011D6  43F9 000025C7            407                 LEA         ADDI_MESSAGE, A1    * NOTE - how do you know this is of size B ????? 
000011DC                           408                 
000011DC  103C 000E                409                 MOVE.B      #14, D0
000011E0                           410                 
000011E0  4E4F                     411                 TRAP #15
000011E2                           412                                
000011E2                           413                 * print the size
000011E2  4280                     414                 CLR.L       D0
000011E4                           415  
000011E4  4281                     416                 CLR.L       D1
000011E6                           417                 
000011E6  3015                     418                 MOVE.W      (A5),D0
000011E8                           419                
000011E8  E148                     420                 LSL.W       #8, D0
000011EA                           421  
000011EA  123C 000E                422                 MOVE.B      #14, D1 * for shifting to the right by 8 bits
000011EE                           423                 
000011EE  E268                     424                 LSR.W       D1, D0
000011F0                           425                 
000011F0                           426                 * D1 holds the size
000011F0                           427    *             CLR.L       D1
000011F0                           428                 
000011F0                           429    *             MOVE.B      D0, D1
000011F0                           430                   
000011F0  B03C 0000                431                 CMP.B       #%00, D0
000011F4                           432                 
000011F4  6700 0038                433                 BEQ         ADDI_B_SIZE
000011F8                           434                 
000011F8  B03C 0001                435                 CMP.B       #%01, D0
000011FC                           436                 
000011FC  6700 0060                437                 BEQ         ADDI_W_SIZE
00001200                           438                 
00001200                           439                 *print size L
00001200  43F9 0000268A            440                 LEA         SIZE_L_PRINT, A1     
00001206                           441                 
00001206  103C 000E                442                 MOVE.B      #14, D0
0000120A                           443                 
0000120A  4E4F                     444                 TRAP #15
0000120C                           445                 
0000120C                           446                * print out pound sign and hex sign
0000120C  43F9 00002690            447                 LEA     POUND_SIGN, A1
00001212                           448              
00001212  103C 000E                449                 MOVE.B  #14, D0
00001216                           450              
00001216  4E4F                     451                 TRAP #15
00001218                           452              
00001218  43F9 00002692            453                 LEA     HEX_SIGN, A1
0000121E                           454              
0000121E  4E4F                     455                 TRAP #15
00001220                           456                 
00001220  4285                     457                 CLR.L  D5
00001222                           458          
00001222  2A1E                     459                 MOVE.L (A6)+, D5 * we mimght change it later
00001224                           460          
00001224  4EB9 00002280            461                 JSR  HEX_TO_ASCII
0000122A                           462                 
0000122A  6000 0062                463                 BRA         ADDI_EA   
0000122E                           464                      
0000122E                           465  ADDI_B_SIZE
0000122E  43F9 0000267E            466                 LEA         SIZE_B_PRINT, A1     
00001234                           467                 
00001234  103C 000E                468                 MOVE.B      #14, D0
00001238                           469                 
00001238  4E4F                     470                 TRAP #15
0000123A                           471                 
0000123A                           472                * print out pound sign and hex sign
0000123A  43F9 00002690            473                 LEA     POUND_SIGN, A1
00001240                           474              
00001240  103C 000E                475                 MOVE.B  #14, D0
00001244                           476              
00001244  4E4F                     477                 TRAP #15
00001246                           478              
00001246  43F9 00002692            479                 LEA     HEX_SIGN, A1
0000124C                           480              
0000124C  4E4F                     481                 TRAP #15
0000124E                           482                 
0000124E  4280                     483                 CLR.L D0
00001250                           484  
00001250  301E                     485                 MOVE.W (A6)+, D0 * we mimght change it later
00001252                           486                 
00001252  1A00                     487                 MOVE.B D0, D5
00001254                           488     
00001254  4EB9 00002280            489                 JSR  HEX_TO_ASCII
0000125A                           490                 
0000125A  6000 0032                491                 BRA         ADDI_EA 
0000125E                           492                  
0000125E                           493  
0000125E                           494  ADDI_W_SIZE
0000125E  43F9 00002684            495                 LEA         SIZE_W_PRINT, A1     
00001264                           496                 
00001264  103C 000E                497                 MOVE.B      #14, D0
00001268                           498                 
00001268  4E4F                     499                 TRAP #15
0000126A                           500                 
0000126A                           501                 * print out pound sign and hex sign
0000126A  43F9 00002690            502                 LEA     POUND_SIGN, A1
00001270                           503              
00001270  103C 000E                504                 MOVE.B  #14, D0
00001274                           505              
00001274  4E4F                     506                 TRAP #15
00001276                           507              
00001276  43F9 00002692            508                 LEA     HEX_SIGN, A1
0000127C                           509              
0000127C  4E4F                     510                 TRAP #15
0000127E                           511  
0000127E  4285                     512                 CLR.L  D5
00001280                           513          
00001280  3A1E                     514                 MOVE.W (A6)+, D5
00001282                           515          
00001282  4EB9 00002280            516                 JSR  HEX_TO_ASCII
00001288                           517          
00001288  4EF9 0000128E            518                 JMP  ADDI_EA
0000128E                           519  
0000128E                           520  
0000128E                           521  ADDI_EA      
0000128E  4EB9 0000203E            522                  JSR     PRINT_COMMA
00001294                           523                  
00001294  4280                     524                  CLR.L   D0
00001296                           525                  
00001296  4281                     526                  CLR.L   D1
00001298                           527                  
00001298                           528                  * set register
00001298                           529                   
00001298  3015                     530                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000129A                           531                 
0000129A  123C 000D                532                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000129E                           533  
0000129E  E368                     534                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000012A0                           535  
000012A0  123C 000D                536                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000012A4                           537  
000012A4  E268                     538                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000012A6                           539  
000012A6  1E00                     540                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
000012A8                           541                   
000012A8                           542                   * set mode
000012A8  4280                     543                   CLR.L D0                *clear D0
000012AA                           544                   
000012AA  4281                     545                   CLR.L D1                *clear D1
000012AC                           546                   
000012AC  3015                     547                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000012AE                           548                 
000012AE  123C 000A                549                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000012B2                           550  
000012B2  E368                     551                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000012B4                           552  
000012B4  123C 000D                553                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000012B8                           554  
000012B8  E268                     555                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000012BA                           556  
000012BA  1C00                     557                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
000012BC                           558  
000012BC                           559   
000012BC                           560                 * JSR     Set_Ea
000012BC                           561                   
000012BC  4EB9 0000231E            562                  JSR     PRINT_EA *by using jmp table
000012C2                           563                  
000012C2  4EF8 10D8                564                  JMP     PARSE_MEMORY
000012C6                           565                  
000012C6                           566                  
000012C6                           567                   
000012C6                           568                   
000012C6                           569  
000012C6                           570  
000012C6                           571                 
000012C6                           572  
000012C6                           573  
000012C6                           574  
000012C6                           575  
000012C6                           576  
000012C6                           577  
000012C6                           578  
000012C6                           579  
000012C6                           580  
000012C6                           581  
000012C6                           582  
000012C6                           583  
000012C6                           584  
000012C6                           585  
000012C6                           586  
000012C6                           587  
000012C6                           588  
000012C6                           589  
000012C6                           590  
000012C6                           591  
000012C6                           592  
000012C6                           593  
000012C6                           594  
000012C6                           595  
000012C6                           596  -------------------- end include --------------------
000012C6                           597                  INCLUDE 'ADDQ_SUB_CMP.X68'
000012C6                           598  SUB
000012C6                           599  
000012C6  43F9 00002640            600      LEA SUB_MESSAGE, A1  *print SUB
000012CC                           601                   
000012CC  103C 000E                602      MOVE.B #14, D0
000012D0                           603                   
000012D0  4E4F                     604      TRAP #15
000012D2                           605      
000012D2  4EF9 000012EA            606      JMP SUB_CMP
000012D8                           607  
000012D8                           608  CMP
000012D8  43F9 00002645            609      LEA CMP_MESSAGE, A1  *print CMP
000012DE                           610                   
000012DE  103C 000E                611      MOVE.B #14, D0
000012E2                           612                   
000012E2  4E4F                     613      TRAP #15
000012E4                           614      
000012E4  4EF9 000012EA            615      JMP SUB_CMP
000012EA                           616  
000012EA                           617  SUB_CMP
000012EA                           618  
000012EA  3015                     619      MOVE.W (A5), D0
000012EC                           620      
000012EC  123C 0008                621      MOVE.B  #8,D1     
000012F0                           622  
000012F0  E368                     623      LSL.W   D1,D0
000012F2                           624                   
000012F2  123C 000E                625      MOVE.B  #14,D1
000012F6                           626  
000012F6  E268                     627      LSR.W   D1,D0  *DO now holds size
000012F8                           628                                              
000012F8  B03C 0002                629      CMP.B    #$2, D0        *if D0 holds 3, size is L
000012FC                           630      
000012FC  4EF9 0000133E            631      JMP      SUB_CMP_L
00001302                           632                   
00001302  B03C 0001                633      CMP.B    #$1, D0        *if D0 holds 3, size is W
00001306                           634                                   
00001306  4EF9 00001328            635      JMP      SUB_CMP_W
0000130C                           636  
0000130C  4EF9 00001312            637      JMP      SUB_CMP_B
00001312                           638  
00001312                           639  SUB_CMP_B  *Print B
00001312                           640  
00001312  43F9 0000267E            641      LEA SIZE_B_PRINT, A1  *print B
00001318                           642                   
00001318  103C 000E                643      MOVE.B #14, D0
0000131C                           644                   
0000131C  4E4F                     645      TRAP #15
0000131E                           646      
0000131E  1A3C 0000                647      MOVE.B #%00, D5
00001322                           648      
00001322  4EF9 00001354            649      JMP PRINT_SUB_CMP
00001328                           650      
00001328                           651  SUB_CMP_W  *Print W
00001328                           652  
00001328  43F9 00002684            653      LEA SIZE_W_PRINT, A1  *print W
0000132E                           654                   
0000132E  103C 000E                655      MOVE.B #14, D0
00001332                           656                   
00001332  4E4F                     657      TRAP #15
00001334                           658      
00001334  1A3C 0001                659      MOVE.B #%01, D5
00001338                           660  
00001338  4EF9 00001354            661      JMP PRINT_SUB_CMP
0000133E                           662  
0000133E                           663  SUB_CMP_L   *Print L
0000133E                           664  
0000133E  43F9 0000268A            665      LEA SIZE_L_PRINT, A1  *print L
00001344                           666                   
00001344  103C 000E                667      MOVE.B #14, D0
00001348                           668                   
00001348  4E4F                     669      TRAP #15
0000134A                           670  
0000134A  1A3C 0002                671      MOVE.B #%10, D5
0000134E                           672      
0000134E  4EF9 00001354            673      JMP PRINT_SUB_CMP
00001354                           674      
00001354                           675  PRINT_SUB_CMP
00001354                           676  
00001354  3C3C 0000                677      MOVE.W #$000, D6
00001358                           678     
00001358  3015                     679      MOVE.W (A5), D0
0000135A                           680  
0000135A  123C 0004                681      MOVE.B  #4,D1     
0000135E                           682  
0000135E  E368                     683      LSL.W   D1,D0
00001360                           684                   
00001360  123C 000D                685      MOVE.B  #13,D1
00001364                           686  
00001364  E268                     687      LSR.W   D1,D0  *D0 now holds Dn
00001366                           688                                              
00001366  3E00                     689      MOVE.W D0, D7 *D6 holds Dn
00001368                           690      
00001368  4EB9 0000231E            691      JSR PRINT_EA
0000136E                           692      
0000136E  4286                     693      CLR.L D6
00001370                           694      
00001370  4287                     695      CLR.L D7
00001372                           696      
00001372  3015                     697      MOVE.W (A5), D0
00001374                           698  
00001374  123C 000A                699      MOVE.B  #10,D1     
00001378                           700  
00001378  E368                     701      LSL.W   D1,D0
0000137A                           702                   
0000137A  123C 000D                703      MOVE.B  #13,D1
0000137E                           704  
0000137E  E268                     705      LSR.W   D1,D0  *D0 now holds MODE
00001380                           706                                              
00001380  3C00                     707      MOVE.W D0, D6 *D6 holds mode
00001382                           708      
00001382  3015                     709      MOVE.W (A5), D0
00001384                           710  
00001384  123C 000D                711      MOVE.B  #13,D1     
00001388                           712  
00001388  E368                     713      LSL.W   D1,D0
0000138A                           714                   
0000138A  123C 000D                715      MOVE.B  #13,D1
0000138E                           716  
0000138E  E268                     717      LSR.W   D1,D0  *D0 now holds Register
00001390                           718                                              
00001390  3E00                     719      MOVE.W D0, D7 *D6 holds Register   
00001392                           720      
00001392  4EB9 0000231E            721      JSR PRINT_EA
00001398                           722  
00001398  6000 FD3E                723      BRA PARSE_MEMORY
0000139C                           724  
0000139C                           725  
0000139C                           726  ADDQ
0000139C                           727  
0000139C  43F9 000025F1            728      LEA ADDQ_MESSAGE, A1  *print ADDQ
000013A2                           729                   
000013A2  103C 000E                730      MOVE.B #14, D0
000013A6                           731                   
000013A6  4E4F                     732      TRAP #15
000013A8                           733      
000013A8  3015                     734      MOVE.W (A5), D0
000013AA                           735      
000013AA  123C 0008                736      MOVE.B  #8,D1     
000013AE                           737  
000013AE  E368                     738      LSL.W   D1,D0
000013B0                           739                   
000013B0  123C 000E                740      MOVE.B  #14,D1
000013B4                           741  
000013B4  E268                     742      LSR.W   D1,D0  *DO now holds size
000013B6                           743                                              
000013B6  B03C 0002                744      CMP.B    #$2, D0        *if D0 holds 3, size is L
000013BA                           745      
000013BA  4EF9 000013FC            746      JMP      ADDQL
000013C0                           747                   
000013C0  B03C 0001                748      CMP.B    #$1, D0        *if D0 holds 3, size is W
000013C4                           749                                   
000013C4  4EF9 000013E6            750      JMP      ADDQW
000013CA                           751  
000013CA  4EF9 000013D0            752      JMP      ADDQB
000013D0                           753  
000013D0                           754  ADDQB  *Print B
000013D0                           755  
000013D0  43F9 0000267E            756      LEA SIZE_B_PRINT, A1  *print B
000013D6                           757                   
000013D6  103C 000E                758      MOVE.B #14, D0
000013DA                           759                   
000013DA  4E4F                     760      TRAP #15
000013DC                           761      
000013DC  1A3C 0000                762      MOVE.B #%00, D5
000013E0                           763      
000013E0  4EF9 00001412            764      JMP PRINTADDQ
000013E6                           765      
000013E6                           766  ADDQW  *Print W
000013E6                           767  
000013E6  43F9 00002684            768      LEA SIZE_W_PRINT, A1  *print W
000013EC                           769                   
000013EC  103C 000E                770      MOVE.B #14, D0
000013F0                           771                   
000013F0  4E4F                     772      TRAP #15
000013F2                           773      
000013F2  1A3C 0001                774      MOVE.B #%01, D5
000013F6                           775  
000013F6  4EF9 00001412            776      JMP PRINTADDQ
000013FC                           777  
000013FC                           778  ADDQL   *Print L
000013FC                           779  
000013FC  43F9 0000268A            780      LEA SIZE_L_PRINT, A1  *print L
00001402                           781                   
00001402  103C 000E                782      MOVE.B #14, D0
00001406                           783                   
00001406  4E4F                     784      TRAP #15
00001408                           785  
00001408  1A3C 0002                786      MOVE.B #%10, D5
0000140C                           787      
0000140C  4EF9 00001412            788      JMP PRINTADDQ
00001412                           789      
00001412                           790  PRINTADDQ
00001412                           791  
00001412  3C3C 0111                792      MOVE.W #$111, D6
00001416                           793      
00001416  3E3C 0100                794      MOVE.W #$100, D7
0000141A                           795  
0000141A  4EB9 0000231E            796      JSR PRINT_EA
00001420                           797      
00001420  4286                     798      CLR.L D6
00001422                           799      
00001422  4287                     800      CLR.L D7
00001424                           801      
00001424  3015                     802      MOVE.W (A5), D0
00001426                           803  
00001426  123C 000A                804      MOVE.B  #10,D1     
0000142A                           805  
0000142A  E368                     806      LSL.W   D1,D0
0000142C                           807                   
0000142C  123C 000D                808      MOVE.B  #13,D1
00001430                           809  
00001430  E268                     810      LSR.W   D1,D0  *D0 now holds MODE
00001432                           811                                              
00001432  3C00                     812      MOVE.W D0, D6 *D6 holds mode
00001434                           813      
00001434  3015                     814      MOVE.W (A5), D0
00001436                           815  
00001436  123C 000D                816      MOVE.B  #13,D1     
0000143A                           817  
0000143A  E368                     818      LSL.W   D1,D0
0000143C                           819                   
0000143C  123C 000D                820      MOVE.B  #13,D1
00001440                           821  
00001440  E268                     822      LSR.W   D1,D0  *D0 now holds MODE
00001442                           823                                              
00001442  3E00                     824      MOVE.W D0, D7 *D6 holds Register   
00001444                           825      
00001444  4EB9 0000231E            826      JSR PRINT_EA
0000144A                           827  
0000144A  6000 FC8C                828      BRA PARSE_MEMORY
0000144E                           829  
0000144E                           830      
0000144E                           831  
0000144E                           832  
0000144E                           833  
0000144E                           834  
0000144E                           835  
0000144E                           836  
0000144E                           837  
0000144E                           838  -------------------- end include --------------------
0000144E                           839                  INCLUDE 'TRYING_NOP.X68'
0000144E                           840  
0000144E                           841      
0000144E                           842   
0000144E                           843      *MOVE.W  #$4E75, D2          * hardcodiing nop
0000144E                           844  
0000144E                           845     * CMP.L       #$4E71, D2      * has to be NOP
0000144E                           846      *
0000144E                           847     * BEQ         NOP_OPCODE
0000144E                           848      
0000144E                           849     * CMP.L       #$4E75, D2      * has to be RTS
0000144E                           850      
0000144E                           851    *  BEQ         RTS_OPCODE
0000144E                           852     *BRA CLR_OPCODE  
0000144E                           853  
0000144E                           854  NOP_OPCODE
0000144E  43F9 000025DA            855      LEA         NOP_MESSAGE, A1     * print out message for 'NOP'
00001454                           856      
00001454  103C 000E                857      MOVE.B      #14, D0
00001458                           858      
00001458  4E4F                     859      TRAP #15
0000145A                           860      
0000145A  6000 FC7C                861      BRA PARSE_MEMORY
0000145E                           862  RTS_OPCODE 
0000145E  43F9 000025E9            863      LEA         RTS_MESSAGE, A1     * print out message for 'RTS'
00001464                           864      
00001464  103C 000E                865      MOVE.B      #14, D0
00001468                           866      
00001468  4E4F                     867      TRAP #15
0000146A                           868      
0000146A  6000 FC6C                869      BRA PARSE_MEMORY
0000146E                           870      
0000146E                           871  JSR_OPCODE 
0000146E  43F9 000025E5            872      LEA         JSR_MESSAGE, A1     * print out message for 'JSR'
00001474                           873      
00001474  103C 000E                874      MOVE.B      #14, D0
00001478                           875      
00001478  4E4F                     876      TRAP #15
0000147A                           877      
0000147A  2002                     878      MOVE.L D2, D0
0000147C                           879  
0000147C  123C 000D                880      MOVE.B  #13,D1     
00001480                           881  
00001480  E368                     882      LSL.W   D1,D0
00001482                           883                   
00001482  123C 000D                884      MOVE.B  #13,D1
00001486                           885  
00001486  E268                     886      LSR.W   D1,D0  *D0 now holds Register
00001488                           887                                              
00001488  3E00                     888      MOVE.W D0, D7 *D7 holds Register  
0000148A                           889  
0000148A  2002                     890      MOVE.L D2, D0
0000148C                           891  
0000148C  123C 000A                892      MOVE.B  #10,D1     
00001490                           893  
00001490  E368                     894      LSL.W   D1,D0
00001492                           895                   
00001492  123C 000D                896      MOVE.B  #13,D1
00001496                           897  
00001496  E268                     898      LSR.W   D1,D0  *D0 now holds MODE
00001498                           899                                              
00001498  3C00                     900      MOVE.W D0, D6 *D6 holds MODE  
0000149A                           901      
0000149A  4EB9 0000231E            902      JSR PRINT_EA
000014A0                           903      
000014A0  6000 FC36                904      BRA PARSE_MEMORY
000014A4                           905         
000014A4                           906  CLR_OPCODE 
000014A4  43F9 000025ED            907      LEA         CLR_MESSAGE, A1     * print out message for 'CLR'
000014AA                           908      
000014AA  103C 000E                909      MOVE.B      #14, D0
000014AE                           910      
000014AE  4E4F                     911      TRAP #15
000014B0                           912                     
000014B0  43F9 00002694            913      LEA      PERIOD, A1
000014B6                           914      
000014B6  103C 000E                915      MOVE.B   #14, D0
000014BA                           916      
000014BA  4E4F                     917      TRAP #15 
000014BC                           918                
000014BC  3015                     919      MOVE.W      (A5), D0
000014BE                           920               
000014BE  123C 0006                921      MOVE.B      #6, D1
000014C2                           922                 
000014C2  E268                     923      LSR.W       D1, D0  *shift right 6 
000014C4                           924                 
000014C4  123C 000E                925      MOVE.B      #14, D1
000014C8                           926                 
000014C8  E368                     927      LSL.W       D1, D0  *shift left 15, only size is left
000014CA                           928      
000014CA  123C 000E                929      MOVE.B      #14, D1
000014CE                           930                 
000014CE  E268                     931      LSR.W       D1, D0  *shift right 15, size is left   
000014D0                           932      
000014D0  B07C 0000                933      CMP.W       #00, D0
000014D4                           934  
000014D4  6700 004A                935      BEQ         SIZE_B
000014D8                           936      
000014D8  B07C 0001                937      CMP.W       #01, D0
000014DC                           938                 
000014DC  6700 004C                939      BEQ         SIZE_W 
000014E0                           940      
000014E0  B07C 0002                941      CMP.W       #2, D0
000014E4                           942                 
000014E4  6700 004E                943      BEQ         SIZE_L
000014E8                           944  
000014E8                           945  PRINT_SIZE
000014E8                           946  
000014E8  103C 000E                947      MOVE.B      #14, D0
000014EC                           948      
000014EC  4E4F                     949      TRAP #15
000014EE                           950  
000014EE  4280                     951      CLR.L   D0
000014F0                           952                  
000014F0  4281                     953      CLR.L   D1
000014F2                           954                       * set register
000014F2                           955                   
000014F2  3015                     956      MOVE.W  (A5),D0     *D0 is the binary value to decode
000014F4                           957                 
000014F4  123C 000D                958      MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000014F8                           959  
000014F8  E368                     960      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000014FA                           961  
000014FA  123C 000D                962      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000014FE                           963  
000014FE  E268                     964      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001500                           965  
00001500  1E00                     966      MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00001502                           967                   
00001502                           968                   * set mode
00001502  4280                     969      CLR.L D0                *clear D0
00001504                           970                   
00001504  4281                     971      CLR.L D1                *clear D1
00001506                           972                   
00001506  3015                     973      MOVE.W  (A5),D0     *D0 is the binary value to decode
00001508                           974                 
00001508  123C 000A                975      MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000150C                           976  
0000150C  E368                     977      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000150E                           978  
0000150E  123C 000D                979      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001512                           980  
00001512  E268                     981      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001514                           982  
00001514  2C00                     983      MOVE.L  D0, D6          *put D0 to data register into D7 for future printing
00001516                           984                   
00001516  4EB9 0000231E            985      JSR     PRINT_EA *by using jmp table
0000151C                           986  
0000151C  6000 FBBA                987      BRA PARSE_MEMORY
00001520                           988      
00001520                           989  SIZE_B 
00001520                           990                
00001520  43F9 0000267E            991      LEA         SIZE_B_PRINT, A1 
00001526                           992      
00001526  4EF8 14E8                993      JMP PRINT_SIZE
0000152A                           994      
0000152A                           995  SIZE_W 
0000152A                           996                
0000152A  43F9 00002684            997      LEA         SIZE_W_PRINT, A1 
00001530                           998      
00001530  4EF8 14E8                999      JMP PRINT_SIZE
00001534                          1000      
00001534                          1001  SIZE_L 
00001534                          1002                
00001534  43F9 0000268A           1003      LEA         SIZE_L_PRINT, A1 
0000153A                          1004      
0000153A  4EF8 14E8               1005      JMP PRINT_SIZE
0000153E                          1006      
0000153E                          1007  
0000153E                          1008   *   END    START        ; last line of source
0000153E                          1009  
0000153E                          1010  
0000153E                          1011  
0000153E                          1012  
0000153E                          1013  
0000153E                          1014  
0000153E                          1015  
0000153E                          1016  
0000153E                          1017  
0000153E                          1018  
0000153E                          1019  
0000153E                          1020  
0000153E                          1021  -------------------- end include --------------------
0000153E                          1022                  INCLUDE 'DIVU_OR.X68'
0000153E                          1023      
0000153E  4EB9 00001FDE           1024  DIVU_OR          JSR      GET_SIZE_PURPLE  
00001544                          1025                                            
00001544  BA3C 0003               1026                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
00001548                          1027                   
00001548  6700 0008               1028                   BEQ      DIVU_CODE
0000154C                          1029                   
0000154C  4EF9 00001594           1030                   JMP      OR_CODE
00001552                          1031                   
00001552                          1032  DIVU_CODE  
00001552                          1033                   * OP_CODE message
00001552  43F9 00002636           1034                   LEA      DIVU_MESSAGE, A1
00001558  103C 000E               1035                   MOVE.B   #14, D0
0000155C  4E4F                    1036                   TRAP #15
0000155E                          1037  
0000155E  3A3C 0001               1038                   MOVE    #%01, D5          
00001562                          1039                   
00001562  43F9 00002684           1040                   LEA      SIZE_W_PRINT,    A1
00001568                          1041                   
00001568  103C 000E               1042                   MOVE.B   #14,             D0
0000156C                          1043          
0000156C  4E4F                    1044                   TRAP #15
0000156E                          1045                   
0000156E  4EB9 0000205E           1046                   JSR     Set_Ea
00001574                          1047                   
00001574  4EB9 0000231E           1048                   JSR     PRINT_EA *by using jmp table
0000157A                          1049                   
0000157A  4EB9 0000203E           1050                   JSR     PRINT_COMMA
00001580                          1051                   
00001580                          1052                    * for the first Dn 
00001580  4EB9 0000204C           1053                   JSR     GET_Data_Register
00001586                          1054                   
00001586  1C3C 0000               1055                   MOVE.B  #%000, D6 * for mode
0000158A                          1056  
0000158A  4EB9 0000231E           1057                   JSR     PRINT_EA *by using jmp table
00001590                          1058  
00001590  4EF8 10D8               1059                   JMP     PARSE_MEMORY
00001594                          1060  
00001594                          1061  OR_CODE    
00001594                          1062                   * OP_CODE message
00001594  43F9 0000263C           1063                   LEA      OR_MESSAGE, A1
0000159A  103C 000E               1064                   MOVE.B   #14, D0
0000159E  4E4F                    1065                   TRAP #15
000015A0                          1066  
000015A0  4EB9 00001FF4           1067                   JSR PRINTOUT_SIZE_PURPLE
000015A6                          1068                   
000015A6                          1069                     * check for dn and ea
000015A6  4280                    1070                   CLR.L D0                *clear D0
000015A8                          1071                   
000015A8  4281                    1072                   CLR.L D1                *clear D1
000015AA                          1073                   
000015AA  3015                    1074                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000015AC                          1075                   
000015AC  0800 0008               1076                   BTST    #8, D0
000015B0                          1077                   
000015B0  6700 0028               1078                   BEQ     OR_FIRST_EA
000015B4                          1079                   
000015B4                          1080                   * for the first Dn 
000015B4  4EB9 0000204C           1081                   JSR     GET_Data_Register
000015BA                          1082                   
000015BA  1C3C 0000               1083                   MOVE.B  #%000, D6 * for mode
000015BE                          1084                   
000015BE  4EB9 0000231E           1085                   JSR     PRINT_EA *by using jmp table
000015C4                          1086                   
000015C4  4EB9 0000203E           1087                   JSR     PRINT_COMMA
000015CA                          1088                   
000015CA  4EB9 0000205E           1089                   JSR     Set_Ea
000015D0                          1090                   
000015D0  4EB9 0000231E           1091                   JSR     PRINT_EA *by using jmp table
000015D6                          1092                   
000015D6  4EF8 10D8               1093                   JMP     PARSE_MEMORY
000015DA                          1094                   
000015DA                          1095  OR_FIRST_EA
000015DA  4EB9 0000205E           1096                   JSR     Set_Ea
000015E0                          1097                   
000015E0  4EB9 0000231E           1098                   JSR     PRINT_EA *by using jmp table
000015E6                          1099                   
000015E6  4EB9 0000203E           1100                   JSR     PRINT_COMMA
000015EC                          1101                   
000015EC                          1102                    * for the first Dn 
000015EC  4EB9 0000204C           1103                   JSR     GET_Data_Register
000015F2                          1104                   
000015F2  1C3C 0000               1105                   MOVE.B  #%000, D6 * for mode
000015F6                          1106  
000015F6  4EB9 0000231E           1107                   JSR     PRINT_EA *by using jmp table
000015FC                          1108                   
000015FC  4EF8 10D8               1109                   JMP     PARSE_MEMORY
00001600                          1110  
00001600                          1111  
00001600                          1112  
00001600                          1113  
00001600                          1114  
00001600                          1115  
00001600                          1116  
00001600                          1117  
00001600                          1118  -------------------- end include --------------------
00001600                          1119                  INCLUDE 'GROUP_0100_CODE.X68'
00001600                          1120  GROUP_0100_CODE          *at this point we know the first 4 bits are 0100 -> NOP, RTS, JSR,  MOVEM, CLR
00001600                          1121  
00001600  4280                    1122                   CLR.L D0                *clear D0
00001602                          1123                   
00001602  4281                    1124                   CLR.L D1                *clear D1
00001604                          1125                   
00001604  3015                    1126                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001606                          1127  
00001606  123C 0004               1128                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
0000160A                          1129  
0000160A  E368                    1130                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
0000160C                          1131                   
0000160C  123C 0004               1132                   MOVE.B  #4,D1           *4 bits is the number of times to shift to hold everything except the opcode
00001610                          1133  
00001610  E268                    1134                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds everything except opcode
00001612                          1135                   
00001612                          1136                                              
00001612  B07C 0E71               1137                   CMP.W    #$E71, D0      *if D0 holds E71, the opcode is NOP
00001616                          1138                   
00001616  6700 FE36               1139                   BEQ      NOP_OPCODE       *Branch to NOP_CODE if the opcode is NOP
0000161A                          1140                   
0000161A                          1141                   
0000161A  B07C 0E75               1142                   CMP.W    #$E75, D0      *if D0 holds E75, the opcode is RTS
0000161E                          1143                   
0000161E  6700 FE3E               1144                   BEQ      RTS_OPCODE       *Branch to RTS_CODE if the opcode is RTS
00001622                          1145                   
00001622                          1146                   
00001622  4280                    1147                   CLR.L D0                *clear D0
00001624                          1148                   
00001624                          1149                   
00001624  4281                    1150                   CLR.L D1                *clear D1
00001626                          1151                   
00001626                          1152                   
00001626  3015                    1153                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001628                          1154  
00001628                          1155  
00001628  123C 0004               1156                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
0000162C                          1157  
0000162C                          1158  
0000162C  E368                    1159                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
0000162E                          1160                   
0000162E  123C 000C               1161                   MOVE.B  #12,D1           *12 bits is the number of times to shift to hold the 4th-8th bits (counting left to right, non-inclusive)
00001632                          1162  
00001632  E268                    1163                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds 4th-8th bits (counting left to right, non-inclusive)
00001634                          1164                   
00001634  B07C 0002               1165                   CMP.W    #$2, D0        *if D0 holds #2, the opcode is CLR
00001638                          1166                   
00001638  6700 FE6A               1167                   BEQ      CLR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
0000163C                          1168                   
0000163C                          1169          
0000163C  B07C 000E               1170                   CMP.W    #$E, D0        *if D0 holds $E = 14, the opcode is JSR
00001640                          1171                   
00001640  6700 FE2C               1172                   BEQ      JSR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
00001644                          1173                   
00001644                          1174                   
00001644  6000 00C0               1175                   BRA      MOVEM_OPCODE     *else it is a MOVEM
00001648                          1176  
00001648                          1177      
00001648                          1178  
00001648                          1179  
00001648                          1180  
00001648                          1181  -------------------- end include --------------------
00001648                          1182                  INCLUDE 'MULS_AND.X68'
00001648                          1183   
00001648  4EB9 00001FDE           1184  MULS_AND         JSR      GET_SIZE_PURPLE
0000164E                          1185                                              
0000164E  BA3C 0003               1186                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
00001652                          1187                   
00001652  6700 0008               1188                   BEQ      MULS_CODE
00001656                          1189                   
00001656  4EF9 0000169A           1190                   JMP      AND_CODE
0000165C                          1191                   
0000165C                          1192  MULS_CODE
0000165C                          1193                   * OP_CODE message
0000165C  43F9 0000264A           1194                   LEA MULS_MESSAGE, A1
00001662                          1195                   
00001662  103C 000E               1196                   MOVE.B #14, D0
00001666                          1197                   
00001666  4E4F                    1198                   TRAP #15
00001668                          1199  
00001668  43F9 00002684           1200                   LEA      SIZE_W_PRINT,    A1
0000166E                          1201                   
0000166E  103C 000E               1202                   MOVE.B   #14,             D0
00001672                          1203          
00001672  4E4F                    1204                   TRAP #15
00001674                          1205                   
00001674  4EB9 0000205E           1206                   JSR     Set_Ea
0000167A                          1207                   
0000167A  4EB9 0000231E           1208                   JSR     PRINT_EA *by using jmp table
00001680                          1209                   
00001680  4EB9 0000203E           1210                   JSR     PRINT_COMMA
00001686                          1211                   
00001686                          1212                    * for the first Dn 
00001686  4EB9 0000204C           1213                   JSR     GET_Data_Register
0000168C                          1214                   
0000168C  1C3C 0000               1215                   MOVE.B  #%000, D6 * for mode
00001690                          1216  
00001690  4EB9 0000231E           1217                   JSR     PRINT_EA *by using jmp table
00001696                          1218  
00001696  4EF8 10D8               1219                   JMP      PARSE_MEMORY
0000169A                          1220  
0000169A                          1221  AND_CODE
0000169A                          1222                   * OP_CODE message
0000169A  43F9 00002650           1223                   LEA AND_MESSAGE, A1
000016A0  103C 000E               1224                   MOVE.B #14, D0
000016A4  4E4F                    1225                   TRAP #15
000016A6                          1226                   
000016A6  4EB9 00001FF4           1227                   JSR PRINTOUT_SIZE_PURPLE
000016AC                          1228                   
000016AC                          1229                     * check for dn and ea
000016AC  4280                    1230                   CLR.L D0                *clear D0
000016AE                          1231                   
000016AE  4281                    1232                   CLR.L D1                *clear D1
000016B0                          1233                   
000016B0  3015                    1234                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000016B2                          1235                   
000016B2  0800 0008               1236                   BTST    #8, D0
000016B6                          1237                   
000016B6  6700 0028               1238                   BEQ     AND_FIRST_EA
000016BA                          1239                   
000016BA                          1240                   * for the first Dn 
000016BA  4EB9 0000204C           1241                   JSR     GET_Data_Register
000016C0                          1242                   
000016C0  1C3C 0000               1243                   MOVE.B  #%000, D6 * for mode
000016C4                          1244                   
000016C4  4EB9 0000231E           1245                   JSR     PRINT_EA *by using jmp table
000016CA                          1246                   
000016CA  4EB9 0000203E           1247                   JSR     PRINT_COMMA
000016D0                          1248                   
000016D0  4EB9 0000205E           1249                   JSR     Set_Ea
000016D6                          1250                   
000016D6  4EB9 0000231E           1251                   JSR     PRINT_EA *by using jmp table
000016DC                          1252                   
000016DC  4EF8 10D8               1253                   JMP      PARSE_MEMORY
000016E0                          1254                   
000016E0                          1255  AND_FIRST_EA
000016E0  4EB9 0000205E           1256                   JSR     Set_Ea
000016E6                          1257                   
000016E6  4EB9 0000231E           1258                   JSR     PRINT_EA *by using jmp table
000016EC                          1259                   
000016EC  4EB9 0000203E           1260                   JSR     PRINT_COMMA
000016F2                          1261                   
000016F2                          1262                    * for the first Dn 
000016F2  4EB9 0000204C           1263                   JSR     GET_Data_Register
000016F8                          1264                   
000016F8  1C3C 0000               1265                   MOVE.B  #%000, D6 * for mode
000016FC                          1266  
000016FC  4EB9 0000231E           1267                   JSR     PRINT_EA *by using jmp table
00001702                          1268                   
00001702  4EF8 10D8               1269                   JMP      PARSE_MEMORY
00001706                          1270  
00001706                          1271  
00001706                          1272  
00001706                          1273  
00001706                          1274  
00001706                          1275  
00001706                          1276  
00001706                          1277  
00001706                          1278  
00001706                          1279  -------------------- end include --------------------
00001706                          1280                  INCLUDE 'MOVEM.X68'
00001706                          1281     
00001706                          1282  
00001706                          1283  MOVEM_OPCODE
00001706                          1284  
00001706  4280                    1285     CLR.L       D0               *Zero it
00001708                          1286  
00001708  3015                    1287     MOVE.W      (A5), D0     *We'll play with it here
0000170A                          1288  
0000170A  43F9 000025DE           1289     LEA MOVEM_MESSAGE, A1
00001710                          1290            
00001710  103C 000E               1291     MOVE.B #14, D0
00001714                          1292                   
00001714  4E4F                    1293     TRAP #15    
00001716                          1294  
00001716  3015                    1295    MOVE.W     (A5), D0
00001718                          1296  
00001718  0800 0006               1297    BTST       #6,  D0      
0000171C                          1298  
0000171C  6600 0012               1299    BNE        PRINT_SIZE_L_MOVEM
00001720                          1300  
00001720  43F9 00002684           1301    LEA SIZE_W_PRINT, A1
00001726                          1302            
00001726  103C 000E               1303    MOVE.B #14, D0
0000172A                          1304                   
0000172A  4E4F                    1305    TRAP #15    
0000172C                          1306   
0000172C  6000 000E               1307    BRA          DR_FIELD
00001730                          1308      
00001730                          1309    * Print out size for W
00001730                          1310  PRINT_SIZE_L_MOVEM
00001730                          1311  
00001730  43F9 0000268A           1312    LEA SIZE_L_PRINT, A1
00001736                          1313            
00001736  103C 000E               1314    MOVE.B #14, D0
0000173A                          1315                   
0000173A  4E4F                    1316    TRAP #15    
0000173C                          1317  
0000173C                          1318  DR_FIELD
0000173C                          1319                 
0000173C  0800 000A               1320    BTST        #10,  D0    * BIT TEST
00001740                          1321  
00001740  6700 000C               1322    BEQ         Regitset_Memory *if D0 holds a 1
00001744                          1323  
00001744  6000 0050               1324    BRA         Memory_Register *If D0 hollds a 0
00001748                          1325  
00001748  4284                    1326    CLR.L D4
0000174A                          1327  
0000174A  183C 000F               1328    MOVE.B #15, D4
0000174E                          1329  
0000174E                          1330  Regitset_Memory
0000174E  361D                    1331      MOVE.W      (A5)+, D3
00001750                          1332      
00001750  183C 000F               1333      MOVE.B      #15, D4
00001754                          1334      
00001754  4EB9 00001994           1335      JSR         LOOP_MOVEM
0000175A                          1336      
0000175A  43F9 000026B0           1337      LEA COMMA, A1
00001760                          1338      
00001760  103C 000E               1339      MOVE.B      #14, D0
00001764                          1340      
00001764  4E4F                    1341      TRAP #15
00001766                          1342      
00001766  4EB9 00001770           1343      JSR PRINT_ADDRESS
0000176C                          1344      
0000176C  6000 F96A               1345      BRA PARSE_MEMORY
00001770                          1346  
00001770                          1347  PRINT_ADDRESS 
00001770  303C 0606               1348      MOVE.W      #example, D0
00001774                          1349  
00001774  123C 000A               1350      MOVE.B      #10, D1
00001778                          1351      
00001778  E368                    1352      LSL.W       D1, D0
0000177A                          1353      
0000177A  123C 000D               1354      MOVE.B      #13, D1
0000177E                          1355  
0000177E  E268                    1356      LSR.W       D1, D0
00001780                          1357      
00001780  1C00                    1358      MOVE.B      D0, D6
00001782                          1359      
00001782  203C 00000606           1360      MOVE.L      #example, D0
00001788                          1361      
00001788  E368                    1362      LSL.W       D1, D0
0000178A                          1363      
0000178A  E268                    1364      LSR.W       D1, D0
0000178C                          1365      
0000178C  1E00                    1366      MOVE.B      D0, D7
0000178E                          1367      
0000178E  4EB9 0000231E           1368      JSR PRINT_EA
00001794                          1369      
00001794  4E75                    1370      RTS
00001796                          1371  
00001796                          1372  Memory_Register
00001796  4EB8 1770               1373      JSR         PRINT_ADDRESS
0000179A                          1374      
0000179A  43F9 000026B0           1375      LEA         COMMA, A1
000017A0                          1376      
000017A0  103C 000E               1377      MOVE.B      #14, D0
000017A4                          1378      
000017A4  4E4F                    1379      TRAP #15
000017A6                          1380      
000017A6  203C 00000606           1381      MOVE.L #example, D0
000017AC                          1382      
000017AC  123C 000A               1383      MOVE.B      #10, D1
000017B0                          1384      
000017B0  E368                    1385      LSL.W       D1, D0
000017B2                          1386  
000017B2  123C 000D               1387      MOVE.B      #13, D1
000017B6                          1388  
000017B6  E268                    1389      LSR.W       D1, D0
000017B8                          1390  
000017B8  B03C 0004               1391      CMP.B       #%100, D0
000017BC                          1392  
000017BC  6700 0012               1393      BEQ         OPPOSITE_LOOP 
000017C0                          1394      
000017C0  361D                    1395      MOVE.W      (A5)+, D3
000017C2                          1396      
000017C2  183C 000F               1397      MOVE.B      #15, D4
000017C6                          1398      
000017C6  4EB9 00001994           1399      JSR         LOOP_MOVEM
000017CC                          1400      
000017CC  6000 F90A               1401      BRA PARSE_MEMORY
000017D0                          1402  
000017D0                          1403  
000017D0                          1404  OPPOSITE_LOOP
000017D0  4241                    1405      CLR         D1
000017D2                          1406  
000017D2  361D                    1407      MOVE.W      (A5)+, D3
000017D4                          1408      
000017D4  183C 000F               1409      MOVE.B      #15, D4
000017D8                          1410      
000017D8  4EB9 000017DE           1411      JSR OPPOSITE_LOOP_MOVEM
000017DE                          1412          
000017DE                          1413  OPPOSITE_LOOP_MOVEM
000017DE                          1414          
000017DE  0903                    1415      BTST        D4, D3     * BIT TEST
000017E0                          1416  
000017E0  6600 0020               1417      BNE         OPPOSITE_IS_USED_FIRST
000017E4                          1418  
000017E4  5304                    1419      SUB.B       #1, D4
000017E6                          1420      
000017E6                          1421  OPPOSITE_CHECK
000017E6  B83C 0000               1422      CMP.B       #0,  D4
000017EA                          1423  
000017EA  6700 F8EC               1424      BEQ         PARSE_MEMORY
000017EE                          1425  
000017EE  60EE                    1426      BRA         OPPOSITE_LOOP_MOVEM
000017F0                          1427      
000017F0                          1428  OPPOSITE_LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
000017F0  0903                    1429      BTST        D4, D3     * BIT TEST
000017F2                          1430  
000017F2  6600 0018               1431      BNE         OPPOSITE_IS_USED
000017F6                          1432  
000017F6  5304                    1433      SUB.B       #1, D4
000017F8                          1434      
000017F8                          1435  OPPOSITE_CHECK_SECOND
000017F8  B83C 0000               1436      CMP.B       #0,  D4
000017FC                          1437  
000017FC  6700 F8DA               1438      BEQ         PARSE_MEMORY
00001800                          1439  
00001800  60EE                    1440      BRA         OPPOSITE_LOOP_MOVEM_SECOND
00001802                          1441  
00001802                          1442  OPPOSITE_IS_USED_FIRST
00001802  4EB9 00001822           1443      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
00001808                          1444  
00001808  5304                    1445      SUB.B       #1, D4
0000180A                          1446  
0000180A  60EC                    1447      BRA         OPPOSITE_CHECK_SECOND
0000180C                          1448  
0000180C                          1449  
0000180C                          1450  OPPOSITE_IS_USED
0000180C  43F9 00002699           1451      LEA         SLASH, A1
00001812                          1452  
00001812  103C 000E               1453      MOVE.B      #14, D0
00001816                          1454  
00001816  4E4F                    1455      TRAP #15
00001818                          1456      
00001818  4EB9 00001822           1457      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
0000181E                          1458  
0000181E  5304                    1459      SUB.B       #1, D4
00001820                          1460  
00001820  60D6                    1461      BRA         OPPOSITE_CHECK_SECOND
00001822                          1462  
00001822                          1463      
00001822                          1464      
00001822                          1465  OPPOSITE_PRINT_REGISTER_MOVEM
00001822  41F9 00001834           1466      LEA        OPPOSITE_jmp_table_MOVEM, A0
00001828  4242                    1467      CLR        D2
0000182A  143C 0006               1468      MOVE.B     #6, D2
0000182E  C4C4                    1469      MULU       D4, D2                           
00001830  4EF0 2000               1470      JMP        0(A0,D2)   *Jump indirect with index
00001834                          1471                      
00001834                          1472  OPPOSITE_jmp_table_MOVEM      
00001834  4EF9 00001894           1473      JMP         OPPOSITE_bit0
0000183A  4EF9 000018A4           1474                 JMP         OPPOSITE_bit1
00001840  4EF9 000018B4           1475                 JMP         OPPOSITE_bit2
00001846  4EF9 000018C4           1476                 JMP         OPPOSITE_bit3
0000184C  4EF9 000018D4           1477                 JMP         OPPOSITE_bit4
00001852  4EF9 000018E4           1478                 JMP         OPPOSITE_bit5
00001858  4EF9 000018F4           1479                 JMP         OPPOSITE_bit6
0000185E  4EF9 00001904           1480                 JMP         OPPOSITE_bit7
00001864  4EF9 00001914           1481                 JMP         OPPOSITE_bit8
0000186A  4EF9 00001924           1482                 JMP         OPPOSITE_bit9
00001870  4EF9 00001934           1483                 JMP         OPPOSITE_bit10
00001876  4EF9 00001944           1484                 JMP         OPPOSITE_bit11
0000187C  4EF9 00001954           1485                 JMP         OPPOSITE_bit12
00001882  4EF9 00001964           1486                 JMP         OPPOSITE_bit13
00001888  4EF9 00001974           1487                 JMP         OPPOSITE_bit14
0000188E  4EF9 00001984           1488                 JMP         OPPOSITE_bit15
00001894                          1489          
00001894                          1490   
00001894                          1491   
00001894                          1492   
00001894                          1493  OPPOSITE_bit0    * D0
00001894  1E3C 0007               1494      MOVE.B    #%111, D7    * REGISTER
00001898                          1495      
00001898  1C3C 0001               1496      MOVE.B    #%001, D6    * MODE
0000189C                          1497  
0000189C  4EB9 0000231E           1498      JSR        PRINT_EA
000018A2                          1499  
000018A2  4E75                    1500      RTS    
000018A4                          1501  
000018A4                          1502  OPPOSITE_bit1    * D1
000018A4  1E3C 0006               1503      MOVE.B    #%110, D7    * REGISTER
000018A8                          1504      
000018A8  1C3C 0001               1505      MOVE.B    #%001, D6    * MODE
000018AC                          1506  
000018AC  4EB9 0000231E           1507      JSR        PRINT_EA
000018B2                          1508  
000018B2  4E75                    1509      RTS    
000018B4                          1510  
000018B4                          1511  OPPOSITE_bit2    * D2
000018B4  1E3C 0005               1512      MOVE.B    #%101, D7    * REGISTER
000018B8                          1513      
000018B8  1C3C 0001               1514      MOVE.B    #%001, D6    * MODE
000018BC                          1515  
000018BC  4EB9 0000231E           1516      JSR        PRINT_EA    
000018C2                          1517  
000018C2  4E75                    1518      RTS
000018C4                          1519  
000018C4                          1520  OPPOSITE_bit3    * D3
000018C4  1E3C 0004               1521      MOVE.B    #%100, D7    * REGISTER
000018C8                          1522      
000018C8  1C3C 0001               1523      MOVE.B    #%001, D6    * MODE
000018CC                          1524  
000018CC  4EB9 0000231E           1525      JSR        PRINT_EA
000018D2                          1526  
000018D2  4E75                    1527      RTS    
000018D4                          1528  
000018D4                          1529  OPPOSITE_bit4    * D4
000018D4  1E3C 0003               1530      MOVE.B    #%011, D7    * REGISTER
000018D8                          1531  
000018D8  1C3C 0001               1532      MOVE.B    #%001, D6    * MODE
000018DC                          1533  
000018DC  4EB9 0000231E           1534      JSR        PRINT_EA
000018E2                          1535  
000018E2  4E75                    1536      RTS    
000018E4                          1537  
000018E4                          1538  
000018E4                          1539  OPPOSITE_bit5    * D5
000018E4  1E3C 0002               1540      MOVE.B    #%010, D7    * REGISTER
000018E8                          1541      
000018E8  1C3C 0001               1542      MOVE.B    #%001, D6    * MODE
000018EC                          1543  
000018EC  4EB9 0000231E           1544      JSR        PRINT_EA
000018F2                          1545  
000018F2  4E75                    1546      RTS    
000018F4                          1547  
000018F4                          1548  OPPOSITE_bit6    * D6
000018F4  1E3C 0001               1549      MOVE.B    #%001, D7    * REGISTER
000018F8                          1550      
000018F8  1C3C 0001               1551      MOVE.B    #%001, D6    * MODE
000018FC                          1552  
000018FC  4EB9 0000231E           1553      JSR        PRINT_EA
00001902                          1554  
00001902  4E75                    1555      RTS    
00001904                          1556  
00001904                          1557  OPPOSITE_bit7    * D7
00001904  1E3C 0000               1558      MOVE.B    #%000, D7    * REGISTER
00001908                          1559      
00001908  1C3C 0001               1560      MOVE.B    #%001, D6    * MODE
0000190C                          1561  
0000190C  4EB9 0000231E           1562      JSR        PRINT_EA
00001912                          1563  
00001912  4E75                    1564      RTS    
00001914                          1565  
00001914                          1566  OPPOSITE_bit8    * A0
00001914  1E3C 0007               1567      MOVE.B    #%111, D7    * REGISTER
00001918                          1568      
00001918  1C3C 0000               1569      MOVE.B    #%000, D6    * MODE
0000191C                          1570  
0000191C  4EB9 0000231E           1571      JSR        PRINT_EA
00001922                          1572  
00001922  4E75                    1573      RTS    
00001924                          1574  
00001924                          1575  OPPOSITE_bit9    * A1
00001924  1E3C 0006               1576      MOVE.B    #%110, D7    * REGISTER
00001928                          1577      
00001928  1C3C 0000               1578      MOVE.B    #%000, D6    * MODE
0000192C                          1579  
0000192C  4EB9 0000231E           1580      JSR        PRINT_EA
00001932                          1581  
00001932  4E75                    1582      RTS    
00001934                          1583  
00001934                          1584  OPPOSITE_bit10    * A2
00001934  1E3C 0005               1585      MOVE.B    #%101, D7    * REGISTER
00001938                          1586      
00001938  1C3C 0000               1587      MOVE.B    #%000, D6    * MODE
0000193C                          1588  
0000193C  4EB9 0000231E           1589      JSR        PRINT_EA
00001942                          1590  
00001942  4E75                    1591      RTS    
00001944                          1592  
00001944                          1593  
00001944                          1594  OPPOSITE_bit11    * A5
00001944  1E3C 0002               1595      MOVE.B    #%010, D7    * REGISTER
00001948                          1596      
00001948  1C3C 0000               1597      MOVE.B    #%000, D6    * MODE
0000194C                          1598  
0000194C  4EB9 0000231E           1599      JSR        PRINT_EA
00001952                          1600  
00001952  4E75                    1601      RTS    
00001954                          1602  
00001954                          1603  OPPOSITE_bit12    * A4
00001954  1E3C 0003               1604      MOVE.B    #%011, D7    * REGISTER
00001958                          1605      
00001958  1C3C 0000               1606      MOVE.B    #%000, D6    * MODE
0000195C                          1607  
0000195C  4EB9 0000231E           1608      JSR        PRINT_EA
00001962                          1609  
00001962  4E75                    1610      RTS    
00001964                          1611  
00001964                          1612  
00001964                          1613  OPPOSITE_bit13    * A5
00001964  1E3C 0002               1614      MOVE.B    #%010, D7    * REGISTER
00001968                          1615      
00001968  1C3C 0000               1616      MOVE.B    #%000, D6    * MODE
0000196C                          1617  
0000196C  4EB9 0000231E           1618      JSR        PRINT_EA
00001972                          1619  
00001972  4E75                    1620      RTS    
00001974                          1621  
00001974                          1622  
00001974                          1623  OPPOSITE_bit14     * A6
00001974  1E3C 0001               1624      MOVE.B    #%001, D7    * REGISTER
00001978                          1625      
00001978  1C3C 0000               1626      MOVE.B    #%000, D6    * MODE
0000197C                          1627  
0000197C  4EB9 0000231E           1628      JSR        PRINT_EA
00001982                          1629  
00001982  4E75                    1630      RTS        
00001984                          1631  
00001984                          1632  
00001984                          1633  OPPOSITE_bit15    * A7
00001984  1E3C 0000               1634      MOVE.B    #%000, D7    * REGISTER
00001988                          1635      
00001988  1C3C 0000               1636      MOVE.B    #%000, D6    * MODE
0000198C                          1637  
0000198C  4EB9 0000231E           1638      JSR        PRINT_EA
00001992                          1639  
00001992  4E75                    1640      RTS    
00001994                          1641  
00001994                          1642  
00001994                          1643  
00001994                          1644  
00001994                          1645  
00001994                          1646  LOOP_MOVEM
00001994                          1647          
00001994  0903                    1648      BTST        D4, D3     * BIT TEST
00001996                          1649  
00001996  6600 0020               1650      BNE         IS_USED_FIRST
0000199A                          1651  
0000199A  5304                    1652      SUB.B       #1, D4
0000199C                          1653      
0000199C                          1654  CHECK
0000199C  B83C 0000               1655      CMP.B       #0,  D4
000019A0                          1656  
000019A0  6700 F736               1657      BEQ         PARSE_MEMORY
000019A4                          1658  
000019A4  60EE                    1659      BRA         LOOP_MOVEM
000019A6                          1660      
000019A6                          1661  LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
000019A6  0903                    1662      BTST        D4, D3     * BIT TEST
000019A8                          1663  
000019A8  6600 0018               1664      BNE         IS_USED
000019AC                          1665  
000019AC  5304                    1666      SUB.B       #1, D4
000019AE                          1667      
000019AE                          1668  CHECK_SECOND
000019AE  B83C 0000               1669      CMP.B       #0,  D4
000019B2                          1670  
000019B2  6700 F724               1671      BEQ         PARSE_MEMORY
000019B6                          1672  
000019B6  60EE                    1673      BRA         LOOP_MOVEM_SECOND
000019B8                          1674  
000019B8                          1675  IS_USED_FIRST
000019B8  4EB9 000019D8           1676      JSR         PRINT_REGISTER_MOVEM
000019BE                          1677  
000019BE  5304                    1678      SUB.B       #1, D4
000019C0                          1679  
000019C0  60EC                    1680      BRA         CHECK_SECOND
000019C2                          1681  
000019C2                          1682  
000019C2                          1683  IS_USED
000019C2  43F9 00002699           1684      LEA         SLASH, A1
000019C8                          1685  
000019C8  103C 000E               1686      MOVE.B      #14, D0
000019CC                          1687  
000019CC  4E4F                    1688      TRAP #15
000019CE                          1689      
000019CE  4EB9 000019D8           1690      JSR         PRINT_REGISTER_MOVEM
000019D4                          1691  
000019D4  5304                    1692      SUB.B       #1, D4
000019D6                          1693  
000019D6  60D6                    1694      BRA         CHECK_SECOND
000019D8                          1695  
000019D8                          1696  
000019D8                          1697  
000019D8                          1698  
000019D8                          1699  
000019D8                          1700  PRINT_REGISTER_MOVEM
000019D8  41F9 000019EA           1701      LEA         jmp_table_MOVEM, A0
000019DE  4242                    1702      CLR         D2
000019E0  143C 0006               1703      MOVE.B      #6, D2
000019E4  C4C4                    1704      MULU        D4, D2                           
000019E6  4EF0 2000               1705      JMP         0(A0,D2)   *Jump indirect with index
000019EA                          1706                      
000019EA                          1707  jmp_table_MOVEM      
000019EA  4EF9 00001A4A           1708      JMP         bit0
000019F0  4EF9 00001A5A           1709                 JMP         bit1
000019F6  4EF9 00001A68           1710                 JMP         bit2
000019FC  4EF9 00001A78           1711                 JMP         bit3
00001A02  4EF9 00001A88           1712                 JMP         bit4
00001A08  4EF9 00001A98           1713                 JMP         bit5
00001A0E  4EF9 00001AA8           1714                 JMP         bit6
00001A14  4EF9 00001AB8           1715                 JMP         bit7
00001A1A  4EF9 00001AC8           1716                 JMP         bit8
00001A20  4EF9 00001AD8           1717                 JMP         bit9
00001A26  4EF9 00001AE8           1718                 JMP         bit10
00001A2C  4EF9 00001AF8           1719                 JMP         bit11
00001A32  4EF9 00001B08           1720                 JMP         bit12
00001A38  4EF9 00001B18           1721                 JMP         bit13
00001A3E  4EF9 00001B28           1722                 JMP         bit14
00001A44  4EF9 00001B38           1723                 JMP         bit15
00001A4A                          1724          
00001A4A                          1725   
00001A4A                          1726   
00001A4A                          1727   
00001A4A                          1728  bit0    * D0
00001A4A  1E3C 0000               1729      MOVE.B    #%000, D7    * REGISTER
00001A4E                          1730      
00001A4E  1C3C 0000               1731      MOVE.B    #%000, D6    * MODE
00001A52                          1732  
00001A52  4EB9 0000231E           1733      JSR        PRINT_EA
00001A58                          1734  
00001A58  4E75                    1735      RTS    
00001A5A                          1736  
00001A5A                          1737  bit1    * D1
00001A5A  1E3C 0001               1738      MOVE.B    #%001, D7    * REGISTER
00001A5E                          1739      
00001A5E  1C3C 0000               1740      MOVE.B    #%000, D6    * MODE
00001A62                          1741  
00001A62  4EB9 0000231E           1742      JSR        PRINT_EA
00001A68                          1743  
00001A68                          1744  RTS    
00001A68                          1745  
00001A68                          1746  bit2    * D2
00001A68  1E3C 0002               1747      MOVE.B    #%010, D7    * REGISTER
00001A6C                          1748      
00001A6C  1C3C 0000               1749      MOVE.B    #%000, D6    * MODE
00001A70                          1750  
00001A70  4EB9 0000231E           1751      JSR        PRINT_EA    
00001A76                          1752  
00001A76  4E75                    1753      RTS
00001A78                          1754  
00001A78                          1755  bit3    * D3
00001A78  1E3C 0003               1756      MOVE.B    #%011, D7    * REGISTER
00001A7C                          1757      
00001A7C  1C3C 0000               1758      MOVE.B    #%000, D6    * MODE
00001A80                          1759  
00001A80  4EB9 0000231E           1760      JSR        PRINT_EA
00001A86                          1761  
00001A86  4E75                    1762      RTS    
00001A88                          1763  
00001A88                          1764  bit4    * D4
00001A88  1E3C 0007               1765      MOVE.B    #%111, D7    * REGISTER
00001A8C                          1766  
00001A8C  1C3C 0000               1767      MOVE.B    #%000, D6    * MODE
00001A90                          1768  
00001A90  4EB9 0000231E           1769      JSR        PRINT_EA
00001A96                          1770  
00001A96  4E75                    1771      RTS    
00001A98                          1772  
00001A98                          1773  
00001A98                          1774  bit5    * D5
00001A98  1E3C 0005               1775      MOVE.B    #%101, D7    * REGISTER
00001A9C                          1776      
00001A9C  1C3C 0000               1777      MOVE.B    #%000, D6    * MODE
00001AA0                          1778  
00001AA0  4EB9 0000231E           1779      JSR        PRINT_EA
00001AA6                          1780  
00001AA6  4E75                    1781      RTS    
00001AA8                          1782  
00001AA8                          1783  bit6    * D6
00001AA8  1E3C 0006               1784      MOVE.B    #%110, D7    * REGISTER
00001AAC                          1785      
00001AAC  1C3C 0000               1786      MOVE.B    #%000, D6    * MODE
00001AB0                          1787  
00001AB0  4EB9 0000231E           1788      JSR        PRINT_EA
00001AB6                          1789  
00001AB6  4E75                    1790      RTS    
00001AB8                          1791  
00001AB8                          1792  bit7    * D7
00001AB8  1E3C 0007               1793      MOVE.B    #%111, D7    * REGISTER
00001ABC                          1794      
00001ABC  1C3C 0000               1795      MOVE.B    #%000, D6    * MODE
00001AC0                          1796  
00001AC0  4EB9 0000231E           1797      JSR        PRINT_EA
00001AC6                          1798  
00001AC6  4E75                    1799      RTS    
00001AC8                          1800  
00001AC8                          1801  bit8    * A0
00001AC8  1E3C 0000               1802      MOVE.B    #%000, D7    * REGISTER
00001ACC                          1803      
00001ACC  1C3C 0001               1804      MOVE.B    #%001, D6    * MODE
00001AD0                          1805  
00001AD0  4EB9 0000231E           1806      JSR        PRINT_EA
00001AD6                          1807  
00001AD6  4E75                    1808      RTS    
00001AD8                          1809  
00001AD8                          1810  bit9    * A1
00001AD8  1E3C 0001               1811      MOVE.B    #%001, D7    * REGISTER
00001ADC                          1812      
00001ADC  1C3C 0001               1813      MOVE.B    #%001, D6    * MODE
00001AE0                          1814  
00001AE0  4EB9 0000231E           1815      JSR        PRINT_EA
00001AE6                          1816  
00001AE6  4E75                    1817      RTS    
00001AE8                          1818  
00001AE8                          1819  bit10    * A2
00001AE8  1E3C 0002               1820      MOVE.B    #%010, D7    * REGISTER
00001AEC                          1821      
00001AEC  1C3C 0001               1822      MOVE.B    #%001, D6    * MODE
00001AF0                          1823  
00001AF0  4EB9 0000231E           1824      JSR        PRINT_EA
00001AF6                          1825  
00001AF6  4E75                    1826      RTS    
00001AF8                          1827  
00001AF8                          1828  
00001AF8                          1829  bit11    * A5
00001AF8  1E3C 0003               1830      MOVE.B    #%011, D7    * REGISTER
00001AFC                          1831      
00001AFC  1C3C 0001               1832      MOVE.B    #%001, D6    * MODE
00001B00                          1833  
00001B00  4EB9 0000231E           1834      JSR        PRINT_EA
00001B06                          1835  
00001B06  4E75                    1836      RTS    
00001B08                          1837  
00001B08                          1838  bit12    * A4
00001B08  1E3C 0004               1839      MOVE.B    #%100, D7    * REGISTER
00001B0C                          1840      
00001B0C  1C3C 0001               1841      MOVE.B    #%001, D6    * MODE
00001B10                          1842  
00001B10  4EB9 0000231E           1843      JSR        PRINT_EA
00001B16                          1844  
00001B16  4E75                    1845      RTS    
00001B18                          1846  
00001B18                          1847  
00001B18                          1848  bit13    * A5
00001B18  1E3C 0005               1849      MOVE.B    #%101, D7    * REGISTER
00001B1C                          1850      
00001B1C  1C3C 0001               1851      MOVE.B    #%001, D6    * MODE
00001B20                          1852  
00001B20  4EB9 0000231E           1853      JSR        PRINT_EA
00001B26                          1854  
00001B26  4E75                    1855      RTS    
00001B28                          1856  
00001B28                          1857  
00001B28                          1858  bit14     * A6
00001B28  1E3C 0006               1859      MOVE.B    #%110, D7    * REGISTER
00001B2C                          1860      
00001B2C  1C3C 0001               1861      MOVE.B    #%001, D6    * MODE
00001B30                          1862  
00001B30  4EB9 0000231E           1863      JSR        PRINT_EA
00001B36                          1864  
00001B36  4E75                    1865      RTS        
00001B38                          1866  
00001B38                          1867  
00001B38                          1868  bit15    * A7
00001B38  1E3C 0007               1869      MOVE.B    #%111, D7    * REGISTER
00001B3C                          1870      
00001B3C  1C3C 0001               1871      MOVE.B    #%001, D6    * MODE
00001B40                          1872  
00001B40  4EB9 0000231E           1873      JSR        PRINT_EA
00001B46                          1874  
00001B46  4E75                    1875      RTS    
00001B48                          1876  
00001B48                          1877  DONE_MOVEM_LOOP
00001B48  4E75                    1878      RTS
00001B4A                          1879  
00001B4A                          1880     * SIMHALT             ; halt simulator
00001B4A                          1881      *INCLUDE 'MESSAGE_Data.X68'
00001B4A                          1882     * INCLUDE 'JUMPTABLE EA.X68'
00001B4A                          1883  
00001B4A                          1884  
00001B4A                          1885     * END    START        ; last line of source
00001B4A                          1886  
00001B4A                          1887  
00001B4A                          1888  
00001B4A                          1889  
00001B4A                          1890  
00001B4A                          1891  
00001B4A                          1892  
00001B4A                          1893  
00001B4A                          1894  
00001B4A                          1895  
00001B4A                          1896  
00001B4A                          1897  
00001B4A                          1898  
00001B4A                          1899  
00001B4A                          1900  
00001B4A                          1901  
00001B4A                          1902  
00001B4A                          1903  
00001B4A                          1904  
00001B4A                          1905  
00001B4A                          1906  
00001B4A                          1907  
00001B4A                          1908  
00001B4A                          1909  
00001B4A                          1910  
00001B4A                          1911  
00001B4A                          1912  
00001B4A                          1913  
00001B4A                          1914  
00001B4A                          1915  
00001B4A                          1916  
00001B4A                          1917  
00001B4A                          1918  
00001B4A                          1919  
00001B4A                          1920  
00001B4A                          1921  
00001B4A                          1922  
00001B4A                          1923  -------------------- end include --------------------
00001B4A                          1924                  INCLUDE 'MOVEQ.X68'
00001B4A                          1925  
00001B4A                          1926  MOVEQ 
00001B4A                          1927  
00001B4A                          1928                   * ADD message
00001B4A  43F9 0000262F           1929                   LEA      MOVEQ_MESSAGE,    A1
00001B50  103C 000E               1930                   MOVE.B   #14,            D0
00001B54  4E4F                    1931                   TRAP #15
00001B56                          1932                   
00001B56                          1933                   * print out size L
00001B56  43F9 0000268A           1934                   LEA      SIZE_L_PRINT,    A1
00001B5C  103C 000E               1935                   MOVE.B   #14,             D0          
00001B60  4E4F                    1936                   TRAP #15   
00001B62                          1937                   
00001B62                          1938                   * print out immediate Data
00001B62                          1939                   
00001B62  43F9 00002690           1940                  LEA     POUND_SIGN, A1
00001B68                          1941              
00001B68  103C 000E               1942                  MOVE.B  #14, D0
00001B6C                          1943              
00001B6C  4E4F                    1944                  TRAP #15
00001B6E                          1945              
00001B6E  43F9 00002692           1946                  LEA     HEX_SIGN, A1
00001B74                          1947              
00001B74  4E4F                    1948                  TRAP #15
00001B76                          1949  
00001B76                          1950                   
00001B76  4280                    1951                  CLR.L       D0              *Zero it
00001B78                          1952  
00001B78  303C 0606               1953                  MOVE.W      #example,D0     *We'll play with it here
00001B7C                          1954                 
00001B7C  123C 0008               1955                  MOVE.B      #8, D1
00001B80                          1956                 
00001B80  E368                    1957                  LSL.W       D1, D0
00001B82                          1958  
00001B82  123C 0008               1959                  MOVE.B      #8,D1       *Shift 12 bits to the right  
00001B86                          1960  
00001B86  E268                    1961                  LSR.W       D1,D0           *Move the bits
00001B88                          1962  
00001B88  4285                    1963                  CLR.L D5
00001B8A                          1964                 
00001B8A  3A00                    1965                  MOVE.W D0, D5      
00001B8C                          1966          
00001B8C  4EB9 00002280           1967                  JSR         HEX_TO_ASCII
00001B92                          1968  
00001B92                          1969                   
00001B92                          1970                  * for the first Dn 
00001B92  4286                    1971                  CLR.L D6
00001B94  4EB9 0000204C           1972                  JSR     GET_Data_Register
00001B9A  1C3C 0000               1973                  MOVE.B  #%000, D6 * for mode
00001B9E                          1974                   
00001B9E  4EB9 0000231E           1975                  JSR     PRINT_EA *by using jmp table
00001BA4                          1976                   
00001BA4                          1977          
00001BA4                          1978  
00001BA4                          1979  
00001BA4                          1980  
00001BA4                          1981  
00001BA4                          1982  
00001BA4                          1983  
00001BA4                          1984  
00001BA4                          1985  
00001BA4                          1986  
00001BA4                          1987  
00001BA4                          1988  -------------------- end include --------------------
00001BA4                          1989                  INCLUDE 'DAMIAN_OP_CODE.X68'
00001BA4  4280                    1990  SHIFTS           CLR.L D0
00001BA6                          1991  
00001BA6  4281                    1992                   CLR.L D1
00001BA8                          1993                   
00001BA8  3015                    1994                   MOVE.W (A5),D0
00001BAA                          1995                   
00001BAA  E948                    1996                   LSL.W #4,D0            *shift out the opcode
00001BAC                          1997                   
00001BAC  123C 000D               1998                   MOVE.B #13,D1          
00001BB0                          1999                   
00001BB0  E268                    2000                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there
00001BB2                          2001                   
00001BB2  B03C 0001               2002                   CMP.B #1,D0            
00001BB6                          2003                   
00001BB6  6700 000E               2004                   BEQ LSD                *if the bits are 1, it is a logical shift
00001BBA                          2005                   
00001BBA  B03C 0003               2006                   CMP.B #3,D0
00001BBE                          2007                   
00001BBE  6700 0080               2008                   BEQ ROD                *if the bits are 3, it is a rotation
00001BC2                          2009                   
00001BC2  6000 00F6               2010                   BRA ASD                *if it is not equal to 1 or 3, it is arithmetic shift
00001BC6                          2011                   
00001BC6                          2012  
00001BC6  4280                    2013  LSD              CLR.L D0               *still need to do checks, since an asd shift could still be a possibility
00001BC8                          2014                   
00001BC8  4281                    2015                   CLR.L D1
00001BCA                          2016                   
00001BCA  3015                    2017                   MOVE.W (A5),D0
00001BCC                          2018                   
00001BCC  E148                    2019                   LSL.W #8,D0
00001BCE                          2020                   
00001BCE  123C 000E               2021                   MOVE.B #14,D1
00001BD2                          2022                   
00001BD2  E268                    2023                   LSR.W D1,D0
00001BD4                          2024                   
00001BD4  B03C 0003               2025                   CMP.B #3,D0            *need to check the two bits after the direction 
00001BD8                          2026                   
00001BD8  6600 00E0               2027                   BNE ASD                *if the two bits are not 3, it is an arithmetic shift
00001BDC                          2028                   
00001BDC  3015                    2029                   MOVE.W (A5), D0
00001BDE                          2030                   
00001BDE  EF48                    2031                   LSL.W  #7, D0
00001BE0                          2032                   
00001BE0  123C 000F               2033                   MOVE.B #15, D1
00001BE4                          2034                   
00001BE4  E268                    2035                   LSR.W  D1, D0
00001BE6                          2036                   
00001BE6  B03C 0001               2037                   CMP.B  #1, D0
00001BEA                          2038                   
00001BEA  6700 0006               2039                   BEQ LSL
00001BEE                          2040                   
00001BEE  6000 0024               2041                   BRA LSR
00001BF2                          2042                   
00001BF2                          2043  
00001BF2                          2044  LSL
00001BF2  43F9 00002660           2045                   LEA LSL_MESSAGE, A1    * print message
00001BF8                          2046                   
00001BF8  103C 000E               2047                   MOVE.B #14, D0
00001BFC                          2048                   
00001BFC  4E4F                    2049                   TRAP #15
00001BFE                          2050              
00001BFE  2015                    2051                   MOVE.L (A5), D0
00001C00                          2052                   
00001C00  E148                    2053                   LSL.W #8, D0
00001C02                          2054                   
00001C02  123C 000E               2055                   MOVE.B #14, D1
00001C06                          2056                   
00001C06  E268                    2057                   LSR.W D1, D0
00001C08                          2058                   
00001C08  B03C 0003               2059                   CMP.B  #%11, D0        * check to see if it is memory and not register shift
00001C0C                          2060                   
00001C0C  6700 0028               2061                   BEQ LSD_MEMORY
00001C10                          2062                   
00001C10  6000 010C               2063                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001C14                          2064  
00001C14                          2065  LSR              
00001C14  43F9 0000266F           2066                   LEA LSR_MESSAGE, A1            * print message
00001C1A                          2067                   
00001C1A  103C 000E               2068                   MOVE.B #14, D0
00001C1E                          2069                   
00001C1E  4E4F                    2070                   TRAP #15
00001C20                          2071          
00001C20  2015                    2072                   MOVE.L (A5), D0
00001C22                          2073                   
00001C22  E148                    2074                   LSL.W #8, D0
00001C24                          2075                   
00001C24  123C 000E               2076                   MOVE.B #14, D1
00001C28                          2077                   
00001C28  E268                    2078                   LSR.W D1, D0
00001C2A                          2079                   
00001C2A  B03C 0003               2080                   CMP.B  #%11, D0            * check to see if memory shift
00001C2E                          2081                   
00001C2E  6700 0006               2082                   BEQ LSD_MEMORY
00001C32                          2083                   
00001C32  6000 00EA               2084                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001C36                          2085                   
00001C36                          2086  LSD_MEMORY
00001C36  4EB9 00001DC4           2087                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001C3C                          2088                   
00001C3C  6000 F49A               2089                   BRA PARSE_MEMORY
00001C40                          2090              
00001C40                          2091  
00001C40  4280                    2092  ROD              CLR.L D0               *same check as logical shift, since an arithmetic shift could still be possible
00001C42                          2093                   
00001C42  4281                    2094                   CLR.L D1
00001C44                          2095                   
00001C44  3015                    2096                   MOVE.W (A5),D0
00001C46                          2097                   
00001C46  E148                    2098                   LSL.W #8,D0
00001C48                          2099                   
00001C48  123C 000E               2100                   MOVE.B #14,D1
00001C4C                          2101                   
00001C4C  E268                    2102                   LSR.W D1,D0
00001C4E                          2103                   
00001C4E  B03C 0003               2104                   CMP.B #3,D0
00001C52                          2105                   
00001C52  6600 0066               2106                   BNE ASD
00001C56                          2107                   
00001C56  2015                    2108                   MOVE.L (A5), D0
00001C58                          2109                   
00001C58  EF48                    2110                   LSL.W  #7, D0
00001C5A                          2111                   
00001C5A  123C 000F               2112                   MOVE.B #15, D1
00001C5E                          2113                   
00001C5E  E268                    2114                   LSR.W  D1, D0
00001C60                          2115                   
00001C60  B03C 0001               2116                   CMP.B  #1, D0
00001C64                          2117                   
00001C64  6700 0006               2118                   BEQ ROL
00001C68                          2119                   
00001C68  6000 0024               2120                   BRA ROR
00001C6C                          2121  
00001C6C                          2122  ROL              
00001C6C  43F9 0000266A           2123                   LEA ROL_MESSAGE, A1
00001C72                          2124                   
00001C72  103C 000E               2125                   MOVE.B #14, D0
00001C76                          2126                   
00001C76  4E4F                    2127                   TRAP #15
00001C78                          2128  
00001C78  2015                    2129                   MOVE.L (A5), D0
00001C7A                          2130                   
00001C7A  E148                    2131                   LSL.W #8, D0
00001C7C                          2132                   
00001C7C  123C 000E               2133                   MOVE.B #14, D1
00001C80                          2134                   
00001C80  E268                    2135                   LSR.W D1, D0
00001C82                          2136                   
00001C82  B03C 0003               2137                   CMP.B  #%11, D0            * check to see if its memory shift
00001C86                          2138                   
00001C86  6700 0028               2139                   BEQ ROD_MEMORY
00001C8A                          2140                   
00001C8A  6000 0092               2141                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001C8E                          2142  
00001C8E                          2143  ROR       
00001C8E  43F9 00002679           2144                   LEA ROR_MESSAGE, A1
00001C94                          2145                   
00001C94  103C 000E               2146                   MOVE.B #14, D0
00001C98                          2147                   
00001C98  4E4F                    2148                   TRAP #15
00001C9A                          2149                   
00001C9A  2015                    2150                   MOVE.L (A5), D0
00001C9C                          2151                   
00001C9C  E148                    2152                   LSL.W #8, D0
00001C9E                          2153                   
00001C9E  123C 000E               2154                   MOVE.B #14, D1
00001CA2                          2155                   
00001CA2  E268                    2156                   LSR.W D1, D0
00001CA4                          2157                   
00001CA4  B03C 0003               2158                   CMP.B  #%11, D0            * check to see if its memory shift
00001CA8                          2159                   
00001CA8  6700 0006               2160                   BEQ ROD_MEMORY
00001CAC                          2161                   
00001CAC  6000 0070               2162                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001CB0                          2163  
00001CB0                          2164  ROD_MEMORY       
00001CB0  4EB9 00001DC4           2165                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001CB6                          2166                   
00001CB6  6000 F420               2167                   BRA PARSE_MEMORY
00001CBA                          2168                   
00001CBA                          2169                   
00001CBA  2015                    2170  ASD              MOVE.L (A5), D0
00001CBC                          2171                   
00001CBC  EF48                    2172                   LSL.W  #7, D0
00001CBE                          2173                   
00001CBE  123C 000F               2174                   MOVE.B #15, D1
00001CC2                          2175                   
00001CC2  E268                    2176                   LSR.W  D1, D0
00001CC4                          2177                   
00001CC4  B03C 0001               2178                   CMP.B  #1, D0
00001CC8                          2179                   
00001CC8  6700 0006               2180                   BEQ ASL
00001CCC                          2181                   
00001CCC  6000 0024               2182                   BRA ASR
00001CD0                          2183                   
00001CD0                          2184  ASL
00001CD0  43F9 00002665           2185                   LEA ASL_MESSAGE, A1
00001CD6                          2186                   
00001CD6  103C 000E               2187                   MOVE.B #14, D0
00001CDA                          2188                   
00001CDA  4E4F                    2189                   TRAP #15
00001CDC                          2190                   
00001CDC  2015                    2191                   MOVE.L (A5), D0
00001CDE                          2192                   
00001CDE  E148                    2193                   LSL.W #8, D0
00001CE0                          2194                   
00001CE0  123C 000E               2195                   MOVE.B #14, D1
00001CE4                          2196                   
00001CE4  E268                    2197                   LSR.W D1, D0
00001CE6                          2198                   
00001CE6  B03C 0003               2199                   CMP.B  #%11, D0            * check to see if its memory shift
00001CEA                          2200                   
00001CEA  6700 0028               2201                   BEQ ASD_MEMORY
00001CEE                          2202                   
00001CEE  6000 002E               2203                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001CF2                          2204                                    
00001CF2                          2205  
00001CF2                          2206  ASR              
00001CF2  43F9 00002674           2207                   LEA ASR_MESSAGE, A1
00001CF8                          2208                   
00001CF8  103C 000E               2209                   MOVE.B #14, D0
00001CFC                          2210                   
00001CFC  4E4F                    2211                   TRAP #15
00001CFE                          2212                   
00001CFE  2015                    2213                   MOVE.L (A5), D0
00001D00                          2214                   
00001D00  E148                    2215                   LSL.W #8, D0
00001D02                          2216                   
00001D02  123C 000E               2217                   MOVE.B #14, D1
00001D06                          2218                   
00001D06  E268                    2219                   LSR.W D1, D0
00001D08                          2220                   
00001D08  B03C 0003               2221                   CMP.B  #%11, D0            * check to see if its memory shift
00001D0C                          2222                   
00001D0C  6700 0006               2223                   BEQ ASD_MEMORY
00001D10                          2224                   
00001D10  6000 000C               2225                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001D14                          2226  
00001D14                          2227  ASD_MEMORY
00001D14  4EB9 00001DC4           2228                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001D1A                          2229                   
00001D1A  6000 F3BC               2230                   BRA PARSE_MEMORY
00001D1E                          2231                   
00001D1E                          2232  PRINTOUT_REGISTER_SHIFTS_EA
00001D1E  43F9 00002694           2233                   LEA PERIOD, A1
00001D24                          2234                   
00001D24  103C 000E               2235                   MOVE.B #14, D0
00001D28                          2236                   
00001D28  4E4F                    2237                   TRAP #15
00001D2A                          2238  
00001D2A  2015                    2239                   MOVE.L (A5), D0
00001D2C                          2240                   
00001D2C  123C 000A               2241                   MOVE.B #10, D1
00001D30                          2242                   
00001D30  E368                    2243                   LSL.W D1, D0
00001D32                          2244                   
00001D32  123C 000F               2245                   MOVE.B #15, D1
00001D36                          2246                   
00001D36  E268                    2247                   LSR.W D1, D0
00001D38                          2248                   
00001D38  B03C 0001               2249                   CMP.B #1, D0
00001D3C                          2250                   
00001D3C  6700 004A               2251                   BEQ PRINTOUT_REGISTER
00001D40                          2252                   
00001D40  6000 0002               2253                   BRA PRINTOUT_COUNT
00001D44                          2254  
00001D44                          2255                   
00001D44                          2256  PRINTOUT_COUNT
00001D44  43F9 00002690           2257                   LEA POUND_SIGN, A1
00001D4A                          2258  
00001D4A  103C 000E               2259                   MOVE.B #14, D0
00001D4E                          2260  
00001D4E  4E4F                    2261                   TRAP #15     
00001D50                          2262                 
00001D50  2015                    2263                   MOVE.L (A5), D0
00001D52                          2264                   
00001D52  E948                    2265                   LSL.W #4, D0
00001D54                          2266                   
00001D54  123C 000D               2267                   MOVE.B #13, D1
00001D58                          2268                   
00001D58  E268                    2269                   LSR.W D1, D0
00001D5A                          2270                   
00001D5A  1200                    2271                   MOVE.B D0, D1
00001D5C                          2272                   
00001D5C  103C 0003               2273                   MOVE.B #3, D0
00001D60                          2274                   
00001D60  4E4F                    2275                   TRAP #15                  * print out the amount that the ea is being shifted by
00001D62                          2276                   
00001D62  43F9 000026B0           2277                   LEA COMMA, A1
00001D68                          2278                   
00001D68  103C 000E               2279                   MOVE.B #14, D0
00001D6C                          2280                   
00001D6C  4E4F                    2281                   TRAP #15
00001D6E                          2282                   
00001D6E  2015                    2283                   MOVE.L (A5), D0
00001D70                          2284                   
00001D70  123C 000D               2285                   MOVE.B #13, D1                * to print out the ea that is being shifted
00001D74                          2286                   
00001D74  E368                    2287                   LSL.W D1, D0
00001D76                          2288                   
00001D76  E268                    2289                   LSR.W D1, D0
00001D78                          2290                   
00001D78  1E00                    2291                   MOVE.B D0, D7
00001D7A                          2292                   
00001D7A  1C3C 0000               2293                   MOVE.B #%000, D6              * we know it is a data register
00001D7E                          2294                   
00001D7E  4EB9 0000231E           2295                   JSR PRINT_EA
00001D84                          2296                   
00001D84  6000 F352               2297                   BRA PARSE_MEMORY
00001D88                          2298                   
00001D88                          2299  
00001D88                          2300  PRINTOUT_REGISTER
00001D88  2015                    2301                   MOVE.L (A5), D0
00001D8A                          2302                   
00001D8A  E948                    2303                   LSL.W #4, D0
00001D8C                          2304                   
00001D8C  123C 000D               2305                   MOVE.B #13, D1
00001D90                          2306                   
00001D90  E268                    2307                   LSR.W D1, D0
00001D92                          2308                   
00001D92  1E00                    2309                   MOVE.B D0, D7
00001D94                          2310                   
00001D94  1C3C 0000               2311                   MOVE.B #%000, D6
00001D98                          2312                   
00001D98  4EB9 0000231E           2313                   JSR PRINT_EA                  * to print out the data register
00001D9E                          2314                   
00001D9E  43F9 000026B0           2315                   LEA COMMA, A1
00001DA4                          2316                   
00001DA4  103C 000E               2317                   MOVE.B #14, D0
00001DA8                          2318                   
00001DA8  4E4F                    2319                   TRAP #15
00001DAA                          2320                   
00001DAA  2015                    2321                   MOVE.L (A5), D0
00001DAC                          2322                   
00001DAC  123C 000D               2323                   MOVE.B #13, D1                * to print out the ea that is being shifted
00001DB0                          2324                   
00001DB0  E368                    2325                   LSL.W D1, D0
00001DB2                          2326                   
00001DB2  E268                    2327                   LSR.W D1, D0
00001DB4                          2328                   
00001DB4  1E00                    2329                   MOVE.B D0, D7
00001DB6                          2330                   
00001DB6  1C3C 0000               2331                   MOVE.B #%000, D6              * we know it is a data register
00001DBA                          2332                   
00001DBA  4EB9 0000231E           2333                   JSR PRINT_EA
00001DC0                          2334                   
00001DC0  6000 F316               2335                   BRA PARSE_MEMORY
00001DC4                          2336                                   
00001DC4                          2337  
00001DC4                          2338  PRINTOUT_MEMORY_SHIFTS_EA   * gets the mode and register of the memory ea, and prints it out
00001DC4  43F9 00002694           2339                   LEA PERIOD, A1
00001DCA                          2340                   
00001DCA  103C 000E               2341                   MOVE.B #14, D0
00001DCE                          2342                   
00001DCE  4E4F                    2343                   TRAP #15
00001DD0                          2344  
00001DD0  2015                    2345                   MOVE.L (A5), D0
00001DD2                          2346                   
00001DD2  123C 000A               2347                   MOVE.B #10, D1
00001DD6                          2348                   
00001DD6  E368                    2349                   LSL.W D1, D0
00001DD8                          2350                   
00001DD8  123C 000D               2351                   MOVE.B #13, D1
00001DDC                          2352                   
00001DDC  E268                    2353                   LSR.W D1, D0
00001DDE                          2354                   
00001DDE  1C00                    2355                   MOVE.B D0, D6
00001DE0                          2356                   
00001DE0  2015                    2357                   MOVE.L (A5), D0
00001DE2                          2358                   
00001DE2  123C 000D               2359                   MOVE.B #13, D1
00001DE6                          2360                   
00001DE6  E368                    2361                   LSL.W D1, D0
00001DE8                          2362                   
00001DE8  E268                    2363                   LSR.W D1, D0
00001DEA                          2364                   
00001DEA  1E00                    2365                   MOVE.B D0, D7
00001DEC                          2366                   
00001DEC  4EB9 0000231E           2367                   JSR PRINT_EA
00001DF2                          2368                   
00001DF2  4E75                    2369                   RTS
00001DF4                          2370                  
00001DF4                          2371                
00001DF4  43F9 000025D4           2372  MOVEB            LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00001DFA                          2373  
00001DFA  4280                    2374                   CLR.L  D0
00001DFC                          2375                   
00001DFC  103C 000E               2376                   MOVE.B #14, D0
00001E00                          2377                   
00001E00  4E4F                    2378                   TRAP #15
00001E02                          2379                   
00001E02  43F9 0000267E           2380                   LEA SIZE_B_PRINT, A1
00001E08                          2381                   
00001E08  4E4F                    2382                   TRAP #15               * done printing opcode and size
00001E0A                          2383                   
00001E0A  6000 0096               2384                   BRA PRINTOUT_MOVE_EA
00001E0E                          2385  
00001E0E  4280                    2386  MOVEW            CLR.L D0
00001E10                          2387                   
00001E10  4281                    2388                   CLR.L D1
00001E12                          2389                   
00001E12  3015                    2390                   MOVE.W (A5),D0
00001E14                          2391                   
00001E14  EF48                    2392                   LSL.W #7,D0
00001E16                          2393                   
00001E16  123C 000D               2394                   MOVE.B #13,D1
00001E1A                          2395                   
00001E1A  E268                    2396                   LSR.W D1,D0
00001E1C                          2397                   
00001E1C  B03C 0001               2398                   CMP.B #1,D0            *check to see if the mode of the destination is an address register
00001E20                          2399                   
00001E20  6700 004C               2400                   BEQ MOVEAW             *if the destination is an address, it is MOVEA
00001E24                          2401                   
00001E24  43F9 000025D4           2402                   LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00001E2A                          2403                   
00001E2A  4280                    2404                   CLR.L D0
00001E2C                          2405                   
00001E2C  103C 000E               2406                   MOVE.B #14, D0
00001E30                          2407                   
00001E30  4E4F                    2408                   TRAP #15
00001E32                          2409                   
00001E32  43F9 00002684           2410                   LEA SIZE_W_PRINT, A1
00001E38                          2411                   
00001E38  4E4F                    2412                   TRAP #15               * done printing opcode and size
00001E3A                          2413                      
00001E3A  6000 0066               2414                   BRA PRINTOUT_MOVE_EA
00001E3E                          2415                
00001E3E                          2416  
00001E3E  4280                    2417  MOVEL            CLR.L D0
00001E40                          2418                   
00001E40  4281                    2419                   CLR.L D1
00001E42                          2420                   
00001E42  3015                    2421                   MOVE.W (A5),D0
00001E44                          2422                   
00001E44  EF48                    2423                   LSL.W #7,D0
00001E46                          2424                   
00001E46  123C 000D               2425                   MOVE.B #13,D1
00001E4A                          2426                   
00001E4A  E268                    2427                   LSR.W D1,D0
00001E4C                          2428                   
00001E4C  B03C 0001               2429                   CMP.B #1,D0            *check to see if the mode of the destination is equal to 1
00001E50                          2430                   
00001E50  6700 0036               2431                   BEQ MOVEAL             *if the mode is 1, then it is an address register, and the opcode is MOVEA
00001E54                          2432                   
00001E54  43F9 000025D4           2433                   LEA MOVE_MESSAGE, A1   * printing out opcode and size
00001E5A                          2434                   
00001E5A  4280                    2435                   CLR.L D0
00001E5C                          2436                   
00001E5C  103C 000E               2437                   MOVE.B #14, D0
00001E60                          2438                   
00001E60  4E4F                    2439                   TRAP #15
00001E62                          2440                   
00001E62  43F9 0000268A           2441                   LEA SIZE_L_PRINT, A1
00001E68                          2442                   
00001E68  4E4F                    2443                   TRAP #15               * done printing opcode and size
00001E6A                          2444                   
00001E6A  6000 0036               2445                   BRA PRINTOUT_MOVE_EA
00001E6E                          2446                   
00001E6E                          2447                   
00001E6E  43F9 000025CD           2448  MOVEAW           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
00001E74                          2449  
00001E74  4280                    2450                   CLR.L D0
00001E76                          2451                   
00001E76  103C 000E               2452                   MOVE.B #14, D0
00001E7A                          2453                   
00001E7A  4E4F                    2454                   TRAP #15
00001E7C                          2455                   
00001E7C  43F9 00002684           2456                   LEA SIZE_W_PRINT, A1
00001E82                          2457                   
00001E82  4E4F                    2458                   TRAP #15               * done printing out opcode and size
00001E84                          2459                   
00001E84  6000 001C               2460                   BRA PRINTOUT_MOVE_EA
00001E88                          2461  
00001E88  43F9 000025CD           2462  MOVEAL           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
00001E8E                          2463  
00001E8E  4280                    2464                   CLR.L D0
00001E90                          2465                   
00001E90  103C 000E               2466                   MOVE.B #14, D0
00001E94                          2467                   
00001E94  4E4F                    2468                   TRAP #15
00001E96                          2469                   
00001E96  43F9 0000268A           2470                   LEA SIZE_L_PRINT, A1
00001E9C                          2471                   
00001E9C  4E4F                    2472                   TRAP #15               * done printing out opcode and size
00001E9E                          2473                   
00001E9E  6000 0002               2474                   BRA PRINTOUT_MOVE_EA
00001EA2                          2475  
00001EA2                          2476  PRINTOUT_MOVE_EA
00001EA2  4247                    2477                   CLR    D7 
00001EA4                          2478                   
00001EA4  4246                    2479                   CLR    D6               
00001EA6                          2480                   
00001EA6  3015                    2481                   MOVE.W (A5), D0
00001EA8                          2482                   
00001EA8  123C 000A               2483                   MOVE.B #10, D1
00001EAC                          2484                   
00001EAC  E368                    2485                   LSL.W D1, D0
00001EAE                          2486                   
00001EAE  123C 000D               2487                   MOVE.B #13, D1
00001EB2                          2488                   
00001EB2  E268                    2489                   LSR.W D1, D0
00001EB4                          2490                   
00001EB4  1C00                    2491                   MOVE.B D0, D6          * getting the mode of the second ea
00001EB6                          2492                   
00001EB6  3015                    2493                   MOVE.W (A5), D0
00001EB8                          2494                   
00001EB8  123C 000D               2495                   MOVE.B #13, D1
00001EBC                          2496                   
00001EBC  E368                    2497                   LSL.W D1, D0
00001EBE                          2498                   
00001EBE  E268                    2499                   LSR.W D1, D0
00001EC0                          2500                   
00001EC0  1E00                    2501                   MOVE.B D0, D7          * getting the register of the second ea
00001EC2                          2502                   
00001EC2  4EB9 0000231E           2503                   JSR PRINT_EA
00001EC8                          2504                   
00001EC8  43F9 000026B0           2505                   LEA COMMA, A1
00001ECE                          2506                   
00001ECE  103C 000E               2507                   MOVE.B #14, D0
00001ED2                          2508                   
00001ED2  4E4F                    2509                   TRAP #15
00001ED4                          2510                   
00001ED4  3015                    2511                   MOVE.W (A5), D0
00001ED6                          2512                   
00001ED6  E948                    2513                   LSL.W #4, D0
00001ED8                          2514                   
00001ED8  123C 000D               2515                   MOVE.B #13, D1
00001EDC                          2516                   
00001EDC  E268                    2517                   LSR.W D1, D0
00001EDE                          2518                   
00001EDE  1E00                    2519                   MOVE.B D0, D7          * getting the register of the first ea
00001EE0                          2520                   
00001EE0  3015                    2521                   MOVE.W (A5), D0
00001EE2                          2522                   
00001EE2  EF48                    2523                   LSL.W #7, D0
00001EE4                          2524                   
00001EE4  123C 000D               2525                   MOVE.B #13, D1
00001EE8                          2526                   
00001EE8  E268                    2527                   LSR.W D1, D0
00001EEA                          2528                   
00001EEA  1C00                    2529                   MOVE.B D0, D6          * getting the mode of the first ea
00001EEC                          2530                   
00001EEC  4EB9 0000231E           2531                   JSR PRINT_EA
00001EF2                          2532                   
00001EF2  6000 F1E4               2533                   BRA PARSE_MEMORY
00001EF6                          2534  
00001EF6                          2535  
00001EF6                          2536  
00001EF6                          2537  
00001EF6                          2538  
00001EF6                          2539  -------------------- end include --------------------
00001EF6                          2540                  INCLUDE 'ADD_ADDA.X68'
00001EF6                          2541    
00001EF6                          2542  
00001EF6                          2543          
00001EF6                          2544  
00001EF6                          2545                  * INCLUDE 'CMP.X68'
00001EF6                          2546                  * INCLUDE 'SUB.X68'
00001EF6                          2547                  * INCLUDE 'DIVU_OR.X68'
00001EF6                          2548                  * INCLUDE 'MULS_AND.X68'
00001EF6                          2549    
00001EF6                          2550  ADD_ADDA  *at this point we know the first 4 bits are 1101 -> ADD or ADDA -> compare the destination opmode
00001EF6                          2551                   
00001EF6  4EB9 00001FDE           2552                   JSR      GET_SIZE_PURPLE
00001EFC                          2553                                              
00001EFC  BA3C 0003               2554                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is ADDA
00001F00                          2555                   
00001F00  6700 0008               2556                   BEQ      ADDA_CODE
00001F04                          2557                   
00001F04  4EF9 00001F76           2558                   JMP      ADD_CODE
00001F0A                          2559                   
00001F0A                          2560  ADDA_CODE 
00001F0A                          2561                   * ADDA opcode message
00001F0A  43F9 0000265A           2562                   LEA ADDA_MESSAGE, A1
00001F10                          2563                   
00001F10  103C 000E               2564                   MOVE.B #14, D0
00001F14                          2565                   
00001F14  4E4F                    2566                   TRAP #15
00001F16                          2567                   
00001F16  4285                    2568                   CLR.L   D5         * clear for the size since this is not for the size purple
00001F18                          2569                   
00001F18  4280                    2570                   CLR.L D0                *clear D0
00001F1A                          2571                   
00001F1A  4281                    2572                   CLR.L D1                *clear D1
00001F1C                          2573                   
00001F1C  3010                    2574                   MOVE.W  (A0),D0     *D0 is the binary value to decode
00001F1E                          2575                   
00001F1E  0800 0008               2576                   BTST    #8, D0
00001F22                          2577                   
00001F22  6700 002E               2578                   BEQ     PRINTOUT_SIZE_W
00001F26                          2579                   
00001F26  4EF9 00001F64           2580                   JMP     PRINTOUT_SIZE_L
00001F2C                          2581                   
00001F2C                          2582  FINISH_PRINTING_SIZE
00001F2C                          2583  
00001F2C  4EB9 0000205E           2584                   JSR     Set_Ea
00001F32                          2585                   
00001F32  4EB9 0000231E           2586                   JSR     PRINT_EA *by using jmp table
00001F38                          2587                   
00001F38  4EB9 0000203E           2588                   JSR     PRINT_COMMA
00001F3E                          2589                   
00001F3E                          2590                    * for the first Dn 
00001F3E  4EB9 0000204C           2591                   JSR     GET_Data_Register
00001F44                          2592                   
00001F44  1C3C 0001               2593                   MOVE.B  #%001, D6 * for mode
00001F48                          2594  
00001F48  4EB9 0000231E           2595                   JSR     PRINT_EA *by using jmp table
00001F4E                          2596  
00001F4E  4EF8 10D8               2597                   JMP     PARSE_MEMORY
00001F52                          2598                   
00001F52                          2599  PRINTOUT_SIZE_W
00001F52                          2600                   
00001F52  3A3C 0001               2601                   MOVE    #%01, D5          
00001F56                          2602                   
00001F56  43F9 00002684           2603                   LEA      SIZE_W_PRINT,    A1
00001F5C                          2604                   
00001F5C  103C 000E               2605                   MOVE.B   #14,             D0
00001F60                          2606          
00001F60  4E4F                    2607                   TRAP #15
00001F62                          2608                   
00001F62  60C8                    2609                   BRA     FINISH_PRINTING_SIZE
00001F64                          2610                   
00001F64                          2611  PRINTOUT_SIZE_L                           
00001F64  3A3C 0002               2612                   MOVE    #%10, D5          
00001F68                          2613                   
00001F68  43F9 0000268A           2614                   LEA      SIZE_L_PRINT,    A1
00001F6E                          2615                   
00001F6E  103C 000E               2616                   MOVE.B   #14,             D0 
00001F72                          2617         
00001F72  4E4F                    2618                   TRAP #15
00001F74                          2619                   
00001F74  60B6                    2620                   BRA     FINISH_PRINTING_SIZE
00001F76                          2621  
00001F76                          2622  ADD_CODE
00001F76                          2623                   * ADD message
00001F76  43F9 00002655           2624                   LEA      ADD_MESSAGE,    A1
00001F7C  103C 000E               2625                   MOVE.B   #14,            D0
00001F80  4E4F                    2626                   TRAP #15
00001F82                          2627                   
00001F82  4EB9 00001FF4           2628                   JSR     PRINTOUT_SIZE_PURPLE
00001F88                          2629                   
00001F88                          2630                   * check for dn and ea
00001F88  4280                    2631                   CLR.L D0                *clear D0
00001F8A                          2632                   
00001F8A  4281                    2633                   CLR.L D1                *clear D1
00001F8C                          2634                   
00001F8C  3015                    2635                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001F8E                          2636                   
00001F8E  0800 0008               2637                   BTST    #8, D0
00001F92                          2638                   
00001F92  6700 0028               2639                   BEQ     ADD_FIRST_EA
00001F96                          2640                   
00001F96                          2641                   * for the first Dn 
00001F96  4EB9 0000204C           2642                   JSR     GET_Data_Register
00001F9C                          2643                   
00001F9C  1C3C 0000               2644                   MOVE.B  #%000, D6 * for mode
00001FA0                          2645                   
00001FA0  4EB9 0000231E           2646                   JSR     PRINT_EA *by using jmp table
00001FA6                          2647                   
00001FA6  4EB9 0000203E           2648                   JSR     PRINT_COMMA
00001FAC                          2649                   
00001FAC  4EB9 0000205E           2650                   JSR     Set_Ea
00001FB2                          2651                   
00001FB2  4EB9 0000231E           2652                   JSR     PRINT_EA *by using jmp table
00001FB8                          2653                   
00001FB8  4EF8 10D8               2654                   JMP     PARSE_MEMORY
00001FBC                          2655                   
00001FBC                          2656  ADD_FIRST_EA
00001FBC  4EB9 0000205E           2657                   JSR     Set_Ea
00001FC2                          2658                   
00001FC2  4EB9 0000231E           2659                   JSR     PRINT_EA *by using jmp table
00001FC8                          2660                   
00001FC8  4EB9 0000203E           2661                   JSR     PRINT_COMMA
00001FCE                          2662                   
00001FCE                          2663                    * for the first Dn 
00001FCE  4EB9 0000204C           2664                   JSR     GET_Data_Register
00001FD4                          2665                   
00001FD4  1C3C 0000               2666                   MOVE.B  #%000, D6 * for mode
00001FD8                          2667  
00001FD8  4EB9 0000231E           2668                   JSR     PRINT_EA *by using jmp table
00001FDE                          2669                   
00001FDE                          2670                   
00001FDE                          2671  GET_SIZE_PURPLE * get the op-code 
00001FDE                          2672  
00001FDE  4280                    2673                   CLR.L D0                *clear D0
00001FE0                          2674                   
00001FE0  4281                    2675                   CLR.L D1                *clear D1
00001FE2                          2676                   
00001FE2  3015                    2677                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001FE4                          2678  
00001FE4  123C 0008               2679                   MOVE.B  #8,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001FE8                          2680  
00001FE8  E368                    2681                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001FEA                          2682                   
00001FEA  123C 000E               2683                   MOVE.B  #14,D1          *14 bits is the number of times to shift to hold the mode number
00001FEE                          2684  
00001FEE  E268                    2685                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
00001FF0                          2686                   
00001FF0  1A00                    2687                   MOVE.B  D0, D5          *push the size to the Data register 5 for the future use
00001FF2                          2688                   
00001FF2  4E75                    2689                   RTS 
00001FF4                          2690  
00001FF4                          2691  PRINTOUT_SIZE_PURPLE * get the size for ADDI, CLR, ADDQ, OR, SUB, CMP, AND, ADD
00001FF4                          2692                       
00001FF4  BA7C 0000               2693                   CMP    #%00, D5          
00001FF8                          2694                   
00001FF8  6700 0014               2695                   BEQ    PRINT_B
00001FFC                          2696                   
00001FFC  BA7C 0001               2697                   CMP    #%01, D5          
00002000                          2698                   
00002000  6700 001C               2699                   BEQ    PRINT_W
00002004                          2700                   
00002004  BA7C 0002               2701                   CMP    #%10, D5          
00002008                          2702                   
00002008  6700 0024               2703                   BEQ    PRINT_L
0000200C                          2704                   
0000200C                          2705  DONE_PRINTING
0000200C  4E75                    2706                   RTS 
0000200E                          2707                   
0000200E                          2708  PRINT_B          
0000200E  43F9 0000267E           2709                   LEA      SIZE_B_PRINT,    A1
00002014  103C 000E               2710                   MOVE.B   #14,            D0          
00002018  4E4F                    2711                   TRAP #15
0000201A                          2712  
0000201A  4EF8 200C               2713                   JMP      DONE_PRINTING
0000201E                          2714                   
0000201E                          2715  PRINT_W     
0000201E  43F9 00002684           2716                   LEA      SIZE_W_PRINT,    A1
00002024  103C 000E               2717                   MOVE.B   #14,             D0          
00002028  4E4F                    2718                   TRAP #15
0000202A                          2719  
0000202A  4EF8 200C               2720                   JMP      DONE_PRINTING
0000202E                          2721  
0000202E                          2722  
0000202E                          2723  PRINT_L          
0000202E  43F9 0000268A           2724                   LEA      SIZE_L_PRINT,    A1
00002034  103C 000E               2725                   MOVE.B   #14,             D0          
00002038  4E4F                    2726                   TRAP #15   
0000203A                          2727                      
0000203A  4EF8 200C               2728                   JMP    DONE_PRINTING
0000203E                          2729                   
0000203E                          2730  PRINT_COMMA
0000203E                          2731  
0000203E  43F9 000026B0           2732                   LEA COMMA, A1
00002044  103C 000E               2733                   MOVE.B #14, D0
00002048  4E4F                    2734                   TRAP #15
0000204A                          2735                   
0000204A  4E75                    2736                   RTS
0000204C                          2737                   
0000204C                          2738  GET_Data_Register
0000204C  4280                    2739                   CLR.L D0                *clear D0
0000204E                          2740                   
0000204E  4281                    2741                   CLR.L D1                *clear D1
00002050                          2742                   
00002050  3015                    2743                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002052                          2744  
00002052  E948                    2745                   LSL.W   #4,D0           *Shift the bits 4 times -> D0 now removes the opcode & reg#
00002054                          2746                   
00002054  123C 000D               2747                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00002058                          2748  
00002058  E268                    2749                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
0000205A                          2750  
0000205A  1E00                    2751                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
0000205C                          2752                   
0000205C  4E75                    2753                   RTS
0000205E                          2754                   
0000205E                          2755  Set_Ea
0000205E                          2756  
0000205E                          2757                   * set register
0000205E  4280                    2758                   CLR.L D0                *clear D0
00002060                          2759                   
00002060  4281                    2760                   CLR.L D1                *clear D1
00002062                          2761                   
00002062  3015                    2762                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002064                          2763                 
00002064  123C 000D               2764                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002068                          2765  
00002068  E368                    2766                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000206A                          2767  
0000206A  123C 000D               2768                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
0000206E                          2769  
0000206E  E268                    2770                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00002070                          2771  
00002070  1E00                    2772                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00002072                          2773                   
00002072                          2774                   * set mode
00002072  4280                    2775                   CLR.L D0                *clear D0
00002074                          2776                   
00002074  4281                    2777                   CLR.L D1                *clear D1
00002076                          2778                   
00002076  3015                    2779                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002078                          2780                 
00002078  123C 000A               2781                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000207C                          2782  
0000207C  E368                    2783                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000207E                          2784  
0000207E  123C 000D               2785                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00002082                          2786  
00002082  E268                    2787                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00002084                          2788  
00002084  1C00                    2789                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
00002086                          2790                   
00002086  4E75                    2791                   RTS
00002088                          2792                   
00002088                          2793                  
00002088                          2794  
00002088                          2795  
00002088                          2796  
00002088                          2797  
00002088                          2798  
00002088                          2799  
00002088                          2800  
00002088                          2801  
00002088                          2802  
00002088                          2803  
00002088                          2804  
00002088                          2805  
00002088                          2806  
00002088                          2807  
00002088                          2808  
00002088                          2809  
00002088                          2810  
00002088                          2811  -------------------- end include --------------------
00002088                          2812                  INCLUDE 'BCC.X68'
00002088                          2813  
00002088                          2814  
00002088                          2815  
00002088                          2816  
00002088  41F9 000020A8           2817                 LEA         jmp_table_bcc,A0    *Index into the table
0000208E                          2818  
0000208E  4280                    2819                 CLR.L       D0              *Zero it
00002090                          2820  
00002090  303C 0606               2821                 MOVE.W      #example,D0     *We'll play with it here
00002094                          2822                 
00002094  123C 0004               2823                 MOVE.B      #4, D1
00002098                          2824                 
00002098  E368                    2825                 LSL.W       D1, D0
0000209A                          2826  
0000209A  123C 000C               2827                 MOVE.B      #12,D1       *Shift 12 bits to the right  
0000209E                          2828  
0000209E  E268                    2829                 LSR.W       D1,D0           *Move the bits
000020A0                          2830             
000020A0  C0FC 0006               2831                 MULU        #6,D0       *Form offset     
000020A4                          2832  
000020A4  4EF0 0000               2833                 JMP         0(A0,D0)   *Jump indirect with index
000020A8                          2834  
000020A8                          2835                      
000020A8  4EF9 00002108           2836  jmp_table_bcc  JMP         NOT_EXIST
000020AE                          2837  
000020AE  4EF9 00002108           2838                 JMP         NOT_EXIST
000020B4                          2839  
000020B4  4EF9 0000210C           2840                 JMP         HI
000020BA                          2841  
000020BA  4EF9 00002110           2842                 JMP         LS
000020C0                          2843  
000020C0  4EF9 00002114           2844                 JMP         CC
000020C6                          2845  
000020C6  4EF9 00002118           2846                 JMP         CS
000020CC                          2847  
000020CC  4EF9 0000211C           2848                 JMP         NE
000020D2                          2849  
000020D2  4EF9 00002120           2850                 JMP         EQ
000020D8                          2851  
000020D8  4EF9 00002124           2852                 JMP         VC
000020DE                          2853  
000020DE  4EF9 00002128           2854                 JMP         VS
000020E4                          2855  
000020E4  4EF9 0000212C           2856                 JMP         PL
000020EA                          2857                 
000020EA  4EF9 00002130           2858                 JMP         MI
000020F0                          2859  
000020F0  4EF9 00002134           2860                 JMP         GE
000020F6                          2861  
000020F6  4EF9 00002138           2862                 JMP         LT
000020FC                          2863  
000020FC  4EF9 0000213C           2864                 JMP         GT
00002102                          2865  
00002102  4EF9 00002140           2866                 JMP         LE
00002108                          2867  
00002108                          2868          
00002108  4E72 2700               2869  NOT_EXIST      STOP        #$2700
0000210C                          2870  
0000210C                          2871  
0000210C  6000 0036               2872  HI             BRA         PRINT_BHI 
00002110                          2873  
00002110  6000 0042               2874  LS             BRA         PRINT_BLS  
00002114                          2875  
00002114  6000 004E               2876  CC             BRA         PRINT_BCC
00002118                          2877  
00002118  6000 005A               2878  CS             BRA         PRINT_BCS 
0000211C                          2879  
0000211C  6000 0066               2880  NE             BRA         PRINT_BNE 
00002120                          2881  
00002120  6000 0072               2882  EQ             BRA         PRINT_BEQ
00002124                          2883  
00002124  6000 007E               2884  VC             BRA         PRINT_BVC
00002128                          2885  
00002128  6000 008A               2886  VS             BRA         PRINT_BVS
0000212C                          2887  
0000212C  6000 0096               2888  PL             BRA         PRINT_BPL
00002130                          2889  
00002130  6000 00A2               2890  MI             BRA         PRINT_BMI 
00002134                          2891  
00002134  6000 00AE               2892  GE             BRA         PRINT_BGE 
00002138                          2893  
00002138  6000 00BA               2894  LT             BRA         PRINT_BLT
0000213C                          2895  
0000213C  6000 00C6               2896  GT             BRA         PRINT_BGT      
00002140                          2897  
00002140  6000 00D2               2898  LE             BRA         PRINT_BLE 
00002144                          2899  
00002144                          2900  
00002144                          2901  PRINT_BHI      
00002144  43F9 0000260F           2902                 LEA BHI_MESSAGE, A1
0000214A                          2903            
0000214A  103C 000E               2904                 MOVE.B #14, D0
0000214E                          2905                   
0000214E  4E4F                    2906                 TRAP #15    
00002150                          2907                 
00002150  6000 00CE               2908                 BRA DISPLACEMENT
00002154                          2909                 
00002154                          2910  PRINT_BLS
00002154  43F9 00002617           2911                 LEA BLS_MESSAGE, A1
0000215A                          2912                   
0000215A  103C 000E               2913                 MOVE.B #14, D0
0000215E                          2914                   
0000215E  4E4F                    2915                 TRAP #15
00002160                          2916                 
00002160  6000 00BE               2917                 BRA DISPLACEMENT
00002164                          2918  PRINT_BCC
00002164  43F9 000025F7           2919                 LEA BCC_MESSAGE, A1
0000216A                          2920                   
0000216A  103C 000E               2921                 MOVE.B #14, D0
0000216E                          2922                   
0000216E  4E4F                    2923                 TRAP #15
00002170                          2924                 
00002170  6000 00AE               2925                 BRA DISPLACEMENT
00002174                          2926  PRINT_BCS
00002174  43F9 00002603           2927                 LEA BCS_MESSAGE, A1
0000217A                          2928                   
0000217A  103C 000E               2929                 MOVE.B #14, D0
0000217E                          2930                   
0000217E  4E4F                    2931                 TRAP #15
00002180                          2932                 
00002180  6000 009E               2933                 BRA DISPLACEMENT
00002184                          2934  PRINT_BNE
00002184  43F9 000025FF           2935                 LEA BNE_MESSAGE, A1
0000218A                          2936                   
0000218A  103C 000E               2937                 MOVE.B #14, D0
0000218E                          2938                   
0000218E  4E4F                    2939                 TRAP #15
00002190                          2940                 
00002190  6000 008E               2941                 BRA DISPLACEMENT
00002194                          2942  PRINT_BEQ
00002194  43F9 000025FB           2943                 LEA BEQ_MESSAGE, A1
0000219A                          2944                   
0000219A  103C 000E               2945                 MOVE.B #14, D0
0000219E                          2946                   
0000219E  4E4F                    2947                 TRAP #15
000021A0                          2948                 
000021A0  6000 007E               2949                 BRA DISPLACEMENT
000021A4                          2950  PRINT_BVC
000021A4  43F9 00002627           2951                 LEA BVC_MESSAGE, A1
000021AA                          2952                   
000021AA  103C 000E               2953                 MOVE.B #14, D0
000021AE                          2954                   
000021AE  4E4F                    2955                 TRAP #15     
000021B0                          2956                 
000021B0  6000 006E               2957                 BRA DISPLACEMENT
000021B4                          2958  PRINT_BVS
000021B4  43F9 0000262B           2959                 LEA BVS_MESSAGE, A1
000021BA                          2960                   
000021BA  103C 000E               2961                 MOVE.B #14, D0
000021BE                          2962                   
000021BE  4E4F                    2963                 TRAP #15
000021C0                          2964                 
000021C0  6000 005E               2965                 BRA DISPLACEMENT
000021C4                          2966  PRINT_BPL
000021C4  43F9 00002623           2967                 LEA BPL_MESSAGE, A1
000021CA                          2968                   
000021CA  103C 000E               2969                 MOVE.B #14, D0
000021CE                          2970                   
000021CE  4E4F                    2971                 TRAP #15
000021D0                          2972                 
000021D0  6000 004E               2973                 BRA DISPLACEMENT
000021D4                          2974  PRINT_BMI
000021D4  43F9 0000261F           2975                 LEA BMI_MESSAGE, A1
000021DA                          2976                   
000021DA  103C 000E               2977                 MOVE.B #14, D0
000021DE                          2978                   
000021DE  4E4F                    2979                 TRAP #15
000021E0                          2980                 
000021E0  6000 003E               2981                 BRA DISPLACEMENT
000021E4                          2982  PRINT_BGE
000021E4  43F9 00002607           2983                 LEA BGE_MESSAGE, A1
000021EA                          2984                   
000021EA  103C 000E               2985                 MOVE.B #14, D0
000021EE                          2986                   
000021EE  4E4F                    2987                 TRAP #15
000021F0                          2988                 
000021F0  6000 002E               2989                 BRA DISPLACEMENT
000021F4                          2990  PRINT_BLT
000021F4  43F9 0000261B           2991                 LEA BLT_MESSAGE, A1
000021FA                          2992                   
000021FA  103C 000E               2993                 MOVE.B #14, D0
000021FE                          2994                   
000021FE  4E4F                    2995                 TRAP #15
00002200                          2996                 
00002200  6000 001E               2997                 BRA DISPLACEMENT
00002204                          2998  PRINT_BGT
00002204  43F9 0000260B           2999                 LEA BGT_MESSAGE, A1
0000220A                          3000                   
0000220A  103C 000E               3001                 MOVE.B #14, D0
0000220E                          3002                   
0000220E  4E4F                    3003                 TRAP #15
00002210                          3004                 
00002210  6000 000E               3005                 BRA DISPLACEMENT
00002214                          3006  PRINT_BLE
00002214  43F9 00002613           3007                 LEA BLE_MESSAGE, A1
0000221A                          3008                   
0000221A  103C 000E               3009                 MOVE.B #14, D0
0000221E                          3010                   
0000221E  4E4F                    3011                 TRAP #15
00002220                          3012                 
00002220  43F9 00002690           3013  DISPLACEMENT   LEA     POUND_SIGN, A1
00002226                          3014              
00002226  103C 000E               3015                 MOVE.B  #14, D0
0000222A                          3016              
0000222A  4E4F                    3017                 TRAP #15
0000222C                          3018              
0000222C  43F9 00002692           3019                 LEA     HEX_SIGN, A1
00002232                          3020              
00002232  4E4F                    3021                 TRAP #15
00002234                          3022  
00002234  4280                    3023                 CLR.L       D0              *Zero it
00002236                          3024  
00002236  303C 0606               3025                 MOVE.W      #example,D0     *We'll play with it here
0000223A                          3026                 
0000223A  123C 0008               3027                 MOVE.B      #8, D1
0000223E                          3028                 
0000223E  E368                    3029                 LSL.W       D1, D0
00002240                          3030  
00002240  123C 0008               3031                 MOVE.B      #8,D1       *Shift 12 bits to the right  
00002244                          3032  
00002244  E268                    3033                 LSR.W       D1,D0           *Move the bits
00002246                          3034                 
00002246                          3035                 *chk the D0 for 8, 16, or 32 but displacement
00002246                          3036                  
00002246  B03C 0000               3037                 CMP.B  #$00, D0
0000224A                          3038  
0000224A  6700 0018               3039                 BEQ  a_16_BIT 
0000224E                          3040  
0000224E  B03C 00FF               3041                 CMP.B #$FF, D0   
00002252                          3042  
00002252  6700 001E               3043                 BEQ  a_32_BIT
00002256                          3044                  
00002256                          3045                  *else 
00002256                          3046                  
00002256  4285                    3047                 CLR.L D5
00002258                          3048                 
00002258  3A00                    3049                 MOVE.W D0, D5      
0000225A                          3050          
0000225A  4EB9 00002280           3051                 JSR  HEX_TO_ASCII
00002260                          3052                 
00002260  4EF8 10D8               3053                 JMP PARSE_MEMORY
00002264                          3054                            
00002264                          3055  a_16_BIT
00002264  4285                    3056          CLR.L  D5
00002266                          3057          
00002266  3A1E                    3058          MOVE.W (A6)+, D5
00002268                          3059          
00002268  4EB9 00002280           3060          JSR  HEX_TO_ASCII
0000226E                          3061          
0000226E  4EF8 10D8               3062          JMP PARSE_MEMORY
00002272                          3063  a_32_BIT
00002272                          3064  
00002272  4285                    3065          CLR.L  D5
00002274                          3066          
00002274  2A1E                    3067          MOVE.L (A6)+, D5
00002276                          3068          
00002276  4EB9 00002280           3069          JSR  HEX_TO_ASCII
0000227C                          3070          
0000227C  4EF8 10D8               3071          JMP PARSE_MEMORY
00002280                          3072                   
00002280                          3073  
00002280                          3074  
00002280                          3075  
00002280                          3076  
00002280                          3077  
00002280                          3078  
00002280                          3079  
00002280                          3080  
00002280                          3081  
00002280                          3082  
00002280                          3083  -------------------- end include --------------------
00002280                          3084                  INCLUDE 'HEX_TO_ASCII_V1.X68'
00002280                          3085      *ORG    $5000
00002280                          3086  
00002280                          3087  
00002280                          3088  HEX_TO_ASCII      
00002280  4283                    3089       CLR.L      D3
00002282                          3090       
00002282  BABC 00000000           3091       CMP.L       #0, D5
00002288                          3092       
00002288  6700 0086               3093       BEQ         PRINT_ZERO
0000228C                          3094      
0000228C                          3095       *MOVE.L     #$ABCDEF, D5
0000228C                          3096       
0000228C                          3097  LOOP     
0000228C  2C05                    3098       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
0000228E                          3099       
0000228E  4282                    3100       CLR.L      D2
00002290                          3101       
00002290  143C 001C               3102       MOVE.B     #28, D2
00002294                          3103  
00002294  E4AE                    3104       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
00002296                          3105       
00002296  BC3C 000A               3106       CMP.B      #10, D6
0000229A                          3107       
0000229A  6C00 0006               3108       BGE        LETTER_1                  * determine if a letter or a number
0000229E                          3109       
0000229E  6000 000C               3110       BRA        NUMBER_1
000022A2                          3111       
000022A2                          3112  LETTER_1
000022A2  0606 0037               3113       ADD.B      #55, D6
000022A6                          3114       
000022A6  1206                    3115       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000022A8                          3116       
000022A8  6000 000C               3117       BRA        PRINTOUT_NIBBLE
000022AC                          3118  
000022AC                          3119  NUMBER_1     
000022AC  0606 0030               3120       ADD.B      #48, D6
000022B0                          3121       
000022B0  1206                    3122       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000022B2                          3123       
000022B2  6000 0002               3124       BRA        PRINTOUT_NIBBLE
000022B6                          3125  
000022B6                          3126  
000022B6                          3127  PRINTOUT_NIBBLE
000022B6  E98D                    3128      LSL.L      #4, D5                   * shift out the nibble you just read from the source
000022B8                          3129      
000022B8  5203                    3130      ADD.B      #1, D3
000022BA                          3131      
000022BA  BC3C 0030               3132      CMP.B      #$30, D6
000022BE                          3133  
000022BE  67CC                    3134      BEQ        LOOP             
000022C0                          3135      
000022C0  103C 0006               3136      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
000022C4                          3137      
000022C4  4E4F                    3138      TRAP #15
000022C6                          3139       
000022C6  B63C 0008               3140      CMP.B      #8, D3                   * compare to the counter to check if you are done
000022CA                          3141       
000022CA  6700 023E               3142      BEQ        DONE
000022CE                          3143          
000022CE  6000 0002               3144      BRA LOOP_ZERO                            * continue the loop and print next nibble
000022D2                          3145      
000022D2                          3146      
000022D2                          3147  LOOP_ZERO    
000022D2  2C05                    3148       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
000022D4                          3149       
000022D4  4282                    3150       CLR.L      D2
000022D6                          3151       
000022D6  143C 001C               3152       MOVE.B     #28, D2
000022DA                          3153  
000022DA  E4AE                    3154       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
000022DC                          3155       
000022DC  BC3C 000A               3156       CMP.B      #10, D6
000022E0                          3157       
000022E0  6C00 0006               3158       BGE        LETTER_1_ZERO                  * determine if a letter or a number
000022E4                          3159       
000022E4  6000 000C               3160       BRA        NUMBER_1_ZERO
000022E8                          3161       
000022E8                          3162  LETTER_1_ZERO
000022E8  0606 0037               3163       ADD.B      #55, D6
000022EC                          3164       
000022EC  1206                    3165       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000022EE                          3166       
000022EE  6000 000C               3167       BRA        PRINTOUT_NIBBLE_ZERO
000022F2                          3168  
000022F2                          3169  NUMBER_1_ZERO    
000022F2  0606 0030               3170       ADD.B      #48, D6
000022F6                          3171       
000022F6  1206                    3172       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000022F8                          3173       
000022F8  6000 0002               3174       BRA        PRINTOUT_NIBBLE_ZERO
000022FC                          3175  
000022FC                          3176  
000022FC                          3177  PRINTOUT_NIBBLE_ZERO
000022FC  E98D                    3178      LSL.L      #4, D5                   * shift out the nibble you just read from the source
000022FE                          3179      
000022FE  5203                    3180      ADD.B      #1, D3            
00002300                          3181      
00002300  103C 0006               3182      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
00002304                          3183      
00002304  4E4F                    3184      TRAP #15
00002306                          3185       
00002306  B63C 0008               3186      CMP.B      #8, D3                   * compare to the counter to check if you are done
0000230A                          3187       
0000230A  6700 01FE               3188      BEQ        DONE
0000230E                          3189      
0000230E  60C2                    3190      BRA LOOP_ZERO                            * continue the loop and print next nibble
00002310                          3191          
00002310                          3192  
00002310                          3193       
00002310                          3194  PRINT_ZERO
00002310  123C 0030               3195      MOVE.B      #$30, D1
00002314                          3196  
00002314  103C 0006               3197      MOVE.B      #6, D0  
00002318                          3198  
00002318  4E4F                    3199      TRAP #15 
0000231A                          3200  
0000231A  6000 01EE               3201      BRA DONE  
0000231E                          3202  
0000231E                          3203  
0000231E                          3204      *SIMHALT             ; halt simulator
0000231E                          3205  
0000231E                          3206  
0000231E                          3207      *END    START       ; last line of source
0000231E                          3208  -------------------- end include --------------------
0000231E                          3209                  INCLUDE 'JUMPTABLE-EA.X68'
0000231E                          3210   *ORG     $400
0000231E                          3211  
0000231E                          3212  
0000231E                          3213  
0000231E                          3214  
0000231E                          3215  
0000231E                          3216                 *MOVE.B       #%00, D5         *SIZE
0000231E                          3217                
0000231E                          3218                 *MOVE.B       #%111,D6         *MODE
0000231E                          3219                 
0000231E                          3220                 *MOVE.B       #%100,D7         *REGISTER
0000231E                          3221                 
0000231E                          3222                 *MOVE.L       #$4000, A5
0000231E                          3223  
0000231E                          3224                 *MOVE.B       #$0040, (A5)  
0000231E                          3225  PRINT_EA 
0000231E                          3226                 
0000231E  41F9 0000232C           3227                 LEA     jmp_table_ea,A0      *Index into the table
00002324                          3228  
00002324  CCFC 0006               3229                 MULU        #6,D6            *Form offset     
00002328                          3230  
00002328  4EF0 6000               3231                 JMP         0(A0,D6)         *Jump indirect with index
0000232C                          3232   
0000232C  4EF9 0000235C           3233  jmp_table_ea   JMP         code000
00002332                          3234  
00002332  4EF9 00002360           3235                 JMP         code001
00002338                          3236  
00002338  4EF9 00002364           3237                 JMP         code010
0000233E                          3238  
0000233E  4EF9 00002368           3239                 JMP         code011
00002344                          3240  
00002344  4EF9 0000236C           3241                 JMP         code100
0000234A                          3242  
0000234A  4EF9 00002370           3243                 JMP         code101
00002350                          3244  
00002350  4EF9 00002374           3245                 JMP         code110
00002356                          3246  
00002356  4EF9 00002378           3247                 JMP         code111
0000235C                          3248          
0000235C                          3249  
0000235C                          3250   
0000235C                          3251  
0000235C                          3252  
0000235C                          3253   
0000235C                          3254  
0000235C                          3255   
0000235C                          3256  
0000235C  6000 001E               3257  code000       BRA         DATA_REGISTER
00002360                          3258  
00002360  6000 0036               3259  code001       BRA         ADDRESS_REGISTER
00002364                          3260  
00002364  6000 004E               3261  code010       BRA         INDIRECT_ADDRESS
00002368                          3262  
00002368  6000 0074               3263  code011       BRA         ADDRESS_PI    * post increment
0000236C                          3264  
0000236C  6000 009A               3265  code100       BRA         ADDRESS_PD    * pre decrement
00002370                          3266  
00002370  6000 00C0               3267  code101       BRA         ADDRESS_W_DISPLACEMENT
00002374                          3268  
00002374  6000 00C0               3269  code110       BRA         ADDRESS_W_INDEX
00002378                          3270  
00002378  6000 00C0               3271  code111       BRA         GROUP_111
0000237C                          3272  
0000237C                          3273   
0000237C                          3274  DATA_REGISTER
0000237C                          3275  
0000237C  43F9 0000269B           3276              LEA D_REGISTER, A1
00002382                          3277              
00002382  4280                    3278              CLR.L D0
00002384                          3279              
00002384  103C 000E               3280              MOVE.B #14, D0
00002388                          3281              
00002388  4E4F                    3282              TRAP #15                * print out 'D' for data register
0000238A                          3283              
0000238A  4281                    3284              CLR.L D1
0000238C                          3285              
0000238C  1207                    3286              MOVE.B D7, D1
0000238E                          3287              
0000238E  103C 0003               3288              MOVE.B #3, D0           * print out the number in the register
00002392                          3289              
00002392  4E4F                    3290              TRAP #15
00002394                          3291              
00002394  6000 0174               3292              BRA DONE
00002398                          3293              
00002398                          3294  
00002398                          3295  ADDRESS_REGISTER
00002398  43F9 0000269D           3296              LEA A_REGISTER, A1
0000239E                          3297              
0000239E  4280                    3298              CLR.L D0
000023A0                          3299              
000023A0  103C 000E               3300              MOVE.B #14, D0          * print out the 'A' for address register
000023A4                          3301              
000023A4  4E4F                    3302              TRAP #15
000023A6                          3303              
000023A6  4281                    3304              CLR.L D1
000023A8                          3305              
000023A8  1207                    3306              MOVE.B D7, D1
000023AA                          3307              
000023AA  103C 0003               3308              MOVE.B #3, D0
000023AE                          3309              
000023AE  4E4F                    3310              TRAP #15                * print out the value in the data register
000023B0                          3311  
000023B0  6000 0158               3312              BRA DONE
000023B4                          3313              
000023B4                          3314  INDIRECT_ADDRESS
000023B4  43F9 0000269F           3315              LEA IA_START, A1
000023BA                          3316              
000023BA  4280                    3317              CLR.L D0
000023BC                          3318              
000023BC  103C 000E               3319              MOVE.B #14, D0          * print out the '(A' for start of indirect address register
000023C0                          3320              
000023C0  4E4F                    3321              TRAP #15
000023C2                          3322              
000023C2  4281                    3323              CLR.L D1
000023C4                          3324              
000023C4  1207                    3325              MOVE.B D7, D1
000023C6                          3326              
000023C6  103C 0003               3327              MOVE.B #3, D0
000023CA                          3328              
000023CA  4E4F                    3329              TRAP #15                * print out the value in the data register
000023CC                          3330              
000023CC  43F9 000026A2           3331              LEA IA_END, A1
000023D2                          3332  
000023D2  4280                    3333              CLR.L D0
000023D4                          3334              
000023D4  103C 000E               3335              MOVE.B #14, D0          * print out the ')' for end of post increment address register
000023D8                          3336              
000023D8  4E4F                    3337              TRAP #15
000023DA                          3338              
000023DA  6000 012E               3339              BRA DONE
000023DE                          3340  
000023DE                          3341  ADDRESS_PI
000023DE  43F9 000026A4           3342              LEA A_PI_START, A1
000023E4                          3343              
000023E4  4280                    3344              CLR.L D0
000023E6                          3345              
000023E6  103C 000E               3346              MOVE.B #14, D0          * print out the '(A' for start of post increment address register
000023EA                          3347              
000023EA  4E4F                    3348              TRAP #15
000023EC                          3349              
000023EC  4281                    3350              CLR.L D1
000023EE                          3351              
000023EE  1207                    3352              MOVE.B D7, D1
000023F0                          3353              
000023F0  103C 0003               3354              MOVE.B #3, D0
000023F4                          3355              
000023F4  4E4F                    3356              TRAP #15                * print out the value in the data register
000023F6                          3357              
000023F6  43F9 000026A7           3358              LEA A_PI_END, A1
000023FC                          3359  
000023FC  4280                    3360              CLR.L D0
000023FE                          3361              
000023FE  103C 000E               3362              MOVE.B #14, D0          * print out the ')+' for end of post increment address register
00002402                          3363     
00002402  4E4F                    3364              TRAP #15
00002404                          3365              
00002404  6000 0104               3366              BRA DONE  
00002408                          3367         
00002408                          3368  ADDRESS_PD
00002408                          3369  
00002408  43F9 000026AA           3370              LEA A_PD_START, A1
0000240E                          3371              
0000240E  4280                    3372              CLR.L D0
00002410                          3373              
00002410  103C 000E               3374              MOVE.B #14, D0          * print out the '-(A' for start of pre decrement address register
00002414                          3375              
00002414  4E4F                    3376              TRAP #15
00002416                          3377              
00002416  4281                    3378              CLR.L D1
00002418                          3379              
00002418  1207                    3380              MOVE.B D7, D1
0000241A                          3381              
0000241A  103C 0003               3382              MOVE.B #3, D0
0000241E                          3383              
0000241E  4E4F                    3384              TRAP #15                * print out the value in the data register
00002420                          3385              
00002420  43F9 000026AE           3386              LEA A_PD_END, A1
00002426                          3387  
00002426  4280                    3388              CLR.L D0
00002428                          3389              
00002428  103C 000E               3390              MOVE.B #14, D0          * print out the ')-' for end of pre decrement
0000242C                          3391  
0000242C  4E4F                    3392              TRAP #15
0000242E                          3393              
0000242E  6000 00DA               3394              BRA DONE
00002432                          3395              
00002432                          3396  ADDRESS_W_DISPLACEMENT
00002432  6000 00D6               3397              BRA DONE
00002436                          3398  
00002436                          3399  ADDRESS_W_INDEX
00002436  6000 00D2               3400              BRA DONE
0000243A                          3401  
0000243A                          3402  GROUP_111
0000243A                          3403  
0000243A  41F9 00002448           3404                 LEA         jmp_table_ea_111,A0    *Index into the table
00002440                          3405  
00002440  CEFC 0006               3406                 MULU        #6,D7       *Form offset     
00002444                          3407  
00002444  4EF0 7000               3408                 JMP         0(A0,D7)   *Jump indirect with index
00002448                          3409                 
00002448                          3410  jmp_table_ea_111   
00002448  4EF9 0000246E           3411                 JMP         reg000
0000244E                          3412  
0000244E  4EF9 00002472           3413                 JMP         reg001
00002454                          3414  
00002454  4EF9 00002466           3415                 JMP         reg010
0000245A                          3416  
0000245A  4EF9 0000246A           3417                 JMP         reg011
00002460                          3418  
00002460  4EF9 00002476           3419                 JMP         reg100
00002466                          3420          
00002466                          3421  
00002466  6000 0012               3422  reg010       BRA         PC_W_DISPLACEMENT
0000246A                          3423  
0000246A  6000 0012               3424  reg011       BRA         PC_W_INDEX
0000246E                          3425  
0000246E  6000 0012               3426  reg000       BRA         ABSOLUTE_SHORT
00002472                          3427  
00002472  6000 002C               3428  reg001       BRA         ABSOLUTE_LONG
00002476                          3429  
00002476  6000 0046               3430  reg100       BRA         IMMEDIATE
0000247A                          3431  
0000247A                          3432  
0000247A                          3433  PC_W_DISPLACEMENT
0000247A  6000 008E               3434              BRA DONE
0000247E                          3435  
0000247E                          3436  PC_W_INDEX
0000247E  6000 008A               3437              BRA DONE
00002482                          3438  
00002482                          3439  ABSOLUTE_SHORT
00002482  43F9 00002692           3440              LEA         HEX_SIGN, A1
00002488                          3441              
00002488  103C 000E               3442              MOVE.B      #14, D0
0000248C                          3443              
0000248C  4E4F                    3444              TRAP #15
0000248E                          3445              
0000248E  4281                    3446              CLR.L       D1
00002490                          3447              
00002490  321E                    3448              MOVE.W      (A6)+, D1
00002492                          3449              
00002492  103C 000F               3450              MOVE.B      #15, D0
00002496                          3451              
00002496  143C 0010               3452              MOVE.B      #16, D2
0000249A                          3453              
0000249A  4E4F                    3454              TRAP #15
0000249C                          3455              
0000249C  6000 006C               3456              BRA DONE  
000024A0                          3457  
000024A0                          3458  
000024A0                          3459  ABSOLUTE_LONG
000024A0  43F9 00002692           3460              LEA         HEX_SIGN, A1
000024A6                          3461              
000024A6  103C 000E               3462              MOVE.B      #14, D0
000024AA                          3463              
000024AA  4E4F                    3464              TRAP #15
000024AC                          3465              
000024AC  4281                    3466              CLR.L       D1
000024AE                          3467              
000024AE  221E                    3468              MOVE.L      (A6)+, D1
000024B0                          3469              
000024B0  103C 000F               3470              MOVE.B      #15, D0
000024B4                          3471              
000024B4  143C 0010               3472              MOVE.B      #16, D2
000024B8                          3473              
000024B8  4E4F                    3474              TRAP #15
000024BA                          3475                          
000024BA  6000 004E               3476              BRA DONE  
000024BE                          3477  
000024BE                          3478  
000024BE                          3479  IMMEDIATE
000024BE  43F9 00002690           3480              LEA     POUND_SIGN, A1
000024C4                          3481              
000024C4  103C 000E               3482              MOVE.B  #14, D0
000024C8                          3483              
000024C8  4E4F                    3484              TRAP #15
000024CA                          3485              
000024CA  43F9 00002692           3486              LEA     HEX_SIGN, A1
000024D0                          3487              
000024D0  4E4F                    3488              TRAP #15
000024D2                          3489              
000024D2  BA3C 0000               3490              CMP.B   #%00, D5
000024D6                          3491              
000024D6  6700 000E               3492              BEQ     IMMEDIATE_B
000024DA                          3493              
000024DA  BA3C 0001               3494              CMP.B   #%01, D5
000024DE                          3495              
000024DE  6700 0012               3496              BEQ     IMMEDIATE_W
000024E2                          3497              
000024E2  6000 001A               3498              BRA     IMMEDIATE_L
000024E6                          3499              
000024E6                          3500  IMMEDIATE_B
000024E6  4285                    3501              CLR.L       D5
000024E8                          3502     
000024E8  3A1E                    3503              MOVE.W      (A6)+, D5
000024EA                          3504              
000024EA  4EB8 2280               3505              JSR         HEX_TO_ASCII
000024EE                          3506              
000024EE  6000 001A               3507              BRA DONE
000024F2                          3508  
000024F2                          3509  IMMEDIATE_W
000024F2  4285                    3510              CLR.L       D5
000024F4                          3511  
000024F4  3A1E                    3512              MOVE.W      (A6)+, D5
000024F6                          3513              
000024F6  4EB8 2280               3514              JSR         HEX_TO_ASCII
000024FA                          3515              
000024FA                          3516              *MOVE.B      #15, D0
000024FA                          3517              
000024FA                          3518              *MOVE.B      #16, D2
000024FA                          3519              
000024FA                          3520              *TRAP #15 
000024FA                          3521              
000024FA  6000 000E               3522              BRA DONE        
000024FE                          3523  
000024FE                          3524  IMMEDIATE_L 
000024FE  4285                    3525              CLR.L       D5
00002500                          3526              
00002500  2A1E                    3527              MOVE.L      (A6)+, D5
00002502                          3528      
00002502  4EB8 2280               3529              JSR         HEX_TO_ASCII
00002506                          3530              
00002506  6000 0002               3531              BRA DONE
0000250A                          3532              
0000250A                          3533  DONE 
0000250A  4E75                    3534      RTS
0000250C                          3535      
0000250C                          3536   * INCLUDE 'MESSAGE_Data.X68'
0000250C                          3537   * INCLUDE 'HEX_TO_ASCII_V1.X68'
0000250C                          3538       
0000250C                          3539          
0000250C                          3540  
0000250C                          3541  
0000250C                          3542  
0000250C                          3543  
0000250C                          3544  
0000250C                          3545  
0000250C                          3546  
0000250C                          3547  
0000250C                          3548  -------------------- end include --------------------
0000250C                          3549                  
0000250C  4EF8 10D8               3550                  JMP      PARSE_MEMORY
00002510                          3551                  
00002510                          3552  PRESS_ENTER_CONTINUE
00002510  267C 00000000           3553                   MOVEA.L  #outputCountCurr, A3  *reset to 0
00002516  43F9 000025B1           3554                   LEA ENTER, A1
0000251C  103C 000E               3555                   MOVE.B #14, D0
00002520  4E4F                    3556                   TRAP #15
00002522                          3557                   
00002522  103C 0005               3558                   MOVE.B #5, D0
00002526  4E4F                    3559                   TRAP #15
00002528                          3560                   
00002528  B23C 000D               3561                   CMP.B #$D, D1
0000252C                          3562  
0000252C  103C 000B               3563                   MOVE.B #11, D0   *clear display
00002530  323C FF00               3564                   MOVE.W #$FF00, D1
00002534  4E4F                    3565                   TRAP #15
00002536                          3566  
00002536  4EF8 10FC               3567                   JMP CONTINUE_PARSE
0000253A                          3568                  
0000253A                          3569                 
0000253A                          3570                  
0000253A                          3571  STOP
0000253A                          3572  
0000253A                          3573  
0000253A                          3574  
0000253A                          3575  
0000253A                          3576  
0000253A                          3577  
0000253A                          3578  
0000253A                          3579  
0000253A                          3580  
0000253A                          3581  
0000253A                          3582  
0000253A                          3583  
0000253A                          3584  
0000253A                          3585  
0000253A                          3586  
0000253A                          3587  
0000253A                          3588  
0000253A                          3589  
0000253A                          3590  
0000253A                          3591  
0000253A                          3592  
0000253A                          3593  
0000253A                          3594  
0000253A                          3595  -------------------- end include --------------------
0000253A                          3596  
0000253A  FFFF FFFF               3597      SIMHALT             ; halt simulator
0000253E                          3598  
0000253E                          3599      INCLUDE 'DS_Data.X68' * STARTING_ADDR ** ENDING_ADDR
0000253E                          3600  
0000253E                          3601  STARTING_ADDR   DS.L 1
00002542                          3602  
00002542                          3603  ENDING_ADDR     DS.L 1
00002542                          3604  -------------------- end include --------------------
00002546                          3605      INCLUDE 'MESSAGE_Data.X68' 
00002546                          3606  
00002546  =0000000D               3607  CR  EQU $0D
00002546  =0000000A               3608  LF  EQU $0A 
00002546                          3609  
00002546= 57 65 6C 63 6F 6D ...   3610  WELCOME_MESSAGE DC.B 'Welcome to our Team wild pokemon disassembly!!', CR, LF, 0
00002577= 45 6E 74 65 72 20 ...   3611  STARTING        DC.B 'Enter the starting location: ', 0
00002595= 45 6E 74 65 72 20 ...   3612  ENDING          DC.B 'Enter the ending locaiton: ', 0
000025B1= 45 6E 74 65 72 20 ...   3613  ENTER           DC.B 'Enter to continue ', 0
000025C4= 0D 0A 00                3614  CR_LF           DC.B '', CR, LF, 0
000025C7                          3615      
000025C7= 41 44 44 49 2E 00       3616  ADDI_MESSAGE    DC.B 'ADDI.',0
000025CD= 4D 4F 56 45 41 2E 00    3617  MOVEA_MESSAGE   DC.B 'MOVEA.',0
000025D4= 4D 4F 56 45 2E 00       3618  MOVE_MESSAGE    DC.B 'MOVE.',0
000025DA= 4E 4F 50 00             3619  NOP_MESSAGE     DC.B 'NOP',0
000025DE= 4D 4F 56 45 4D 2E 00    3620  MOVEM_MESSAGE   DC.B 'MOVEM.',0
000025E5= 4A 53 52 00             3621  JSR_MESSAGE     DC.B 'JSR',0
000025E9= 52 54 53 00             3622  RTS_MESSAGE     DC.B 'RTS',0
000025ED= 43 4C 52 00             3623  CLR_MESSAGE     DC.B 'CLR',0
000025F1= 41 44 44 51 2E 00       3624  ADDQ_MESSAGE    DC.B 'ADDQ.',0
000025F7                          3625  
000025F7= 42 43 43 00             3626  BCC_MESSAGE     DC.B 'BCC',0   *//
000025FB= 42 45 51 00             3627  BEQ_MESSAGE     DC.B 'BEQ',0   *//
000025FF= 42 4E 45 00             3628  BNE_MESSAGE     DC.B 'BNE',0   *//
00002603= 42 43 53 00             3629  BCS_MESSAGE     DC.B 'BCS',0   *//
00002607= 42 47 45 00             3630  BGE_MESSAGE     DC.B 'BGE',0   *//
0000260B= 42 47 54 00             3631  BGT_MESSAGE     DC.B 'BGT',0   *//
0000260F= 42 48 49 00             3632  BHI_MESSAGE     DC.B 'BHI',0   *//
00002613= 42 4C 45 00             3633  BLE_MESSAGE     DC.B 'BLE',0   *//
00002617= 42 4C 53 00             3634  BLS_MESSAGE     DC.B 'BLS',0   *//
0000261B= 42 4C 54 00             3635  BLT_MESSAGE     DC.B 'BLT',0   *//
0000261F= 42 4D 49 00             3636  BMI_MESSAGE     DC.B 'BMI',0   *//
00002623= 42 50 4C 00             3637  BPL_MESSAGE     DC.B 'BPL',0   *//
00002627= 42 56 43 00             3638  BVC_MESSAGE     DC.B 'BVC',0   *//
0000262B= 42 56 53 00             3639  BVS_MESSAGE     DC.B 'BVS',0   *//
0000262F                          3640  
0000262F= 4D 4F 56 45 51 2E 00    3641  MOVEQ_MESSAGE   DC.B 'MOVEQ.',0
00002636= 44 49 56 55 2E 00       3642  DIVU_MESSAGE    DC.B 'DIVU.',0
0000263C= 4F 52 2E 00             3643  OR_MESSAGE      DC.B 'OR.',0
00002640= 53 55 42 2E 00          3644  SUB_MESSAGE     DC.B 'SUB.',0
00002645= 43 4D 50 2E 00          3645  CMP_MESSAGE     DC.B 'CMP.',0
0000264A= 4D 55 4C 53 2E 00       3646  MULS_MESSAGE    DC.B 'MULS.',0
00002650= 41 4E 44 2E 00          3647  AND_MESSAGE     DC.B 'AND.',0
00002655= 41 44 44 2E 00          3648  ADD_MESSAGE     DC.B 'ADD.',0
0000265A= 41 44 44 41 2E 00       3649  ADDA_MESSAGE    DC.B 'ADDA.',0
00002660= 4C 53 4C 2E 00          3650  LSL_MESSAGE     DC.B 'LSL.',0 *//
00002665= 41 53 4C 2E 00          3651  ASL_MESSAGE     DC.B 'ASL.',0
0000266A= 52 4F 4C 2E 00          3652  ROL_MESSAGE     DC.B 'ROL.',0
0000266F= 4C 53 52 2E 00          3653  LSR_MESSAGE     DC.B 'LSR.',0 *//
00002674= 41 53 52 2E 00          3654  ASR_MESSAGE     DC.B 'ASR.',0
00002679= 52 4F 52 2E 00          3655  ROR_MESSAGE     DC.B 'ROR.',0
0000267E= 42 20 20 20 20 00       3656  SIZE_B_PRINT    DC.B 'B    ',0
00002684= 57 20 20 20 20 00       3657  SIZE_W_PRINT    DC.B 'W    ',0
0000268A= 4C 20 20 20 20 00       3658  SIZE_L_PRINT    DC.B 'L    ',0
00002690= 23 00                   3659  POUND_SIGN      DC.B '#',0
00002692= 24 00                   3660  HEX_SIGN        DC.B '$',0
00002694= 2E 00                   3661  PERIOD          DC.B '.',0
00002696= 20 20 00                3662  SPACE           DC.B '  ',0
00002699= 2F 00                   3663  SLASH           DC.B '/', 0
0000269B                          3664  
0000269B= 44 00                   3665  D_REGISTER      DC.B 'D',0
0000269D= 41 00                   3666  A_REGISTER      DC.B 'A',0
0000269F= 28 41 00                3667  IA_START        DC.B '(A',0
000026A2= 29 00                   3668  IA_END          DC.B ')',0
000026A4= 28 41 00                3669  A_PI_START      DC.B '(A',0
000026A7= 29 2B 00                3670  A_PI_END        DC.B ')+',0
000026AA= 2D 28 41 00             3671  A_PD_START      DC.B '-(A',0
000026AE= 29 00                   3672  A_PD_END        DC.B ')',0
000026B0= 2C 20 00                3673  COMMA           DC.B ', ',0
000026B3                          3674  
000026B3                          3675  
000026B3                          3676  
000026B3                          3677  
000026B3                          3678  
000026B3                          3679  
000026B3                          3680  
000026B3                          3681  
000026B3                          3682  
000026B3                          3683  
000026B3                          3684  
000026B3                          3685  
000026B3                          3686  
000026B3                          3687  
000026B3                          3688  -------------------- end include --------------------
000026B3                          3689      *MOVE.B    #3, D2
000026B3                          3690      *MOVE.B    #0, D5
000026B4  307C 0400               3691      MOVEA.W   #$400, A0
000026B8                          3692      
000026B8                          3693      
000026B8                          3694      
000026B8                          3695  
000026B8                          3696      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_LONG       24A0
ABSOLUTE_SHORT      2482
ADDA_CODE           1F0A
ADDA_MESSAGE        265A
ADDI                11BE
ADDI_B_SIZE         122E
ADDI_EA             128E
ADDI_MESSAGE        25C7
ADDI_W_SIZE         125E
ADDQ                139C
ADDQB               13D0
ADDQL               13FC
ADDQW               13E6
ADDQ_MESSAGE        25F1
ADDRESS_PD          2408
ADDRESS_PI          23DE
ADDRESS_REGISTER    2398
ADDRESS_W_DISPLACEMENT  2432
ADDRESS_W_INDEX     2436
ADD_ADDA            1EF6
ADD_CODE            1F76
ADD_FIRST_EA        1FBC
ADD_MESSAGE         2655
AND_CODE            169A
AND_FIRST_EA        16E0
AND_MESSAGE         2650
ASD                 1CBA
ASD_MEMORY          1D14
ASL                 1CD0
ASL_MESSAGE         2665
ASR                 1CF2
ASR_MESSAGE         2674
A_16_BIT            2264
A_32_BIT            2272
A_PD_END            26AE
A_PD_START          26AA
A_PI_END            26A7
A_PI_START          26A4
A_REGISTER          269D
BCC_MESSAGE         25F7
BCS_MESSAGE         2603
BEQ_MESSAGE         25FB
BGE_MESSAGE         2607
BGT_MESSAGE         260B
BHI_MESSAGE         260F
BIT0                1A4A
BIT1                1A5A
BIT10               1AE8
BIT11               1AF8
BIT12               1B08
BIT13               1B18
BIT14               1B28
BIT15               1B38
BIT2                1A68
BIT3                1A78
BIT4                1A88
BIT5                1A98
BIT6                1AA8
BIT7                1AB8
BIT8                1AC8
BIT9                1AD8
BLE_MESSAGE         2613
BLS_MESSAGE         2617
BLT_MESSAGE         261B
BMI_MESSAGE         261F
BNE_MESSAGE         25FF
BPL_MESSAGE         2623
BVC_MESSAGE         2627
BVS_MESSAGE         262B
CC                  2114
CHAR                10A0
CHECK               199C
CHECK_SECOND        19AE
CLR_MESSAGE         25ED
CLR_OPCODE          14A4
CMP                 12D8
CMP_MESSAGE         2645
CODE000             235C
CODE0000            117E
CODE0001            1182
CODE001             2360
CODE0010            1186
CODE0011            118A
CODE010             2364
CODE0100            118E
CODE0101            1192
CODE011             2368
CODE0110            1196
CODE0111            119A
CODE100             236C
CODE1000            119E
CODE1001            11A2
CODE101             2370
CODE1010            11A6
CODE1011            11AA
CODE110             2374
CODE1100            11AE
CODE1101            11B2
CODE111             2378
CODE1110            11B6
CODE1111            11BA
COMMA               26B0
CONTINUE_PARSE      10FC
CONVERT_STRING      107E
CR                  D
CR_LF               25C4
CS                  2118
DATA_REGISTER       237C
DIRECTION_LEFT      1
DIRECTION_RIGHT     0
DISPLACEMENT        2220
DIVU_CODE           1552
DIVU_MESSAGE        2636
DIVU_OR             153E
DONE                250A
DONE_MOVEM_LOOP     1B48
DONE_PRINTING       200C
DR_FIELD            173C
D_REGISTER          269B
ENDCONV             10C2
ENDING              2595
ENDING_ADDR         2542
ENDING_MESSAGE      103C
ENTER               25B1
EQ                  2120
ERROR               10C2
EXAMPLE             606
EXAMPLE1            DE61
FINISH_PRINTING_SIZE  1F2C
GE                  2134
GET_DATA_REGISTER   204C
GET_SIZE_PURPLE     1FDE
GO_THROUGH_MEMORY   10C4
GROUP_0100_CODE     1600
GROUP_111           243A
GT                  213C
HEX_SIGN            2692
HEX_TO_ASCII        2280
HI                  210C
IA_END              26A2
IA_START            269F
IMMEDIATE           24BE
IMMEDIATE_B         24E6
IMMEDIATE_L         24FE
IMMEDIATE_W         24F2
INDIRECT_ADDRESS    23B4
IS_USED             19C2
IS_USED_FIRST       19B8
JMP_TABLE           111E
JMP_TABLE_BCC       20A8
JMP_TABLE_EA        232C
JMP_TABLE_EA_111    2448
JMP_TABLE_MOVEM     19EA
JSR_MESSAGE         25E5
JSR_OPCODE          146E
LE                  2140
LETTER_1            22A2
LETTER_1_ZERO       22E8
LF                  A
LOOP                228C
LOOP_MOVEM          1994
LOOP_MOVEM_SECOND   19A6
LOOP_ZERO           22D2
LS                  2110
LSD                 1BC6
LSD_MEMORY          1C36
LSL                 1BF2
LSL_MESSAGE         2660
LSR                 1C14
LSR_MESSAGE         266F
LT                  2138
MAX_USER_INPUT      8
MEMORY_REGISTER     1796
MI                  2130
MODE_AL             7
MODE_AN             1
MODE_AS             7
MODE_AWD            5
MODE_AWI            6
MODE_DN             0
MODE_IAN            2
MODE_ID             7
MODE_M_DN           0
MODE_M_PDAN         1
MODE_PCWD           7
MODE_PCWI           7
MODE_PDAN           4
MODE_PIAN           3
MOVEAL              1E88
MOVEAW              1E6E
MOVEA_MESSAGE       25CD
MOVEB               1DF4
MOVEL               1E3E
MOVEM_MESSAGE       25DE
MOVEM_OPCODE        1706
MOVEQ               1B4A
MOVEQ_MESSAGE       262F
MOVEW               1E0E
MOVE_MESSAGE        25D4
MULS_AND            1648
MULS_CODE           165C
MULS_MESSAGE        264A
NE                  211C
NEXT_INSTRUCTION    1104
NOP_MESSAGE         25DA
NOP_OPCODE          144E
NOT_EXIST           2108
NUMBER              1090
NUMBER_1            22AC
NUMBER_1_ZERO       22F2
OPPOSITE_BIT0       1894
OPPOSITE_BIT1       18A4
OPPOSITE_BIT10      1934
OPPOSITE_BIT11      1944
OPPOSITE_BIT12      1954
OPPOSITE_BIT13      1964
OPPOSITE_BIT14      1974
OPPOSITE_BIT15      1984
OPPOSITE_BIT2       18B4
OPPOSITE_BIT3       18C4
OPPOSITE_BIT4       18D4
OPPOSITE_BIT5       18E4
OPPOSITE_BIT6       18F4
OPPOSITE_BIT7       1904
OPPOSITE_BIT8       1914
OPPOSITE_BIT9       1924
OPPOSITE_CHECK      17E6
OPPOSITE_CHECK_SECOND  17F8
OPPOSITE_IS_USED    180C
OPPOSITE_IS_USED_FIRST  1802
OPPOSITE_JMP_TABLE_MOVEM  1834
OPPOSITE_LOOP       17D0
OPPOSITE_LOOP_MOVEM  17DE
OPPOSITE_LOOP_MOVEM_SECOND  17F0
OPPOSITE_PRINT_REGISTER_MOVEM  1822
OR_CODE             1594
OR_FIRST_EA         15DA
OR_MESSAGE          263C
OUTPUTCOUNTCURR     0
OUTPUTCOUNTMAX      1F
PARSE_MEMORY        10D8
PARSE_MEMORY_FIRST  10E6
PC_W_DISPLACEMENT   247A
PC_W_INDEX          247E
PERIOD              2694
PL                  212C
POUND_SIGN          2690
PRESS_ENTER_CONTINUE  2510
PRINTADDQ           1412
PRINTOUT_COUNT      1D44
PRINTOUT_MEMORY_SHIFTS_EA  1DC4
PRINTOUT_MOVE_EA    1EA2
PRINTOUT_NIBBLE     22B6
PRINTOUT_NIBBLE_ZERO  22FC
PRINTOUT_REGISTER   1D88
PRINTOUT_REGISTER_SHIFTS_EA  1D1E
PRINTOUT_SIZE_L     1F64
PRINTOUT_SIZE_PURPLE  1FF4
PRINTOUT_SIZE_W     1F52
PRINT_ADDRESS       1770
PRINT_B             200E
PRINT_BCC           2164
PRINT_BCS           2174
PRINT_BEQ           2194
PRINT_BGE           21E4
PRINT_BGT           2204
PRINT_BHI           2144
PRINT_BLE           2214
PRINT_BLS           2154
PRINT_BLT           21F4
PRINT_BMI           21D4
PRINT_BNE           2184
PRINT_BPL           21C4
PRINT_BVC           21A4
PRINT_BVS           21B4
PRINT_COMMA         203E
PRINT_EA            231E
PRINT_L             202E
PRINT_REGISTER_MOVEM  19D8
PRINT_SIZE          14E8
PRINT_SIZE_L_MOVEM  1730
PRINT_SUB_CMP       1354
PRINT_W             201E
PRINT_ZERO          2310
REG000              246E
REG001              2472
REG010              2466
REG011              246A
REG100              2476
REGITSET_MEMORY     174E
ROD                 1C40
ROD_MEMORY          1CB0
ROL                 1C6C
ROL_MESSAGE         266A
ROR                 1C8E
ROR_MESSAGE         2679
RO_IMMEDATE         0
RO_REGISTER         1
RTS                 1A68
RTS_MESSAGE         25E9
RTS_OPCODE          145E
SET_EA              205E
SHIFT               C
SHIFTS              1BA4
SIZE_B              1520
SIZE_BYTE           0
SIZE_B_PRINT        267E
SIZE_L              1534
SIZE_LONG           3
SIZE_L_PRINT        268A
SIZE_W              152A
SIZE_WORD           1
SIZE_W_PRINT        2684
SLASH               2699
SPACE               2696
START               1000
STARTING            2577
STARTING_ADDR       253E
STARTING_MESSAGE    100C
STOP                253A
STORE_ADDR          10B0
SUB                 12C6
SUB_CMP             12EA
SUB_CMP_B           1312
SUB_CMP_L           133E
SUB_CMP_W           1328
SUB_MESSAGE         2640
VC                  2124
VS                  2128
WELCOME_MESSAGE     2546
XN_AL               1
XN_AS               0
XN_ID               4
XN_PCWD             2
XN_PCWI             3
