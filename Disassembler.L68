00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/3/16 7:58:16 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Dissassembler Integration
00000000                             3  * Written by : Samuel Williams
00000000                             4  * Date       : 5/25/2016
00000000                             5  * Description: The file which includes all files
00000000                             6  *              to create a complete dissassembler 
00000000                             7  *-----------------------------------------------------------
00001000                             8      ORG    $1000
00001000                             9  START:                  ; first instruction of program
00001000                            10      
00001000                            11      *INCLUDE 'TEST_CODE_DAMIAN.X68'
00001000                            12      INCLUDE 'EQU_Data.X68'
00001000                            13  
00001000                            14  
00001000  =00000008                 15  MAX_USER_INPUT  EQU 8 
00001000                            16  
00001000                            17  
00001000  =00000606                 18  example          EQU     %0000011000000110
00001000                            19  
00001000  =0000DE61                 20  example1         EQU     %1101111001100001    * I made up bits 0 to 11      
00001000                            21  
00001000  =0000000C                 22  shift            EQU     12                   * Shift 12 bits 
00001000                            23  
00001000  =00000000                 24  mode_dn          EQU     %000
00001000                            25  
00001000  =00000001                 26  mode_an          EQU     %001
00001000                            27  
00001000  =00000002                 28  mode_ian         EQU     %010
00001000                            29  
00001000  =00000003                 30  mode_pian        EQU     %011
00001000                            31  
00001000  =00000004                 32  mode_pdan        EQU     %100
00001000                            33  
00001000  =00000005                 34  mode_awd         EQU     %101
00001000                            35  
00001000  =00000006                 36  mode_awi         EQU     %110
00001000                            37  
00001000  =00000007                 38  mode_pcwd        EQU     %111
00001000                            39  
00001000  =00000002                 40  xn_pcwd          EQU     %010
00001000                            41  
00001000  =00000007                 42  mode_pcwi        EQU     %111
00001000                            43  
00001000  =00000003                 44  xn_pcwi          EQU     %011
00001000                            45  
00001000  =00000007                 46  mode_as          EQU     %111
00001000                            47  
00001000  =00000000                 48  xn_as            EQU     %000
00001000                            49  
00001000  =00000007                 50  mode_al          EQU     %111
00001000                            51  
00001000  =00000001                 52  xn_al            EQU     %001
00001000                            53  
00001000  =00000007                 54  mode_id          EQU     %111
00001000                            55  
00001000  =00000004                 56  xn_id            EQU     %100
00001000                            57  
00001000  =00000000                 58  size_byte        EQU     %00
00001000                            59  
00001000  =00000001                 60  size_word        EQU     %01
00001000                            61  
00001000  =00000003                 62  size_long        EQU     %11
00001000                            63  
00001000  =00000000                 64  direction_right  EQU     %0
00001000                            65  
00001000  =00000001                 66  direction_left   EQU     %1
00001000                            67  
00001000  =00000000                 68  ro_immedate      EQU     %0
00001000                            69  
00001000  =00000001                 70  ro_register      EQU     %1
00001000                            71  
00001000  =00000000                 72  mode_m_dn        EQU     %0
00001000                            73  
00001000  =00000001                 74  mode_m_pdan      EQU     %1
00001000                            75  
00001000  =0000001F                 76  outputCountMax   EQU     31
00001000                            77  
00001000  =00000000                 78  outputCountCurr  EQU     0
00001000                            79            
00001000  =0000000D                 80  CR  EQU $0D
00001000                            81  
00001000  =0000000A                 82  LF  EQU $0A
00001000                            83  
00001000                            84  
00001000                            85  
00001000                            86  
00001000                            87  
00001000                            88  
00001000                            89  -------------------- end include --------------------
00001000                            90      INCLUDE 'INPUT.X68'
00001000                            91      * I/O 
00001000                            92  START_OF_PROGRAM    
00001000                            93      * Welcome message
00001000  43F9 00003402             94          LEA WELCOME_MESSAGE, A1
00001006  103C 000E                 95          MOVE.B #14, D0
0000100A  4E4F                      96          TRAP #15
0000100C                            97          
0000100C                            98  STARTING_MESSAGE    
0000100C                            99      * Printing out the Starting address message
0000100C  43F9 00003433            100          LEA STARTING, A1
00001012  103C 000E                101          MOVE.B #14, D0
00001016  4E4F                     102          TRAP #15
00001018                           103      
00001018                           104      * Code for input
00001018  227C 00000200            105          MOVEA.L #$200, A1 *we have to change this addr later
0000101E  103C 0002                106          MOVE.B #2, D0
00001022  4E4F                     107          TRAP #15
00001024  143C 0008                108          MOVE.B #MAX_USER_INPUT, D2
00001028                           109      
00001028                           110      * JSR to convert string function
00001028  4EB9 0000107E            111          JSR CONVERT_STRING   
0000102E                           112      * check if the address is even number
0000102E  E25C                     113          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001030  65DA                     114          BCS STARTING_MESSAGE   *if carry is set then the user typed in an odd address
00001032  E35C                     115          ROL #1, D4     *PUT D4 BACK
00001034                           116         
00001034                           117      * store hex value of inputted string 
00001034  23C4 000033FA            118          MOVE.L D4, STARTING_ADDR 
0000103A                           119      * reset the D4
0000103A  4284                     120          CLR.L  D4
0000103C                           121          
0000103C                           122  ENDING_MESSAGE
0000103C                           123      * message user to input
0000103C  43F9 00003451            124          LEA ENDING, A1   
00001042  103C 000E                125          MOVE.B #14, D0
00001046  4E4F                     126          TRAP #15
00001048                           127      * read user input
00001048  227C 00000200            128          MOVEA.L #$200, A1 *we have to change this addr later
0000104E  103C 0002                129          MOVE.B #2, D0   
00001052  4E4F                     130          TRAP #15
00001054                           131      * counter for loop
00001054  143C 0008                132          MOVE.B #MAX_USER_INPUT, D2   
00001058                           133      * JSR to convert string function
00001058  4EB9 0000107E            134          JSR CONVERT_STRING 
0000105E                           135          
0000105E                           136      * check if the address is even number
0000105E  E25C                     137          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001060  65DA                     138          BCS ENDING_MESSAGE   *if carry is set then the user typed in an odd address
00001062  E35C                     139          ROL #1, D4     *PUT D4 BACK        
00001064                           140          
00001064                           141      * Check if the starting and ending address is the same
00001064                           142         ; CMP.L #STARTING_ADDR, D4
00001064                           143         * MOVE.L #STARTING_ADDR, D5
00001064  2C39 000033FA            144          MOVE.L STARTING_ADDR, D6
0000106A  B886                     145          CMP.L  D6, D4
0000106C  6FCE                     146          BLE   ENDING_MESSAGE
0000106E                           147      * store hex value of inputted string   
0000106E  23C4 000033FE            148          MOVE.L D4, ENDING_ADDR   
00001074                           149          
00001074                           150      * clear the unused data in the data and address regisgter
00001074  4280                     151          CLR.L D0
00001076  4284                     152          CLR.L D4
00001078                           153          
00001078                           154          * Do error handling here Sam
00001078                           155          
00001078  4EF9 000010DC            156          JMP GO_THROUGH_MEMORY
0000107E                           157      
0000107E                           158      * Get each char
0000107E                           159  CONVERT_STRING 
0000107E  1219                     160          MOVE.B (A1)+, D1
00001080                           161      
00001080                           162      * Go to next instruction for converting
00001080  B23C 0039                163          CMP.B #$39, D1
00001084  6F00 000A                164          BLE NUMBER
00001088                           165          
00001088  B23C 003A                166          CMP.B #$3A, D1
0000108C  6C00 0012                167          BGE CHAR   
00001090                           168      
00001090                           169      * Convert Ascii numbers to hex
00001090                           170  NUMBER  
00001090  B23C 002F                171          CMP.B #$2F, D1
00001094                           172      * Number is out of range
00001094  6F00 0034                173          BLE ERROR       
00001098  0401 0030                174          SUB.B #48, D1
0000109C                           175          
0000109C                           176      * Need to be changed the name of label
0000109C  6000 001A                177          BRA STORE_ADDR    
000010A0                           178      
000010A0                           179      * Convert Ascii charaters to hex
000010A0                           180  CHAR    
000010A0  B27C 0040                181          CMP #$40, D1
000010A4                           182      * Number is out of range
000010A4  6F00 0024                183          BLE ERROR
000010A8                           184          
000010A8  B27C 0047                185          CMP #$47, D1
000010AC                           186      * Number is out of range
000010AC  6C00 001C                187          BGE ERROR
000010B0                           188          
000010B0  0401 0037                189          SUB.B #55, D1
000010B4  6000 0002                190          BRA STORE_ADDR
000010B8                           191          
000010B8                           192  STORE_ADDR
000010B8                           193      * Add converted nibble to overall number
000010B8  D801                     194          ADD.B D1, D4
000010BA                           195      * Clear D1 for reuse 
000010BA  4201                     196          CLR.B D1
000010BC                           197      * Subtract from counter
000010BC  5342                     198          SUB #1, D2
000010BE                           199      * If counter is 0, we compared all 8 hex numbers
000010BE  B43C 0000                200          CMP.B #0, D2
000010C2  6700 0016                201          BEQ ENDCONV
000010C6                           202      * Shift the overall number to the left by 1 nibble, so it will fit next hex number
000010C6  E98C                     203          LSL.L #4, D4
000010C8  60B4                     204          BRA CONVERT_STRING
000010CA                           205          
000010CA                           206      * Error handling
000010CA                           207  ERROR
000010CA  43F9 00003480            208      LEA   ERROR_MSG, A1 
000010D0  103C 000E                209      MOVE.B #14, D0
000010D4  4E4F                     210      TRAP #15
000010D6  4EF8 100C                211      JMP   STARTING_MESSAGE
000010DA                           212  
000010DA                           213      
000010DA                           214  ENDCONV * Next instruction starts 
000010DA  4E75                     215          RTS
000010DC                           216         * MOVE.L D4, STARTING_ADDR 
000010DC                           217          
000010DC                           218  GO_THROUGH_MEMORY
000010DC                           219  
000010DC                           220  
000010DC                           221  
000010DC                           222  
000010DC                           223  
000010DC                           224  
000010DC                           225  
000010DC                           226  
000010DC                           227  
000010DC                           228  
000010DC                           229  
000010DC                           230  
000010DC                           231  
000010DC                           232  
000010DC                           233  
000010DC                           234  
000010DC                           235  
000010DC                           236  
000010DC                           237  
000010DC                           238  
000010DC                           239  
000010DC                           240  
000010DC                           241  
000010DC                           242  
000010DC                           243  
000010DC                           244  
000010DC                           245  
000010DC                           246  -------------------- end include --------------------
000010DC                           247      INCLUDE 'MEMORY_PARSER.X68'
000010DC                           248  
000010DC  2A79 000033FA            249                  MOVEA.L   STARTING_ADDR, A5
000010E2  2C4D                     250                  MOVEA.L   A5, A6
000010E4                           251  
000010E4  247C 0000001F            252                  MOVEA.L  #outputCountMax, A2
000010EA  267C 00000000            253                  MOVEA.L  #outputCountCurr, A3
000010F0                           254  PARSE_MEMORY      
000010F0  3A4E                     255                  MOVE.W   A6, A5
000010F2  301E                     256                  MOVE.W   (A6)+, D0
000010F4  4280                     257                  CLR.L    D0
000010F6  43F9 000034BC            258                  LEA      CR_LF, A1
000010FC  103C 000E                259                  MOVE.B   #14, D0
00001100  4E4F                     260                  TRAP #15 
00001102                           261  
00001102                           262  CATCH_BAD_OPCODES               
00001102  BBF9 000033FE            263                  CMPA.L   ENDING_ADDR, A5
00001108  6700 229E                264                  BEQ      ASK_TO_CONTINUE
0000110C  B7FC 0000001F            265                  CMPA.L   #outputCountMax, A3
00001112  6700 226A                266                  BEQ       PRESS_ENTER_CONTINUE
00001116  528B                     267                  ADDA.L    #1, A3
00001118  6000 14C8                268                  BRA      ERROR_HANDLING
0000111C                           269          
0000111C                           270  PARSE_MEMORY_FIRST    
0000111C  BDF9 000033FE            271                  CMPA.L   ENDING_ADDR, A6
00001122  6700 2284                272                  BEQ      ASK_TO_CONTINUE
00001126                           273                  
00001126  B7FC 0000001F            274                  CMPA.L   #outputCountMax, A3
0000112C  6700 2250                275                  BEQ       PRESS_ENTER_CONTINUE
00001130                           276  CONTINUE_PARSE
00001130  528B                     277                  ADDA.L    #1, A3
00001132                           278                  
00001132                           279                  
00001132  4EF9 00001138            280                  JMP      NEXT_INSTRUCTION
00001138                           281                      
00001138                           282  NEXT_INSTRUCTION
00001138                           283                  INCLUDE 'JUMPTABLE DAMIAN-V1.X68'
00001138                           284  CHECK_PARSE_MEMORY
00001138  43F9 00003588            285                    LEA       HEX_SIGN, A1
0000113E  103C 000E                286                    MOVE.B    #14, D0
00001142  4E4F                     287                    TRAP #15                 
00001144  3A0D                     288                    MOVE.W   A5, D5
00001146  4EB9 00002356            289                    JSR        HEX_TO_ASCII
0000114C  43F9 0000358C            290                    LEA       SPACE, A1
00001152  103C 000E                291                    MOVE.B    #14, D0
00001156  4E4F                     292                    TRAP #15
00001158                           293  
00001158                           294  
00001158                           295  
00001158  41F9 00001170            296                   LEA     jmp_table,A0    *Index into the table
0000115E                           297  
0000115E  4280                     298                   CLR.L   D0              *Zero it
00001160                           299  
00001160  3015                     300                   MOVE.W  (A5),D0     *We'll play with it here
00001162                           301  
00001162  123C 000C                302                   MOVE.B  #shift,D1       *Shift 12 bits to the right  
00001166                           303  
00001166  E268                     304                   LSR.W   D1,D0           *Move the bits
00001168                           305  
00001168                           306  
00001168                           307  
00001168                           308  
00001168                           309   
00001168                           310  
00001168  C0FC 0006                311                 MULU        #6,D0       *Form offset     
0000116C                           312  
0000116C  4EB0 0000                313                 JSR         0(A0,D0)   *Jump indirect with index
00001170                           314  
00001170                           315                      
00001170                           316  
00001170  4EF9 000011D0            317  jmp_table      JMP         code0000
00001176                           318  
00001176  4EF9 000011D4            319                 JMP         code0001
0000117C                           320  
0000117C  4EF9 000011D8            321                 JMP         code0010
00001182                           322  
00001182  4EF9 000011DC            323                 JMP         code0011
00001188                           324  
00001188  4EF9 000011E0            325                 JMP         code0100
0000118E                           326  
0000118E  4EF9 000011E4            327                 JMP         code0101
00001194                           328  
00001194  4EF9 000011E8            329                 JMP         code0110
0000119A                           330  
0000119A  4EF9 000011EC            331                 JMP         code0111
000011A0                           332  
000011A0  4EF9 000011F0            333                 JMP         code1000
000011A6                           334  
000011A6  4EF9 000011F4            335                 JMP         code1001
000011AC                           336  
000011AC  4EF9 000011F8            337                 JMP         code1010
000011B2                           338  
000011B2  4EF9 000011FC            339                 JMP         code1011
000011B8                           340  
000011B8  4EF9 00001200            341                 JMP         code1100
000011BE                           342  
000011BE  4EF9 00001204            343                 JMP         code1101
000011C4                           344  
000011C4  4EF9 00001208            345                 JMP         code1110
000011CA                           346  
000011CA  4EF9 0000120C            347                 JMP         code1111
000011D0                           348  
000011D0                           349          
000011D0                           350  
000011D0                           351   
000011D0                           352  
000011D0                           353  
000011D0                           354   
000011D0                           355  
000011D0                           356   
000011D0                           357  
000011D0  6000 01F0                358  code0000       BRA         ADDI
000011D4                           359  
000011D4  6000 0EC2                360  code0001       BRA         MOVEB
000011D8                           361  
000011D8  6000 0F10                362  code0010       BRA         MOVEL
000011DC                           363  
000011DC  6000 0ED8                364  code0011       BRA         MOVEW
000011E0                           365  
000011E0  6000 0678                366  code0100       BRA         GROUP_0100_CODE
000011E4                           367  
000011E4  6000 02E4                368  code0101       BRA         ADDQ   * Subroutine for ADDQ
000011E8                           369  
000011E8  6000 0FC4                370  code0110       BRA         BCC
000011EC                           371  
000011EC  6000 0BD2                372  code0111       BRA         MOVEQ
000011F0                           373  
000011F0  6000 05B2                374  code1000       BRA         DIVU_OR
000011F4                           375  
000011F4  6000 03EA                376  code1001       BRA         SUB    * Subroutine for SUB
000011F8                           377  
000011F8  4E72 2700                378  code1010       STOP        #$2700
000011FC                           379  
000011FC                           380   
000011FC                           381  
000011FC                           382  
000011FC                           383  
000011FC                           384  
000011FC                           385   * another jump table to the 8 possible op-codes at the next level.
000011FC                           386  
000011FC                           387   
000011FC                           388  
000011FC  6000 03AC                389  code1011       BRA        CMP  * Subroutuine for CMP
00001200                           390  
00001200  6000 06BA                391  code1100       BRA        MULS_AND
00001204                           392  
00001204  6000 000A                393  code1101       BRA         ADD_ADDA       *#$2700
00001208                           394  
00001208  6000 0C1C                395  code1110       BRA         SHIFTS
0000120C                           396  
0000120C  4E72 2700                397  code1111       STOP        #$2700
00001210                           398                   
00001210                           399  
00001210                           400                      
00001210                           401              
00001210                           402  
00001210                           403  
00001210                           404  
00001210                           405  
00001210                           406  
00001210                           407  
00001210                           408  
00001210                           409  
00001210                           410  
00001210                           411  
00001210                           412  
00001210                           413  
00001210                           414  
00001210                           415  
00001210                           416  
00001210                           417  
00001210                           418  
00001210                           419  
00001210                           420  
00001210                           421  
00001210                           422  
00001210                           423  
00001210                           424  
00001210                           425  -------------------- end include --------------------
00001210                           426                  INCLUDE 'ADD_ADDA.X68'
00001210                           427    
00001210                           428  
00001210                           429          
00001210                           430  
00001210                           431                  * INCLUDE 'CMP.X68'
00001210                           432                  * INCLUDE 'SUB.X68'
00001210                           433                  * INCLUDE 'DIVU_OR.X68'
00001210                           434                  * INCLUDE 'MULS_AND.X68'
00001210                           435    
00001210                           436  ADD_ADDA  *at this point we know the first 4 bits are 1101 -> ADD or ADDA -> compare the destination opmode
00001210                           437                   
00001210  4EB9 00001314            438                   JSR      GET_SIZE_PURPLE
00001216                           439                                              
00001216  BA3C 0003                440                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is ADDA
0000121A                           441                   
0000121A  6700 0008                442                   BEQ      ADDA_CODE
0000121E                           443                   
0000121E  4EF9 00001298            444                   JMP      ADD_CODE
00001224                           445                   
00001224                           446  ADDA_CODE 
00001224                           447                   * ADDA opcode message
00001224  43F9 00003556            448                   LEA ADDA_MESSAGE, A1
0000122A                           449                   
0000122A  103C 000E                450                   MOVE.B #14, D0
0000122E                           451                   
0000122E  4E4F                     452                   TRAP #15
00001230                           453                   
00001230  4285                     454                   CLR.L D5         * clear for the size since this is not for the size purple
00001232                           455                   
00001232  4280                     456                   CLR.L D0                *clear D0
00001234                           457                   
00001234  4281                     458                   CLR.L D1                *clear D1
00001236                           459                   
00001236  3015                     460                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001238                           461                   
00001238  EF48                     462                   LSL.W   #7, D0
0000123A                           463  
0000123A  123C 000D                464                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the
0000123E                           465  
0000123E  E268                     466                   LSR.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001240                           467                   
00001240  B03C 0003                468                   CMP.B   #%011, D0
00001244                           469                   
00001244  6700 002E                470                   BEQ     PRINTOUT_SIZE_W
00001248                           471                   
00001248  4EF9 00001286            472                   JMP     PRINTOUT_SIZE_L
0000124E                           473                   
0000124E                           474  FINISH_PRINTING_SIZE
0000124E                           475  
0000124E  4EB9 00001398            476                   JSR     Set_Ea
00001254                           477                   
00001254  4EB9 000023F4            478                   JSR     PRINT_EA *by using jmp table
0000125A                           479                   
0000125A  4EB9 00001376            480                   JSR     PRINT_COMMA
00001260                           481                   
00001260                           482                    * for the first Dn 
00001260  4EB9 00001386            483                   JSR     GET_Data_Register
00001266                           484                   
00001266  1C3C 0001                485                   MOVE.B  #%001, D6 * for mode
0000126A                           486  
0000126A  4EB9 000023F4            487                   JSR     PRINT_EA *by using jmp table
00001270                           488  
00001270  4EF8 10F0                489                   JMP     PARSE_MEMORY
00001274                           490                   
00001274                           491  PRINTOUT_SIZE_W
00001274                           492                   
00001274  3A3C 0001                493                   MOVE    #%01, D5          
00001278                           494                   
00001278  43F9 0000357A            495                   LEA      SIZE_W_PRINT,    A1
0000127E                           496                   
0000127E  103C 000E                497                   MOVE.B   #14,             D0
00001282                           498          
00001282  4E4F                     499                   TRAP #15
00001284                           500                   
00001284  60C8                     501                   BRA     FINISH_PRINTING_SIZE
00001286                           502                   
00001286                           503  PRINTOUT_SIZE_L                           
00001286  3A3C 0002                504                   MOVE    #%10, D5          
0000128A                           505                   
0000128A  43F9 00003580            506                   LEA      SIZE_L_PRINT,    A1
00001290                           507                   
00001290  103C 000E                508                   MOVE.B   #14,             D0 
00001294                           509         
00001294  4E4F                     510                   TRAP #15
00001296                           511                   
00001296  60B6                     512                   BRA     FINISH_PRINTING_SIZE
00001298                           513  
00001298                           514  ADD_CODE
00001298                           515                   * ADD message
00001298  43F9 00003551            516                   LEA      ADD_MESSAGE,    A1
0000129E  103C 000E                517                   MOVE.B   #14,            D0
000012A2  4E4F                     518                   TRAP #15
000012A4                           519                   
000012A4  4EB9 0000132C            520                   JSR     PRINTOUT_SIZE_PURPLE
000012AA                           521                   
000012AA                           522                   * check for dn and ea
000012AA  4280                     523                   CLR.L D0                *clear D0
000012AC                           524                   
000012AC  4281                     525                   CLR.L D1                *clear D1
000012AE                           526                   
000012AE  3015                     527                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000012B0                           528                   
000012B0                           529                   * check the bit at 7
000012B0  123C 0007                530                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000012B4                           531  
000012B4  E368                     532                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000012B6                           533                   
000012B6  123C 000F                534                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
000012BA                           535  
000012BA  E268                     536                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
000012BC                           537                   
000012BC  B03C 0000                538                   CMP.B   #0, D0
000012C0                           539                   
000012C0                           540                 *  BTST    #8, D0 * if the bit at 8 is 1, the ccr of z is set to 0
000012C0                           541                   
000012C0                           542                   
000012C0  6700 002A                543                   BEQ     ADD_FIRST_EA
000012C4                           544                   
000012C4                           545                   * for the first Dn 
000012C4  4EB9 00001386            546                   JSR     GET_Data_Register
000012CA                           547                   
000012CA  4286                     548                   CLR.L   D6
000012CC                           549                   
000012CC  1C3C 0000                550                   MOVE.B  #%000, D6 * for mode
000012D0                           551                   
000012D0  4EB9 000023F4            552                   JSR     PRINT_EA *by using jmp table
000012D6                           553                   
000012D6  4EB9 00001376            554                   JSR     PRINT_COMMA
000012DC                           555                   
000012DC  4EB9 00001398            556                   JSR     Set_Ea
000012E2                           557                   
000012E2  4EB9 000023F4            558                   JSR     PRINT_EA *by using jmp table
000012E8                           559                   
000012E8  4EF8 10F0                560                   JMP     PARSE_MEMORY
000012EC                           561                   
000012EC                           562  ADD_FIRST_EA
000012EC  4EB9 00001398            563                   JSR     Set_Ea
000012F2                           564                   
000012F2  4EB9 000023F4            565                   JSR     PRINT_EA *by using jmp table
000012F8                           566                   
000012F8  4EB9 00001376            567                   JSR     PRINT_COMMA
000012FE                           568                   
000012FE                           569                    * for the first Dn 
000012FE  4EB9 00001386            570                   JSR     GET_Data_Register
00001304                           571                   
00001304  4286                     572                   CLR.L   D6
00001306                           573                   
00001306  1C3C 0000                574                   MOVE.B  #%000, D6 * for mode
0000130A                           575  
0000130A  4EB9 000023F4            576                   JSR     PRINT_EA *by using jmp table
00001310                           577                   
00001310  4EF8 10F0                578                   JMP     PARSE_MEMORY
00001314                           579                   
00001314                           580  GET_SIZE_PURPLE * get the op-code 
00001314                           581  
00001314  4280                     582                   CLR.L D0                *clear D0
00001316                           583                   
00001316  4281                     584                   CLR.L D1                *clear D1
00001318                           585                   
00001318  3015                     586                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000131A                           587  
0000131A  123C 0008                588                   MOVE.B  #8,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000131E                           589  
0000131E  E368                     590                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001320                           591                   
00001320  123C 000E                592                   MOVE.B  #14,D1          *14 bits is the number of times to shift to hold the mode number
00001324                           593  
00001324  E268                     594                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
00001326                           595                   
00001326  4285                     596                   CLR.L   D5
00001328                           597                   
00001328  1A00                     598                   MOVE.B  D0, D5          *push the size to the Data register 5 for the future use
0000132A                           599                   
0000132A  4E75                     600                   RTS 
0000132C                           601  
0000132C                           602  PRINTOUT_SIZE_PURPLE * get the size for ADDI, CLR, ADDQ, OR, SUB, CMP, AND, ADD
0000132C                           603                       
0000132C  BA7C 0000                604                   CMP    #%00, D5          
00001330                           605                   
00001330  6700 0014                606                   BEQ    PRINT_B
00001334                           607                   
00001334  BA7C 0001                608                   CMP    #%01, D5          
00001338                           609                   
00001338  6700 001C                610                   BEQ    PRINT_W
0000133C                           611                   
0000133C  BA7C 0002                612                   CMP    #%10, D5          
00001340                           613                   
00001340  6700 0024                614                   BEQ    PRINT_L
00001344                           615                   
00001344                           616  DONE_PRINTING
00001344  4E75                     617                   RTS 
00001346                           618                   
00001346                           619  PRINT_B          
00001346  43F9 00003574            620                   LEA      SIZE_B_PRINT,    A1
0000134C  103C 000E                621                   MOVE.B   #14,            D0          
00001350  4E4F                     622                   TRAP #15
00001352                           623  
00001352  4EF8 1344                624                   JMP      DONE_PRINTING
00001356                           625                   
00001356                           626  PRINT_W     
00001356  43F9 0000357A            627                   LEA      SIZE_W_PRINT,    A1
0000135C  103C 000E                628                   MOVE.B   #14,             D0          
00001360  4E4F                     629                   TRAP #15
00001362                           630  
00001362  4EF8 1344                631                   JMP      DONE_PRINTING
00001366                           632  
00001366                           633  
00001366                           634  PRINT_L          
00001366  43F9 00003580            635                   LEA      SIZE_L_PRINT,    A1
0000136C  103C 000E                636                   MOVE.B   #14,             D0          
00001370  4E4F                     637                   TRAP #15   
00001372                           638                      
00001372  4EF8 1344                639                   JMP    DONE_PRINTING
00001376                           640                   
00001376                           641  PRINT_COMMA
00001376  43F9 000035A6            642                   LEA COMMA, A1
0000137C  103C 000E                643                   MOVE.B #14, D0
00001380  4E4F                     644                   TRAP #15
00001382                           645                   
00001382  4EF8 1344                646                   JMP    DONE_PRINTING
00001386                           647                   
00001386                           648  GET_Data_Register
00001386  4280                     649                   CLR.L D0                *clear D0
00001388                           650                   
00001388  4281                     651                   CLR.L D1                *clear D1
0000138A                           652                   
0000138A  3015                     653                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000138C                           654  
0000138C  E948                     655                   LSL.W   #4,D0           *Shift the bits 4 times -> D0 now removes the opcode & reg#
0000138E                           656                   
0000138E  123C 000D                657                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001392                           658  
00001392  E268                     659                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001394                           660  
00001394  1E00                     661                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00001396                           662                   
00001396  4E75                     663                   RTS
00001398                           664                   
00001398                           665  Set_Ea
00001398                           666  
00001398                           667                   * set register
00001398  4280                     668                   CLR.L D0                *clear D0
0000139A                           669                   
0000139A  4281                     670                   CLR.L D1                *clear D1
0000139C                           671                   
0000139C  3015                     672                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000139E                           673                 
0000139E  123C 000D                674                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000013A2                           675  
000013A2  E368                     676                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000013A4                           677  
000013A4  E268                     678                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000013A6                           679                   
000013A6  4287                     680                   CLR.L D7                *clear D7 
000013A8                           681  
000013A8  1E00                     682                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
000013AA                           683                   
000013AA                           684                   * set mode
000013AA  4280                     685                   CLR.L D0                *clear D0
000013AC                           686                   
000013AC  4281                     687                   CLR.L D1                *clear D1
000013AE                           688                   
000013AE  3015                     689                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000013B0                           690                 
000013B0  123C 000A                691                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000013B4                           692  
000013B4  E368                     693                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000013B6                           694  
000013B6  123C 000D                695                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000013BA                           696  
000013BA  E268                     697                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000013BC                           698                   
000013BC  4286                     699                   CLR.L D6                *clear D6
000013BE                           700  
000013BE  1C00                     701                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
000013C0                           702                   
000013C0  4E75                     703                   RTS
000013C2                           704                   
000013C2                           705                  
000013C2                           706  
000013C2                           707  
000013C2                           708  
000013C2                           709  
000013C2                           710  
000013C2                           711  
000013C2                           712  
000013C2                           713  
000013C2                           714  
000013C2                           715  
000013C2                           716  
000013C2                           717  
000013C2                           718  
000013C2                           719  
000013C2                           720  
000013C2                           721  
000013C2                           722  
000013C2                           723  
000013C2                           724  
000013C2                           725  
000013C2                           726  
000013C2                           727  
000013C2                           728  
000013C2                           729  
000013C2                           730  
000013C2                           731  
000013C2                           732  
000013C2                           733  
000013C2                           734  
000013C2                           735  
000013C2                           736  
000013C2                           737  
000013C2                           738  -------------------- end include --------------------
000013C2                           739                  INCLUDE 'ADDI.X68'
000013C2                           740    
000013C2                           741  ADDI           * first check the first 4 bits after the op-code
000013C2  4280                     742                 CLR.L       D0
000013C4                           743  
000013C4  4281                     744                 CLR.L       D1
000013C6                           745                 
000013C6  3015                     746                 MOVE.W      (A5),D0
000013C8                           747                 
000013C8  123C 0008                748                 MOVE.B      #8, D1 * for shifting to the right by 8 bits
000013CC                           749                 
000013CC  E268                     750                 LSR.W       D1, D0
000013CE                           751                 
000013CE  B07C 0006                752                 CMP.W       #6, D0 * checking the first 4 bits 
000013D2                           753                 
000013D2  6600 FCF6                754                 BNE         ERROR  * go to error 
000013D6                           755                 
000013D6                           756                 * print the op-code 
000013D6  4280                     757                 CLR.L       D0
000013D8                           758  
000013D8  4281                     759                 CLR.L       D1
000013DA                           760                 
000013DA  43F9 000034BF            761                 LEA         ADDI_MESSAGE, A1    * NOTE - how do you know this is of size B ????? 
000013E0                           762                 
000013E0  103C 000E                763                 MOVE.B      #14, D0
000013E4                           764                 
000013E4  4E4F                     765                 TRAP #15
000013E6                           766                                
000013E6                           767                 * print the size
000013E6  4280                     768                 CLR.L       D0
000013E8                           769  
000013E8  4281                     770                 CLR.L       D1
000013EA                           771                 
000013EA  3015                     772                 MOVE.W      (A5),D0
000013EC                           773                
000013EC  E148                     774                 LSL.W       #8, D0
000013EE                           775  
000013EE  123C 000E                776                 MOVE.B      #14, D1 * for shifting to the right by 8 bits
000013F2                           777                 
000013F2  E268                     778                 LSR.W       D1, D0
000013F4                           779                 
000013F4                           780                 * D1 holds the size
000013F4                           781    *             CLR.L       D1
000013F4                           782                 
000013F4                           783    *             MOVE.B      D0, D1
000013F4                           784                   
000013F4  B03C 0000                785                 CMP.B       #%00, D0
000013F8                           786                 
000013F8  6700 0038                787                 BEQ         ADDI_B_SIZE
000013FC                           788                 
000013FC  B03C 0001                789                 CMP.B       #%01, D0
00001400                           790                 
00001400  6700 0060                791                 BEQ         ADDI_W_SIZE
00001404                           792                 
00001404                           793                 *print size L
00001404  43F9 00003580            794                 LEA         SIZE_L_PRINT, A1     
0000140A                           795                 
0000140A  103C 000E                796                 MOVE.B      #14, D0
0000140E                           797                 
0000140E  4E4F                     798                 TRAP #15
00001410                           799                 
00001410                           800                * print out pound sign and hex sign
00001410  43F9 00003586            801                 LEA     POUND_SIGN, A1
00001416                           802              
00001416  103C 000E                803                 MOVE.B  #14, D0
0000141A                           804              
0000141A  4E4F                     805                 TRAP #15
0000141C                           806              
0000141C  43F9 00003588            807                 LEA     HEX_SIGN, A1
00001422                           808              
00001422  4E4F                     809                 TRAP #15
00001424                           810                 
00001424  4285                     811                 CLR.L  D5
00001426                           812          
00001426  2A1E                     813                 MOVE.L (A6)+, D5 * we mimght change it later
00001428                           814          
00001428  4EB9 00002356            815                 JSR  HEX_TO_ASCII
0000142E                           816                 
0000142E  6000 0062                817                 BRA         ADDI_EA   
00001432                           818                      
00001432                           819  ADDI_B_SIZE
00001432  43F9 00003574            820                 LEA         SIZE_B_PRINT, A1     
00001438                           821                 
00001438  103C 000E                822                 MOVE.B      #14, D0
0000143C                           823                 
0000143C  4E4F                     824                 TRAP #15
0000143E                           825                 
0000143E                           826                * print out pound sign and hex sign
0000143E  43F9 00003586            827                 LEA     POUND_SIGN, A1
00001444                           828              
00001444  103C 000E                829                 MOVE.B  #14, D0
00001448                           830              
00001448  4E4F                     831                 TRAP #15
0000144A                           832              
0000144A  43F9 00003588            833                 LEA     HEX_SIGN, A1
00001450                           834              
00001450  4E4F                     835                 TRAP #15
00001452                           836                 
00001452  4280                     837                 CLR.L D0
00001454                           838  
00001454  301E                     839                 MOVE.W (A6)+, D0 * we mimght change it later
00001456                           840                 
00001456  1A00                     841                 MOVE.B D0, D5
00001458                           842     
00001458  4EB9 00002356            843                 JSR  HEX_TO_ASCII
0000145E                           844                 
0000145E  6000 0032                845                 BRA         ADDI_EA 
00001462                           846                  
00001462                           847  
00001462                           848  ADDI_W_SIZE
00001462  43F9 0000357A            849                 LEA         SIZE_W_PRINT, A1     
00001468                           850                 
00001468  103C 000E                851                 MOVE.B      #14, D0
0000146C                           852                 
0000146C  4E4F                     853                 TRAP #15
0000146E                           854                 
0000146E                           855                 * print out pound sign and hex sign
0000146E  43F9 00003586            856                 LEA     POUND_SIGN, A1
00001474                           857              
00001474  103C 000E                858                 MOVE.B  #14, D0
00001478                           859              
00001478  4E4F                     860                 TRAP #15
0000147A                           861              
0000147A  43F9 00003588            862                 LEA     HEX_SIGN, A1
00001480                           863              
00001480  4E4F                     864                 TRAP #15
00001482                           865  
00001482  4285                     866                 CLR.L  D5
00001484                           867          
00001484  3A1E                     868                 MOVE.W (A6)+, D5
00001486                           869          
00001486  4EB9 00002356            870                 JSR  HEX_TO_ASCII
0000148C                           871          
0000148C  4EF9 00001492            872                 JMP  ADDI_EA
00001492                           873  
00001492                           874  
00001492                           875  ADDI_EA      
00001492  4EB8 1376                876                  JSR     PRINT_COMMA
00001496                           877                  
00001496  4280                     878                  CLR.L   D0
00001498                           879                  
00001498  4281                     880                  CLR.L   D1
0000149A                           881                  
0000149A                           882                  * set register
0000149A                           883                   
0000149A  3015                     884                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000149C                           885                 
0000149C  123C 000D                886                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000014A0                           887  
000014A0  E368                     888                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000014A2                           889  
000014A2  123C 000D                890                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000014A6                           891  
000014A6  E268                     892                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000014A8                           893  
000014A8  1E00                     894                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
000014AA                           895                   
000014AA                           896                   * set mode
000014AA  4280                     897                   CLR.L D0                *clear D0
000014AC                           898                   
000014AC  4281                     899                   CLR.L D1                *clear D1
000014AE                           900                   
000014AE  3015                     901                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000014B0                           902                 
000014B0  123C 000A                903                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000014B4                           904  
000014B4  E368                     905                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000014B6                           906  
000014B6  123C 000D                907                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000014BA                           908  
000014BA  E268                     909                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000014BC                           910                   
000014BC  4286                     911                   CLR.L D6
000014BE                           912  
000014BE  1C00                     913                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
000014C0                           914  
000014C0                           915   
000014C0                           916                 * JSR     Set_Ea
000014C0                           917                   
000014C0  4EB9 000023F4            918                  JSR     PRINT_EA *by using jmp table
000014C6                           919                  
000014C6  4EF8 10F0                920                  JMP     PARSE_MEMORY
000014CA                           921                  
000014CA                           922                  
000014CA                           923                   
000014CA                           924                   
000014CA                           925  
000014CA                           926  
000014CA                           927                 
000014CA                           928  
000014CA                           929  
000014CA                           930  
000014CA                           931  
000014CA                           932  
000014CA                           933  
000014CA                           934  
000014CA                           935  
000014CA                           936  
000014CA                           937  
000014CA                           938  
000014CA                           939  
000014CA                           940  
000014CA                           941  
000014CA                           942  
000014CA                           943  
000014CA                           944  
000014CA                           945  
000014CA                           946  
000014CA                           947  
000014CA                           948  
000014CA                           949  
000014CA                           950  
000014CA                           951  
000014CA                           952  
000014CA                           953  
000014CA                           954  -------------------- end include --------------------
000014CA                           955                  INCLUDE 'ADDQ.X68'
000014CA                           956  
000014CA                           957  
000014CA                           958  ADDQ
000014CA                           959  
000014CA  43F9 000034E9            960      LEA ADDQ_MESSAGE, A1  *print ADDQ
000014D0                           961                   
000014D0  103C 000E                962      MOVE.B #14, D0
000014D4                           963                   
000014D4  4E4F                     964      TRAP #15
000014D6                           965      
000014D6  3015                     966      MOVE.W (A5), D0
000014D8                           967      
000014D8  123C 0008                968      MOVE.B  #8,D1     
000014DC                           969  
000014DC  E368                     970      LSL.W   D1,D0
000014DE                           971                   
000014DE  123C 000E                972      MOVE.B  #14,D1
000014E2                           973  
000014E2  E268                     974      LSR.W   D1,D0  *DO now holds size
000014E4                           975                                              
000014E4  B03C 0002                976      CMP.B    #$2, D0        *if D0 holds 2, size is L
000014E8                           977      
000014E8  6700 003A                978      BEQ      ADDQL
000014EC                           979                   
000014EC  B03C 0001                980      CMP.B    #$1, D0        *if D0 holds 1, size is W
000014F0                           981                                   
000014F0  6700 001C                982      BEQ      ADDQW
000014F4                           983  
000014F4  6000 0002                984      BRA      ADDQB
000014F8                           985  
000014F8                           986  ADDQB  *Print B
000014F8                           987  
000014F8  43F9 00003574            988      LEA SIZE_B_PRINT, A1  *print B
000014FE                           989                   
000014FE  103C 000E                990      MOVE.B #14, D0
00001502                           991                   
00001502  4E4F                     992      TRAP #15
00001504                           993      
00001504  1A3C 0000                994      MOVE.B #%00, D5
00001508                           995      
00001508  4EF9 0000153A            996      JMP PRINTADDQ
0000150E                           997      
0000150E                           998  ADDQW  *Print W
0000150E                           999  
0000150E  43F9 0000357A           1000      LEA SIZE_W_PRINT, A1  *print W
00001514                          1001                   
00001514  103C 000E               1002      MOVE.B #14, D0
00001518                          1003                                    
00001518  4E4F                    1004      TRAP #15
0000151A                          1005      
0000151A  1A3C 0001               1006      MOVE.B #%01, D5
0000151E                          1007  
0000151E  4EF9 0000153A           1008      JMP PRINTADDQ
00001524                          1009  
00001524                          1010  ADDQL   *Print L
00001524                          1011  
00001524  43F9 00003580           1012      LEA SIZE_L_PRINT, A1  *print L
0000152A                          1013                   
0000152A  103C 000E               1014      MOVE.B #14, D0
0000152E                          1015                   
0000152E  4E4F                    1016      TRAP #15
00001530                          1017  
00001530  1A3C 0002               1018      MOVE.B #%10, D5
00001534                          1019      
00001534  4EF9 0000153A           1020      JMP PRINTADDQ
0000153A                          1021      
0000153A                          1022  PRINTADDQ
0000153A                          1023  
0000153A  43F9 00003586           1024      LEA POUND_SIGN, A1  *print W
00001540                          1025                   
00001540  103C 000E               1026      MOVE.B #14, D0
00001544                          1027                                    
00001544  4E4F                    1028      TRAP #15
00001546                          1029      
00001546  3015                    1030      MOVE.W (A5), D0
00001548                          1031  
00001548  123C 0004               1032      MOVE.B  #4,D1     
0000154C                          1033  
0000154C  E368                    1034      LSL.W   D1,D0
0000154E                          1035                   
0000154E  123C 000D               1036      MOVE.B  #13,D1
00001552                          1037  
00001552  E268                    1038      LSR.W   D1,D0  *D0 now holds Dn
00001554                          1039      
00001554  4281                    1040      CLR.L D1
00001556                          1041      
00001556  B03C 0000               1042      CMP.B   #0, D0
0000155A                          1043      
0000155A  6700 0048               1044      BEQ     PRINT_8
0000155E                          1045                                    
0000155E  3200                    1046      MOVE.W D0, D1 *D1 holds Dn   
00001560                          1047  
00001560                          1048  CONTINUE_PRINTADDQ
00001560  103C 0003               1049      MOVE.B #3, D0
00001564                          1050                 
00001564  4E4F                    1051      TRAP #15
00001566                          1052      
00001566  43F9 000035A6           1053      LEA COMMA, A1  *print W
0000156C                          1054                   
0000156C  103C 000E               1055      MOVE.B #14, D0
00001570                          1056                                    
00001570  4E4F                    1057      TRAP #15
00001572                          1058      
00001572  4286                    1059      CLR.L D6
00001574                          1060      
00001574  4287                    1061      CLR.L D7
00001576                          1062      
00001576  3015                    1063      MOVE.W (A5), D0
00001578                          1064  
00001578  123C 000A               1065      MOVE.B  #10,D1     
0000157C                          1066  
0000157C  E368                    1067      LSL.W   D1,D0
0000157E                          1068                   
0000157E  123C 000D               1069      MOVE.B  #13,D1
00001582                          1070  
00001582  E268                    1071      LSR.W   D1,D0  *D0 now holds MODE
00001584                          1072                                              
00001584  3C00                    1073      MOVE.W D0, D6 *D6 holds mode
00001586                          1074      
00001586  4281                    1075      CLR.L D1
00001588                          1076      
00001588  4280                    1077      CLR.L D0
0000158A                          1078      
0000158A  3015                    1079      MOVE.W (A5), D0
0000158C                          1080  
0000158C  123C 000D               1081      MOVE.B  #13,D1     
00001590                          1082  
00001590  E368                    1083      LSL.W   D1,D0
00001592                          1084                   
00001592  123C 000D               1085      MOVE.B  #13,D1
00001596                          1086  
00001596  E268                    1087      LSR.W   D1,D0  *D0 now holds MODE
00001598                          1088                                              
00001598  3E00                    1089      MOVE.W D0, D7 *D6 holds Register   
0000159A                          1090      
0000159A  4EB9 000023F4           1091      JSR PRINT_EA
000015A0                          1092      
000015A0  6000 FB4E               1093      BRA PARSE_MEMORY
000015A4                          1094  
000015A4                          1095  PRINT_8
000015A4  323C 0008               1096      MOVE.W      #8, D1
000015A8                          1097  
000015A8  60B6                    1098      BRA         CONTINUE_PRINTADDQ 
000015AA                          1099  
000015AA                          1100  
000015AA                          1101  
000015AA                          1102  
000015AA                          1103  
000015AA                          1104  
000015AA                          1105  
000015AA                          1106  
000015AA                          1107  
000015AA                          1108  
000015AA                          1109  
000015AA                          1110  
000015AA                          1111  
000015AA                          1112  
000015AA                          1113  -------------------- end include --------------------
000015AA                          1114                  INCLUDE 'CMP.X68'
000015AA                          1115     
000015AA                          1116  CMP
000015AA                          1117                   * ADD message
000015AA  43F9 00003541           1118                   LEA      CMP_MESSAGE,    A1
000015B0  103C 000E               1119                   MOVE.B   #14,            D0
000015B4  4E4F                    1120                   TRAP #15
000015B6                          1121                   
000015B6  4EB8 1314               1122                   JSR GET_SIZE_PURPLE
000015BA                          1123                   
000015BA  4EB8 132C               1124                   JSR     PRINTOUT_SIZE_PURPLE
000015BE                          1125                   
000015BE                          1126                   
000015BE  4EB8 1398               1127                   JSR     Set_Ea
000015C2                          1128                   
000015C2  4EB9 000023F4           1129                   JSR     PRINT_EA *by using jmp table
000015C8                          1130                   
000015C8  4EB8 1376               1131                   JSR     PRINT_COMMA
000015CC                          1132                   
000015CC                          1133                    * for the first Dn 
000015CC  4EB8 1386               1134                   JSR     GET_Data_Register
000015D0                          1135                   
000015D0  4286                    1136                   CLR.L   D6
000015D2                          1137                   
000015D2  1C3C 0000               1138                   MOVE.B  #%000, D6 * for mode
000015D6                          1139  
000015D6  4EB9 000023F4           1140                   JSR     PRINT_EA *by using jmp table
000015DC                          1141                   
000015DC  4EF8 10F0               1142                   JMP     PARSE_MEMORY
000015E0                          1143  
000015E0                          1144                   
000015E0                          1145   *                JMP     NEXT
000015E0                          1146  
000015E0                          1147  
000015E0                          1148  
000015E0                          1149  
000015E0                          1150  
000015E0                          1151  -------------------- end include --------------------
000015E0                          1152                  INCLUDE 'SUB.X68'
000015E0                          1153  
000015E0                          1154  SUB
000015E0                          1155                   * ADD message
000015E0  43F9 0000353C           1156                   LEA      SUB_MESSAGE,    A1
000015E6  103C 000E               1157                   MOVE.B   #14,            D0
000015EA  4E4F                    1158                   TRAP #15
000015EC                          1159                   
000015EC  4EB8 1314               1160                   JSR    GET_SIZE_PURPLE
000015F0                          1161                   
000015F0  4EB8 132C               1162                   JSR     PRINTOUT_SIZE_PURPLE
000015F4                          1163                   
000015F4                          1164                   
000015F4  4280                    1165                   CLR.L D0                *clear D0
000015F6                          1166                   
000015F6  4281                    1167                   CLR.L D1                *clear D1
000015F8                          1168                   
000015F8  3015                    1169                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000015FA                          1170                   
000015FA                          1171                   * check the bit at 7
000015FA  123C 0007               1172                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000015FE                          1173  
000015FE  E368                    1174                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001600                          1175                   
00001600  123C 000F               1176                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
00001604                          1177  
00001604  E268                    1178                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
00001606                          1179                   
00001606  B03C 0000               1180                   CMP.B   #0, D0
0000160A                          1181  
0000160A                          1182                   
0000160A                          1183                *   BTST    #8, D0
0000160A                          1184                   
0000160A  6700 0024               1185                   BEQ     SUB_FIRST_EA
0000160E                          1186                   
0000160E                          1187                   * for the first Dn 
0000160E  4EB8 1386               1188                   JSR     GET_Data_Register
00001612                          1189                   
00001612  4286                    1190                   CLR.L   D6
00001614                          1191                   
00001614  1C3C 0000               1192                   MOVE.B  #%000, D6 * for mode
00001618                          1193                   
00001618  4EB9 000023F4           1194                   JSR     PRINT_EA *by using jmp table
0000161E                          1195                   
0000161E  4EB8 1376               1196                   JSR     PRINT_COMMA
00001622                          1197                   
00001622  4EB8 1398               1198                   JSR     Set_Ea
00001626                          1199                   
00001626  4EB9 000023F4           1200                   JSR     PRINT_EA *by using jmp table
0000162C                          1201                   
0000162C  4EF8 10F0               1202                   JMP     PARSE_MEMORY
00001630                          1203                   
00001630                          1204  SUB_FIRST_EA
00001630  4EB8 1398               1205                   JSR     Set_Ea
00001634                          1206                   
00001634  4EB9 000023F4           1207                   JSR     PRINT_EA *by using jmp table
0000163A                          1208                   
0000163A  4EB8 1376               1209                   JSR     PRINT_COMMA
0000163E                          1210                   
0000163E                          1211                    * for the first Dn 
0000163E  4EB8 1386               1212                   JSR     GET_Data_Register
00001642                          1213                   
00001642  4286                    1214                   CLR.L   D6
00001644                          1215                   
00001644  1C3C 0000               1216                   MOVE.B  #%000, D6 * for mode
00001648                          1217  
00001648  4EB9 000023F4           1218                   JSR     PRINT_EA *by using jmp table
0000164E                          1219                   
0000164E  4EF8 10F0               1220                   JMP     PARSE_MEMORY
00001652                          1221  
00001652                          1222  
00001652                          1223  
00001652                          1224  
00001652                          1225  
00001652                          1226  -------------------- end include --------------------
00001652                          1227                  INCLUDE 'TRYING_NOP.X68'
00001652                          1228  LEA_OPCODE
00001652                          1229      
00001652  43F9 000034EF           1230      LEA         LEA_MESSAGE, A1     * print out message for 'NOP'
00001658                          1231      
00001658  103C 000E               1232      MOVE.B      #14, D0
0000165C                          1233      
0000165C  4E4F                    1234      TRAP #15  
0000165E                          1235      
0000165E  3015                    1236      MOVE.W  (A5),D0     *D0 is the binary value to decode
00001660                          1237      
00001660  123C 000D               1238      MOVE.B  #13,D1     
00001664                          1239  
00001664  E368                    1240      LSL.W   D1,D0
00001666                          1241                   
00001666  123C 000D               1242      MOVE.B  #13,D1
0000166A                          1243  
0000166A  E268                    1244      LSR.W   D1,D0  *D0 now holds Register
0000166C                          1245                                              
0000166C  3E00                    1246      MOVE.W D0, D7 *D7 holds Register  
0000166E                          1247  
0000166E  3015                    1248      MOVE.W  (A5),D0     *D0 is the binary value to decode
00001670                          1249  
00001670  123C 000A               1250      MOVE.B  #10,D1     
00001674                          1251  
00001674  E368                    1252      LSL.W   D1,D0
00001676                          1253                   
00001676  123C 000D               1254      MOVE.B  #13,D1
0000167A                          1255  
0000167A  E268                    1256      LSR.W   D1,D0  *D0 now holds MODE
0000167C                          1257                                              
0000167C  3C00                    1258      MOVE.W D0, D6 *D6 holds MODE  
0000167E                          1259      
0000167E  4EB9 000023F4           1260      JSR PRINT_EA
00001684                          1261  
00001684  43F9 000035A6           1262      LEA         COMMA, A1     * print out message for 'NOP'
0000168A                          1263      
0000168A  103C 000E               1264      MOVE.B      #14, D0
0000168E                          1265      
0000168E  4E4F                    1266      TRAP #15 
00001690                          1267                                    
00001690  3015                    1268      MOVE.W  (A5),D0     *D0 is the binary value to decode 
00001692                          1269  
00001692  7C01                    1270      MOVE.L #%001, D6
00001694                          1271  
00001694  123C 0004               1272      MOVE.B  #4,D1     
00001698                          1273  
00001698  E368                    1274      LSL.W   D1,D0
0000169A                          1275                   
0000169A  123C 000D               1276      MOVE.B  #13,D1
0000169E                          1277  
0000169E  E268                    1278      LSR.W   D1,D0  
000016A0                          1279                                              
000016A0  3E00                    1280      MOVE.W D0, D7 
000016A2                          1281      
000016A2  4EB9 000023F4           1282      JSR PRINT_EA
000016A8                          1283      
000016A8  4EF8 10F0               1284      JMP     PARSE_MEMORY       
000016AC                          1285            
000016AC                          1286  NOP_OPCODE
000016AC  43F9 000034D2           1287      LEA         NOP_MESSAGE, A1     * print out message for 'NOP'
000016B2                          1288      
000016B2  103C 000E               1289      MOVE.B      #14, D0
000016B6                          1290      
000016B6  4E4F                    1291      TRAP #15
000016B8                          1292      
000016B8  6000 FA36               1293      BRA PARSE_MEMORY
000016BC                          1294  RTS_OPCODE 
000016BC  43F9 000034E1           1295      LEA         RTS_MESSAGE, A1     * print out message for 'RTS'
000016C2                          1296      
000016C2  103C 000E               1297      MOVE.B      #14, D0
000016C6                          1298      
000016C6  4E4F                    1299      TRAP #15
000016C8                          1300      
000016C8  6000 FA26               1301      BRA PARSE_MEMORY
000016CC                          1302      
000016CC                          1303  JSR_OPCODE 
000016CC  43F9 000034DD           1304      LEA         JSR_MESSAGE, A1     * print out message for 'JSR'
000016D2                          1305      
000016D2  103C 000E               1306      MOVE.B      #14, D0
000016D6                          1307      
000016D6  4E4F                    1308      TRAP #15
000016D8                          1309      
000016D8  43F9 0000358C           1310      LEA     SPACE, A1
000016DE                          1311      
000016DE  4E4F                    1312      TRAP #15
000016E0                          1313      
000016E0  3015                    1314      MOVE.W (A5), D0
000016E2                          1315  
000016E2  123C 000D               1316      MOVE.B  #13,D1     
000016E6                          1317  
000016E6  E368                    1318      LSL.W   D1,D0
000016E8                          1319                   
000016E8  123C 000D               1320      MOVE.B  #13,D1
000016EC                          1321  
000016EC  E268                    1322      LSR.W   D1,D0  *D0 now holds Register
000016EE                          1323                                              
000016EE  3E00                    1324      MOVE.W D0, D7 *D7 holds Register  
000016F0                          1325  
000016F0  3015                    1326      MOVE.W (A5), D0
000016F2                          1327  
000016F2  123C 000A               1328      MOVE.B  #10,D1     
000016F6                          1329  
000016F6  E368                    1330      LSL.W   D1,D0
000016F8                          1331                   
000016F8  123C 000D               1332      MOVE.B  #13,D1
000016FC                          1333  
000016FC  E268                    1334      LSR.W   D1,D0  *D0 now holds MODE
000016FE                          1335                                              
000016FE  3C00                    1336      MOVE.W D0, D6 *D6 holds MODE  
00001700                          1337      
00001700  4EB9 000023F4           1338      JSR PRINT_EA
00001706                          1339      
00001706  6000 F9E8               1340      BRA PARSE_MEMORY
0000170A                          1341         
0000170A                          1342  CLR_OPCODE 
0000170A  43F9 000034E5           1343      LEA         CLR_MESSAGE, A1     * print out message for 'CLR'
00001710                          1344      
00001710  103C 000E               1345      MOVE.B      #14, D0
00001714                          1346      
00001714  4E4F                    1347      TRAP #15
00001716                          1348                     
00001716  43F9 0000358A           1349      LEA      PERIOD, A1
0000171C                          1350      
0000171C  103C 000E               1351      MOVE.B   #14, D0
00001720                          1352      
00001720  4E4F                    1353      TRAP #15 
00001722                          1354                
00001722  3015                    1355      MOVE.W      (A5), D0
00001724                          1356               
00001724  123C 0006               1357      MOVE.B      #6, D1
00001728                          1358                 
00001728  E268                    1359      LSR.W       D1, D0  *shift right 6 
0000172A                          1360                 
0000172A  123C 000E               1361      MOVE.B      #14, D1
0000172E                          1362                 
0000172E  E368                    1363      LSL.W       D1, D0  *shift left 15, only size is left
00001730                          1364      
00001730  123C 000E               1365      MOVE.B      #14, D1
00001734                          1366                 
00001734  E268                    1367      LSR.W       D1, D0  *shift right 15, size is left   
00001736                          1368      
00001736  B07C 0000               1369      CMP.W       #00, D0
0000173A                          1370  
0000173A  6700 004A               1371      BEQ         SIZE_B
0000173E                          1372      
0000173E  B07C 0001               1373      CMP.W       #01, D0
00001742                          1374                 
00001742  6700 004C               1375      BEQ         SIZE_W 
00001746                          1376      
00001746  B07C 0002               1377      CMP.W       #2, D0
0000174A                          1378                 
0000174A  6700 004E               1379      BEQ         SIZE_L
0000174E                          1380  
0000174E                          1381  PRINT_SIZE
0000174E                          1382  
0000174E  103C 000E               1383      MOVE.B      #14, D0
00001752                          1384      
00001752  4E4F                    1385      TRAP #15
00001754                          1386  
00001754  4280                    1387      CLR.L   D0
00001756                          1388                  
00001756  4281                    1389      CLR.L   D1
00001758                          1390                       * set register
00001758                          1391                   
00001758  3015                    1392      MOVE.W  (A5),D0     *D0 is the binary value to decode
0000175A                          1393                 
0000175A  123C 000D               1394      MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000175E                          1395  
0000175E  E368                    1396      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001760                          1397  
00001760  123C 000D               1398      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001764                          1399  
00001764  E268                    1400      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001766                          1401  
00001766  1E00                    1402      MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00001768                          1403                   
00001768                          1404                   * set mode
00001768  4280                    1405      CLR.L D0                *clear D0
0000176A                          1406                   
0000176A  4281                    1407      CLR.L D1                *clear D1
0000176C                          1408                   
0000176C  3015                    1409      MOVE.W  (A5),D0     *D0 is the binary value to decode
0000176E                          1410                 
0000176E  123C 000A               1411      MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001772                          1412  
00001772  E368                    1413      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001774                          1414  
00001774  123C 000D               1415      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001778                          1416  
00001778  E268                    1417      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
0000177A                          1418  
0000177A  2C00                    1419      MOVE.L  D0, D6          *put D0 to data register into D7 for future printing
0000177C                          1420                   
0000177C  4EB9 000023F4           1421      JSR     PRINT_EA *by using jmp table
00001782                          1422  
00001782  6000 F96C               1423      BRA PARSE_MEMORY
00001786                          1424      
00001786                          1425  SIZE_B 
00001786                          1426                
00001786  43F9 00003574           1427      LEA         SIZE_B_PRINT, A1 
0000178C                          1428      
0000178C  4EF8 174E               1429      JMP PRINT_SIZE
00001790                          1430      
00001790                          1431  SIZE_W 
00001790                          1432                
00001790  43F9 0000357A           1433      LEA         SIZE_W_PRINT, A1 
00001796                          1434      
00001796  4EF8 174E               1435      JMP PRINT_SIZE
0000179A                          1436      
0000179A                          1437  SIZE_L 
0000179A                          1438                
0000179A  43F9 00003580           1439      LEA         SIZE_L_PRINT, A1 
000017A0                          1440      
000017A0  4EF8 174E               1441      JMP PRINT_SIZE
000017A4                          1442  
000017A4                          1443  
000017A4                          1444  
000017A4                          1445  -------------------- end include --------------------
000017A4                          1446                  INCLUDE 'DIVU_OR.X68'
000017A4                          1447      
000017A4  4EB8 1314               1448  DIVU_OR          JSR      GET_SIZE_PURPLE  
000017A8                          1449                                            
000017A8  BA3C 0003               1450                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
000017AC                          1451                   
000017AC  6700 0008               1452                   BEQ      DIVU_CODE
000017B0                          1453                   
000017B0  4EF9 000017EC           1454                   JMP      OR_CODE
000017B6                          1455                   
000017B6                          1456  DIVU_CODE  
000017B6                          1457                   * OP_CODE message
000017B6  43F9 00003532           1458                   LEA      DIVU_MESSAGE, A1
000017BC  103C 000E               1459                   MOVE.B   #14, D0
000017C0  4E4F                    1460                   TRAP #15
000017C2                          1461  
000017C2  3A3C 0001               1462                   MOVE    #%01, D5          
000017C6                          1463                   
000017C6                          1464              *     LEA      SIZE_W_PRINT,    A1
000017C6                          1465                   
000017C6                          1466              *     MOVE.B   #14,             D0
000017C6                          1467          
000017C6                          1468              *     TRAP #15
000017C6                          1469                   
000017C6  4EB8 1398               1470                   JSR     Set_Ea
000017CA                          1471                   
000017CA  1A3C 0001               1472                   MOVE.B  #%01, D5
000017CE                          1473                   
000017CE  4EB9 000023F4           1474                   JSR     PRINT_EA *by using jmp table
000017D4                          1475                   
000017D4  4EB8 1376               1476                   JSR     PRINT_COMMA
000017D8                          1477                   
000017D8                          1478                    * for the first Dn 
000017D8  4EB8 1386               1479                   JSR     GET_Data_Register
000017DC                          1480                   
000017DC  4286                    1481                   CLR.L   D6
000017DE                          1482                   
000017DE  1C3C 0000               1483                   MOVE.B  #%000, D6 * for mode
000017E2                          1484  
000017E2  4EB9 000023F4           1485                   JSR     PRINT_EA *by using jmp table
000017E8                          1486  
000017E8  4EF8 10F0               1487                   JMP     PARSE_MEMORY
000017EC                          1488  
000017EC                          1489  OR_CODE    
000017EC                          1490                   * OP_CODE message
000017EC  43F9 00003538           1491                   LEA      OR_MESSAGE, A1
000017F2  103C 000E               1492                   MOVE.B   #14, D0
000017F6  4E4F                    1493                   TRAP #15
000017F8                          1494  
000017F8  4EB8 132C               1495                   JSR PRINTOUT_SIZE_PURPLE
000017FC                          1496                   
000017FC                          1497                     * check for dn and ea
000017FC  4280                    1498                   CLR.L D0                *clear D0
000017FE                          1499                   
000017FE  4281                    1500                   CLR.L D1                *clear D1
00001800                          1501                   
00001800  3015                    1502                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001802                          1503                   
00001802                          1504                   * check the bit at 7
00001802  123C 0007               1505                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001806                          1506  
00001806  E368                    1507                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001808                          1508                   
00001808  123C 000F               1509                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
0000180C                          1510  
0000180C  E268                    1511                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
0000180E                          1512                   
0000180E  B03C 0000               1513                   CMP.B   #0, D0
00001812                          1514                   
00001812                          1515                  * BTST    #7, D0
00001812                          1516                   
00001812  6700 0024               1517                   BEQ     OR_FIRST_EA
00001816                          1518                   
00001816                          1519                   * for the first Dn 
00001816  4EB8 1386               1520                   JSR     GET_Data_Register
0000181A                          1521                   
0000181A  4286                    1522                   CLR.L   D6
0000181C                          1523                   
0000181C  1C3C 0000               1524                   MOVE.B  #%000, D6 * for mode
00001820                          1525                   
00001820  4EB9 000023F4           1526                   JSR     PRINT_EA *by using jmp table
00001826                          1527                   
00001826  4EB8 1376               1528                   JSR     PRINT_COMMA
0000182A                          1529                   
0000182A  4EB8 1398               1530                   JSR     Set_Ea
0000182E                          1531                   
0000182E  4EB9 000023F4           1532                   JSR     PRINT_EA *by using jmp table
00001834                          1533                   
00001834  4EF8 10F0               1534                   JMP     PARSE_MEMORY
00001838                          1535                   
00001838                          1536  OR_FIRST_EA
00001838  4EB8 1398               1537                   JSR     Set_Ea
0000183C                          1538                   
0000183C  4EB9 000023F4           1539                   JSR     PRINT_EA *by using jmp table
00001842                          1540                   
00001842  4EB8 1376               1541                   JSR     PRINT_COMMA
00001846                          1542                   
00001846                          1543                    * for the first Dn 
00001846  4EB8 1386               1544                   JSR     GET_Data_Register
0000184A                          1545                   
0000184A  4286                    1546                   CLR.L   D6
0000184C                          1547                   
0000184C  1C3C 0000               1548                   MOVE.B  #%000, D6 * for mode
00001850                          1549  
00001850  4EB9 000023F4           1550                   JSR     PRINT_EA *by using jmp table
00001856                          1551                   
00001856  4EF8 10F0               1552                   JMP     PARSE_MEMORY
0000185A                          1553  
0000185A                          1554  
0000185A                          1555  
0000185A                          1556  
0000185A                          1557  
0000185A                          1558  
0000185A                          1559  
0000185A                          1560  
0000185A                          1561  
0000185A                          1562  
0000185A                          1563  
0000185A                          1564  
0000185A                          1565  
0000185A                          1566  -------------------- end include --------------------
0000185A                          1567                  INCLUDE 'GROUP_0100_CODE.X68'
0000185A                          1568  GROUP_0100_CODE          *at this point we know the first 4 bits are 0100 -> NOP, RTS, JSR,  MOVEM, CLR
0000185A                          1569  
0000185A  4280                    1570                   CLR.L D0                *clear D0
0000185C                          1571                   
0000185C  4281                    1572                   CLR.L D1                *clear D1
0000185E                          1573                   
0000185E  3015                    1574                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001860                          1575  
00001860  123C 0004               1576                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
00001864                          1577  
00001864  E368                    1578                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
00001866                          1579                   
00001866  123C 0004               1580                   MOVE.B  #4,D1           *4 bits is the number of times to shift to hold everything except the opcode
0000186A                          1581  
0000186A  E268                    1582                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds everything except opcode
0000186C                          1583                   
0000186C                          1584                                              
0000186C  B07C 0E71               1585                   CMP.W    #$E71, D0      *if D0 holds E71, the opcode is NOP
00001870                          1586                   
00001870  6700 FE3A               1587                   BEQ      NOP_OPCODE       *Branch to NOP_CODE if the opcode is NOP
00001874                          1588                   
00001874                          1589                   
00001874  B07C 0E75               1590                   CMP.W    #$E75, D0      *if D0 holds E75, the opcode is RTS
00001878                          1591                   
00001878  6700 FE42               1592                   BEQ      RTS_OPCODE       *Branch to RTS_CODE if the opcode is RTS
0000187C                          1593                   
0000187C                          1594                   
0000187C  4280                    1595                   CLR.L D0                *clear D0
0000187E                          1596                   
0000187E                          1597                   
0000187E  4281                    1598                   CLR.L D1                *clear D1
00001880                          1599                   
00001880                          1600                   
00001880  3015                    1601                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001882                          1602  
00001882                          1603  
00001882  123C 0004               1604                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
00001886                          1605  
00001886                          1606  
00001886  E368                    1607                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
00001888                          1608                   
00001888  123C 000C               1609                   MOVE.B  #12,D1           *12 bits is the number of times to shift to hold the 4th-8th bits (counting left to right, non-inclusive)
0000188C                          1610  
0000188C  E268                    1611                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds 4th-8th bits (counting left to right, non-inclusive)
0000188E                          1612                   
0000188E  B07C 0002               1613                   CMP.W    #$2, D0        *if D0 holds #2, the opcode is CLR
00001892                          1614                   
00001892  6700 FE76               1615                   BEQ      CLR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
00001896                          1616                   
00001896                          1617          
00001896  B07C 000E               1618                   CMP.W    #$E, D0        *if D0 holds $E = 14, the opcode is JSR
0000189A                          1619                   
0000189A  6700 FE30               1620                   BEQ      JSR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
0000189E                          1621                   
0000189E  4280                    1622                   CLR.L D0                *clear D0
000018A0                          1623                   
000018A0  4281                    1624                   CLR.L D1                *clear D1
000018A2                          1625                   
000018A2  3015                    1626                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000018A4                          1627  
000018A4  123C 0007               1628                   MOVE.B  #7,D1 
000018A8                          1629  
000018A8  E368                    1630                   LSL.W   D1,D0 
000018AA                          1631                   
000018AA  123C 000D               1632                   MOVE.B  #13,D1 
000018AE                          1633  
000018AE  E268                    1634                   LSR.W   D1,D0     
000018B0                          1635                   
000018B0  B07C 0007               1636                   CMP.W    #%111, D0  
000018B4                          1637                   
000018B4  6700 FD9C               1638                   BEQ LEA_OPCODE
000018B8                          1639                   
000018B8  6000 00B4               1640                   BRA      MOVEM_OPCODE     *else it is a MOVEM
000018BC                          1641  
000018BC                          1642      
000018BC                          1643  
000018BC                          1644  
000018BC                          1645  
000018BC                          1646  
000018BC                          1647  
000018BC                          1648  -------------------- end include --------------------
000018BC                          1649                  INCLUDE 'MULS_AND.X68'
000018BC                          1650   
000018BC  4EB8 1314               1651  MULS_AND         JSR      GET_SIZE_PURPLE
000018C0                          1652                                              
000018C0  BA3C 0003               1653                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
000018C4                          1654                   
000018C4  6700 0008               1655                   BEQ      MULS_CODE
000018C8                          1656                   
000018C8  4EF9 00001900           1657                   JMP      AND_CODE
000018CE                          1658                   
000018CE                          1659  MULS_CODE
000018CE                          1660                   * OP_CODE message
000018CE  43F9 00003546           1661                   LEA MULS_MESSAGE, A1
000018D4                          1662                   
000018D4  103C 000E               1663                   MOVE.B #14, D0
000018D8                          1664                   
000018D8  4E4F                    1665                   TRAP #15
000018DA                          1666  
000018DA                          1667             *      LEA      SIZE_W_PRINT,    A1
000018DA                          1668                   
000018DA                          1669             *      MOVE.B   #14,             D0
000018DA                          1670          
000018DA                          1671             *      TRAP #15
000018DA                          1672                   
000018DA  4EB8 1398               1673                   JSR     Set_Ea
000018DE                          1674                   
000018DE  1A3C 0001               1675                   MOVE.B  #%01, D5
000018E2                          1676                   
000018E2  4EB9 000023F4           1677                   JSR     PRINT_EA *by using jmp table
000018E8                          1678                   
000018E8  4EB8 1376               1679                   JSR     PRINT_COMMA
000018EC                          1680                   
000018EC                          1681                    * for the first Dn 
000018EC  4EB8 1386               1682                   JSR     GET_Data_Register
000018F0                          1683                   
000018F0  4286                    1684                   CLR.L   D6
000018F2                          1685                   
000018F2  1C3C 0000               1686                   MOVE.B  #%000, D6 * for mode
000018F6                          1687  
000018F6  4EB9 000023F4           1688                   JSR     PRINT_EA *by using jmp table
000018FC                          1689  
000018FC  4EF8 10F0               1690                   JMP      PARSE_MEMORY
00001900                          1691  
00001900                          1692  AND_CODE
00001900                          1693                   * OP_CODE message
00001900  43F9 0000354C           1694                   LEA AND_MESSAGE, A1
00001906  103C 000E               1695                   MOVE.B #14, D0
0000190A  4E4F                    1696                   TRAP #15
0000190C                          1697                   
0000190C  4EB8 132C               1698                   JSR PRINTOUT_SIZE_PURPLE
00001910                          1699                   
00001910                          1700                     * check for dn and ea
00001910  4280                    1701                   CLR.L D0                *clear D0
00001912                          1702                   
00001912  4281                    1703                   CLR.L D1                *clear D1
00001914                          1704                   
00001914  3015                    1705                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001916                          1706                   
00001916                          1707                   * check the bit at 7
00001916  123C 0007               1708                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000191A                          1709  
0000191A  E368                    1710                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000191C                          1711                   
0000191C  123C 000F               1712                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
00001920                          1713  
00001920  E268                    1714                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
00001922                          1715                   
00001922  B03C 0000               1716                   CMP.B   #0, D0
00001926                          1717  
00001926                          1718                *   BTST    #8, D0
00001926                          1719                   
00001926  6700 0024               1720                   BEQ     AND_FIRST_EA
0000192A                          1721                   
0000192A                          1722                   * for the first Dn 
0000192A  4EB8 1386               1723                   JSR     GET_Data_Register
0000192E                          1724                   
0000192E  4286                    1725                   CLR.L   D6
00001930                          1726                   
00001930  1C3C 0000               1727                   MOVE.B  #%000, D6 * for mode
00001934                          1728                   
00001934  4EB9 000023F4           1729                   JSR     PRINT_EA *by using jmp table
0000193A                          1730                   
0000193A  4EB8 1376               1731                   JSR     PRINT_COMMA
0000193E                          1732                   
0000193E  4EB8 1398               1733                   JSR     Set_Ea
00001942                          1734                   
00001942  4EB9 000023F4           1735                   JSR     PRINT_EA *by using jmp table
00001948                          1736                   
00001948  4EF8 10F0               1737                   JMP      PARSE_MEMORY
0000194C                          1738                   
0000194C                          1739  AND_FIRST_EA
0000194C  4EB8 1398               1740                   JSR     Set_Ea
00001950                          1741                   
00001950  4EB9 000023F4           1742                   JSR     PRINT_EA *by using jmp table
00001956                          1743                   
00001956  4EB8 1376               1744                   JSR     PRINT_COMMA
0000195A                          1745                   
0000195A                          1746                    * for the first Dn 
0000195A  4EB8 1386               1747                   JSR     GET_Data_Register
0000195E                          1748                   
0000195E  4286                    1749                   CLR.L   D6
00001960                          1750                   
00001960  1C3C 0000               1751                   MOVE.B  #%000, D6 * for mode
00001964                          1752  
00001964  4EB9 000023F4           1753                   JSR     PRINT_EA *by using jmp table
0000196A                          1754                   
0000196A  4EF8 10F0               1755                   JMP      PARSE_MEMORY
0000196E                          1756  
0000196E                          1757  
0000196E                          1758  
0000196E                          1759  
0000196E                          1760  
0000196E                          1761  
0000196E                          1762  
0000196E                          1763  
0000196E                          1764  
0000196E                          1765  
0000196E                          1766  
0000196E                          1767  
0000196E                          1768  -------------------- end include --------------------
0000196E                          1769                  INCLUDE 'MOVEM.X68'
0000196E                          1770     
0000196E                          1771  
0000196E                          1772  MOVEM_OPCODE
0000196E                          1773  
0000196E  4280                    1774     CLR.L       D0               *Zero it
00001970                          1775     
00001970  4286                    1776     CLR.L       D6
00001972                          1777  
00001972  3015                    1778     MOVE.W      (A5), D0     *We'll play with it here
00001974                          1779  
00001974  43F9 000034D6           1780     LEA MOVEM_MESSAGE, A1
0000197A                          1781            
0000197A  103C 000E               1782     MOVE.B #14, D0
0000197E                          1783                   
0000197E  4E4F                    1784     TRAP #15    
00001980                          1785  
00001980  3015                    1786    MOVE.W     (A5), D0
00001982                          1787  
00001982  0800 0006               1788    BTST       #6,  D0      
00001986                          1789  
00001986  6600 0012               1790    BNE        PRINT_SIZE_L_MOVEM
0000198A                          1791  
0000198A  43F9 0000357A           1792    LEA SIZE_W_PRINT, A1
00001990                          1793            
00001990  103C 000E               1794    MOVE.B #14, D0
00001994                          1795                   
00001994  4E4F                    1796    TRAP #15    
00001996                          1797   
00001996  6000 000E               1798    BRA          DR_FIELD
0000199A                          1799      
0000199A                          1800    * Print out size for W
0000199A                          1801  PRINT_SIZE_L_MOVEM
0000199A                          1802  
0000199A  43F9 00003580           1803    LEA SIZE_L_PRINT, A1
000019A0                          1804            
000019A0  103C 000E               1805    MOVE.B #14, D0
000019A4                          1806                   
000019A4  4E4F                    1807    TRAP #15    
000019A6                          1808  
000019A6                          1809  DR_FIELD
000019A6                          1810                 
000019A6  0800 000A               1811    BTST        #10,  D0    * BIT TEST
000019AA                          1812  
000019AA  6700 000C               1813    BEQ         Regitset_Memory *if D0 holds a 1
000019AE                          1814  
000019AE  6000 0062               1815    BRA         Memory_Register *If D0 hollds a 0
000019B2                          1816  
000019B2  4284                    1817    CLR.L D4
000019B4                          1818  
000019B4  183C 000F               1819    MOVE.B #15, D4
000019B8                          1820  
000019B8                          1821  Regitset_Memory
000019B8  361E                    1822      MOVE.W      (A6)+, D3
000019BA                          1823      
000019BA                          1824      * CHECK IF PRE DECREMEMNT
000019BA  3015                    1825      MOVE.W (A5), D0
000019BC                          1826      
000019BC  123C 000A               1827      MOVE.B      #10, D1
000019C0                          1828      
000019C0  E368                    1829      LSL.W       D1, D0
000019C2                          1830  
000019C2  123C 000D               1831      MOVE.B      #13, D1
000019C6                          1832  
000019C6  E268                    1833      LSR.W       D1, D0
000019C8                          1834  
000019C8  B03C 0004               1835      CMP.B       #%100, D0
000019CC                          1836  
000019CC  6700 0064               1837      BEQ         OPPOSITE_LOOP 
000019D0                          1838      * NOW IT CAN BE IN REGULAR ORDER
000019D0                          1839      
000019D0  183C 000F               1840      MOVE.B      #15, D4
000019D4                          1841      
000019D4  4EB9 00001C08           1842      JSR         LOOP_MOVEM
000019DA                          1843      
000019DA  43F9 000035A6           1844      LEA COMMA, A1
000019E0                          1845      
000019E0  103C 000E               1846      MOVE.B      #14, D0
000019E4                          1847      
000019E4  4E4F                    1848      TRAP #15
000019E6                          1849      
000019E6  4EB9 000019F0           1850      JSR PRINT_ADDRESS
000019EC                          1851      
000019EC  6000 F702               1852      BRA PARSE_MEMORY
000019F0                          1853  
000019F0                          1854  PRINT_ADDRESS 
000019F0  3015                    1855      MOVE.W      (A5), D0
000019F2                          1856  
000019F2  123C 000A               1857      MOVE.B      #10, D1
000019F6                          1858      
000019F6  E368                    1859      LSL.W       D1, D0
000019F8                          1860      
000019F8  123C 000D               1861      MOVE.B      #13, D1
000019FC                          1862  
000019FC  E268                    1863      LSR.W       D1, D0
000019FE                          1864      
000019FE  1C00                    1865      MOVE.B      D0, D6
00001A00                          1866      
00001A00  3015                    1867      MOVE.W      (A5), D0
00001A02                          1868      
00001A02  E368                    1869      LSL.W       D1, D0
00001A04                          1870      
00001A04  E268                    1871      LSR.W       D1, D0
00001A06                          1872      
00001A06  4287                    1873      CLR.L       D7
00001A08                          1874      
00001A08  1E00                    1875      MOVE.B      D0, D7
00001A0A                          1876      
00001A0A  4EB9 000023F4           1877      JSR PRINT_EA
00001A10                          1878      
00001A10  4E75                    1879      RTS
00001A12                          1880  
00001A12                          1881  Memory_Register
00001A12  361E                    1882      MOVE.W (A6)+, D3
00001A14                          1883      
00001A14  4EB8 19F0               1884      JSR         PRINT_ADDRESS
00001A18                          1885      
00001A18  43F9 000035A6           1886      LEA         COMMA, A1
00001A1E                          1887      
00001A1E  103C 000E               1888      MOVE.B      #14, D0
00001A22                          1889      
00001A22  4E4F                    1890      TRAP #15
00001A24                          1891          
00001A24                          1892      *MOVE.W      (A6)+, D3
00001A24                          1893      
00001A24  183C 000F               1894      MOVE.B      #15, D4
00001A28                          1895      
00001A28  4EB9 00001C08           1896      JSR         LOOP_MOVEM
00001A2E                          1897      
00001A2E  6000 F6C0               1898      BRA PARSE_MEMORY
00001A32                          1899  
00001A32                          1900  
00001A32                          1901  OPPOSITE_LOOP
00001A32  4241                    1902      CLR         D1
00001A34                          1903  
00001A34                          1904      *MOVE.W      (A6)+, D3
00001A34                          1905      
00001A34  183C 000F               1906      MOVE.B      #15, D4
00001A38                          1907      
00001A38  4EB9 00001A52           1908      JSR OPPOSITE_LOOP_MOVEM
00001A3E                          1909      
00001A3E  43F9 000035A6           1910      LEA COMMA, A1
00001A44                          1911      
00001A44  103C 000E               1912      MOVE.B      #14, D0
00001A48                          1913      
00001A48  4E4F                    1914      TRAP #15
00001A4A                          1915      
00001A4A  4EB8 19F0               1916      JSR PRINT_ADDRESS
00001A4E                          1917      
00001A4E  6000 F6A0               1918      BRA PARSE_MEMORY
00001A52                          1919  
00001A52                          1920          
00001A52                          1921  OPPOSITE_LOOP_MOVEM
00001A52                          1922          
00001A52  0903                    1923      BTST        D4, D3     * BIT TEST
00001A54                          1924  
00001A54  6600 0020               1925      BNE         OPPOSITE_IS_USED_FIRST
00001A58                          1926  
00001A58  5304                    1927      SUB.B       #1, D4
00001A5A                          1928      
00001A5A                          1929  OPPOSITE_CHECK
00001A5A  B83C 00FF               1930      CMP.B       #-1,  D4
00001A5E                          1931  
00001A5E  6700 0B80               1932      BEQ         DONE
00001A62                          1933  
00001A62  60EE                    1934      BRA         OPPOSITE_LOOP_MOVEM
00001A64                          1935      
00001A64                          1936  OPPOSITE_LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
00001A64  0903                    1937      BTST        D4, D3     * BIT TEST
00001A66                          1938  
00001A66  6600 0018               1939      BNE         OPPOSITE_IS_USED
00001A6A                          1940  
00001A6A  5304                    1941      SUB.B       #1, D4
00001A6C                          1942      
00001A6C                          1943  OPPOSITE_CHECK_SECOND
00001A6C  B83C 00FF               1944      CMP.B       #-1,  D4
00001A70                          1945  
00001A70  6700 0B6E               1946      BEQ         DONE
00001A74                          1947  
00001A74  60EE                    1948      BRA         OPPOSITE_LOOP_MOVEM_SECOND
00001A76                          1949  
00001A76                          1950  OPPOSITE_IS_USED_FIRST
00001A76  4EB9 00001A96           1951      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
00001A7C                          1952  
00001A7C  5304                    1953      SUB.B       #1, D4
00001A7E                          1954  
00001A7E  60EC                    1955      BRA         OPPOSITE_CHECK_SECOND
00001A80                          1956  
00001A80                          1957  
00001A80                          1958  OPPOSITE_IS_USED
00001A80  43F9 0000358F           1959      LEA         SLASH, A1
00001A86                          1960  
00001A86  103C 000E               1961      MOVE.B      #14, D0
00001A8A                          1962  
00001A8A  4E4F                    1963      TRAP #15
00001A8C                          1964      
00001A8C  4EB9 00001A96           1965      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
00001A92                          1966  
00001A92  5304                    1967      SUB.B       #1, D4
00001A94                          1968  
00001A94  60D6                    1969      BRA         OPPOSITE_CHECK_SECOND
00001A96                          1970  
00001A96                          1971      
00001A96                          1972      
00001A96                          1973  OPPOSITE_PRINT_REGISTER_MOVEM
00001A96  41F9 00001AA8           1974      LEA        OPPOSITE_jmp_table_MOVEM, A0
00001A9C  4242                    1975      CLR        D2
00001A9E  143C 0006               1976      MOVE.B     #6, D2
00001AA2  C4C4                    1977      MULU       D4, D2                           
00001AA4  4EF0 2000               1978      JMP        0(A0,D2)   *Jump indirect with index
00001AA8                          1979                      
00001AA8                          1980  OPPOSITE_jmp_table_MOVEM      
00001AA8  4EF9 00001B08           1981      JMP         OPPOSITE_bit0
00001AAE  4EF9 00001B18           1982                 JMP         OPPOSITE_bit1
00001AB4  4EF9 00001B28           1983                 JMP         OPPOSITE_bit2
00001ABA  4EF9 00001B38           1984                 JMP         OPPOSITE_bit3
00001AC0  4EF9 00001B48           1985                 JMP         OPPOSITE_bit4
00001AC6  4EF9 00001B58           1986                 JMP         OPPOSITE_bit5
00001ACC  4EF9 00001B68           1987                 JMP         OPPOSITE_bit6
00001AD2  4EF9 00001B78           1988                 JMP         OPPOSITE_bit7
00001AD8  4EF9 00001B88           1989                 JMP         OPPOSITE_bit8
00001ADE  4EF9 00001B98           1990                 JMP         OPPOSITE_bit9
00001AE4  4EF9 00001BA8           1991                 JMP         OPPOSITE_bit10
00001AEA  4EF9 00001BB8           1992                 JMP         OPPOSITE_bit11
00001AF0  4EF9 00001BC8           1993                 JMP         OPPOSITE_bit12
00001AF6  4EF9 00001BD8           1994                 JMP         OPPOSITE_bit13
00001AFC  4EF9 00001BE8           1995                 JMP         OPPOSITE_bit14
00001B02  4EF9 00001BF8           1996                 JMP         OPPOSITE_bit15
00001B08                          1997          
00001B08                          1998   
00001B08                          1999   
00001B08                          2000   
00001B08                          2001  OPPOSITE_bit0    * D0
00001B08  1E3C 0007               2002      MOVE.B    #%111, D7    * REGISTER
00001B0C                          2003      
00001B0C  1C3C 0001               2004      MOVE.B    #%001, D6    * MODE
00001B10                          2005  
00001B10  4EB9 000023F4           2006      JSR        PRINT_EA
00001B16                          2007  
00001B16  4E75                    2008      RTS    
00001B18                          2009  
00001B18                          2010  OPPOSITE_bit1    * D1
00001B18  1E3C 0006               2011      MOVE.B    #%110, D7    * REGISTER
00001B1C                          2012      
00001B1C  1C3C 0001               2013      MOVE.B    #%001, D6    * MODE
00001B20                          2014  
00001B20  4EB9 000023F4           2015      JSR        PRINT_EA
00001B26                          2016  
00001B26  4E75                    2017      RTS    
00001B28                          2018  
00001B28                          2019  OPPOSITE_bit2    * D2
00001B28  1E3C 0005               2020      MOVE.B    #%101, D7    * REGISTER
00001B2C                          2021      
00001B2C  1C3C 0001               2022      MOVE.B    #%001, D6    * MODE
00001B30                          2023  
00001B30  4EB9 000023F4           2024      JSR        PRINT_EA    
00001B36                          2025  
00001B36  4E75                    2026      RTS
00001B38                          2027  
00001B38                          2028  OPPOSITE_bit3    * D3
00001B38  1E3C 0004               2029      MOVE.B    #%100, D7    * REGISTER
00001B3C                          2030      
00001B3C  1C3C 0001               2031      MOVE.B    #%001, D6    * MODE
00001B40                          2032  
00001B40  4EB9 000023F4           2033      JSR        PRINT_EA
00001B46                          2034  
00001B46  4E75                    2035      RTS    
00001B48                          2036  
00001B48                          2037  OPPOSITE_bit4    * D4
00001B48  1E3C 0003               2038      MOVE.B    #%011, D7    * REGISTER
00001B4C                          2039  
00001B4C  1C3C 0001               2040      MOVE.B    #%001, D6    * MODE
00001B50                          2041  
00001B50  4EB9 000023F4           2042      JSR        PRINT_EA
00001B56                          2043  
00001B56  4E75                    2044      RTS    
00001B58                          2045  
00001B58                          2046  
00001B58                          2047  OPPOSITE_bit5    * D5
00001B58  1E3C 0002               2048      MOVE.B    #%010, D7    * REGISTER
00001B5C                          2049      
00001B5C  1C3C 0001               2050      MOVE.B    #%001, D6    * MODE
00001B60                          2051  
00001B60  4EB9 000023F4           2052      JSR        PRINT_EA
00001B66                          2053  
00001B66  4E75                    2054      RTS    
00001B68                          2055  
00001B68                          2056  OPPOSITE_bit6    * D6
00001B68  1E3C 0001               2057      MOVE.B    #%001, D7    * REGISTER
00001B6C                          2058      
00001B6C  1C3C 0001               2059      MOVE.B    #%001, D6    * MODE
00001B70                          2060  
00001B70  4EB9 000023F4           2061      JSR        PRINT_EA
00001B76                          2062  
00001B76  4E75                    2063      RTS    
00001B78                          2064  
00001B78                          2065  OPPOSITE_bit7    * D7
00001B78  1E3C 0000               2066      MOVE.B    #%000, D7    * REGISTER
00001B7C                          2067      
00001B7C  1C3C 0001               2068      MOVE.B    #%001, D6    * MODE
00001B80                          2069  
00001B80  4EB9 000023F4           2070      JSR        PRINT_EA
00001B86                          2071  
00001B86  4E75                    2072      RTS    
00001B88                          2073  
00001B88                          2074  OPPOSITE_bit8    * A0
00001B88  1E3C 0007               2075      MOVE.B    #%111, D7    * REGISTER
00001B8C                          2076      
00001B8C  1C3C 0000               2077      MOVE.B    #%000, D6    * MODE
00001B90                          2078  
00001B90  4EB9 000023F4           2079      JSR        PRINT_EA
00001B96                          2080  
00001B96  4E75                    2081      RTS    
00001B98                          2082  
00001B98                          2083  OPPOSITE_bit9    * A1
00001B98  1E3C 0006               2084      MOVE.B    #%110, D7    * REGISTER
00001B9C                          2085      
00001B9C  1C3C 0000               2086      MOVE.B    #%000, D6    * MODE
00001BA0                          2087  
00001BA0  4EB9 000023F4           2088      JSR        PRINT_EA
00001BA6                          2089  
00001BA6  4E75                    2090      RTS    
00001BA8                          2091  
00001BA8                          2092  OPPOSITE_bit10    * A2
00001BA8  1E3C 0005               2093      MOVE.B    #%101, D7    * REGISTER
00001BAC                          2094      
00001BAC  1C3C 0000               2095      MOVE.B    #%000, D6    * MODE
00001BB0                          2096  
00001BB0  4EB9 000023F4           2097      JSR        PRINT_EA
00001BB6                          2098  
00001BB6  4E75                    2099      RTS    
00001BB8                          2100  
00001BB8                          2101  
00001BB8                          2102  OPPOSITE_bit11    * A5
00001BB8  1E3C 0002               2103      MOVE.B    #%010, D7    * REGISTER
00001BBC                          2104      
00001BBC  1C3C 0000               2105      MOVE.B    #%000, D6    * MODE
00001BC0                          2106  
00001BC0  4EB9 000023F4           2107      JSR        PRINT_EA
00001BC6                          2108  
00001BC6  4E75                    2109      RTS    
00001BC8                          2110  
00001BC8                          2111  OPPOSITE_bit12    * A4
00001BC8  1E3C 0003               2112      MOVE.B    #%011, D7    * REGISTER
00001BCC                          2113      
00001BCC  1C3C 0000               2114      MOVE.B    #%000, D6    * MODE
00001BD0                          2115  
00001BD0  4EB9 000023F4           2116      JSR        PRINT_EA
00001BD6                          2117  
00001BD6  4E75                    2118      RTS    
00001BD8                          2119  
00001BD8                          2120  
00001BD8                          2121  OPPOSITE_bit13    * A5
00001BD8  1E3C 0002               2122      MOVE.B    #%010, D7    * REGISTER
00001BDC                          2123      
00001BDC  1C3C 0000               2124      MOVE.B    #%000, D6    * MODE
00001BE0                          2125  
00001BE0  4EB9 000023F4           2126      JSR        PRINT_EA
00001BE6                          2127  
00001BE6  4E75                    2128      RTS    
00001BE8                          2129  
00001BE8                          2130  
00001BE8                          2131  OPPOSITE_bit14     * A6
00001BE8  1E3C 0001               2132      MOVE.B    #%001, D7    * REGISTER
00001BEC                          2133      
00001BEC  1C3C 0000               2134      MOVE.B    #%000, D6    * MODE
00001BF0                          2135  
00001BF0  4EB9 000023F4           2136      JSR        PRINT_EA
00001BF6                          2137  
00001BF6  4E75                    2138      RTS        
00001BF8                          2139  
00001BF8                          2140  
00001BF8                          2141  OPPOSITE_bit15    * A7
00001BF8  1E3C 0000               2142      MOVE.B    #%000, D7    * REGISTER
00001BFC                          2143      
00001BFC  1C3C 0000               2144      MOVE.B    #%000, D6    * MODE
00001C00                          2145  
00001C00  4EB9 000023F4           2146      JSR        PRINT_EA
00001C06                          2147  
00001C06  4E75                    2148      RTS    
00001C08                          2149  
00001C08                          2150  
00001C08                          2151  
00001C08                          2152  
00001C08                          2153  
00001C08                          2154  LOOP_MOVEM
00001C08                          2155          
00001C08  0903                    2156      BTST        D4, D3     * BIT TEST
00001C0A                          2157  
00001C0A  6600 0020               2158      BNE         IS_USED_FIRST
00001C0E                          2159  
00001C0E  5304                    2160      SUB.B       #1, D4
00001C10                          2161      
00001C10                          2162  CHECK
00001C10  B83C 00FF               2163      CMP.B       #-1,  D4
00001C14                          2164  
00001C14  6700 09CA               2165      BEQ         DONE
00001C18                          2166  
00001C18  60EE                    2167      BRA         LOOP_MOVEM
00001C1A                          2168      
00001C1A                          2169  LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
00001C1A  0903                    2170      BTST        D4, D3     * BIT TEST
00001C1C                          2171  
00001C1C  6600 0018               2172      BNE         IS_USED
00001C20                          2173  
00001C20  5304                    2174      SUB.B       #1, D4
00001C22                          2175      
00001C22                          2176  CHECK_SECOND
00001C22  B83C 00FF               2177      CMP.B       #-1,  D4
00001C26                          2178  
00001C26  6700 09B8               2179      BEQ         DONE
00001C2A                          2180  
00001C2A  60EE                    2181      BRA         LOOP_MOVEM_SECOND
00001C2C                          2182  
00001C2C                          2183  IS_USED_FIRST
00001C2C  4EB9 00001C4C           2184      JSR         PRINT_REGISTER_MOVEM
00001C32                          2185  
00001C32  5304                    2186      SUB.B       #1, D4
00001C34                          2187  
00001C34  60EC                    2188      BRA         CHECK_SECOND
00001C36                          2189  
00001C36                          2190  
00001C36                          2191  IS_USED
00001C36  43F9 0000358F           2192      LEA         SLASH, A1
00001C3C                          2193  
00001C3C  103C 000E               2194      MOVE.B      #14, D0
00001C40                          2195  
00001C40  4E4F                    2196      TRAP #15
00001C42                          2197      
00001C42  4EB9 00001C4C           2198      JSR         PRINT_REGISTER_MOVEM
00001C48                          2199  
00001C48  5304                    2200      SUB.B       #1, D4
00001C4A                          2201  
00001C4A  60D6                    2202      BRA         CHECK_SECOND
00001C4C                          2203  
00001C4C                          2204  
00001C4C                          2205  
00001C4C                          2206  
00001C4C                          2207  
00001C4C                          2208  PRINT_REGISTER_MOVEM
00001C4C  41F9 00001C5E           2209      LEA         jmp_table_MOVEM, A0
00001C52  4242                    2210      CLR         D2
00001C54  143C 0006               2211      MOVE.B      #6, D2
00001C58  C4C4                    2212      MULU        D4, D2                           
00001C5A  4EF0 2000               2213      JMP         0(A0,D2)   *Jump indirect with index
00001C5E                          2214                      
00001C5E                          2215  jmp_table_MOVEM      
00001C5E  4EF9 00001CBE           2216      JMP         bit0
00001C64  4EF9 00001CCE           2217                 JMP         bit1
00001C6A  4EF9 00001CDE           2218                 JMP         bit2
00001C70  4EF9 00001CEE           2219                 JMP         bit3
00001C76  4EF9 00001CFE           2220                 JMP         bit4
00001C7C  4EF9 00001D0E           2221                 JMP         bit5
00001C82  4EF9 00001D1E           2222                 JMP         bit6
00001C88  4EF9 00001D2E           2223                 JMP         bit7
00001C8E  4EF9 00001D3E           2224                 JMP         bit8
00001C94  4EF9 00001D4E           2225                 JMP         bit9
00001C9A  4EF9 00001D5E           2226                 JMP         bit10
00001CA0  4EF9 00001D6E           2227                 JMP         bit11
00001CA6  4EF9 00001D7E           2228                 JMP         bit12
00001CAC  4EF9 00001D8E           2229                 JMP         bit13
00001CB2  4EF9 00001D9E           2230                 JMP         bit14
00001CB8  4EF9 00001DAE           2231                 JMP         bit15
00001CBE                          2232          
00001CBE                          2233   
00001CBE                          2234   
00001CBE                          2235   
00001CBE                          2236  bit0    * D0
00001CBE  1E3C 0000               2237      MOVE.B    #%000, D7    * REGISTER
00001CC2                          2238      
00001CC2  1C3C 0000               2239      MOVE.B    #%000, D6    * MODE
00001CC6                          2240  
00001CC6  4EB9 000023F4           2241      JSR        PRINT_EA
00001CCC                          2242  
00001CCC  4E75                    2243      RTS    
00001CCE                          2244  
00001CCE                          2245  bit1    * D1
00001CCE  1E3C 0001               2246      MOVE.B    #%001, D7    * REGISTER
00001CD2                          2247      
00001CD2  1C3C 0000               2248      MOVE.B    #%000, D6    * MODE
00001CD6                          2249  
00001CD6  4EB9 000023F4           2250      JSR        PRINT_EA
00001CDC                          2251  
00001CDC  4E75                    2252      RTS    
00001CDE                          2253  
00001CDE                          2254  bit2    * D2
00001CDE  1E3C 0002               2255      MOVE.B    #%010, D7    * REGISTER
00001CE2                          2256      
00001CE2  1C3C 0000               2257      MOVE.B    #%000, D6    * MODE
00001CE6                          2258  
00001CE6  4EB9 000023F4           2259      JSR        PRINT_EA    
00001CEC                          2260  
00001CEC  4E75                    2261      RTS
00001CEE                          2262  
00001CEE                          2263  bit3    * D3
00001CEE  1E3C 0003               2264      MOVE.B    #%011, D7    * REGISTER
00001CF2                          2265      
00001CF2  1C3C 0000               2266      MOVE.B    #%000, D6    * MODE
00001CF6                          2267  
00001CF6  4EB9 000023F4           2268      JSR        PRINT_EA
00001CFC                          2269  
00001CFC  4E75                    2270      RTS    
00001CFE                          2271  
00001CFE                          2272  bit4    * D4
00001CFE  1E3C 0004               2273      MOVE.B    #%100, D7    * REGISTER
00001D02                          2274  
00001D02  1C3C 0000               2275      MOVE.B    #%000, D6    * MODE
00001D06                          2276  
00001D06  4EB9 000023F4           2277      JSR        PRINT_EA
00001D0C                          2278  
00001D0C  4E75                    2279      RTS    
00001D0E                          2280  
00001D0E                          2281  
00001D0E                          2282  bit5    * D5
00001D0E  1E3C 0005               2283      MOVE.B    #%101, D7    * REGISTER
00001D12                          2284      
00001D12  1C3C 0000               2285      MOVE.B    #%000, D6    * MODE
00001D16                          2286  
00001D16  4EB9 000023F4           2287      JSR        PRINT_EA
00001D1C                          2288  
00001D1C  4E75                    2289      RTS    
00001D1E                          2290  
00001D1E                          2291  bit6    * D6
00001D1E  1E3C 0006               2292      MOVE.B    #%110, D7    * REGISTER
00001D22                          2293      
00001D22  1C3C 0000               2294      MOVE.B    #%000, D6    * MODE
00001D26                          2295  
00001D26  4EB9 000023F4           2296      JSR        PRINT_EA
00001D2C                          2297  
00001D2C  4E75                    2298      RTS    
00001D2E                          2299  
00001D2E                          2300  bit7    * D7
00001D2E  1E3C 0007               2301      MOVE.B    #%111, D7    * REGISTER
00001D32                          2302      
00001D32  1C3C 0000               2303      MOVE.B    #%000, D6    * MODE
00001D36                          2304  
00001D36  4EB9 000023F4           2305      JSR        PRINT_EA
00001D3C                          2306  
00001D3C  4E75                    2307      RTS    
00001D3E                          2308  
00001D3E                          2309  bit8    * A0
00001D3E  1E3C 0000               2310      MOVE.B    #%000, D7    * REGISTER
00001D42                          2311      
00001D42  1C3C 0001               2312      MOVE.B    #%001, D6    * MODE
00001D46                          2313  
00001D46  4EB9 000023F4           2314      JSR        PRINT_EA
00001D4C                          2315  
00001D4C  4E75                    2316      RTS    
00001D4E                          2317  
00001D4E                          2318  bit9    * A1
00001D4E  1E3C 0001               2319      MOVE.B    #%001, D7    * REGISTER
00001D52                          2320      
00001D52  1C3C 0001               2321      MOVE.B    #%001, D6    * MODE
00001D56                          2322  
00001D56  4EB9 000023F4           2323      JSR        PRINT_EA
00001D5C                          2324  
00001D5C  4E75                    2325      RTS    
00001D5E                          2326  
00001D5E                          2327  bit10    * A2
00001D5E  1E3C 0002               2328      MOVE.B    #%010, D7    * REGISTER
00001D62                          2329      
00001D62  1C3C 0001               2330      MOVE.B    #%001, D6    * MODE
00001D66                          2331  
00001D66  4EB9 000023F4           2332      JSR        PRINT_EA
00001D6C                          2333  
00001D6C  4E75                    2334      RTS    
00001D6E                          2335  
00001D6E                          2336  
00001D6E                          2337  bit11    * A5
00001D6E  1E3C 0003               2338      MOVE.B    #%011, D7    * REGISTER
00001D72                          2339      
00001D72  1C3C 0001               2340      MOVE.B    #%001, D6    * MODE
00001D76                          2341  
00001D76  4EB9 000023F4           2342      JSR        PRINT_EA
00001D7C                          2343  
00001D7C  4E75                    2344      RTS    
00001D7E                          2345  
00001D7E                          2346  bit12    * A4
00001D7E  1E3C 0004               2347      MOVE.B    #%100, D7    * REGISTER
00001D82                          2348      
00001D82  1C3C 0001               2349      MOVE.B    #%001, D6    * MODE
00001D86                          2350  
00001D86  4EB9 000023F4           2351      JSR        PRINT_EA
00001D8C                          2352  
00001D8C  4E75                    2353      RTS    
00001D8E                          2354  
00001D8E                          2355  
00001D8E                          2356  bit13    * A5
00001D8E  1E3C 0005               2357      MOVE.B    #%101, D7    * REGISTER
00001D92                          2358      
00001D92  1C3C 0001               2359      MOVE.B    #%001, D6    * MODE
00001D96                          2360  
00001D96  4EB9 000023F4           2361      JSR        PRINT_EA
00001D9C                          2362  
00001D9C  4E75                    2363      RTS    
00001D9E                          2364  
00001D9E                          2365  
00001D9E                          2366  bit14     * A6
00001D9E  1E3C 0006               2367      MOVE.B    #%110, D7    * REGISTER
00001DA2                          2368      
00001DA2  1C3C 0001               2369      MOVE.B    #%001, D6    * MODE
00001DA6                          2370  
00001DA6  4EB9 000023F4           2371      JSR        PRINT_EA
00001DAC                          2372  
00001DAC  4E75                    2373      RTS        
00001DAE                          2374  
00001DAE                          2375  
00001DAE                          2376  bit15    * A7
00001DAE  1E3C 0007               2377      MOVE.B    #%111, D7    * REGISTER
00001DB2                          2378      
00001DB2  1C3C 0001               2379      MOVE.B    #%001, D6    * MODE
00001DB6                          2380  
00001DB6  4EB9 000023F4           2381      JSR        PRINT_EA
00001DBC                          2382  
00001DBC  4E75                    2383      RTS    
00001DBE                          2384  
00001DBE                          2385  DONE_MOVEM_LOOP
00001DBE  4E75                    2386      RTS
00001DC0                          2387  
00001DC0                          2388     * SIMHALT             ; halt simulator
00001DC0                          2389      *INCLUDE 'MESSAGE_Data.X68'
00001DC0                          2390     * INCLUDE 'JUMPTABLE EA.X68'
00001DC0                          2391  
00001DC0                          2392  
00001DC0                          2393     * END    START        ; last line of source
00001DC0                          2394  
00001DC0                          2395  
00001DC0                          2396  
00001DC0                          2397  
00001DC0                          2398  
00001DC0                          2399  
00001DC0                          2400  
00001DC0                          2401  
00001DC0                          2402  
00001DC0                          2403  
00001DC0                          2404  
00001DC0                          2405  
00001DC0                          2406  
00001DC0                          2407  
00001DC0                          2408  
00001DC0                          2409  
00001DC0                          2410  
00001DC0                          2411  
00001DC0                          2412  
00001DC0                          2413  
00001DC0                          2414  
00001DC0                          2415  
00001DC0                          2416  
00001DC0                          2417  
00001DC0                          2418  
00001DC0                          2419  
00001DC0                          2420  
00001DC0                          2421  
00001DC0                          2422  
00001DC0                          2423  
00001DC0                          2424  
00001DC0                          2425  
00001DC0                          2426  
00001DC0                          2427  
00001DC0                          2428  
00001DC0                          2429  
00001DC0                          2430  
00001DC0                          2431  
00001DC0                          2432  -------------------- end include --------------------
00001DC0                          2433                  INCLUDE 'MOVEQ.X68'
00001DC0                          2434  
00001DC0                          2435  MOVEQ 
00001DC0                          2436  
00001DC0                          2437                   * ADD message
00001DC0  43F9 0000352B           2438                   LEA      MOVEQ_MESSAGE,    A1
00001DC6  103C 000E               2439                   MOVE.B   #14,            D0
00001DCA  4E4F                    2440                   TRAP #15
00001DCC                          2441                   
00001DCC                          2442                   * print out size L
00001DCC  43F9 00003580           2443                   LEA      SIZE_L_PRINT,    A1
00001DD2  103C 000E               2444                   MOVE.B   #14,             D0          
00001DD6  4E4F                    2445                   TRAP #15   
00001DD8                          2446                   
00001DD8                          2447                   * print out immediate Data
00001DD8                          2448                   
00001DD8  43F9 00003586           2449                  LEA     POUND_SIGN, A1
00001DDE                          2450              
00001DDE  103C 000E               2451                  MOVE.B  #14, D0
00001DE2                          2452              
00001DE2  4E4F                    2453                  TRAP #15
00001DE4                          2454              
00001DE4  43F9 00003588           2455                  LEA     HEX_SIGN, A1
00001DEA                          2456              
00001DEA  4E4F                    2457                  TRAP #15
00001DEC                          2458                  
00001DEC  4280                    2459                  CLR.L       D0              *Zero it
00001DEE                          2460  
00001DEE  3015                    2461                  MOVE.W      (A5),D0     *We'll play with it here
00001DF0                          2462                 
00001DF0  123C 0008               2463                  MOVE.B      #8, D1
00001DF4                          2464                 
00001DF4  E368                    2465                  LSL.W       D1, D0
00001DF6                          2466  
00001DF6  123C 0008               2467                  MOVE.B      #8,D1       *Shift 12 bits to the right  
00001DFA                          2468  
00001DFA  E268                    2469                  LSR.W       D1,D0           *Move the bits -> D0 holds DATA
00001DFC                          2470                      
00001DFC  4285                    2471                  CLR.L D5
00001DFE                          2472                 
00001DFE  3A00                    2473                  MOVE.W D0, D5      
00001E00                          2474          
00001E00  4EB9 00002356           2475                  JSR         HEX_TO_ASCII
00001E06                          2476                  
00001E06  43F9 000035A6           2477                  LEA      COMMA,    A1
00001E0C  103C 000E               2478                  MOVE.B   #14,            D0
00001E10  4E4F                    2479                  TRAP #15
00001E12                          2480                   
00001E12                          2481                  * for the first Dn 
00001E12  4286                    2482                  CLR.L D6
00001E14                          2483                  
00001E14  4EB8 1386               2484                  JSR     GET_Data_Register
00001E18                          2485                  
00001E18  1C3C 0000               2486                  MOVE.B  #%000, D6 * for mode
00001E1C                          2487                   
00001E1C  4EB9 000023F4           2488                  JSR     PRINT_EA *by using jmp table
00001E22                          2489                   
00001E22  6000 F2CC               2490                  BRA PARSE_MEMORY
00001E26                          2491          
00001E26                          2492  
00001E26                          2493  
00001E26                          2494  
00001E26                          2495  
00001E26                          2496  
00001E26                          2497  
00001E26                          2498  
00001E26                          2499  
00001E26                          2500  
00001E26                          2501  
00001E26                          2502  
00001E26                          2503  
00001E26                          2504  -------------------- end include --------------------
00001E26                          2505                  INCLUDE 'DAMIAN_OP_CODE.X68'
00001E26  4280                    2506  SHIFTS           CLR.L D0
00001E28                          2507                      
00001E28  4286                    2508                   CLR.L D6
00001E2A                          2509  
00001E2A  4281                    2510                   CLR.L D1
00001E2C                          2511                   
00001E2C  3015                    2512                   MOVE.W (A5), D0
00001E2E                          2513                   
00001E2E  E148                    2514                   LSL.W #8, D0
00001E30                          2515                   
00001E30  123C 000E               2516                   MOVE.B #14, D1
00001E34                          2517                   
00001E34  E268                    2518                   LSR.W D1, D0
00001E36                          2519                   
00001E36  B03C 0003               2520                   CMP.B  #%11, D0            * check to see if its memory shift
00001E3A                          2521                   
00001E3A  6700 0024               2522                   BEQ MEMORY_SHIFTS
00001E3E                          2523                   
00001E3E  3015                    2524                   MOVE.W     (A5), D0
00001E40                          2525                   
00001E40  123C 000B               2526                   MOVE.B     #11, D1
00001E44                          2527                   
00001E44  E368                    2528                   LSL.W      D1, D0
00001E46                          2529                   
00001E46  123C 000E               2530                   MOVE.B     #14, D1
00001E4A                          2531                   
00001E4A  E268                    2532                   LSR.W      D1, D0
00001E4C                          2533                   
00001E4C  B03C 0000               2534                   CMP.B      #%00, D0
00001E50                          2535                   
00001E50  6700 010A               2536                   BEQ        ASD
00001E54                          2537                   
00001E54  B03C 0001               2538                   CMP.B      #%01, D0
00001E58                          2539                   
00001E58  6700 0032               2540                   BEQ        LSD
00001E5C                          2541                   
00001E5C  6000 0096               2542                   BRA        ROD
00001E60                          2543                   
00001E60                          2544                   
00001E60                          2545  MEMORY_SHIFTS
00001E60  3015                    2546                   MOVE.W (A5),D0
00001E62                          2547                   
00001E62  E948                    2548                   LSL.W #4,D0            *shift out the opcode
00001E64                          2549                   
00001E64  123C 000D               2550                   MOVE.B #13,D1          
00001E68                          2551                   
00001E68  E268                    2552                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there
00001E6A                          2553                   
00001E6A  B03C 0001               2554                   CMP.B #1,D0            
00001E6E                          2555                   
00001E6E  6700 001C               2556                   BEQ LSD                *if the bits are 1, it is a logical shift
00001E72                          2557                   
00001E72  B03C 0003               2558                   CMP.B #3,D0
00001E76                          2559                   
00001E76  6700 007C               2560                   BEQ ROD                *if the bits are 3, it is a rotation
00001E7A                          2561                   
00001E7A  3015                    2562                   MOVE.W (A5),D0
00001E7C                          2563                   
00001E7C  E948                    2564                   LSL.W #4,D0            *shift out the opcode
00001E7E                          2565                   
00001E7E  123C 000D               2566                   MOVE.B #13,D1          
00001E82                          2567                   
00001E82  E268                    2568                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there   
00001E84                          2569                      
00001E84  B03C 0000               2570                   CMP.B  #0, D0
00001E88                          2571                   
00001E88  6700 00D2               2572                   BEQ    ASD
00001E8C                          2573                   
00001E8C                          2574  
00001E8C  4280                    2575  LSD              CLR.L D0               *still need to do checks, since an asd shift could still be a possibility
00001E8E                          2576                   
00001E8E  4281                    2577                   CLR.L D1
00001E90                          2578                                                 
00001E90  3015                    2579                   MOVE.W (A5), D0
00001E92                          2580                   
00001E92  EF48                    2581                   LSL.W  #7, D0
00001E94                          2582                   
00001E94  123C 000F               2583                   MOVE.B #15, D1
00001E98                          2584                   
00001E98  E268                    2585                   LSR.W  D1, D0
00001E9A                          2586                   
00001E9A  B03C 0001               2587                   CMP.B  #1, D0
00001E9E                          2588                   
00001E9E  6700 0006               2589                   BEQ LSL
00001EA2                          2590                   
00001EA2  6000 0024               2591                   BRA LSR
00001EA6                          2592                   
00001EA6                          2593  
00001EA6                          2594  LSL
00001EA6  43F9 0000355C           2595                   LEA LSL_MESSAGE, A1    * print message
00001EAC                          2596                   
00001EAC  103C 000E               2597                   MOVE.B #14, D0
00001EB0                          2598                   
00001EB0  4E4F                    2599                   TRAP #15
00001EB2                          2600              
00001EB2  3015                    2601                   MOVE.W (A5), D0
00001EB4                          2602                   
00001EB4  E148                    2603                   LSL.W #8, D0
00001EB6                          2604                   
00001EB6  123C 000E               2605                   MOVE.B #14, D1
00001EBA                          2606                   
00001EBA  E268                    2607                   LSR.W D1, D0
00001EBC                          2608                   
00001EBC  B03C 0003               2609                   CMP.B  #%11, D0        * check to see if it is memory and not register shift
00001EC0                          2610                   
00001EC0  6700 0028               2611                   BEQ LSD_MEMORY
00001EC4                          2612                   
00001EC4  6000 00FA               2613                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001EC8                          2614  
00001EC8                          2615  LSR              
00001EC8  43F9 00003568           2616                   LEA LSR_MESSAGE, A1            * print message
00001ECE                          2617                   
00001ECE  103C 000E               2618                   MOVE.B #14, D0
00001ED2                          2619                   
00001ED2  4E4F                    2620                   TRAP #15
00001ED4                          2621          
00001ED4  3015                    2622                   MOVE.W (A5), D0
00001ED6                          2623                   
00001ED6  E148                    2624                   LSL.W #8, D0
00001ED8                          2625                   
00001ED8  123C 000E               2626                   MOVE.B #14, D1
00001EDC                          2627                   
00001EDC  E268                    2628                   LSR.W D1, D0
00001EDE                          2629                   
00001EDE  B03C 0003               2630                   CMP.B  #%11, D0            * check to see if memory shift
00001EE2                          2631                   
00001EE2  6700 0006               2632                   BEQ LSD_MEMORY
00001EE6                          2633                   
00001EE6  6000 00D8               2634                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001EEA                          2635                   
00001EEA                          2636  LSD_MEMORY
00001EEA  4EB9 00002068           2637                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001EF0                          2638                   
00001EF0  6000 F1FE               2639                   BRA PARSE_MEMORY
00001EF4                          2640              
00001EF4                          2641  
00001EF4  4280                    2642  ROD              CLR.L D0               *same check as logical shift, since an arithmetic shift could still be possible
00001EF6                          2643                   
00001EF6  4281                    2644                   CLR.L D1
00001EF8                          2645                   
00001EF8  3015                    2646                   MOVE.W (A5), D0
00001EFA                          2647                   
00001EFA  EF48                    2648                   LSL.W  #7, D0
00001EFC                          2649                   
00001EFC  123C 000F               2650                   MOVE.B #15, D1
00001F00                          2651                   
00001F00  E268                    2652                   LSR.W  D1, D0
00001F02                          2653                   
00001F02  B03C 0001               2654                   CMP.B  #1, D0
00001F06                          2655                   
00001F06  6700 0006               2656                   BEQ ROL
00001F0A                          2657                   
00001F0A  6000 0024               2658                   BRA ROR
00001F0E                          2659  
00001F0E                          2660  ROL              
00001F0E  43F9 00003564           2661                   LEA ROL_MESSAGE, A1
00001F14                          2662                   
00001F14  103C 000E               2663                   MOVE.B #14, D0
00001F18                          2664                   
00001F18  4E4F                    2665                   TRAP #15
00001F1A                          2666  
00001F1A  3015                    2667                   MOVE.W (A5), D0
00001F1C                          2668                   
00001F1C  E148                    2669                   LSL.W #8, D0
00001F1E                          2670                   
00001F1E  123C 000E               2671                   MOVE.B #14, D1
00001F22                          2672                   
00001F22  E268                    2673                   LSR.W D1, D0
00001F24                          2674                   
00001F24  B03C 0003               2675                   CMP.B  #%11, D0            * check to see if its memory shift
00001F28                          2676                   
00001F28  6700 0028               2677                   BEQ ROD_MEMORY
00001F2C                          2678                   
00001F2C  6000 0092               2679                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001F30                          2680  
00001F30                          2681  ROR       
00001F30  43F9 00003570           2682                   LEA ROR_MESSAGE, A1
00001F36                          2683                   
00001F36  103C 000E               2684                   MOVE.B #14, D0
00001F3A                          2685                   
00001F3A  4E4F                    2686                   TRAP #15
00001F3C                          2687                   
00001F3C  3015                    2688                   MOVE.W (A5), D0
00001F3E                          2689                   
00001F3E  E148                    2690                   LSL.W #8, D0
00001F40                          2691                   
00001F40  123C 000E               2692                   MOVE.B #14, D1
00001F44                          2693                   
00001F44  E268                    2694                   LSR.W D1, D0
00001F46                          2695                   
00001F46  B03C 0003               2696                   CMP.B  #%11, D0            * check to see if its memory shift
00001F4A                          2697                   
00001F4A  6700 0006               2698                   BEQ ROD_MEMORY
00001F4E                          2699                   
00001F4E  6000 0070               2700                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001F52                          2701  
00001F52                          2702  ROD_MEMORY       
00001F52  4EB9 00002068           2703                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001F58                          2704                   
00001F58  6000 F196               2705                   BRA PARSE_MEMORY
00001F5C                          2706                   
00001F5C                          2707                   
00001F5C  3015                    2708  ASD              MOVE.W (A5), D0
00001F5E                          2709                   
00001F5E  EF48                    2710                   LSL.W  #7, D0
00001F60                          2711                   
00001F60  123C 000F               2712                   MOVE.B #15, D1
00001F64                          2713                   
00001F64  E268                    2714                   LSR.W  D1, D0
00001F66                          2715                   
00001F66  B03C 0001               2716                   CMP.B  #1, D0
00001F6A                          2717                   
00001F6A  6700 0006               2718                   BEQ ASL
00001F6E                          2719                   
00001F6E  6000 0024               2720                   BRA ASR
00001F72                          2721                   
00001F72                          2722  ASL
00001F72  43F9 00003560           2723                   LEA ASL_MESSAGE, A1
00001F78                          2724                   
00001F78  103C 000E               2725                   MOVE.B #14, D0
00001F7C                          2726                   
00001F7C  4E4F                    2727                   TRAP #15
00001F7E                          2728                   
00001F7E  3015                    2729                   MOVE.W (A5), D0
00001F80                          2730                   
00001F80  E148                    2731                   LSL.W #8, D0
00001F82                          2732                   
00001F82  123C 000E               2733                   MOVE.B #14, D1
00001F86                          2734                   
00001F86  E268                    2735                   LSR.W D1, D0
00001F88                          2736                   
00001F88  B03C 0003               2737                   CMP.B  #%11, D0            * check to see if its memory shift
00001F8C                          2738                   
00001F8C  6700 0028               2739                   BEQ ASD_MEMORY
00001F90                          2740                   
00001F90  6000 002E               2741                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001F94                          2742                                    
00001F94                          2743  
00001F94                          2744  ASR              
00001F94  43F9 0000356C           2745                   LEA ASR_MESSAGE, A1
00001F9A                          2746                   
00001F9A  103C 000E               2747                   MOVE.B #14, D0
00001F9E                          2748                   
00001F9E  4E4F                    2749                   TRAP #15
00001FA0                          2750                   
00001FA0  3015                    2751                   MOVE.W (A5), D0
00001FA2                          2752                   
00001FA2  E148                    2753                   LSL.W #8, D0
00001FA4                          2754                   
00001FA4  123C 000E               2755                   MOVE.B #14, D1
00001FA8                          2756                   
00001FA8  E268                    2757                   LSR.W D1, D0
00001FAA                          2758                   
00001FAA  B03C 0003               2759                   CMP.B  #%11, D0            * check to see if its memory shift
00001FAE                          2760                   
00001FAE  6700 0006               2761                   BEQ ASD_MEMORY
00001FB2                          2762                   
00001FB2  6000 000C               2763                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001FB6                          2764  
00001FB6                          2765  ASD_MEMORY
00001FB6  4EB9 00002068           2766                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001FBC                          2767                   
00001FBC  6000 F132               2768                   BRA PARSE_MEMORY
00001FC0                          2769                   
00001FC0                          2770  PRINTOUT_REGISTER_SHIFTS_EA
00001FC0  43F9 0000358A           2771                   LEA PERIOD, A1
00001FC6                          2772                   
00001FC6  103C 000E               2773                   MOVE.B #14, D0
00001FCA                          2774                   
00001FCA  4E4F                    2775                   TRAP #15
00001FCC                          2776                  
00001FCC  4EB8 1314               2777                   JSR GET_SIZE_PURPLE
00001FD0                          2778                   
00001FD0  4EB8 132C               2779                   JSR PRINTOUT_SIZE_PURPLE
00001FD4                          2780  
00001FD4  3015                    2781                   MOVE.W (A5), D0
00001FD6                          2782                   
00001FD6  123C 000A               2783                   MOVE.B #10, D1
00001FDA                          2784                   
00001FDA  E368                    2785                   LSL.W D1, D0
00001FDC                          2786                   
00001FDC  123C 000F               2787                   MOVE.B #15, D1
00001FE0                          2788                   
00001FE0  E268                    2789                   LSR.W D1, D0
00001FE2                          2790                   
00001FE2  B03C 0001               2791                   CMP.B #1, D0
00001FE6                          2792                   
00001FE6  6700 0048               2793                   BEQ PRINTOUT_REGISTER
00001FEA                          2794                   
00001FEA  6000 0002               2795                   BRA PRINTOUT_COUNT
00001FEE                          2796  
00001FEE                          2797                   
00001FEE                          2798  PRINTOUT_COUNT
00001FEE  43F9 00003586           2799                   LEA POUND_SIGN, A1
00001FF4                          2800  
00001FF4  103C 000E               2801                   MOVE.B #14, D0
00001FF8                          2802  
00001FF8  4E4F                    2803                   TRAP #15     
00001FFA                          2804                 
00001FFA  3015                    2805                   MOVE.W (A5), D0
00001FFC                          2806                   
00001FFC  E948                    2807                   LSL.W #4, D0
00001FFE                          2808                   
00001FFE  123C 000D               2809                   MOVE.B #13, D1
00002002                          2810                   
00002002  E268                    2811                   LSR.W D1, D0
00002004                          2812                   
00002004  1200                    2813                   MOVE.B D0, D1
00002006                          2814                   
00002006  103C 0003               2815                   MOVE.B #3, D0
0000200A                          2816                   
0000200A  4E4F                    2817                   TRAP #15                  * print out the amount that the ea is being shifted by
0000200C                          2818                   
0000200C  43F9 000035A6           2819                   LEA COMMA, A1
00002012                          2820                   
00002012  103C 000E               2821                   MOVE.B #14, D0
00002016                          2822                   
00002016  4E4F                    2823                   TRAP #15
00002018                          2824                   
00002018  3015                    2825                   MOVE.W (A5), D0
0000201A                          2826                   
0000201A  123C 000D               2827                   MOVE.B #13, D1                * to print out the ea that is being shifted
0000201E                          2828                   
0000201E  E368                    2829                   LSL.W D1, D0
00002020                          2830                   
00002020  E268                    2831                   LSR.W D1, D0
00002022                          2832                   
00002022  1E00                    2833                   MOVE.B D0, D7
00002024                          2834                   
00002024  7C00                    2835                   MOVE.L #%000, D6              * we know it is a data register
00002026                          2836                   
00002026  4EB9 000023F4           2837                   JSR PRINT_EA
0000202C                          2838                   
0000202C  6000 F0C2               2839                   BRA PARSE_MEMORY
00002030                          2840                   
00002030                          2841  
00002030                          2842  PRINTOUT_REGISTER
00002030  3015                    2843                   MOVE.W (A5), D0
00002032                          2844                   
00002032  E948                    2845                   LSL.W #4, D0
00002034                          2846                   
00002034  123C 000D               2847                   MOVE.B #13, D1
00002038                          2848                   
00002038  E268                    2849                   LSR.W D1, D0
0000203A                          2850                   
0000203A  1E00                    2851                   MOVE.B D0, D7
0000203C                          2852                   
0000203C  7C00                    2853                   MOVE.L #%000, D6
0000203E                          2854                   
0000203E  4EB9 000023F4           2855                   JSR PRINT_EA                  * to print out the data register
00002044                          2856                   
00002044  43F9 000035A6           2857                   LEA COMMA, A1
0000204A                          2858                   
0000204A  103C 000E               2859                   MOVE.B #14, D0
0000204E                          2860                   
0000204E  4E4F                    2861                   TRAP #15
00002050                          2862                   
00002050  3015                    2863                   MOVE.W (A5), D0
00002052                          2864                   
00002052  123C 000D               2865                   MOVE.B #13, D1                * to print out the ea that is being shifted
00002056                          2866                   
00002056  E368                    2867                   LSL.W D1, D0
00002058                          2868                   
00002058  E268                    2869                   LSR.W D1, D0
0000205A                          2870                   
0000205A  1E00                    2871                   MOVE.B D0, D7
0000205C                          2872                   
0000205C  7C00                    2873                   MOVE.L #%000, D6              * we know it is a data register
0000205E                          2874                   
0000205E  4EB9 000023F4           2875                   JSR PRINT_EA
00002064                          2876                   
00002064  6000 F08A               2877                   BRA PARSE_MEMORY
00002068                          2878                                   
00002068                          2879  
00002068                          2880  PRINTOUT_MEMORY_SHIFTS_EA   * gets the mode and register of the memory ea, and prints it out
00002068                          2881                   *JSR GET_SIZE_PURPLE
00002068                          2882                   
00002068                          2883                   *JSR PRINTOUT_SIZE_PURPLE
00002068                          2884                   
00002068  43F9 0000358C           2885                   LEA SPACE, A1
0000206E                          2886                   
0000206E  103C 000E               2887                   MOVE.B #14, D0
00002072                          2888                   
00002072  4E4F                    2889                   TRAP #15
00002074                          2890  
00002074  3015                    2891                   MOVE.W (A5), D0
00002076                          2892                   
00002076  123C 000A               2893                   MOVE.B #10, D1
0000207A                          2894                   
0000207A  E368                    2895                   LSL.W D1, D0
0000207C                          2896                   
0000207C  123C 000D               2897                   MOVE.B #13, D1
00002080                          2898                   
00002080  E268                    2899                   LSR.W D1, D0
00002082                          2900                   
00002082  2C00                    2901                   MOVE.L D0, D6
00002084                          2902                   
00002084  3015                    2903                   MOVE.W (A5), D0
00002086                          2904                   
00002086  123C 000D               2905                   MOVE.B #13, D1
0000208A                          2906                   
0000208A  E368                    2907                   LSL.W D1, D0
0000208C                          2908                   
0000208C  E268                    2909                   LSR.W D1, D0
0000208E                          2910                   
0000208E  2E00                    2911                   MOVE.L D0, D7
00002090                          2912                   
00002090  4EB9 000023F4           2913                   JSR PRINT_EA
00002096                          2914                   
00002096  4E75                    2915                   RTS
00002098                          2916                                   
00002098                          2917                
00002098  43F9 000034CC           2918  MOVEB            LEA MOVE_MESSAGE, A1   * printing out the opcode and size
0000209E                          2919  
0000209E  4280                    2920                   CLR.L  D0
000020A0                          2921                   
000020A0  103C 000E               2922                   MOVE.B #14, D0
000020A4                          2923                   
000020A4  4E4F                    2924                   TRAP #15
000020A6                          2925                   
000020A6  43F9 00003574           2926                   LEA SIZE_B_PRINT, A1
000020AC                          2927                   
000020AC  4E4F                    2928                   TRAP #15               * done printing opcode and size
000020AE                          2929                   
000020AE  1A3C 0000               2930                   MOVE.B     #%00, D5
000020B2                          2931                   
000020B2  6000 00A6               2932                   BRA PRINTOUT_MOVE_EA
000020B6                          2933  
000020B6  4280                    2934  MOVEW            CLR.L D0
000020B8                          2935                   
000020B8  4281                    2936                   CLR.L D1
000020BA                          2937                   
000020BA  3015                    2938                   MOVE.W (A5),D0
000020BC                          2939                   
000020BC  EF48                    2940                   LSL.W #7,D0
000020BE                          2941                   
000020BE  123C 000D               2942                   MOVE.B #13,D1
000020C2                          2943                   
000020C2  E268                    2944                   LSR.W D1,D0
000020C4                          2945                   
000020C4  B03C 0001               2946                   CMP.B #1,D0            *check to see if the mode of the destination is an address register
000020C8                          2947                   
000020C8  6700 0054               2948                   BEQ MOVEAW             *if the destination is an address, it is MOVEA
000020CC                          2949                   
000020CC  43F9 000034CC           2950                   LEA MOVE_MESSAGE, A1   * printing out the opcode and size
000020D2                          2951                   
000020D2  4280                    2952                   CLR.L D0
000020D4                          2953                   
000020D4  103C 000E               2954                   MOVE.B #14, D0
000020D8                          2955                   
000020D8  4E4F                    2956                   TRAP #15
000020DA                          2957                   
000020DA  43F9 0000357A           2958                   LEA SIZE_W_PRINT, A1
000020E0                          2959                   
000020E0  4E4F                    2960                   TRAP #15               * done printing opcode and size
000020E2                          2961                   
000020E2  1A3C 0001               2962                   MOVE.B     #%01, D5
000020E6                          2963                      
000020E6  6000 0072               2964                   BRA PRINTOUT_MOVE_EA
000020EA                          2965                
000020EA                          2966  
000020EA  4280                    2967  MOVEL            CLR.L D0
000020EC                          2968                   
000020EC  4281                    2969                   CLR.L D1
000020EE                          2970                   
000020EE  3015                    2971                   MOVE.W (A5),D0
000020F0                          2972                   
000020F0  EF48                    2973                   LSL.W #7,D0
000020F2                          2974                   
000020F2  123C 000D               2975                   MOVE.B #13,D1
000020F6                          2976                   
000020F6  E268                    2977                   LSR.W D1,D0
000020F8                          2978                   
000020F8  B03C 0001               2979                   CMP.B #1,D0            *check to see if the mode of the destination is equal to 1
000020FC                          2980                   
000020FC  6700 003E               2981                   BEQ MOVEAL             *if the mode is 1, then it is an address register, and the opcode is MOVEA
00002100                          2982                   
00002100  43F9 000034CC           2983                   LEA MOVE_MESSAGE, A1   * printing out opcode and size
00002106                          2984                   
00002106  4280                    2985                   CLR.L D0
00002108                          2986                   
00002108  103C 000E               2987                   MOVE.B #14, D0
0000210C                          2988                   
0000210C  4E4F                    2989                   TRAP #15
0000210E                          2990                   
0000210E  43F9 00003580           2991                   LEA SIZE_L_PRINT, A1
00002114                          2992                   
00002114  4E4F                    2993                   TRAP #15               * done printing opcode and size
00002116                          2994                   
00002116  1A3C 0002               2995                   MOVE.B     #%10, D5
0000211A                          2996                   
0000211A  6000 003E               2997                   BRA PRINTOUT_MOVE_EA
0000211E                          2998                   
0000211E                          2999                   
0000211E  43F9 000034C5           3000  MOVEAW           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
00002124                          3001  
00002124  4280                    3002                   CLR.L D0
00002126                          3003                   
00002126  103C 000E               3004                   MOVE.B #14, D0
0000212A                          3005                   
0000212A  4E4F                    3006                   TRAP #15
0000212C                          3007                   
0000212C  43F9 0000357A           3008                   LEA SIZE_W_PRINT, A1
00002132                          3009                   
00002132  4E4F                    3010                   TRAP #15               * done printing out opcode and size
00002134                          3011                   
00002134  1A3C 0001               3012                   MOVE.B     #%01, D5
00002138                          3013                   
00002138  6000 0020               3014                   BRA PRINTOUT_MOVE_EA
0000213C                          3015  
0000213C  43F9 000034C5           3016  MOVEAL           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
00002142                          3017  
00002142  4280                    3018                   CLR.L D0
00002144                          3019                   
00002144  103C 000E               3020                   MOVE.B #14, D0
00002148                          3021                   
00002148  4E4F                    3022                   TRAP #15
0000214A                          3023                   
0000214A  43F9 00003580           3024                   LEA SIZE_L_PRINT, A1
00002150                          3025                   
00002150  4E4F                    3026                   TRAP #15               * done printing out opcode and size
00002152                          3027                   
00002152  1A3C 0002               3028                   MOVE.B     #%10, D5
00002156                          3029                   
00002156  6000 0002               3030                   BRA PRINTOUT_MOVE_EA
0000215A                          3031  
0000215A                          3032  PRINTOUT_MOVE_EA
0000215A  4247                    3033                   CLR    D7 
0000215C                          3034                   
0000215C  4246                    3035                   CLR    D6               
0000215E                          3036                   
0000215E  3015                    3037                   MOVE.W (A5), D0
00002160                          3038                   
00002160  123C 000A               3039                   MOVE.B #10, D1
00002164                          3040                   
00002164  E368                    3041                   LSL.W D1, D0
00002166                          3042                   
00002166  123C 000D               3043                   MOVE.B #13, D1
0000216A                          3044                   
0000216A  E268                    3045                   LSR.W D1, D0
0000216C                          3046                   
0000216C  1C00                    3047                   MOVE.B D0, D6          * getting the mode of the second ea
0000216E                          3048                   
0000216E  3015                    3049                   MOVE.W (A5), D0
00002170                          3050                   
00002170  123C 000D               3051                   MOVE.B #13, D1
00002174                          3052                   
00002174  E368                    3053                   LSL.W D1, D0
00002176                          3054                   
00002176  E268                    3055                   LSR.W D1, D0
00002178                          3056                   
00002178  1E00                    3057                   MOVE.B D0, D7          * getting the register of the second ea
0000217A                          3058                   
0000217A  4EB9 000023F4           3059                   JSR PRINT_EA
00002180                          3060                   
00002180  43F9 000035A6           3061                   LEA COMMA, A1
00002186                          3062                   
00002186  103C 000E               3063                   MOVE.B #14, D0
0000218A                          3064                   
0000218A  4E4F                    3065                   TRAP #15
0000218C                          3066                   
0000218C  3015                    3067                   MOVE.W (A5), D0
0000218E                          3068                   
0000218E  E948                    3069                   LSL.W #4, D0
00002190                          3070                   
00002190  123C 000D               3071                   MOVE.B #13, D1
00002194                          3072                   
00002194  E268                    3073                   LSR.W D1, D0
00002196                          3074                   
00002196  1E00                    3075                   MOVE.B D0, D7          * getting the register of the first ea
00002198                          3076                   
00002198  3015                    3077                   MOVE.W (A5), D0
0000219A                          3078                   
0000219A  EF48                    3079                   LSL.W #7, D0
0000219C                          3080                   
0000219C  123C 000D               3081                   MOVE.B #13, D1
000021A0                          3082                   
000021A0  E268                    3083                   LSR.W D1, D0
000021A2                          3084                   
000021A2  1C00                    3085                   MOVE.B D0, D6          * getting the mode of the first ea
000021A4                          3086                   
000021A4  4EB9 000023F4           3087                   JSR PRINT_EA
000021AA                          3088                   
000021AA  6000 EF44               3089                   BRA PARSE_MEMORY
000021AE                          3090  
000021AE                          3091  
000021AE                          3092  
000021AE                          3093  
000021AE                          3094  
000021AE                          3095  
000021AE                          3096  -------------------- end include --------------------
000021AE                          3097                  INCLUDE 'BCC.X68'
000021AE                          3098  
000021AE                          3099  
000021AE                          3100  BCC           
000021AE  4240                    3101                 CLR       D0              *Zero it
000021B0                          3102  
000021B0  3015                    3103                 MOVE.W      (A5),D0     *We'll play with it here
000021B2                          3104                 
000021B2  4241                    3105                 CLR       D1
000021B4                          3106  
000021B4                          3107                 
000021B4  123C 0004               3108                 MOVE.B      #4, D1
000021B8                          3109                 
000021B8  E368                    3110                 LSL.W       D1, D0
000021BA                          3111  
000021BA  123C 000C               3112                 MOVE.B      #12,D1       *Shift 12 bits to the right  
000021BE                          3113  
000021BE  E268                    3114                 LSR.W       D1,D0           *Move the bi
000021C0                          3115                 
000021C0  B03C 0004               3116                 CMP.B       #%0100, D0
000021C4                          3117                 
000021C4  6700 001A               3118                 BEQ         CC
000021C8                          3119                 
000021C8  B03C 000E               3120                 CMP.B       #%1110, D0
000021CC                          3121                 
000021CC  6700 003A               3122                 BEQ         GT
000021D0                          3123                 
000021D0  B03C 000F               3124                 CMP.B       #%1111, D0
000021D4                          3125                 
000021D4  6700 0036               3126                 BEQ         LE
000021D8                          3127                 
000021D8                          3128  
000021D8                          3129                      
000021D8                          3130  
000021D8  6000 0036               3131  HI             BRA         PRINT_BHI 
000021DC                          3132  
000021DC  6000 0042               3133  LS             BRA         PRINT_BLS  
000021E0                          3134  
000021E0  6000 004E               3135  CC             BRA         PRINT_BCC
000021E4                          3136  
000021E4  6000 005A               3137  CS             BRA         PRINT_BCS 
000021E8                          3138  
000021E8  6000 0066               3139  NE             BRA         PRINT_BNE 
000021EC                          3140  
000021EC  6000 0072               3141  EQ             BRA         PRINT_BEQ
000021F0                          3142  
000021F0  6000 007E               3143  VC             BRA         PRINT_BVC
000021F4                          3144  
000021F4  6000 008A               3145  VS             BRA         PRINT_BVS
000021F8                          3146  
000021F8  6000 0096               3147  PL             BRA         PRINT_BPL
000021FC                          3148  
000021FC  6000 00A2               3149  MI             BRA         PRINT_BMI 
00002200                          3150  
00002200  6000 00AE               3151  GE             BRA         PRINT_BGE 
00002204                          3152  
00002204  6000 00BA               3153  LT             BRA         PRINT_BLT
00002208                          3154  
00002208  6000 00C6               3155  GT             BRA         PRINT_BGT      
0000220C                          3156  
0000220C  6000 00D2               3157  LE             BRA         PRINT_BLE 
00002210                          3158  
00002210                          3159  
00002210                          3160  PRINT_BHI      
00002210  43F9 0000350B           3161                 LEA BHI_MESSAGE, A1
00002216                          3162            
00002216  103C 000E               3163                 MOVE.B #14, D0
0000221A                          3164                   
0000221A  4E4F                    3165                 TRAP #15    
0000221C                          3166                 
0000221C  6000 00CE               3167                 BRA DISPLACEMENT
00002220                          3168                 
00002220                          3169  PRINT_BLS
00002220  43F9 00003513           3170                 LEA BLS_MESSAGE, A1
00002226                          3171                   
00002226  103C 000E               3172                 MOVE.B #14, D0
0000222A                          3173                   
0000222A  4E4F                    3174                 TRAP #15
0000222C                          3175                 
0000222C  6000 00BE               3176                 BRA DISPLACEMENT
00002230                          3177  PRINT_BCC
00002230  43F9 000034F3           3178                 LEA BCC_MESSAGE, A1
00002236                          3179                   
00002236  103C 000E               3180                 MOVE.B #14, D0
0000223A                          3181                   
0000223A  4E4F                    3182                 TRAP #15
0000223C                          3183                 
0000223C  6000 00AE               3184                 BRA DISPLACEMENT
00002240                          3185  PRINT_BCS
00002240  43F9 000034FF           3186                 LEA BCS_MESSAGE, A1
00002246                          3187                   
00002246  103C 000E               3188                 MOVE.B #14, D0
0000224A                          3189                   
0000224A  4E4F                    3190                 TRAP #15
0000224C                          3191                 
0000224C  6000 009E               3192                 BRA DISPLACEMENT
00002250                          3193  PRINT_BNE
00002250  43F9 000034FB           3194                 LEA BNE_MESSAGE, A1
00002256                          3195                   
00002256  103C 000E               3196                 MOVE.B #14, D0
0000225A                          3197                   
0000225A  4E4F                    3198                 TRAP #15
0000225C                          3199                 
0000225C  6000 008E               3200                 BRA DISPLACEMENT
00002260                          3201  PRINT_BEQ
00002260  43F9 000034F7           3202                 LEA BEQ_MESSAGE, A1
00002266                          3203                   
00002266  103C 000E               3204                 MOVE.B #14, D0
0000226A                          3205                   
0000226A  4E4F                    3206                 TRAP #15
0000226C                          3207                 
0000226C  6000 007E               3208                 BRA DISPLACEMENT
00002270                          3209  PRINT_BVC
00002270  43F9 00003523           3210                 LEA BVC_MESSAGE, A1
00002276                          3211                   
00002276  103C 000E               3212                 MOVE.B #14, D0
0000227A                          3213                   
0000227A  4E4F                    3214                 TRAP #15     
0000227C                          3215                 
0000227C  6000 006E               3216                 BRA DISPLACEMENT
00002280                          3217  PRINT_BVS
00002280  43F9 00003527           3218                 LEA BVS_MESSAGE, A1
00002286                          3219                   
00002286  103C 000E               3220                 MOVE.B #14, D0
0000228A                          3221                   
0000228A  4E4F                    3222                 TRAP #15
0000228C                          3223                 
0000228C  6000 005E               3224                 BRA DISPLACEMENT
00002290                          3225  PRINT_BPL
00002290  43F9 0000351F           3226                 LEA BPL_MESSAGE, A1
00002296                          3227                   
00002296  103C 000E               3228                 MOVE.B #14, D0
0000229A                          3229                   
0000229A  4E4F                    3230                 TRAP #15
0000229C                          3231                 
0000229C  6000 004E               3232                 BRA DISPLACEMENT
000022A0                          3233  PRINT_BMI
000022A0  43F9 0000351B           3234                 LEA BMI_MESSAGE, A1
000022A6                          3235                   
000022A6  103C 000E               3236                 MOVE.B #14, D0
000022AA                          3237                   
000022AA  4E4F                    3238                 TRAP #15
000022AC                          3239                 
000022AC  6000 003E               3240                 BRA DISPLACEMENT
000022B0                          3241  PRINT_BGE
000022B0  43F9 00003503           3242                 LEA BGE_MESSAGE, A1
000022B6                          3243                   
000022B6  103C 000E               3244                 MOVE.B #14, D0
000022BA                          3245                   
000022BA  4E4F                    3246                 TRAP #15
000022BC                          3247                 
000022BC  6000 002E               3248                 BRA DISPLACEMENT
000022C0                          3249  PRINT_BLT
000022C0  43F9 00003517           3250                 LEA BLT_MESSAGE, A1
000022C6                          3251                   
000022C6  103C 000E               3252                 MOVE.B #14, D0
000022CA                          3253                   
000022CA  4E4F                    3254                 TRAP #15
000022CC                          3255                 
000022CC  6000 001E               3256                 BRA DISPLACEMENT
000022D0                          3257  PRINT_BGT
000022D0  43F9 00003507           3258                 LEA BGT_MESSAGE, A1
000022D6                          3259                   
000022D6  103C 000E               3260                 MOVE.B #14, D0
000022DA                          3261                   
000022DA  4E4F                    3262                 TRAP #15
000022DC                          3263                 
000022DC  6000 000E               3264                 BRA DISPLACEMENT
000022E0                          3265  PRINT_BLE
000022E0  43F9 0000350F           3266                 LEA BLE_MESSAGE, A1
000022E6                          3267                   
000022E6  103C 000E               3268                 MOVE.B #14, D0
000022EA                          3269                   
000022EA  4E4F                    3270                 TRAP #15
000022EC                          3271                 
000022EC                          3272  DISPLACEMENT   
000022EC                          3273  
000022EC  43F9 0000358C           3274                 LEA     SPACE, A1
000022F2                          3275  
000022F2  103C 000E               3276                 MOVE.B #14, D0
000022F6                          3277  
000022F6  4E4F                    3278                 TRAP #15 
000022F8                          3279  
000022F8  43F9 00003586           3280                 LEA     POUND_SIGN, A1
000022FE                          3281              
000022FE  103C 000E               3282                 MOVE.B  #14, D0
00002302                          3283              
00002302  4E4F                    3284                 TRAP #15
00002304                          3285              
00002304  43F9 00003588           3286                 LEA     HEX_SIGN, A1
0000230A                          3287              
0000230A  4E4F                    3288                 TRAP #15
0000230C                          3289  
0000230C  4280                    3290                 CLR.L       D0              *Zero it
0000230E                          3291  
0000230E  3015                    3292                 MOVE.W      (A5),D0     *We'll play with it here
00002310                          3293                 
00002310  123C 0008               3294                 MOVE.B      #8, D1
00002314                          3295                 
00002314  E368                    3296                 LSL.W       D1, D0
00002316                          3297  
00002316  123C 0008               3298                 MOVE.B      #8,D1       *Shift 12 bits to the right  
0000231A                          3299  
0000231A  E268                    3300                 LSR.W       D1,D0           *Move the bits
0000231C                          3301                 
0000231C                          3302                 *chk the D0 for 8, 16, or 32 but displacement
0000231C                          3303                  
0000231C  B03C 0000               3304                 CMP.B  #$00, D0
00002320                          3305  
00002320  6700 0018               3306                 BEQ  a_16_BIT 
00002324                          3307  
00002324  B03C 00FF               3308                 CMP.B #$FF, D0   
00002328                          3309  
00002328  6700 001E               3310                 BEQ  a_32_BIT
0000232C                          3311                  
0000232C                          3312                  *else 
0000232C                          3313                  
0000232C  4285                    3314                 CLR.L D5
0000232E                          3315                 
0000232E  3A00                    3316                 MOVE.W D0, D5      
00002330                          3317          
00002330  4EB9 00002356           3318                 JSR  HEX_TO_ASCII
00002336                          3319                 
00002336  4EF8 10F0               3320                 JMP PARSE_MEMORY
0000233A                          3321                            
0000233A                          3322  a_16_BIT
0000233A  4285                    3323          CLR.L  D5
0000233C                          3324          
0000233C  3A1E                    3325          MOVE.W (A6)+, D5
0000233E                          3326          
0000233E  4EB9 00002356           3327          JSR  HEX_TO_ASCII
00002344                          3328          
00002344  4EF8 10F0               3329          JMP PARSE_MEMORY
00002348                          3330  a_32_BIT
00002348                          3331  
00002348  4285                    3332          CLR.L  D5
0000234A                          3333          
0000234A  2A1E                    3334          MOVE.L (A6)+, D5
0000234C                          3335          
0000234C  4EB9 00002356           3336          JSR  HEX_TO_ASCII
00002352                          3337          
00002352  4EF8 10F0               3338          JMP PARSE_MEMORY
00002356                          3339            
00002356                          3340  
00002356                          3341  
00002356                          3342  
00002356                          3343  
00002356                          3344  
00002356                          3345  
00002356                          3346  
00002356                          3347  
00002356                          3348  
00002356                          3349  
00002356                          3350  
00002356                          3351  -------------------- end include --------------------
00002356                          3352                  INCLUDE 'HEX_TO_ASCII_V1.X68'
00002356                          3353      *ORG    $5000
00002356                          3354  
00002356                          3355  
00002356                          3356  HEX_TO_ASCII      
00002356  4283                    3357       CLR.L      D3
00002358                          3358       
00002358  BABC 00000000           3359       CMP.L       #0, D5
0000235E                          3360       
0000235E  6700 0086               3361       BEQ         PRINT_ZERO
00002362                          3362      
00002362                          3363       *MOVE.L     #$ABCDEF, D5
00002362                          3364       
00002362                          3365  LOOP     
00002362  2C05                    3366       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
00002364                          3367       
00002364  4282                    3368       CLR.L      D2
00002366                          3369       
00002366  143C 001C               3370       MOVE.B     #28, D2
0000236A                          3371  
0000236A  E4AE                    3372       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
0000236C                          3373       
0000236C  BC3C 000A               3374       CMP.B      #10, D6
00002370                          3375       
00002370  6C00 0006               3376       BGE        LETTER_1                  * determine if a letter or a number
00002374                          3377       
00002374  6000 000C               3378       BRA        NUMBER_1
00002378                          3379       
00002378                          3380  LETTER_1
00002378  0606 0037               3381       ADD.B      #55, D6
0000237C                          3382       
0000237C  1206                    3383       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
0000237E                          3384       
0000237E  6000 000C               3385       BRA        PRINTOUT_NIBBLE
00002382                          3386  
00002382                          3387  NUMBER_1     
00002382  0606 0030               3388       ADD.B      #48, D6
00002386                          3389       
00002386  1206                    3390       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00002388                          3391       
00002388  6000 0002               3392       BRA        PRINTOUT_NIBBLE
0000238C                          3393  
0000238C                          3394  
0000238C                          3395  PRINTOUT_NIBBLE
0000238C  E98D                    3396      LSL.L      #4, D5                   * shift out the nibble you just read from the source
0000238E                          3397      
0000238E  5203                    3398      ADD.B      #1, D3
00002390                          3399      
00002390  BC3C 0030               3400      CMP.B      #$30, D6
00002394                          3401  
00002394  67CC                    3402      BEQ        LOOP             
00002396                          3403      
00002396  103C 0006               3404      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
0000239A                          3405      
0000239A  4E4F                    3406      TRAP #15
0000239C                          3407       
0000239C  B63C 0008               3408      CMP.B      #8, D3                   * compare to the counter to check if you are done
000023A0                          3409       
000023A0  6700 023E               3410      BEQ        DONE
000023A4                          3411          
000023A4  6000 0002               3412      BRA LOOP_ZERO                            * continue the loop and print next nibble
000023A8                          3413      
000023A8                          3414      
000023A8                          3415  LOOP_ZERO    
000023A8  2C05                    3416       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
000023AA                          3417       
000023AA  4282                    3418       CLR.L      D2
000023AC                          3419       
000023AC  143C 001C               3420       MOVE.B     #28, D2
000023B0                          3421  
000023B0  E4AE                    3422       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
000023B2                          3423       
000023B2  BC3C 000A               3424       CMP.B      #10, D6
000023B6                          3425       
000023B6  6C00 0006               3426       BGE        LETTER_1_ZERO                  * determine if a letter or a number
000023BA                          3427       
000023BA  6000 000C               3428       BRA        NUMBER_1_ZERO
000023BE                          3429       
000023BE                          3430  LETTER_1_ZERO
000023BE  0606 0037               3431       ADD.B      #55, D6
000023C2                          3432       
000023C2  1206                    3433       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000023C4                          3434       
000023C4  6000 000C               3435       BRA        PRINTOUT_NIBBLE_ZERO
000023C8                          3436  
000023C8                          3437  NUMBER_1_ZERO    
000023C8  0606 0030               3438       ADD.B      #48, D6
000023CC                          3439       
000023CC  1206                    3440       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000023CE                          3441       
000023CE  6000 0002               3442       BRA        PRINTOUT_NIBBLE_ZERO
000023D2                          3443  
000023D2                          3444  
000023D2                          3445  PRINTOUT_NIBBLE_ZERO
000023D2  E98D                    3446      LSL.L      #4, D5                   * shift out the nibble you just read from the source
000023D4                          3447      
000023D4  5203                    3448      ADD.B      #1, D3            
000023D6                          3449      
000023D6  103C 0006               3450      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
000023DA                          3451      
000023DA  4E4F                    3452      TRAP #15
000023DC                          3453       
000023DC  B63C 0008               3454      CMP.B      #8, D3                   * compare to the counter to check if you are done
000023E0                          3455       
000023E0  6700 01FE               3456      BEQ        DONE
000023E4                          3457      
000023E4  60C2                    3458      BRA LOOP_ZERO                            * continue the loop and print next nibble
000023E6                          3459          
000023E6                          3460  
000023E6                          3461       
000023E6                          3462  PRINT_ZERO
000023E6  123C 0030               3463      MOVE.B      #$30, D1
000023EA                          3464  
000023EA  103C 0006               3465      MOVE.B      #6, D0  
000023EE                          3466  
000023EE  4E4F                    3467      TRAP #15 
000023F0                          3468  
000023F0  6000 01EE               3469      BRA DONE  
000023F4                          3470  
000023F4                          3471  
000023F4                          3472      *SIMHALT             ; halt simulator
000023F4                          3473  
000023F4                          3474  
000023F4                          3475      *END    START       ; last line of source
000023F4                          3476  -------------------- end include --------------------
000023F4                          3477                  INCLUDE 'JUMPTABLE-EA.X68'
000023F4                          3478   *ORG     $400
000023F4                          3479  
000023F4                          3480  
000023F4                          3481  
000023F4                          3482  
000023F4                          3483  
000023F4                          3484                 *MOVE.B       #%00, D5         *SIZE
000023F4                          3485                
000023F4                          3486                 *MOVE.B       #%111,D6         *MODE
000023F4                          3487                 
000023F4                          3488                 *MOVE.B       #%100,D7         *REGISTER
000023F4                          3489                 
000023F4                          3490                 *MOVE.L       #$4000, A5
000023F4                          3491  
000023F4                          3492                 *MOVE.B       #$0040, (A5)  
000023F4                          3493  PRINT_EA 
000023F4                          3494                 
000023F4  41F9 00002402           3495                 LEA     jmp_table_ea,A0      *Index into the table
000023FA                          3496  
000023FA  CCFC 0006               3497                 MULU        #6,D6            *Form offset     
000023FE                          3498  
000023FE  4EF0 6000               3499                 JMP         0(A0,D6)         *Jump indirect with index
00002402                          3500   
00002402  4EF9 00002432           3501  jmp_table_ea   JMP         code000
00002408                          3502  
00002408  4EF9 00002436           3503                 JMP         code001
0000240E                          3504  
0000240E  4EF9 0000243A           3505                 JMP         code010
00002414                          3506  
00002414  4EF9 0000243E           3507                 JMP         code011
0000241A                          3508  
0000241A  4EF9 00002442           3509                 JMP         code100
00002420                          3510  
00002420  4EF9 00002446           3511                 JMP         code101
00002426                          3512  
00002426  4EF9 0000244A           3513                 JMP         code110
0000242C                          3514  
0000242C  4EF9 0000244E           3515                 JMP         code111
00002432                          3516          
00002432                          3517  
00002432                          3518   
00002432                          3519  
00002432                          3520  
00002432                          3521   
00002432                          3522  
00002432                          3523   
00002432                          3524  
00002432  6000 001E               3525  code000       BRA         DATA_REGISTER
00002436                          3526  
00002436  6000 0036               3527  code001       BRA         ADDRESS_REGISTER
0000243A                          3528  
0000243A  6000 004E               3529  code010       BRA         INDIRECT_ADDRESS
0000243E                          3530  
0000243E  6000 0074               3531  code011       BRA         ADDRESS_PI    * post increment
00002442                          3532  
00002442  6000 009A               3533  code100       BRA         ADDRESS_PD    * pre decrement
00002446                          3534  
00002446  6000 00C0               3535  code101       BRA         ADDRESS_W_DISPLACEMENT
0000244A                          3536  
0000244A  6000 00C0               3537  code110       BRA         ADDRESS_W_INDEX
0000244E                          3538  
0000244E  6000 00C0               3539  code111       BRA         GROUP_111
00002452                          3540  
00002452                          3541   
00002452                          3542  DATA_REGISTER
00002452                          3543  
00002452  43F9 00003591           3544              LEA D_REGISTER, A1
00002458                          3545              
00002458  4280                    3546              CLR.L D0
0000245A                          3547              
0000245A  103C 000E               3548              MOVE.B #14, D0
0000245E                          3549              
0000245E  4E4F                    3550              TRAP #15                * print out 'D' for data register
00002460                          3551              
00002460  4281                    3552              CLR.L D1
00002462                          3553              
00002462  1207                    3554              MOVE.B D7, D1
00002464                          3555              
00002464  103C 0003               3556              MOVE.B #3, D0           * print out the number in the register
00002468                          3557              
00002468  4E4F                    3558              TRAP #15
0000246A                          3559              
0000246A  6000 0174               3560              BRA DONE
0000246E                          3561              
0000246E                          3562  
0000246E                          3563  ADDRESS_REGISTER
0000246E  43F9 00003593           3564              LEA A_REGISTER, A1
00002474                          3565              
00002474  4280                    3566              CLR.L D0
00002476                          3567              
00002476  103C 000E               3568              MOVE.B #14, D0          * print out the 'A' for address register
0000247A                          3569              
0000247A  4E4F                    3570              TRAP #15
0000247C                          3571              
0000247C  4281                    3572              CLR.L D1
0000247E                          3573              
0000247E  1207                    3574              MOVE.B D7, D1
00002480                          3575              
00002480  103C 0003               3576              MOVE.B #3, D0
00002484                          3577              
00002484  4E4F                    3578              TRAP #15                * print out the value in the data register
00002486                          3579  
00002486  6000 0158               3580              BRA DONE
0000248A                          3581              
0000248A                          3582  INDIRECT_ADDRESS
0000248A  43F9 00003595           3583              LEA IA_START, A1
00002490                          3584              
00002490  4280                    3585              CLR.L D0
00002492                          3586              
00002492  103C 000E               3587              MOVE.B #14, D0          * print out the '(A' for start of indirect address register
00002496                          3588              
00002496  4E4F                    3589              TRAP #15
00002498                          3590              
00002498  4281                    3591              CLR.L D1
0000249A                          3592              
0000249A  1207                    3593              MOVE.B D7, D1
0000249C                          3594              
0000249C  103C 0003               3595              MOVE.B #3, D0
000024A0                          3596              
000024A0  4E4F                    3597              TRAP #15                * print out the value in the data register
000024A2                          3598              
000024A2  43F9 00003598           3599              LEA IA_END, A1
000024A8                          3600  
000024A8  4280                    3601              CLR.L D0
000024AA                          3602              
000024AA  103C 000E               3603              MOVE.B #14, D0          * print out the ')' for end of post increment address register
000024AE                          3604              
000024AE  4E4F                    3605              TRAP #15
000024B0                          3606              
000024B0  6000 012E               3607              BRA DONE
000024B4                          3608  
000024B4                          3609  ADDRESS_PI
000024B4  43F9 0000359A           3610              LEA A_PI_START, A1
000024BA                          3611              
000024BA  4280                    3612              CLR.L D0
000024BC                          3613              
000024BC  103C 000E               3614              MOVE.B #14, D0          * print out the '(A' for start of post increment address register
000024C0                          3615              
000024C0  4E4F                    3616              TRAP #15
000024C2                          3617              
000024C2  4281                    3618              CLR.L D1
000024C4                          3619              
000024C4  1207                    3620              MOVE.B D7, D1
000024C6                          3621              
000024C6  103C 0003               3622              MOVE.B #3, D0
000024CA                          3623              
000024CA  4E4F                    3624              TRAP #15                * print out the value in the data register
000024CC                          3625              
000024CC  43F9 0000359D           3626              LEA A_PI_END, A1
000024D2                          3627  
000024D2  4280                    3628              CLR.L D0
000024D4                          3629              
000024D4  103C 000E               3630              MOVE.B #14, D0          * print out the ')+' for end of post increment address register
000024D8                          3631     
000024D8  4E4F                    3632              TRAP #15
000024DA                          3633              
000024DA  6000 0104               3634              BRA DONE  
000024DE                          3635         
000024DE                          3636  ADDRESS_PD
000024DE                          3637  
000024DE  43F9 000035A0           3638              LEA A_PD_START, A1
000024E4                          3639              
000024E4  4280                    3640              CLR.L D0
000024E6                          3641              
000024E6  103C 000E               3642              MOVE.B #14, D0          * print out the '-(A' for start of pre decrement address register
000024EA                          3643              
000024EA  4E4F                    3644              TRAP #15
000024EC                          3645              
000024EC  4281                    3646              CLR.L D1
000024EE                          3647              
000024EE  1207                    3648              MOVE.B D7, D1
000024F0                          3649              
000024F0  103C 0003               3650              MOVE.B #3, D0
000024F4                          3651              
000024F4  4E4F                    3652              TRAP #15                * print out the value in the data register
000024F6                          3653              
000024F6  43F9 000035A4           3654              LEA A_PD_END, A1
000024FC                          3655  
000024FC  4280                    3656              CLR.L D0
000024FE                          3657              
000024FE  103C 000E               3658              MOVE.B #14, D0          * print out the ')-' for end of pre decrement
00002502                          3659  
00002502  4E4F                    3660              TRAP #15
00002504                          3661              
00002504  6000 00DA               3662              BRA DONE
00002508                          3663              
00002508                          3664  ADDRESS_W_DISPLACEMENT
00002508  6000 00D6               3665              BRA DONE
0000250C                          3666  
0000250C                          3667  ADDRESS_W_INDEX
0000250C  6000 00D2               3668              BRA DONE
00002510                          3669  
00002510                          3670  GROUP_111
00002510                          3671  
00002510  41F9 0000251E           3672                 LEA         jmp_table_ea_111,A0    *Index into the table
00002516                          3673  
00002516  CEFC 0006               3674                 MULU        #6,D7       *Form offset     
0000251A                          3675  
0000251A  4EF0 7000               3676                 JMP         0(A0,D7)   *Jump indirect with index
0000251E                          3677                 
0000251E                          3678  jmp_table_ea_111   
0000251E  4EF9 00002544           3679                 JMP         reg000
00002524                          3680  
00002524  4EF9 00002548           3681                 JMP         reg001
0000252A                          3682  
0000252A  4EF9 0000253C           3683                 JMP         reg010
00002530                          3684  
00002530  4EF9 00002540           3685                 JMP         reg011
00002536                          3686  
00002536  4EF9 0000254C           3687                 JMP         reg100
0000253C                          3688          
0000253C                          3689  
0000253C  6000 0012               3690  reg010       BRA         PC_W_DISPLACEMENT
00002540                          3691  
00002540  6000 0012               3692  reg011       BRA         PC_W_INDEX
00002544                          3693  
00002544  6000 0012               3694  reg000       BRA         ABSOLUTE_SHORT
00002548                          3695  
00002548  6000 002C               3696  reg001       BRA         ABSOLUTE_LONG
0000254C                          3697  
0000254C  6000 0046               3698  reg100       BRA         IMMEDIATE
00002550                          3699  
00002550                          3700  
00002550                          3701  PC_W_DISPLACEMENT
00002550  6000 008E               3702              BRA DONE
00002554                          3703  
00002554                          3704  PC_W_INDEX
00002554  6000 008A               3705              BRA DONE
00002558                          3706  
00002558                          3707  ABSOLUTE_SHORT
00002558  43F9 00003588           3708              LEA         HEX_SIGN, A1
0000255E                          3709              
0000255E  103C 000E               3710              MOVE.B      #14, D0
00002562                          3711              
00002562  4E4F                    3712              TRAP #15
00002564                          3713              
00002564  4281                    3714              CLR.L       D1
00002566                          3715              
00002566  321E                    3716              MOVE.W      (A6)+, D1
00002568                          3717              
00002568  103C 000F               3718              MOVE.B      #15, D0
0000256C                          3719              
0000256C  143C 0010               3720              MOVE.B      #16, D2
00002570                          3721              
00002570  4E4F                    3722              TRAP #15
00002572                          3723              
00002572  6000 006C               3724              BRA DONE  
00002576                          3725  
00002576                          3726  
00002576                          3727  ABSOLUTE_LONG
00002576  43F9 00003588           3728              LEA         HEX_SIGN, A1
0000257C                          3729              
0000257C  103C 000E               3730              MOVE.B      #14, D0
00002580                          3731              
00002580  4E4F                    3732              TRAP #15
00002582                          3733              
00002582  4281                    3734              CLR.L       D1
00002584                          3735              
00002584  221E                    3736              MOVE.L      (A6)+, D1
00002586                          3737              
00002586  103C 000F               3738              MOVE.B      #15, D0
0000258A                          3739              
0000258A  143C 0010               3740              MOVE.B      #16, D2
0000258E                          3741              
0000258E  4E4F                    3742              TRAP #15
00002590                          3743                          
00002590  6000 004E               3744              BRA DONE  
00002594                          3745  
00002594                          3746  
00002594                          3747  IMMEDIATE
00002594  43F9 00003586           3748              LEA     POUND_SIGN, A1
0000259A                          3749              
0000259A  103C 000E               3750              MOVE.B  #14, D0
0000259E                          3751              
0000259E  4E4F                    3752              TRAP #15
000025A0                          3753              
000025A0  43F9 00003588           3754              LEA     HEX_SIGN, A1
000025A6                          3755              
000025A6  4E4F                    3756              TRAP #15
000025A8                          3757              
000025A8  BA3C 0000               3758              CMP.B   #%00, D5
000025AC                          3759              
000025AC  6700 000E               3760              BEQ     IMMEDIATE_B
000025B0                          3761              
000025B0  BA3C 0001               3762              CMP.B   #%01, D5
000025B4                          3763              
000025B4  6700 0012               3764              BEQ     IMMEDIATE_W
000025B8                          3765              
000025B8  6000 001A               3766              BRA     IMMEDIATE_L
000025BC                          3767              
000025BC                          3768  IMMEDIATE_B
000025BC  4285                    3769              CLR.L       D5
000025BE                          3770     
000025BE  3A1E                    3771              MOVE.W      (A6)+, D5
000025C0                          3772              
000025C0  4EB8 2356               3773              JSR         HEX_TO_ASCII
000025C4                          3774              
000025C4  6000 001A               3775              BRA DONE
000025C8                          3776  
000025C8                          3777  IMMEDIATE_W
000025C8  4285                    3778              CLR.L       D5
000025CA                          3779  
000025CA  3A1E                    3780              MOVE.W      (A6)+, D5
000025CC                          3781              
000025CC  4EB8 2356               3782              JSR         HEX_TO_ASCII
000025D0                          3783              
000025D0                          3784              *MOVE.B      #15, D0
000025D0                          3785              
000025D0                          3786              *MOVE.B      #16, D2
000025D0                          3787              
000025D0                          3788              *TRAP #15 
000025D0                          3789              
000025D0  6000 000E               3790              BRA DONE        
000025D4                          3791  
000025D4                          3792  IMMEDIATE_L 
000025D4  4285                    3793              CLR.L       D5
000025D6                          3794              
000025D6  2A1E                    3795              MOVE.L      (A6)+, D5
000025D8                          3796      
000025D8  4EB8 2356               3797              JSR         HEX_TO_ASCII
000025DC                          3798              
000025DC  6000 0002               3799              BRA DONE
000025E0                          3800              
000025E0                          3801  DONE 
000025E0  4E75                    3802      RTS
000025E2                          3803      
000025E2                          3804   * INCLUDE 'MESSAGE_Data.X68'
000025E2                          3805   * INCLUDE 'HEX_TO_ASCII_V1.X68'
000025E2                          3806       
000025E2                          3807          
000025E2                          3808  
000025E2                          3809  
000025E2                          3810  
000025E2                          3811  
000025E2                          3812  
000025E2                          3813  
000025E2                          3814  
000025E2                          3815  
000025E2                          3816  
000025E2                          3817  -------------------- end include --------------------
000025E2                          3818                  INCLUDE 'ERROR_HANDLING.X68'
000025E2                          3819  ERROR_HANDLING 
000025E2                          3820  
000025E2  3015                    3821                   MOVE.W  (A5),D0
000025E4                          3822  
000025E4                          3823  
000025E4                          3824  
000025E4  41F9 000025FC           3825                   LEA     CHECK_jmp_table,A0    *Index into the table
000025EA                          3826  
000025EA  4280                    3827                   CLR.L   D0              *Zero it
000025EC                          3828  
000025EC  3015                    3829                   MOVE.W  (A5),D0     *We'll play with it here
000025EE                          3830  
000025EE  123C 000C               3831                   MOVE.B  #shift,D1       *Shift 12 bits to the right  
000025F2                          3832  
000025F2  E268                    3833                   LSR.W   D1,D0           *Move the bits
000025F4                          3834  
000025F4                          3835  
000025F4                          3836  
000025F4                          3837  
000025F4                          3838   
000025F4                          3839  
000025F4  C0FC 0006               3840                 MULU        #6,D0       *Form offset     
000025F8                          3841  
000025F8  4EB0 0000               3842                 JSR         0(A0,D0)   *Jump indirect with index
000025FC                          3843  
000025FC                          3844                      
000025FC                          3845  
000025FC  4EF9 0000265C           3846  CHECK_jmp_table      JMP         CHECK_code0000
00002602                          3847  
00002602  4EF9 00002660           3848                 JMP         CHECK_code0001
00002608                          3849  
00002608  4EF9 00002664           3850                 JMP         CHECK_code0010
0000260E                          3851  
0000260E  4EF9 00002668           3852                 JMP         CHECK_code0011
00002614                          3853  
00002614  4EF9 0000266C           3854                 JMP         CHECK_code0100
0000261A                          3855  
0000261A  4EF9 00002670           3856                 JMP         CHECK_code0101
00002620                          3857  
00002620  4EF9 00002674           3858                 JMP         CHECK_code0110
00002626                          3859  
00002626  4EF9 0000267A           3860                 JMP         CHECK_code0111
0000262C                          3861  
0000262C  4EF9 0000267E           3862                 JMP         CHECK_code1000
00002632                          3863  
00002632  4EF9 00002682           3864                 JMP         CHECK_code1001
00002638                          3865  
00002638  4EF9 00002686           3866                 JMP         CHECK_code1010
0000263E                          3867  
0000263E  4EF9 0000268A           3868                 JMP         CHECK_code1011
00002644                          3869  
00002644  4EF9 0000268E           3870                 JMP         CHECK_code1100
0000264A                          3871  
0000264A  4EF9 00002692           3872                 JMP         CHECK_code1101
00002650                          3873  
00002650  4EF9 00002696           3874                 JMP         CHECK_code1110
00002656                          3875  
00002656  4EF9 0000269A           3876                 JMP         CHECK_code1111
0000265C                          3877  
0000265C                          3878          
0000265C                          3879  
0000265C                          3880   
0000265C                          3881  
0000265C                          3882  
0000265C                          3883   
0000265C                          3884  
0000265C                          3885   
0000265C                          3886  
0000265C  6000 08F6               3887  CHECK_code0000       BRA         CHECK_ADDI
00002660                          3888  
00002660  6000 0282               3889  CHECK_code0001       BRA         CHECK_MOVEB
00002664                          3890  
00002664  6000 02A4               3891  CHECK_code0010       BRA         CHECK_MOVEL
00002668                          3892  
00002668  6000 0282               3893  CHECK_code0011       BRA         CHECK_MOVEW
0000266C                          3894  
0000266C  6000 0480               3895  CHECK_code0100       BRA         CHECK_GROUP_0100_CODE
00002670                          3896  
00002670  6000 03F0               3897  CHECK_code0101       BRA         CHECK_ADDQ   * Subroutine for ADDQ
00002674                          3898  
00002674  4EF9 00002F00           3899  CHECK_code0110       JMP         CHECK_BCC
0000267A                          3900  
0000267A  6000 08B2               3901  CHECK_code0111       BRA         CHECK_MOVEQ
0000267E                          3902  
0000267E  6000 054A               3903  CHECK_code1000       BRA         CHECK_DIVU_OR
00002682                          3904  
00002682  6000 04E2               3905  CHECK_code1001       BRA         CHECK_SUB    * Subroutine for SUB    
00002686                          3906  
00002686  6000 0016               3907  CHECK_code1010       BRA         ERROR_HANDLE
0000268A                          3908  
0000268A                          3909   
0000268A                          3910  
0000268A                          3911  
0000268A                          3912  
0000268A                          3913  
0000268A                          3914   * another jump table to the 8 possible op-codes at the next level.
0000268A                          3915  
0000268A                          3916   
0000268A                          3917  
0000268A  6000 05DA               3918  CHECK_code1011       BRA         CHECK_CMP             *CMP  * Subroutuine for CMP
0000268E                          3919  
0000268E  6000 05FC               3920  CHECK_code1100       BRA         CHECK_MULS_AND             *MULS, AND
00002692                          3921  
00002692  6000 075E               3922  CHECK_code1101       BRA         CHECK_ADD_ADDA             *ADD_ADDA       *#$2700
00002696                          3923  
00002696  6000 004E               3924  CHECK_code1110       BRA         CHECK_SHIFTS
0000269A                          3925  
0000269A  6000 0002               3926  CHECK_code1111       BRA         ERROR_HANDLE
0000269E                          3927                   
0000269E                          3928  ERROR_HANDLE
0000269E  43F9 00003588           3929          LEA         HEX_SIGN, A1
000026A4                          3930          
000026A4  103C 000E               3931          MOVE.B      #14, D0
000026A8                          3932          
000026A8  4E4F                    3933          TRAP #15
000026AA                          3934  
000026AA  3A0D                    3935          MOVE.W      A5, D5
000026AC                          3936          
000026AC  4EB8 2356               3937          JSR         HEX_TO_ASCII
000026B0                          3938          
000026B0  43F9 0000358C           3939          LEA         SPACE, A1
000026B6                          3940          
000026B6  103C 000E               3941          MOVE.B      #14, D0
000026BA                          3942          
000026BA  4E4F                    3943          TRAP #15
000026BC                          3944  
000026BC  43F9 000035DB           3945          LEA     DATA, A1
000026C2                          3946          
000026C2  103C 000E               3947          MOVE.B      #14, D0
000026C6                          3948          
000026C6  4E4F                    3949          TRAP #15
000026C8                          3950          
000026C8  43F9 00003586           3951          LEA         POUND_SIGN, A1
000026CE                          3952          
000026CE  103C 000E               3953          MOVE.B      #14, D0
000026D2                          3954          
000026D2  4E4F                    3955          TRAP #15
000026D4                          3956          
000026D4  43F9 00003588           3957          LEA         HEX_SIGN, A1
000026DA                          3958          
000026DA  4E4F                    3959          TRAP #15
000026DC                          3960          
000026DC  3A1D                    3961          MOVE.W      (A5)+, D5
000026DE                          3962          
000026DE  4EB8 2356               3963          JSR         HEX_TO_ASCII
000026E2                          3964          
000026E2  6000 EA0C               3965          BRA         PARSE_MEMORY
000026E6                          3966          
000026E6                          3967          INCLUDE     'DAMIAN_OP_CODE_HANDLE_ERROR.X68'
000026E6  4280                    3968  CHECK_SHIFTS           CLR.L D0
000026E8                          3969                      
000026E8  4286                    3970                   CLR.L D6
000026EA                          3971  
000026EA  4281                    3972                   CLR.L D1
000026EC                          3973                   
000026EC  3015                    3974                   MOVE.W (A5), D0
000026EE                          3975                   
000026EE  E148                    3976                   LSL.W #8, D0
000026F0                          3977                   
000026F0  123C 000E               3978                   MOVE.B #14, D1
000026F4                          3979                   
000026F4  E268                    3980                   LSR.W D1, D0
000026F6                          3981                   
000026F6  B03C 0003               3982                   CMP.B  #%11, D0            * check to see if its memory shift
000026FA                          3983                   
000026FA  6700 002C               3984                   BEQ CHECK_MEMORY_SHIFTS
000026FE                          3985                   
000026FE  3015                    3986                   MOVE.W     (A5), D0
00002700                          3987                   
00002700  123C 000B               3988                   MOVE.B     #11, D1
00002704                          3989                   
00002704  E368                    3990                   LSL.W      D1, D0
00002706                          3991                   
00002706  123C 000E               3992                   MOVE.B     #14, D1
0000270A                          3993                   
0000270A  E268                    3994                   LSR.W      D1, D0
0000270C                          3995                   
0000270C  B03C 0000               3996                   CMP.B      #%00, D0
00002710                          3997                   
00002710  6700 00EE               3998                   BEQ        CHECK_ASD
00002714                          3999                   
00002714  B03C 0001               4000                   CMP.B      #%01, D0
00002718                          4001                   
00002718  6700 003E               4002                   BEQ        CHECK_LSD
0000271C                          4003                   
0000271C  B07C 0003               4004                   CMP        #%11, D0
00002720                          4005                   
00002720  6700 008E               4006                   BEQ        CHECK_ROD
00002724                          4007                   
00002724  6000 FF78               4008                   BRA        ERROR_HANDLE
00002728                          4009                   
00002728                          4010                   
00002728                          4011  CHECK_MEMORY_SHIFTS
00002728  3015                    4012                   MOVE.W (A5),D0
0000272A                          4013                   
0000272A  E948                    4014                   LSL.W #4,D0            *shift out the opcode
0000272C                          4015                   
0000272C  123C 000D               4016                   MOVE.B #13,D1          
00002730                          4017                   
00002730  E268                    4018                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there
00002732                          4019                   
00002732  B03C 0001               4020                   CMP.B #1,D0            
00002736                          4021                   
00002736  6700 0020               4022                   BEQ CHECK_LSD                *if the bits are 1, it is a logical shift
0000273A                          4023                   
0000273A  B03C 0003               4024                   CMP.B #3,D0
0000273E                          4025                   
0000273E  6700 0070               4026                   BEQ CHECK_ROD                *if the bits are 3, it is a rotation
00002742                          4027                   
00002742  3015                    4028                   MOVE.W (A5),D0
00002744                          4029                   
00002744  E948                    4030                   LSL.W #4,D0            *shift out the opcode
00002746                          4031                   
00002746  123C 000D               4032                   MOVE.B #13,D1          
0000274A                          4033                   
0000274A  E268                    4034                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there   
0000274C                          4035                      
0000274C  B03C 0000               4036                   CMP.B  #0, D0
00002750                          4037                   
00002750  6700 00AE               4038                   BEQ    CHECK_ASD
00002754                          4039                   
00002754  6000 FF48               4040                   BRA ERROR_HANDLE
00002758                          4041                   
00002758                          4042  
00002758  4280                    4043  CHECK_LSD              CLR.L D0               *still need to do checks, since an asd shift could still be a possibility
0000275A                          4044                   
0000275A  4281                    4045                   CLR.L D1
0000275C                          4046                                                 
0000275C  3015                    4047                   MOVE.W (A5), D0
0000275E                          4048                   
0000275E  EF48                    4049                   LSL.W  #7, D0
00002760                          4050                   
00002760  123C 000F               4051                   MOVE.B #15, D1
00002764                          4052                   
00002764  E268                    4053                   LSR.W  D1, D0
00002766                          4054                   
00002766  B03C 0001               4055                   CMP.B  #1, D0
0000276A                          4056                   
0000276A  6700 000E               4057                   BEQ CHECK_LSL
0000276E                          4058                   
0000276E  B03C 0000               4059                   CMP.B #0, D0
00002772                          4060                   
00002772  6700 001C               4061                   BEQ CHECK_LSR
00002776                          4062                   
00002776  6000 FF26               4063                   BRA ERROR_HANDLE
0000277A                          4064                   
0000277A                          4065  
0000277A                          4066  CHECK_LSL           
0000277A  3015                    4067                   MOVE.W (A5), D0
0000277C                          4068                   
0000277C  E148                    4069                   LSL.W #8, D0
0000277E                          4070                   
0000277E  123C 000E               4071                   MOVE.B #14, D1
00002782                          4072                   
00002782  E268                    4073                   LSR.W D1, D0
00002784                          4074                   
00002784  B03C 0003               4075                   CMP.B  #%11, D0        * check to see if it is memory and not register shift
00002788                          4076                   
00002788  6700 001C               4077                   BEQ CHECK_LSD_MEMORY
0000278C                          4078                   
0000278C  6000 00BE               4079                   BRA CHECK_REGISTER_SHIFTS_EA
00002790                          4080  
00002790                          4081  CHECK_LSR                    
00002790  3015                    4082                   MOVE.W (A5), D0
00002792                          4083                   
00002792  E148                    4084                   LSL.W #8, D0
00002794                          4085                   
00002794  123C 000E               4086                   MOVE.B #14, D1
00002798                          4087                   
00002798  E268                    4088                   LSR.W D1, D0
0000279A                          4089                   
0000279A  B03C 0003               4090                   CMP.B  #%11, D0            * check to see if memory shift
0000279E                          4091                   
0000279E  6700 0006               4092                   BEQ CHECK_LSD_MEMORY
000027A2                          4093                   
000027A2  6000 00A8               4094                   BRA CHECK_REGISTER_SHIFTS_EA
000027A6                          4095                   
000027A6                          4096  CHECK_LSD_MEMORY
000027A6  4EB9 000028C0           4097                   JSR    CHECK_MEMORY_SHIFTS_EA
000027AC                          4098                   
000027AC  6000 E98A               4099                   BRA CHECK_PARSE_MEMORY
000027B0                          4100              
000027B0                          4101  
000027B0  4280                    4102  CHECK_ROD              CLR.L D0               *same check as logical shift, since an arithmetic shift could still be possible
000027B2                          4103                   
000027B2  4281                    4104                   CLR.L D1
000027B4                          4105                   
000027B4  3015                    4106                   MOVE.W (A5), D0
000027B6                          4107                   
000027B6  EF48                    4108                   LSL.W  #7, D0
000027B8                          4109                   
000027B8  123C 000F               4110                   MOVE.B #15, D1
000027BC                          4111                   
000027BC  E268                    4112                   LSR.W  D1, D0
000027BE                          4113                   
000027BE  B03C 0001               4114                   CMP.B  #1, D0
000027C2                          4115                   
000027C2  6700 0006               4116                   BEQ CHECK_ROL
000027C6                          4117                   
000027C6  6000 0018               4118                   BRA CHECK_ROR
000027CA                          4119  
000027CA                          4120  CHECK_ROL              
000027CA  3015                    4121                   MOVE.W (A5), D0
000027CC                          4122                   
000027CC  E148                    4123                   LSL.W #8, D0
000027CE                          4124                   
000027CE  123C 000E               4125                   MOVE.B #14, D1
000027D2                          4126                   
000027D2  E268                    4127                   LSR.W D1, D0
000027D4                          4128                   
000027D4  B03C 0003               4129                   CMP.B  #%11, D0            * check to see if its memory shift
000027D8                          4130                   
000027D8  6700 001C               4131                   BEQ CHECK_ROD_MEMORY
000027DC                          4132                   
000027DC  6000 006E               4133                   BRA CHECK_REGISTER_SHIFTS_EA
000027E0                          4134  
000027E0                          4135  CHECK_ROR                        
000027E0  3015                    4136                   MOVE.W (A5), D0
000027E2                          4137                   
000027E2  E148                    4138                   LSL.W #8, D0
000027E4                          4139                   
000027E4  123C 000E               4140                   MOVE.B #14, D1
000027E8                          4141                   
000027E8  E268                    4142                   LSR.W D1, D0
000027EA                          4143                   
000027EA  B03C 0003               4144                   CMP.B  #%11, D0            * check to see if its memory shift
000027EE                          4145                   
000027EE  6700 0006               4146                   BEQ CHECK_ROD_MEMORY
000027F2                          4147                   
000027F2  6000 0058               4148                   BRA CHECK_REGISTER_SHIFTS_EA
000027F6                          4149  
000027F6                          4150  CHECK_ROD_MEMORY       
000027F6  4EB9 000028C0           4151                   JSR    CHECK_MEMORY_SHIFTS_EA
000027FC                          4152                   
000027FC  6000 E93A               4153                   BRA CHECK_PARSE_MEMORY
00002800                          4154                   
00002800                          4155                   
00002800  3015                    4156  CHECK_ASD              MOVE.W (A5), D0
00002802                          4157                   
00002802  EF48                    4158                   LSL.W  #7, D0
00002804                          4159                   
00002804  123C 000F               4160                   MOVE.B #15, D1
00002808                          4161                   
00002808  E268                    4162                   LSR.W  D1, D0
0000280A                          4163                   
0000280A  B03C 0001               4164                   CMP.B  #1, D0
0000280E                          4165                   
0000280E  6700 0006               4166                   BEQ CHECK_ASL
00002812                          4167                   
00002812  6000 0018               4168                   BRA CHECK_ASR
00002816                          4169                   
00002816                          4170  CHECK_ASL
00002816                          4171                   
00002816  3015                    4172                   MOVE.W (A5), D0
00002818                          4173                   
00002818  E148                    4174                   LSL.W #8, D0
0000281A                          4175                   
0000281A  123C 000E               4176                   MOVE.B #14, D1
0000281E                          4177                   
0000281E  E268                    4178                   LSR.W D1, D0
00002820                          4179                   
00002820  B03C 0003               4180                   CMP.B  #%11, D0            * check to see if its memory shift
00002824                          4181                   
00002824  6700 001C               4182                   BEQ CHECK_ASD_MEMORY
00002828                          4183                   
00002828  6000 0022               4184                   BRA CHECK_REGISTER_SHIFTS_EA
0000282C                          4185                                    
0000282C                          4186  
0000282C                          4187  CHECK_ASR                               
0000282C  3015                    4188                   MOVE.W (A5), D0
0000282E                          4189                   
0000282E  E148                    4190                   LSL.W #8, D0
00002830                          4191                   
00002830  123C 000E               4192                   MOVE.B #14, D1
00002834                          4193                   
00002834  E268                    4194                   LSR.W D1, D0
00002836                          4195                   
00002836  B03C 0003               4196                   CMP.B  #%11, D0            * check to see if its memory shift
0000283A                          4197                   
0000283A  6700 0006               4198                   BEQ CHECK_ASD_MEMORY
0000283E                          4199                   
0000283E  6000 000C               4200                   BRA CHECK_REGISTER_SHIFTS_EA
00002842                          4201  
00002842                          4202  CHECK_ASD_MEMORY
00002842  4EB9 000028C0           4203                   JSR    CHECK_MEMORY_SHIFTS_EA
00002848                          4204                   
00002848  6000 E8EE               4205                   BRA CHECK_PARSE_MEMORY
0000284C                          4206                   
0000284C                          4207  CHECK_REGISTER_SHIFTS_EA               
0000284C  4EB8 1314               4208                   JSR GET_SIZE_PURPLE
00002850                          4209  
00002850  3015                    4210                   MOVE.W (A5), D0
00002852                          4211                   
00002852  123C 000A               4212                   MOVE.B #10, D1
00002856                          4213                   
00002856  E368                    4214                   LSL.W D1, D0
00002858                          4215                   
00002858  123C 000F               4216                   MOVE.B #15, D1
0000285C                          4217                   
0000285C  E268                    4218                   LSR.W D1, D0
0000285E                          4219                   
0000285E  B03C 0001               4220                   CMP.B #1, D0
00002862                          4221                   
00002862  6700 0030               4222                   BEQ CHECK_REGISTER
00002866                          4223                   
00002866  B03C 0000               4224                   CMP.B  #0, D0
0000286A                          4225                   
0000286A  6700 0006               4226                   BEQ CHECK_COUNT
0000286E                          4227                   
0000286E  6000 FE2E               4228                   BRA ERROR_HANDLE
00002872                          4229  
00002872                          4230                   
00002872                          4231  CHECK_COUNT    
00002872                          4232                 
00002872  3015                    4233                   MOVE.W (A5), D0
00002874                          4234                   
00002874  E948                    4235                   LSL.W #4, D0
00002876                          4236                   
00002876  123C 000D               4237                   MOVE.B #13, D1
0000287A                          4238                   
0000287A  E268                    4239                   LSR.W D1, D0
0000287C                          4240                                    
0000287C  3015                    4241                   MOVE.W (A5), D0
0000287E                          4242                   
0000287E  123C 000D               4243                   MOVE.B #13, D1                * to print out the ea that is being shifted
00002882                          4244                   
00002882  E368                    4245                   LSL.W D1, D0
00002884                          4246                   
00002884  E268                    4247                   LSR.W D1, D0
00002886                          4248                   
00002886  1E00                    4249                   MOVE.B D0, D7
00002888                          4250                   
00002888  7C00                    4251                   MOVE.L #%000, D6              * we know it is a data register
0000288A                          4252                   
0000288A  4EB9 00002D24           4253                   JSR CHECK_EA
00002890                          4254                   
00002890  6000 E8A6               4255                   BRA CHECK_PARSE_MEMORY
00002894                          4256                   
00002894                          4257  
00002894                          4258  CHECK_REGISTER
00002894  3015                    4259                   MOVE.W (A5), D0
00002896                          4260                   
00002896  E948                    4261                   LSL.W #4, D0
00002898                          4262                   
00002898  123C 000D               4263                   MOVE.B #13, D1
0000289C                          4264                   
0000289C  E268                    4265                   LSR.W D1, D0
0000289E                          4266                   
0000289E  1E00                    4267                   MOVE.B D0, D7
000028A0                          4268                   
000028A0  7C00                    4269                   MOVE.L #%000, D6
000028A2                          4270                   
000028A2  4EB9 00002D24           4271                   JSR CHECK_EA                  * to print out the data register
000028A8                          4272                   
000028A8  3015                    4273                   MOVE.W (A5), D0
000028AA                          4274                   
000028AA  123C 000D               4275                   MOVE.B #13, D1                * to print out the ea that is being shifted
000028AE                          4276                   
000028AE  E368                    4277                   LSL.W D1, D0
000028B0                          4278                   
000028B0  E268                    4279                   LSR.W D1, D0
000028B2                          4280                   
000028B2  1E00                    4281                   MOVE.B D0, D7
000028B4                          4282                   
000028B4  7C00                    4283                   MOVE.L #%000, D6              * we know it is a data register
000028B6                          4284                   
000028B6  4EB9 00002D24           4285                   JSR CHECK_EA
000028BC                          4286                   
000028BC  6000 E87A               4287                   BRA CHECK_PARSE_MEMORY
000028C0                          4288                                   
000028C0                          4289  
000028C0                          4290  CHECK_MEMORY_SHIFTS_EA   * gets the mode and register of the memory ea, and prints it out
000028C0                          4291                   *JSR GET_SIZE_PURPLE
000028C0                          4292                   
000028C0                          4293                   *JSR PRINTOUT_SIZE_PURPLE
000028C0                          4294  
000028C0  3015                    4295                   MOVE.W (A5), D0
000028C2                          4296                   
000028C2  123C 000A               4297                   MOVE.B #10, D1
000028C6                          4298                   
000028C6  E368                    4299                   LSL.W D1, D0
000028C8                          4300                   
000028C8  123C 000D               4301                   MOVE.B #13, D1
000028CC                          4302                   
000028CC  E268                    4303                   LSR.W D1, D0
000028CE                          4304                   
000028CE  2C00                    4305                   MOVE.L D0, D6
000028D0                          4306                   
000028D0  3015                    4307                   MOVE.W (A5), D0
000028D2                          4308                   
000028D2  123C 000D               4309                   MOVE.B #13, D1
000028D6                          4310                   
000028D6  E368                    4311                   LSL.W D1, D0
000028D8                          4312                   
000028D8  E268                    4313                   LSR.W D1, D0
000028DA                          4314                   
000028DA  2E00                    4315                   MOVE.L D0, D7
000028DC                          4316                   
000028DC  4EB9 00002D24           4317                   JSR CHECK_EA
000028E2                          4318                   
000028E2  4E75                    4319                   RTS
000028E4                          4320                                   
000028E4                          4321                
000028E4                          4322  CHECK_MOVEB            
000028E4                          4323                   
000028E4  1A3C 0000               4324                   MOVE.B     #%00, D5
000028E8                          4325                   
000028E8  6000 004E               4326                   BRA CHECK_MOVE_EA
000028EC                          4327  
000028EC  4280                    4328  CHECK_MOVEW            CLR.L D0
000028EE                          4329                   
000028EE  4281                    4330                   CLR.L D1
000028F0                          4331                   
000028F0  3015                    4332                   MOVE.W (A5),D0
000028F2                          4333                   
000028F2  EF48                    4334                   LSL.W #7,D0
000028F4                          4335                   
000028F4  123C 000D               4336                   MOVE.B #13,D1
000028F8                          4337                   
000028F8  E268                    4338                   LSR.W D1,D0
000028FA                          4339                   
000028FA  B03C 0001               4340                   CMP.B #1,D0            *check to see if the mode of the destination is an address register
000028FE                          4341                   
000028FE  6700 0028               4342                   BEQ CHECK_MOVEAW             *if the destination is an address, it is MOVEA
00002902                          4343                   
00002902  1A3C 0001               4344                   MOVE.B     #%01, D5
00002906                          4345                      
00002906  6000 0030               4346                   BRA CHECK_MOVE_EA
0000290A                          4347                
0000290A                          4348  
0000290A  4280                    4349  CHECK_MOVEL            CLR.L D0
0000290C                          4350                   
0000290C  4281                    4351                   CLR.L D1
0000290E                          4352                   
0000290E  3015                    4353                   MOVE.W (A5),D0
00002910                          4354                   
00002910  EF48                    4355                   LSL.W #7,D0
00002912                          4356                   
00002912  123C 000D               4357                   MOVE.B #13,D1
00002916                          4358                   
00002916  E268                    4359                   LSR.W D1,D0
00002918                          4360                   
00002918  B03C 0001               4361                   CMP.B #1,D0            *check to see if the mode of the destination is equal to 1
0000291C                          4362                   
0000291C  6700 0012               4363                   BEQ CHECK_MOVEAL             *if the mode is 1, then it is an address register, and the opcode is MOVEA
00002920                          4364                   
00002920  1A3C 0002               4365                   MOVE.B     #%10, D5
00002924                          4366                   
00002924  6000 0012               4367                   BRA CHECK_MOVE_EA
00002928                          4368                   
00002928                          4369                   
00002928                          4370  CHECK_MOVEAW                    
00002928  1A3C 0001               4371                   MOVE.B     #%01, D5
0000292C                          4372                   
0000292C  6000 000A               4373                   BRA CHECK_MOVE_EA
00002930                          4374  
00002930                          4375  CHECK_MOVEAL                  
00002930  1A3C 0002               4376                   MOVE.B     #%10, D5
00002934                          4377                   
00002934  6000 0002               4378                   BRA CHECK_MOVE_EA
00002938                          4379  
00002938                          4380  CHECK_MOVE_EA
00002938  4247                    4381                   CLR    D7 
0000293A                          4382                   
0000293A  4246                    4383                   CLR    D6               
0000293C                          4384                   
0000293C  3015                    4385                   MOVE.W (A5), D0
0000293E                          4386                   
0000293E  123C 000A               4387                   MOVE.B #10, D1
00002942                          4388                   
00002942  E368                    4389                   LSL.W D1, D0
00002944                          4390                   
00002944  123C 000D               4391                   MOVE.B #13, D1
00002948                          4392                   
00002948  E268                    4393                   LSR.W D1, D0
0000294A                          4394                   
0000294A  1C00                    4395                   MOVE.B D0, D6          * getting the mode of the second ea
0000294C                          4396                   
0000294C  3015                    4397                   MOVE.W (A5), D0
0000294E                          4398                   
0000294E  123C 000D               4399                   MOVE.B #13, D1
00002952                          4400                   
00002952  E368                    4401                   LSL.W D1, D0
00002954                          4402                   
00002954  E268                    4403                   LSR.W D1, D0
00002956                          4404                   
00002956  1E00                    4405                   MOVE.B D0, D7          * getting the register of the second ea
00002958                          4406                   
00002958  4EB9 00002D24           4407                   JSR CHECK_EA
0000295E                          4408                   
0000295E  3015                    4409                   MOVE.W (A5), D0
00002960                          4410                   
00002960  E948                    4411                   LSL.W #4, D0
00002962                          4412                   
00002962  123C 000D               4413                   MOVE.B #13, D1
00002966                          4414                   
00002966  E268                    4415                   LSR.W D1, D0
00002968                          4416                   
00002968  1E00                    4417                   MOVE.B D0, D7          * getting the register of the first ea
0000296A                          4418                   
0000296A  3015                    4419                   MOVE.W (A5), D0
0000296C                          4420                   
0000296C  EF48                    4421                   LSL.W #7, D0
0000296E                          4422                   
0000296E  123C 000D               4423                   MOVE.B #13, D1
00002972                          4424                   
00002972  E268                    4425                   LSR.W D1, D0
00002974                          4426                   
00002974  1C00                    4427                   MOVE.B D0, D6          * getting the mode of the first ea
00002976                          4428                   
00002976  4EB9 00002D24           4429                   JSR CHECK_EA
0000297C                          4430                   
0000297C  6000 E7BA               4431                   BRA CHECK_PARSE_MEMORY
00002980                          4432  
00002980                          4433  
00002980                          4434  
00002980                          4435  
00002980                          4436  
00002980                          4437  
00002980                          4438  
00002980                          4439  
00002980                          4440  
00002980                          4441  
00002980                          4442  
00002980                          4443  
00002980                          4444  
00002980                          4445  -------------------- end include --------------------
00002980                          4446          INCLUDE     'CHECK_TRYING_NOP.X68'
00002980                          4447  CHECK_LEA_OPCODE
00002980                          4448      
00002980  3015                    4449      MOVE.W  (A5),D0     *D0 is the binary value to decode
00002982                          4450      
00002982  123C 000D               4451      MOVE.B  #13,D1     
00002986                          4452  
00002986  E368                    4453      LSL.W   D1,D0
00002988                          4454                   
00002988  123C 000D               4455      MOVE.B  #13,D1
0000298C                          4456  
0000298C  E268                    4457      LSR.W   D1,D0  *D0 now holds Register
0000298E                          4458                                              
0000298E  3E00                    4459      MOVE.W D0, D7 *D7 holds Register  
00002990                          4460  
00002990  3015                    4461      MOVE.W  (A5),D0     *D0 is the binary value to decode
00002992                          4462  
00002992  123C 000A               4463      MOVE.B  #10,D1     
00002996                          4464  
00002996  E368                    4465      LSL.W   D1,D0
00002998                          4466                   
00002998  123C 000D               4467      MOVE.B  #13,D1
0000299C                          4468  
0000299C  E268                    4469      LSR.W   D1,D0  *D0 now holds MODE
0000299E                          4470                                              
0000299E  3C00                    4471      MOVE.W D0, D6 *D6 holds MODE  
000029A0                          4472      
000029A0  4EB9 00002D24           4473      JSR CHECK_EA
000029A6                          4474                                    
000029A6  3015                    4475      MOVE.W  (A5),D0     *D0 is the binary value to decode 
000029A8                          4476  
000029A8  7C01                    4477      MOVE.L #%001, D6
000029AA                          4478  
000029AA  123C 0004               4479      MOVE.B  #4,D1     
000029AE                          4480  
000029AE  E368                    4481      LSL.W   D1,D0
000029B0                          4482                   
000029B0  123C 000D               4483      MOVE.B  #13,D1
000029B4                          4484  
000029B4  E268                    4485      LSR.W   D1,D0  
000029B6                          4486                                              
000029B6  3E00                    4487      MOVE.W D0, D7 
000029B8                          4488      
000029B8  4EB9 00002D24           4489      JSR CHECK_EA
000029BE                          4490      
000029BE  4EF8 1138               4491      JMP     CHECK_PARSE_MEMORY       
000029C2                          4492            
000029C2                          4493  CHECK_NOP_OPCODE
000029C2                          4494      
000029C2  6000 E774               4495      BRA CHECK_PARSE_MEMORY
000029C6                          4496  CHECk_RTS_OPCODE 
000029C6                          4497   
000029C6  6000 E770               4498      BRA CHECK_PARSE_MEMORY
000029CA                          4499      
000029CA                          4500  CHECK_JSR_OPCODE 
000029CA                          4501  
000029CA  3015                    4502      MOVE.W (A5), D0
000029CC                          4503  
000029CC  123C 000D               4504      MOVE.B  #13,D1     
000029D0                          4505  
000029D0  E368                    4506      LSL.W   D1,D0
000029D2                          4507                   
000029D2  123C 000D               4508      MOVE.B  #13,D1
000029D6                          4509  
000029D6  E268                    4510      LSR.W   D1,D0  *D0 now holds Register
000029D8                          4511                                              
000029D8  3E00                    4512      MOVE.W D0, D7 *D7 holds Register  
000029DA                          4513  
000029DA  3015                    4514      MOVE.W (A5), D0
000029DC                          4515  
000029DC  123C 000A               4516      MOVE.B  #10,D1     
000029E0                          4517  
000029E0  E368                    4518      LSL.W   D1,D0
000029E2                          4519                   
000029E2  123C 000D               4520      MOVE.B  #13,D1
000029E6                          4521  
000029E6  E268                    4522      LSR.W   D1,D0  *D0 now holds MODE
000029E8                          4523                                              
000029E8  3C00                    4524      MOVE.W D0, D6 *D6 holds MODE  
000029EA                          4525      
000029EA  4EB9 00002D24           4526      JSR CHECK_EA
000029F0                          4527      
000029F0  6000 E746               4528      BRA CHECK_PARSE_MEMORY
000029F4                          4529         
000029F4                          4530  CHECK_CLR_OPCODE 
000029F4                          4531       
000029F4  3015                    4532      MOVE.W      (A5), D0
000029F6                          4533               
000029F6  123C 0006               4534      MOVE.B      #6, D1
000029FA                          4535                 
000029FA  E268                    4536      LSR.W       D1, D0  *shift right 6 
000029FC                          4537                 
000029FC  123C 000E               4538      MOVE.B      #14, D1
00002A00                          4539                 
00002A00  E368                    4540      LSL.W       D1, D0  *shift left 15, only size is left
00002A02                          4541      
00002A02  123C 000E               4542      MOVE.B      #14, D1
00002A06                          4543                 
00002A06  E268                    4544      LSR.W       D1, D0  *shift right 15, size is left   
00002A08                          4545      
00002A08  B07C 0000               4546      CMP.W       #00, D0
00002A0C                          4547  
00002A0C  6700 0048               4548      BEQ         CHECK_SIZE_B
00002A10                          4549      
00002A10  B07C 0001               4550      CMP.W       #01, D0
00002A14                          4551                 
00002A14  6700 0044               4552      BEQ         CHECK_SIZE_W 
00002A18                          4553      
00002A18  B07C 0002               4554      CMP.W       #2, D0
00002A1C                          4555                 
00002A1C  6700 0040               4556      BEQ         CHECK_SIZE_L
00002A20                          4557      
00002A20  6000 FC7C               4558      BRA          ERROR_HANDLE
00002A24                          4559  
00002A24                          4560  CHECK_PRINT_SIZE
00002A24                          4561  
00002A24  4280                    4562      CLR.L   D0
00002A26                          4563                  
00002A26  4281                    4564      CLR.L   D1
00002A28                          4565                       * set register
00002A28                          4566                   
00002A28  3015                    4567      MOVE.W  (A5),D0     *D0 is the binary value to decode
00002A2A                          4568                 
00002A2A  123C 000D               4569      MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002A2E                          4570  
00002A2E  E368                    4571      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002A30                          4572  
00002A30  123C 000D               4573      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00002A34                          4574  
00002A34  E268                    4575      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00002A36                          4576  
00002A36  1E00                    4577      MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00002A38                          4578                   
00002A38                          4579                   * set mode
00002A38  4280                    4580      CLR.L D0                *clear D0
00002A3A                          4581                   
00002A3A  4281                    4582      CLR.L D1                *clear D1
00002A3C                          4583                   
00002A3C  3015                    4584      MOVE.W  (A5),D0     *D0 is the binary value to decode
00002A3E                          4585                 
00002A3E  123C 000A               4586      MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002A42                          4587  
00002A42  E368                    4588      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002A44                          4589  
00002A44  123C 000D               4590      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00002A48                          4591  
00002A48  E268                    4592      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00002A4A                          4593  
00002A4A  2C00                    4594      MOVE.L  D0, D6          *put D0 to data register into D7 for future printing
00002A4C                          4595                   
00002A4C  4EB9 00002D24           4596      JSR     CHECK_EA *by using jmp table
00002A52                          4597  
00002A52  6000 E6E4               4598      BRA CHECK_PARSE_MEMORY
00002A56                          4599      
00002A56                          4600  CHECK_SIZE_B 
00002A56                          4601                    
00002A56  4EF8 2A24               4602      JMP CHECK_PRINT_SIZE
00002A5A                          4603      
00002A5A                          4604  CHECK_SIZE_W 
00002A5A                          4605                    
00002A5A  4EF8 2A24               4606      JMP CHECK_PRINT_SIZE
00002A5E                          4607      
00002A5E                          4608  CHECK_SIZE_L 
00002A5E                          4609                    
00002A5E  4EF8 2A24               4610      JMP CHECK_PRINT_SIZE
00002A62                          4611  
00002A62                          4612  
00002A62                          4613  
00002A62                          4614  
00002A62                          4615  -------------------- end include --------------------
00002A62                          4616          INCLUDE     'CHECK_ADDQ.X68'
00002A62                          4617  CHECK_ADDQ
00002A62                          4618  
00002A62                          4619      
00002A62  3015                    4620      MOVE.W (A5), D0
00002A64                          4621      
00002A64  123C 0008               4622      MOVE.B  #8,D1     
00002A68                          4623  
00002A68  E368                    4624      LSL.W   D1,D0
00002A6A                          4625                   
00002A6A  123C 000E               4626      MOVE.B  #14,D1
00002A6E                          4627  
00002A6E  E268                    4628      LSR.W   D1,D0  *DO now holds size
00002A70                          4629                                              
00002A70  B03C 0002               4630      CMP.B    #$2, D0        *if D0 holds 2, size is L
00002A74                          4631      
00002A74  6700 002A               4632      BEQ      CHECK_ADDQL
00002A78                          4633                   
00002A78  B03C 0001               4634      CMP.B    #$1, D0        *if D0 holds 1, size is W
00002A7C                          4635                                   
00002A7C  6700 0018               4636      BEQ      CHECK_ADDQW
00002A80                          4637      
00002A80  B03C 0000               4638      CMP.B    #$0, D0        *if D0 holds 1, size is W
00002A84                          4639                                   
00002A84  6700 0006               4640      BEQ      CHECK_ADDQB
00002A88                          4641  
00002A88  6000 FC14               4642      BRA      ERROR_HANDLE
00002A8C                          4643  
00002A8C                          4644  CHECK_ADDQB  *Print B
00002A8C                          4645  
00002A8C                          4646      
00002A8C  1A3C 0000               4647      MOVE.B #%00, D5
00002A90                          4648      
00002A90  4EF9 00002AAA           4649      JMP CHECK_PRINTADDQ
00002A96                          4650      
00002A96                          4651  CHECK_ADDQW  *Print W
00002A96                          4652  
00002A96                          4653      
00002A96  1A3C 0001               4654      MOVE.B #%01, D5
00002A9A                          4655  
00002A9A  4EF9 00002AAA           4656      JMP CHECK_PRINTADDQ
00002AA0                          4657  
00002AA0                          4658  CHECK_ADDQL   *Print L
00002AA0                          4659  
00002AA0                          4660  
00002AA0  1A3C 0002               4661      MOVE.B #%10, D5
00002AA4                          4662      
00002AA4  4EF9 00002AAA           4663      JMP CHECK_PRINTADDQ
00002AAA                          4664      
00002AAA                          4665  CHECK_PRINTADDQ
00002AAA                          4666  
00002AAA                          4667      
00002AAA  3015                    4668      MOVE.W (A5), D0
00002AAC                          4669  
00002AAC  123C 0004               4670      MOVE.B  #4,D1     
00002AB0                          4671  
00002AB0  E368                    4672      LSL.W   D1,D0
00002AB2                          4673                   
00002AB2  123C 000D               4674      MOVE.B  #13,D1
00002AB6                          4675  
00002AB6  E268                    4676      LSR.W   D1,D0  *D0 now holds Dn
00002AB8                          4677      
00002AB8  4281                    4678      CLR.L D1
00002ABA                          4679                                              
00002ABA  3200                    4680      MOVE.W D0, D1 *D6 holds Dn   
00002ABC                          4681  
00002ABC                          4682      
00002ABC  4286                    4683      CLR.L D6
00002ABE                          4684      
00002ABE  4287                    4685      CLR.L D7
00002AC0                          4686      
00002AC0  3015                    4687      MOVE.W (A5), D0
00002AC2                          4688  
00002AC2  123C 000A               4689      MOVE.B  #10,D1     
00002AC6                          4690  
00002AC6  E368                    4691      LSL.W   D1,D0
00002AC8                          4692                   
00002AC8  123C 000D               4693      MOVE.B  #13,D1
00002ACC                          4694  
00002ACC  E268                    4695      LSR.W   D1,D0  *D0 now holds MODE
00002ACE                          4696                                              
00002ACE  3C00                    4697      MOVE.W D0, D6 *D6 holds mode
00002AD0                          4698      
00002AD0  4281                    4699      CLR.L D1
00002AD2                          4700      
00002AD2  4280                    4701      CLR.L D0
00002AD4                          4702      
00002AD4  3015                    4703      MOVE.W (A5), D0
00002AD6                          4704  
00002AD6  123C 000D               4705      MOVE.B  #13,D1     
00002ADA                          4706  
00002ADA  E368                    4707      LSL.W   D1,D0
00002ADC                          4708                   
00002ADC  123C 000D               4709      MOVE.B  #13,D1
00002AE0                          4710  
00002AE0  E268                    4711      LSR.W   D1,D0  *D0 now holds MODE
00002AE2                          4712                                              
00002AE2  3E00                    4713      MOVE.W D0, D7 *D6 holds Register   
00002AE4                          4714      
00002AE4  4EB9 00002D24           4715      JSR CHECK_EA
00002AEA                          4716      
00002AEA  6000 E64C               4717      BRA CHECK_PARSE_MEMORY
00002AEE                          4718  
00002AEE                          4719  
00002AEE                          4720  
00002AEE                          4721      
00002AEE                          4722  
00002AEE                          4723  
00002AEE                          4724  
00002AEE                          4725  
00002AEE                          4726  
00002AEE                          4727  
00002AEE                          4728  
00002AEE                          4729  
00002AEE                          4730  
00002AEE                          4731  
00002AEE                          4732  
00002AEE                          4733  
00002AEE                          4734  
00002AEE                          4735  
00002AEE                          4736  -------------------- end include --------------------
00002AEE                          4737          INCLUDE     'CHECK_GROUP_0100_CODE.X68'
00002AEE                          4738  CHECK_GROUP_0100_CODE          *at this point we know the first 4 bits are 0100 -> NOP, RTS, JSR,  MOVEM, CLR
00002AEE                          4739  
00002AEE  4280                    4740                   CLR.L D0                *clear D0
00002AF0                          4741                   
00002AF0  4281                    4742                   CLR.L D1                *clear D1
00002AF2                          4743                   
00002AF2  3015                    4744                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002AF4                          4745  
00002AF4  123C 0004               4746                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
00002AF8                          4747  
00002AF8  E368                    4748                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
00002AFA                          4749                   
00002AFA  123C 0004               4750                   MOVE.B  #4,D1           *4 bits is the number of times to shift to hold everything except the opcode
00002AFE                          4751  
00002AFE  E268                    4752                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds everything except opcode
00002B00                          4753                   
00002B00                          4754                                              
00002B00  B07C 0E71               4755                   CMP.W    #$E71, D0      *if D0 holds E71, the opcode is NOP
00002B04                          4756                   
00002B04  6700 FEBC               4757                   BEQ      CHECK_NOP_OPCODE       *Branch to NOP_CODE if the opcode is NOP
00002B08                          4758                   
00002B08                          4759                   
00002B08  B07C 0E75               4760                   CMP.W    #$E75, D0      *if D0 holds E75, the opcode is RTS
00002B0C                          4761                   
00002B0C  6700 FEB8               4762                   BEQ      CHECK_RTS_OPCODE       *Branch to RTS_CODE if the opcode is RTS
00002B10                          4763                   
00002B10                          4764                   
00002B10  4280                    4765                   CLR.L D0                *clear D0
00002B12                          4766                   
00002B12                          4767                   
00002B12  4281                    4768                   CLR.L D1                *clear D1
00002B14                          4769                   
00002B14                          4770                   
00002B14  3015                    4771                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002B16                          4772  
00002B16                          4773  
00002B16  123C 0004               4774                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
00002B1A                          4775  
00002B1A                          4776  
00002B1A  E368                    4777                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
00002B1C                          4778                   
00002B1C  123C 000C               4779                   MOVE.B  #12,D1           *12 bits is the number of times to shift to hold the 4th-8th bits (counting left to right, non-inclusive)
00002B20                          4780  
00002B20  E268                    4781                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds 4th-8th bits (counting left to right, non-inclusive)
00002B22                          4782                   
00002B22  B07C 0002               4783                   CMP.W    #$2, D0        *if D0 holds #2, the opcode is CLR
00002B26                          4784                   
00002B26  6700 FECC               4785                   BEQ      CHECK_CLR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
00002B2A                          4786                   
00002B2A                          4787          
00002B2A  B07C 000E               4788                   CMP.W    #$E, D0        *if D0 holds $E = 14, the opcode is JSR
00002B2E                          4789                   
00002B2E  6700 FE9A               4790                   BEQ      CHECK_JSR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
00002B32                          4791                   
00002B32  4280                    4792                   CLR.L D0                *clear D0
00002B34                          4793                   
00002B34  4281                    4794                   CLR.L D1                *clear D1
00002B36                          4795                   
00002B36  3015                    4796                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002B38                          4797  
00002B38  123C 0007               4798                   MOVE.B  #7,D1 
00002B3C                          4799  
00002B3C  E368                    4800                   LSL.W   D1,D0 
00002B3E                          4801                   
00002B3E  123C 000D               4802                   MOVE.B  #13,D1 
00002B42                          4803  
00002B42  E268                    4804                   LSR.W   D1,D0     
00002B44                          4805                   
00002B44  B07C 0007               4806                   CMP.W    #%111, D0  
00002B48                          4807                   
00002B48  6700 FE36               4808                   BEQ CHECK_LEA_OPCODE
00002B4C                          4809                   
00002B4C  3015                    4810                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002B4E                          4811  
00002B4E  123C 0006               4812                   MOVE.B  #6,D1 
00002B52                          4813  
00002B52  E368                    4814                   LSL.W   D1,D0 
00002B54                          4815                   
00002B54  123C 000F               4816                   MOVE.B  #15,D1 
00002B58                          4817  
00002B58  E268                    4818                   LSR.W   D1,D0     
00002B5A                          4819                   
00002B5A  B07C 0000               4820                   CMP.W    #%0, D0  
00002B5E                          4821  
00002B5E  6700 0472               4822                   BEQ      CHECK_MOVEM_OPCODE     *else it is a MOVEM
00002B62                          4823  
00002B62  6000 FB3A               4824                   BRA      ERROR_HANDLE
00002B66                          4825      
00002B66                          4826  
00002B66                          4827  
00002B66                          4828  
00002B66                          4829  
00002B66                          4830  
00002B66                          4831  
00002B66                          4832  
00002B66                          4833  
00002B66                          4834  
00002B66                          4835  
00002B66                          4836  -------------------- end include --------------------
00002B66                          4837          INCLUDE     'SUB_CHECK.X68'
00002B66                          4838  
00002B66                          4839  CHECK_SUB
00002B66                          4840                   * ADD message
00002B66                          4841                   
00002B66  4EB9 00002EAC           4842                   JSR    CHECK_GET_SIZE_PURPLE
00002B6C                          4843                   
00002B6C                          4844             *      JSR     PRINTOUT_SIZE_PURPLE
00002B6C                          4845                   
00002B6C                          4846                   
00002B6C  4280                    4847                   CLR.L D0                *clear D0
00002B6E                          4848                   
00002B6E  4281                    4849                   CLR.L D1                *clear D1
00002B70                          4850                   
00002B70  3015                    4851                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002B72                          4852                   
00002B72                          4853                   * check the bit at 7
00002B72  123C 0007               4854                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002B76                          4855  
00002B76  E368                    4856                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002B78                          4857                   
00002B78  123C 000F               4858                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
00002B7C                          4859  
00002B7C  E268                    4860                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
00002B7E                          4861                   
00002B7E  B03C 0000               4862                   CMP.B   #0, D0
00002B82                          4863                   
00002B82                          4864                *   BTST    #8, D0
00002B82                          4865                   
00002B82  6700 0024               4866                   BEQ     CHECK_SUB_FIRST_EA
00002B86                          4867                   
00002B86                          4868                   * for the first Dn 
00002B86  4EB9 00002EC4           4869                   JSR     CHECK_GET_Data_Register
00002B8C                          4870                   
00002B8C  4286                    4871                   CLR.L   D6
00002B8E                          4872                   
00002B8E  1C3C 0000               4873                   MOVE.B  #%000, D6 * for mode
00002B92                          4874                   
00002B92  4EB9 00002D24           4875                   JSR     CHECK_EA *by using jmp table
00002B98                          4876                   
00002B98                          4877              *     JSR     PRINT_COMMA
00002B98                          4878                   
00002B98  4EB9 00002ED6           4879                   JSR     CHECK_Set_Ea
00002B9E                          4880                   
00002B9E  4EB9 00002D24           4881                   JSR     CHECK_EA *by using jmp table
00002BA4                          4882                   
00002BA4  4EF8 1138               4883                   JMP     CHECK_PARSE_MEMORY
00002BA8                          4884                   
00002BA8                          4885  CHECK_SUB_FIRST_EA
00002BA8  4EB9 00002ED6           4886                   JSR     CHECK_Set_Ea
00002BAE                          4887                   
00002BAE  4EB9 00002D24           4888                   JSR     CHECK_EA *by using jmp table
00002BB4                          4889                   
00002BB4                          4890         *          JSR     PRINT_COMMA
00002BB4                          4891                   
00002BB4                          4892                    * for the first Dn 
00002BB4  4EB9 00002EC4           4893                   JSR     CHECK_GET_Data_Register
00002BBA                          4894                   
00002BBA  4286                    4895                   CLR.L   D6
00002BBC                          4896                   
00002BBC  1C3C 0000               4897                   MOVE.B  #%000, D6 * for mode
00002BC0                          4898  
00002BC0  4EB9 00002D24           4899                   JSR     CHECK_EA *by using jmp table
00002BC6                          4900                   
00002BC6  4EF8 1138               4901                   JMP     CHECK_PARSE_MEMORY
00002BCA                          4902  
00002BCA                          4903  
00002BCA                          4904  
00002BCA                          4905  
00002BCA                          4906  
00002BCA                          4907  
00002BCA                          4908  
00002BCA                          4909  -------------------- end include --------------------
00002BCA                          4910          INCLUDE     'DIVU_OR_CHECK.X68'
00002BCA                          4911      
00002BCA  4EB9 00002EAC           4912  CHECK_DIVU_OR          JSR      CHECK_GET_SIZE_PURPLE  
00002BD0                          4913                                            
00002BD0  BA3C 0003               4914                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
00002BD4                          4915                   
00002BD4  6700 0008               4916                   BEQ      CHECK_DIVU_CODE
00002BD8                          4917                   
00002BD8  4EF9 00002C08           4918                   JMP      CHECK_OR_CODE
00002BDE                          4919                   
00002BDE                          4920  CHECK_DIVU_CODE  
00002BDE                          4921                   * OP_CODE message
00002BDE                          4922  
00002BDE  3A3C 0001               4923                   MOVE    #%01, D5          
00002BE2                          4924                   
00002BE2                          4925              *     LEA      SIZE_W_PRINT,    A1
00002BE2                          4926                   
00002BE2                          4927              *     MOVE.B   #14,             D0
00002BE2                          4928          
00002BE2                          4929              *     TRAP #15
00002BE2                          4930                   
00002BE2  4EB9 00002ED6           4931                   JSR     CHECK_Set_Ea
00002BE8                          4932                   
00002BE8  1A3C 0001               4933                   MOVE.B  #%01, D5
00002BEC                          4934                   
00002BEC  4EB9 00002D24           4935                   JSR     CHECK_EA *by using jmp table
00002BF2                          4936                   
00002BF2                          4937             *      JSR     PRINT_COMMA
00002BF2                          4938                   
00002BF2                          4939                    * for the first Dn 
00002BF2  4EB9 00002EC4           4940                   JSR     CHECK_GET_Data_Register
00002BF8                          4941                   
00002BF8  4286                    4942                   CLR.L   D6
00002BFA                          4943                   
00002BFA  1C3C 0000               4944                   MOVE.B  #%000, D6 * for mode
00002BFE                          4945  
00002BFE  4EB9 00002D24           4946                   JSR     CHECK_EA *by using jmp table
00002C04                          4947  
00002C04  4EF8 1138               4948                   JMP     CHECK_PARSE_MEMORY
00002C08                          4949  
00002C08                          4950  CHECK_OR_CODE    
00002C08                          4951                   * OP_CODE message
00002C08                          4952  
00002C08                          4953         *          JSR PRINTOUT_SIZE_PURPLE
00002C08                          4954                   
00002C08                          4955                     * check for dn and ea
00002C08  4280                    4956                   CLR.L D0                *clear D0
00002C0A                          4957                   
00002C0A  4281                    4958                   CLR.L D1                *clear D1
00002C0C                          4959                   
00002C0C  3015                    4960                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002C0E                          4961                   
00002C0E                          4962                   * check the bit at 7
00002C0E  123C 0007               4963                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002C12                          4964  
00002C12  E368                    4965                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002C14                          4966                   
00002C14  123C 000F               4967                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
00002C18                          4968  
00002C18  E268                    4969                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
00002C1A                          4970                   
00002C1A  B03C 0000               4971                   CMP.B   #0, D0
00002C1E                          4972                   
00002C1E                          4973                  * BTST    #7, D0
00002C1E                          4974                   
00002C1E  6700 0024               4975                   BEQ     CHECK_OR_FIRST_EA
00002C22                          4976                   
00002C22                          4977                   * for the first Dn 
00002C22  4EB9 00002EC4           4978                   JSR     CHECK_GET_Data_Register
00002C28                          4979                   
00002C28  4286                    4980                   CLR.L   D6
00002C2A                          4981                   
00002C2A  1C3C 0000               4982                   MOVE.B  #%000, D6 * for mode
00002C2E                          4983                   
00002C2E  4EB9 00002D24           4984                   JSR     CHECK_EA *by using jmp table
00002C34                          4985                   
00002C34                          4986          *         JSR     PRINT_COMMA
00002C34                          4987                   
00002C34  4EB9 00002ED6           4988                   JSR     CHECK_Set_Ea
00002C3A                          4989                   
00002C3A  4EB9 00002D24           4990                   JSR     CHECK_EA *by using jmp table
00002C40                          4991                   
00002C40  4EF8 1138               4992                   JMP     CHECK_PARSE_MEMORY
00002C44                          4993                   
00002C44                          4994  CHECK_OR_FIRST_EA
00002C44  4EB9 00002ED6           4995                   JSR     CHECK_Set_Ea
00002C4A                          4996                   
00002C4A  4EB9 00002D24           4997                   JSR     CHECK_EA *by using jmp table
00002C50                          4998                   
00002C50                          4999          *         JSR     PRINT_COMMA
00002C50                          5000                   
00002C50                          5001                    * for the first Dn 
00002C50  4EB9 00002EC4           5002                   JSR     CHECK_GET_Data_Register
00002C56                          5003                   
00002C56  4286                    5004                   CLR.L   D6
00002C58                          5005                   
00002C58  1C3C 0000               5006                   MOVE.B  #%000, D6 * for mode
00002C5C                          5007  
00002C5C  4EB9 00002D24           5008                   JSR     CHECK_EA *by using jmp table
00002C62                          5009                   
00002C62  4EF8 1138               5010                   JMP     CHECK_PARSE_MEMORY
00002C66                          5011  
00002C66                          5012  
00002C66                          5013  
00002C66                          5014  
00002C66                          5015  
00002C66                          5016  
00002C66                          5017  
00002C66                          5018  
00002C66                          5019  
00002C66                          5020  
00002C66                          5021  
00002C66                          5022  
00002C66                          5023  
00002C66                          5024  
00002C66                          5025  -------------------- end include --------------------
00002C66                          5026          INCLUDE     'CMP_CHECK.X68'
00002C66                          5027     
00002C66                          5028  CHECK_CMP
00002C66                          5029                   * ADD message
00002C66                          5030                   
00002C66  4EB8 1314               5031                   JSR GET_SIZE_PURPLE
00002C6A                          5032                   
00002C6A                          5033          *         JSR     PRINTOUT_SIZE_PURPLE
00002C6A                          5034                   
00002C6A                          5035                   
00002C6A  4EB9 00002ED6           5036                   JSR     CHECK_Set_Ea
00002C70                          5037                   
00002C70  4EB9 00002D24           5038                   JSR     CHECK_EA *by using jmp table
00002C76                          5039                   
00002C76                          5040              *     JSR     PRINT_COMMA
00002C76                          5041                   
00002C76                          5042                    * for the first Dn 
00002C76  4EB9 00002EC4           5043                   JSR     CHECK_GET_Data_Register
00002C7C                          5044                   
00002C7C  4286                    5045                   CLR.L   D6
00002C7E                          5046                   
00002C7E  1C3C 0000               5047                   MOVE.B  #%000, D6 * for mode
00002C82                          5048  
00002C82  4EB9 00002D24           5049                   JSR     CHECK_EA *by using jmp table
00002C88                          5050                   
00002C88  4EF8 1138               5051                   JMP     CHECK_PARSE_MEMORY
00002C8C                          5052  
00002C8C                          5053                   
00002C8C                          5054   *                JMP     NEXT
00002C8C                          5055  
00002C8C                          5056  
00002C8C                          5057  
00002C8C                          5058  
00002C8C                          5059  
00002C8C                          5060  
00002C8C                          5061  -------------------- end include --------------------
00002C8C                          5062          INCLUDE     'MULS_AND_CHECK.X68'
00002C8C                          5063   
00002C8C  4EB9 00002EAC           5064  CHECK_MULS_AND   JSR      CHECK_GET_SIZE_PURPLE
00002C92                          5065                                              
00002C92  BA3C 0003               5066                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
00002C96                          5067                   
00002C96  6700 0008               5068                   BEQ      CHECK_MULS_CODE
00002C9A                          5069                   
00002C9A  4EF9 00002CC6           5070                   JMP      CHECK_AND_CODE
00002CA0                          5071                   
00002CA0                          5072  CHECK_MULS_CODE
00002CA0                          5073                   * OP_CODE message
00002CA0                          5074  
00002CA0                          5075             *      LEA      SIZE_W_PRINT,    A1
00002CA0                          5076                   
00002CA0                          5077             *      MOVE.B   #14,             D0
00002CA0                          5078          
00002CA0                          5079             *      TRAP #15
00002CA0                          5080                   
00002CA0  4EB9 00002ED6           5081                   JSR     CHECK_Set_Ea
00002CA6                          5082                   
00002CA6  1A3C 0001               5083                   MOVE.B  #%01, D5
00002CAA                          5084                   
00002CAA  4EB9 00002D24           5085                   JSR     CHECK_EA *by using jmp table
00002CB0                          5086                   
00002CB0                          5087             *      JSR     PRINT_COMMA
00002CB0                          5088                   
00002CB0                          5089                    * for the first Dn 
00002CB0  4EB9 00002EC4           5090                   JSR     CHECK_GET_Data_Register
00002CB6                          5091                   
00002CB6  4286                    5092                   CLR.L   D6
00002CB8                          5093                   
00002CB8  1C3C 0000               5094                   MOVE.B  #%000, D6 * for mode
00002CBC                          5095  
00002CBC  4EB9 00002D24           5096                   JSR     CHECK_EA *by using jmp table
00002CC2                          5097  
00002CC2  4EF8 1138               5098                   JMP     CHECK_PARSE_MEMORY
00002CC6                          5099  
00002CC6                          5100  CHECK_AND_CODE
00002CC6                          5101                   * OP_CODE message
00002CC6                          5102                   
00002CC6                          5103                     * check for dn and ea
00002CC6  4280                    5104                   CLR.L D0                *clear D0
00002CC8                          5105                   
00002CC8  4281                    5106                   CLR.L D1                *clear D1
00002CCA                          5107                   
00002CCA  3015                    5108                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002CCC                          5109                   
00002CCC                          5110                   * check the bit at 7
00002CCC  123C 0007               5111                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002CD0                          5112  
00002CD0  E368                    5113                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002CD2                          5114                   
00002CD2  123C 000F               5115                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
00002CD6                          5116  
00002CD6  E268                    5117                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
00002CD8                          5118                   
00002CD8  B03C 0000               5119                   CMP.B   #0, D0
00002CDC                          5120  
00002CDC                          5121                *   BTST    #8, D0
00002CDC                          5122                   
00002CDC  6700 0024               5123                   BEQ     CHECK_AND_FIRST_EA
00002CE0                          5124                   
00002CE0                          5125                   * for the first Dn 
00002CE0  4EB9 00002EC4           5126                   JSR     CHECK_GET_Data_Register
00002CE6                          5127                   
00002CE6  4286                    5128                   CLR.L   D6
00002CE8                          5129                   
00002CE8  1C3C 0000               5130                   MOVE.B  #%000, D6 * for mode
00002CEC                          5131                   
00002CEC  4EB9 00002D24           5132                   JSR     CHECK_EA *by using jmp table
00002CF2                          5133                   
00002CF2                          5134           *        JSR     PRINT_COMMA
00002CF2                          5135                   
00002CF2  4EB9 00002ED6           5136                   JSR      CHECK_Set_Ea
00002CF8                          5137                   
00002CF8  4EB9 00002D24           5138                   JSR      CHECK_EA *by using jmp table
00002CFE                          5139                   
00002CFE  4EF8 1138               5140                   JMP      CHECK_PARSE_MEMORY
00002D02                          5141                   
00002D02                          5142  CHECK_AND_FIRST_EA
00002D02  4EB9 00002ED6           5143                   JSR     CHECK_Set_Ea
00002D08                          5144                   
00002D08  4EB9 00002D24           5145                   JSR     CHECK_EA *by using jmp table
00002D0E                          5146                   
00002D0E                          5147         *          JSR     PRINT_COMMA
00002D0E                          5148                   
00002D0E                          5149                    * for the first Dn 
00002D0E  4EB9 00002EC4           5150                   JSR     CHECK_GET_Data_Register
00002D14                          5151                   
00002D14  4286                    5152                   CLR.L   D6
00002D16                          5153                   
00002D16  1C3C 0000               5154                   MOVE.B  #%000, D6 * for mode
00002D1A                          5155  
00002D1A  4EB9 00002D24           5156                   JSR     CHECK_EA *by using jmp table
00002D20                          5157                   
00002D20  4EF8 1138               5158                   JMP     CHECK_PARSE_MEMORY
00002D24                          5159  
00002D24                          5160  
00002D24                          5161  
00002D24                          5162  
00002D24                          5163  
00002D24                          5164  
00002D24                          5165  
00002D24                          5166  
00002D24                          5167  
00002D24                          5168  
00002D24                          5169  
00002D24                          5170  
00002D24                          5171  
00002D24                          5172  
00002D24                          5173  -------------------- end include --------------------
00002D24                          5174          INCLUDE     'CHECK_EA.X68'
00002D24                          5175   *ORG     $400
00002D24                          5176  
00002D24                          5177  
00002D24                          5178  
00002D24                          5179  
00002D24                          5180  
00002D24                          5181                 *MOVE.B       #%00, D5         *SIZE
00002D24                          5182                
00002D24                          5183                 *MOVE.B       #%111,D6         *MODE
00002D24                          5184                 
00002D24                          5185                 *MOVE.B       #%100,D7         *REGISTER
00002D24                          5186                 
00002D24                          5187                 *MOVE.L       #$4000, A5
00002D24                          5188  
00002D24                          5189                 *MOVE.B       #$0040, (A5)  
00002D24                          5190  CHECK_EA 
00002D24                          5191                 
00002D24  41F9 00002D32           5192                 LEA     CHECK_jmp_table_ea,A0      *Index into the table
00002D2A                          5193  
00002D2A  CCFC 0006               5194                 MULU        #6,D6            *Form offset     
00002D2E                          5195  
00002D2E  4EF0 6000               5196                 JMP         0(A0,D6)         *Jump indirect with index
00002D32                          5197   
00002D32  4EF9 00002D62           5198  CHECK_jmp_table_ea   JMP         CHECK_code000
00002D38                          5199  
00002D38  4EF9 00002D66           5200                 JMP         CHECK_code001
00002D3E                          5201  
00002D3E  4EF9 00002D6A           5202                 JMP         CHECK_code010
00002D44                          5203  
00002D44  4EF9 00002D6E           5204                 JMP         CHECK_code011
00002D4A                          5205  
00002D4A  4EF9 00002D72           5206                 JMP         CHECK_code100
00002D50                          5207  
00002D50  4EF9 00002D76           5208                 JMP         CHECK_code101
00002D56                          5209  
00002D56  4EF9 00002D7A           5210                 JMP         CHECK_code110
00002D5C                          5211  
00002D5C  4EF9 00002D7E           5212                 JMP         CHECK_code111
00002D62                          5213          
00002D62                          5214  
00002D62                          5215   
00002D62                          5216  
00002D62                          5217  
00002D62                          5218   
00002D62                          5219  
00002D62                          5220   
00002D62                          5221  
00002D62  6000 001E               5222  CHECK_code000       BRA         CHECK_DATA_REGISTER
00002D66                          5223  
00002D66  6000 001E               5224  CHECK_code001       BRA         CHECK_ADDRESS_REGISTER
00002D6A                          5225  
00002D6A  6000 001E               5226  CHECK_code010       BRA         CHECK_INDIRECT_ADDRESS
00002D6E                          5227  
00002D6E  6000 001E               5228  CHECK_code011       BRA         CHECK_ADDRESS_PI    * post increment
00002D72                          5229  
00002D72  6000 001E               5230  CHECK_code100       BRA         CHECK_ADDRESS_PD    * pre decrement
00002D76                          5231  
00002D76  6000 001E               5232  CHECK_code101       BRA         CHECK_ADDRESS_W_DISPLACEMENT
00002D7A                          5233  
00002D7A  6000 001E               5234  CHECK_code110       BRA         CHECK_ADDRESS_W_INDEX
00002D7E                          5235  
00002D7E  6000 001E               5236  CHECK_code111       BRA         CHECK_GROUP_111
00002D82                          5237  
00002D82                          5238   
00002D82                          5239  CHECK_DATA_REGISTER
00002D82                          5240              
00002D82  6000 F85C               5241              BRA DONE
00002D86                          5242              
00002D86                          5243  
00002D86                          5244  CHECK_ADDRESS_REGISTER
00002D86                          5245  
00002D86  6000 F858               5246              BRA DONE
00002D8A                          5247              
00002D8A                          5248  CHECK_INDIRECT_ADDRESS
00002D8A                          5249              
00002D8A  6000 F854               5250              BRA DONE
00002D8E                          5251  
00002D8E                          5252  CHECK_ADDRESS_PI  
00002D8E  6000 F850               5253              BRA DONE  
00002D92                          5254         
00002D92                          5255  CHECK_ADDRESS_PD  
00002D92  6000 F84C               5256              BRA DONE
00002D96                          5257              
00002D96                          5258  CHECK_ADDRESS_W_DISPLACEMENT
00002D96  6000 F906               5259              BRA ERROR_HANDLE
00002D9A                          5260  
00002D9A                          5261  CHECK_ADDRESS_W_INDEX
00002D9A  6000 F902               5262              BRA ERROR_HANDLE
00002D9E                          5263  
00002D9E                          5264  CHECK_GROUP_111
00002D9E                          5265  
00002D9E  41F9 00002DAC           5266                 LEA         CHECK_jmp_table_ea_111,A0    *Index into the table
00002DA4                          5267  
00002DA4  CEFC 0006               5268                 MULU        #6,D7       *Form offset     
00002DA8                          5269  
00002DA8  4EF0 7000               5270                 JMP         0(A0,D7)   *Jump indirect with index
00002DAC                          5271                 
00002DAC                          5272  CHECK_jmp_table_ea_111   
00002DAC  4EF9 00002DD2           5273                 JMP         CHECK_reg000
00002DB2                          5274  
00002DB2  4EF9 00002DD6           5275                 JMP         CHECK_reg001
00002DB8                          5276  
00002DB8  4EF9 00002DCA           5277                 JMP         CHECK_reg010
00002DBE                          5278  
00002DBE  4EF9 00002DCE           5279                 JMP         CHECK_reg011
00002DC4                          5280  
00002DC4  4EF9 00002DDA           5281                 JMP         CHECK_reg100
00002DCA                          5282          
00002DCA                          5283  
00002DCA  6000 0012               5284  CHECK_reg010       BRA         CHECK_PC_W_DISPLACEMENT
00002DCE                          5285  
00002DCE  6000 0012               5286  CHECK_reg011       BRA         CHECK_PC_W_INDEX
00002DD2                          5287  
00002DD2  6000 0012               5288  CHECK_reg000       BRA         CHECK_ABSOLUTE_SHORT
00002DD6                          5289  
00002DD6  6000 0012               5290  CHECK_reg001       BRA         CHECK_ABSOLUTE_LONG
00002DDA                          5291  
00002DDA  6000 0012               5292  CHECK_reg100       BRA         CHECK_IMMEDIATE
00002DDE                          5293  
00002DDE                          5294  
00002DDE                          5295  CHECK_PC_W_DISPLACEMENT
00002DDE  6000 F8BE               5296              BRA ERROR_HANDLE
00002DE2                          5297  
00002DE2                          5298  CHECK_PC_W_INDEX
00002DE2  6000 F8BA               5299              BRA ERROR_HANDLE
00002DE6                          5300  
00002DE6                          5301  CHECK_ABSOLUTE_SHORT
00002DE6  6000 F7F8               5302              BRA DONE  
00002DEA                          5303  
00002DEA                          5304  
00002DEA                          5305  CHECK_ABSOLUTE_LONG           
00002DEA  6000 F7F4               5306              BRA DONE  
00002DEE                          5307  
00002DEE                          5308  
00002DEE                          5309  CHECK_IMMEDIATE   
00002DEE  6000 F7F0               5310              BRA DONE
00002DF2                          5311              
00002DF2                          5312      
00002DF2                          5313   * INCLUDE 'MESSAGE_Data.X68'
00002DF2                          5314   * INCLUDE 'HEX_TO_ASCII_V1.X68'
00002DF2                          5315       
00002DF2                          5316          
00002DF2                          5317  
00002DF2                          5318  
00002DF2                          5319  
00002DF2                          5320  
00002DF2                          5321  
00002DF2                          5322  
00002DF2                          5323  
00002DF2                          5324  
00002DF2                          5325  
00002DF2                          5326                   
00002DF2                          5327  
00002DF2                          5328  -------------------- end include --------------------
00002DF2                          5329          INCLUDE     'ADD_ADDA_CHECK.X68'
00002DF2                          5330    
00002DF2                          5331  CHECK_ADD_ADDA  *at this point we know the first 4 bits are 1101 -> ADD or ADDA -> compare the destination opmode
00002DF2                          5332                   
00002DF2  4EB9 00002EAC           5333                   JSR      CHECK_GET_SIZE_PURPLE
00002DF8                          5334                                              
00002DF8  BA3C 0003               5335                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is ADDA
00002DFC                          5336                   
00002DFC  6700 0008               5337                   BEQ      CHECK_ADDA_CODE * checks %11
00002E00                          5338                   
00002E00  4EF9 00002E52           5339                   JMP      CHECK_ADD_CODE * checks %00, %01, %10
00002E06                          5340                   
00002E06                          5341  CHECK_ADDA_CODE 
00002E06                          5342                   * ADDA opcode message
00002E06                          5343                   
00002E06                          5344                   
00002E06                          5345                   
00002E06  4285                    5346                   CLR.L D5         * clear for the size since this is not for the size purple
00002E08                          5347                   
00002E08  4280                    5348                   CLR.L D0                *clear D0
00002E0A                          5349                   
00002E0A  4281                    5350                   CLR.L D1                *clear D1
00002E0C                          5351                   
00002E0C  3015                    5352                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002E0E                          5353                   
00002E0E  EF48                    5354                   LSL.W   #7, D0
00002E10                          5355  
00002E10  123C 000D               5356                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the
00002E14                          5357  
00002E14  E268                    5358                   LSR.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002E16                          5359                   
00002E16  B03C 0003               5360                   CMP.B   #%011, D0  *Compare them for SIZE_W
00002E1A                          5361                   
00002E1A  6700 002A               5362                   BEQ     CHECK_PRINTOUT_SIZE_W
00002E1E                          5363                   
00002E1E  B03C 0007               5364                   CMP.B   #%111, D0
00002E22                          5365    
00002E22  6700 0028               5366                   BEQ     CHECK_PRINTOUT_SIZE_L
00002E26                          5367                   
00002E26  4EF8 269E               5368                   JMP     ERROR_HANDLE    
00002E2A                          5369                   
00002E2A                          5370  CHECK_FINISH_PRINTING_SIZE
00002E2A                          5371  
00002E2A  4EB9 00002ED6           5372                   JSR     CHECK_Set_Ea
00002E30                          5373                   
00002E30                          5374           *        JSR     PRINT_EA *by using jmp table
00002E30                          5375           
00002E30  4EB8 2D24               5376                   JSR     CHECK_EA *by using jmp table
00002E34                          5377                   
00002E34                          5378           *       JSR     PRINT_COMMA
00002E34                          5379                   
00002E34                          5380                    * for the first Dn 
00002E34  4EB9 00002EC4           5381                   JSR     CHECK_GET_Data_Register
00002E3A                          5382                   
00002E3A  1C3C 0001               5383                   MOVE.B  #%001, D6 * for mode
00002E3E                          5384  
00002E3E                          5385           *        JSR     PRINT_EA *by using jmp table
00002E3E                          5386           
00002E3E  4EB8 2D24               5387                   JSR     CHECK_EA *by using jmp table
00002E42                          5388  
00002E42  4EF8 1138               5389                   JMP     CHECK_PARSE_MEMORY
00002E46                          5390                   
00002E46                          5391  CHECK_PRINTOUT_SIZE_W
00002E46                          5392                   
00002E46  3A3C 0001               5393                   MOVE    #%01, D5          
00002E4A                          5394                   
00002E4A                          5395                   
00002E4A  60DE                    5396                   BRA     CHECK_FINISH_PRINTING_SIZE
00002E4C                          5397                   
00002E4C                          5398  CHECK_PRINTOUT_SIZE_L                           
00002E4C  3A3C 0002               5399                   MOVE    #%10, D5          
00002E50                          5400                   
00002E50                          5401                   
00002E50  60D8                    5402                   BRA     CHECK_FINISH_PRINTING_SIZE
00002E52                          5403  
00002E52                          5404  CHECK_ADD_CODE
00002E52                          5405                   * ADD message
00002E52                          5406                   
00002E52  4EB8 1314               5407                   JSR     GET_SIZE_PURPLE
00002E56                          5408                   
00002E56                          5409                   * check for dn and ea
00002E56  4280                    5410                   CLR.L D0                *clear D0
00002E58                          5411                   
00002E58  4281                    5412                   CLR.L D1                *clear D1
00002E5A                          5413                   
00002E5A  3015                    5414                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002E5C                          5415                   
00002E5C                          5416                   * check the bit at 7
00002E5C  123C 0007               5417                   MOVE.B  #7,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002E60                          5418  
00002E60  E368                    5419                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002E62                          5420                   
00002E62  123C 000F               5421                   MOVE.B  #15,D1          *14 bits is the number of times to shift to hold the mode number
00002E66                          5422  
00002E66  E268                    5423                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
00002E68                          5424                   
00002E68  B03C 0000               5425                   CMP.B   #0, D0
00002E6C                          5426                   
00002E6C                          5427                 *  BTST    #8, D0 * if the bit at 8 is 1, the ccr of z is set to 0
00002E6C                          5428                   
00002E6C  6700 0020               5429                   BEQ     CHECK_ADD_FIRST_EA
00002E70                          5430                   
00002E70                          5431                   * for the first Dn 
00002E70  4EB9 00002EC4           5432                   JSR     CHECK_GET_Data_Register
00002E76                          5433                   
00002E76  4286                    5434                   CLR.L   D6
00002E78                          5435                   
00002E78  1C3C 0000               5436                   MOVE.B  #%000, D6 * for mode
00002E7C                          5437                   
00002E7C  4EB8 2D24               5438                   JSR     CHECK_EA *by using jmp table
00002E80                          5439                   
00002E80                          5440              *     JSR     PRINT_COMMA
00002E80                          5441                   
00002E80  4EB9 00002ED6           5442                   JSR     CHECK_Set_Ea
00002E86                          5443                   
00002E86  4EB8 2D24               5444                   JSR     CHECK_EA *by using jmp table
00002E8A                          5445                   
00002E8A  4EF8 1138               5446                   JMP     CHECK_PARSE_MEMORY
00002E8E                          5447                   
00002E8E                          5448  CHECK_ADD_FIRST_EA
00002E8E  4EB9 00002ED6           5449                   JSR     CHECK_Set_Ea
00002E94                          5450                   
00002E94  4EB8 2D24               5451                   JSR     CHECK_EA *by using jmp table
00002E98                          5452                   
00002E98                          5453               *    JSR     PRINT_COMMA
00002E98                          5454                   
00002E98                          5455                    * for the first Dn 
00002E98  4EB9 00002EC4           5456                   JSR     CHECK_GET_Data_Register
00002E9E                          5457                   
00002E9E  4286                    5458                   CLR.L   D6
00002EA0                          5459                   
00002EA0  1C3C 0000               5460                   MOVE.B  #%000, D6 * for mode
00002EA4                          5461  
00002EA4  4EB8 2D24               5462                   JSR     CHECK_EA *by using jmp table
00002EA8                          5463                   
00002EA8  4EF8 1138               5464                   JMP     CHECK_PARSE_MEMORY
00002EAC                          5465                   
00002EAC                          5466  CHECK_GET_SIZE_PURPLE * get the op-code 
00002EAC                          5467  
00002EAC  4280                    5468                   CLR.L D0                *clear D0
00002EAE                          5469                   
00002EAE  4281                    5470                   CLR.L D1                *clear D1
00002EB0                          5471                   
00002EB0  3015                    5472                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002EB2                          5473  
00002EB2  123C 0008               5474                   MOVE.B  #8,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002EB6                          5475  
00002EB6  E368                    5476                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002EB8                          5477                   
00002EB8  123C 000E               5478                   MOVE.B  #14,D1          *14 bits is the number of times to shift to hold the mode number
00002EBC                          5479  
00002EBC  E268                    5480                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
00002EBE                          5481                   
00002EBE  4285                    5482                   CLR.L   D5
00002EC0                          5483                   
00002EC0  1A00                    5484                   MOVE.B  D0, D5          *push the size to the Data register 5 for the future use
00002EC2                          5485                   
00002EC2  4E75                    5486                   RTS 
00002EC4                          5487  
00002EC4                          5488                   
00002EC4                          5489                   
00002EC4                          5490                   
00002EC4                          5491  CHECK_GET_Data_Register
00002EC4  4280                    5492                   CLR.L D0                *clear D0
00002EC6                          5493                   
00002EC6  4281                    5494                   CLR.L D1                *clear D1
00002EC8                          5495                   
00002EC8  3015                    5496                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002ECA                          5497  
00002ECA  E948                    5498                   LSL.W   #4,D0           *Shift the bits 4 times -> D0 now removes the opcode & reg#
00002ECC                          5499                   
00002ECC  123C 000D               5500                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00002ED0                          5501  
00002ED0  E268                    5502                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00002ED2                          5503  
00002ED2  1E00                    5504                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00002ED4                          5505                   
00002ED4  4E75                    5506                   RTS
00002ED6                          5507                   
00002ED6                          5508  CHECK_Set_Ea
00002ED6                          5509  
00002ED6                          5510                   * set register
00002ED6  4280                    5511                   CLR.L D0                *clear D0
00002ED8                          5512                   
00002ED8  4281                    5513                   CLR.L D1                *clear D1
00002EDA                          5514                   
00002EDA  3015                    5515                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002EDC                          5516                 
00002EDC  123C 000D               5517                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002EE0                          5518  
00002EE0  E368                    5519                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002EE2                          5520  
00002EE2  E268                    5521                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00002EE4                          5522                   
00002EE4  4287                    5523                   CLR.L D7                *clear D7 
00002EE6                          5524  
00002EE6  1E00                    5525                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00002EE8                          5526                   
00002EE8                          5527                   * set mode
00002EE8  4280                    5528                   CLR.L D0                *clear D0
00002EEA                          5529                   
00002EEA  4281                    5530                   CLR.L D1                *clear D1
00002EEC                          5531                   
00002EEC  3015                    5532                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002EEE                          5533                 
00002EEE  123C 000A               5534                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002EF2                          5535  
00002EF2  E368                    5536                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002EF4                          5537  
00002EF4  123C 000D               5538                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00002EF8                          5539  
00002EF8  E268                    5540                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00002EFA                          5541                   
00002EFA  4286                    5542                   CLR.L D6                *clear D6
00002EFC                          5543  
00002EFC  1C00                    5544                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
00002EFE                          5545                   
00002EFE  4E75                    5546                   RTS
00002F00                          5547                   
00002F00                          5548                  
00002F00                          5549  
00002F00                          5550  
00002F00                          5551  
00002F00                          5552  
00002F00                          5553  
00002F00                          5554  
00002F00                          5555  
00002F00                          5556  
00002F00                          5557  
00002F00                          5558  
00002F00                          5559  
00002F00                          5560  
00002F00                          5561  
00002F00                          5562  
00002F00                          5563  
00002F00                          5564  
00002F00                          5565  
00002F00                          5566  
00002F00                          5567  
00002F00                          5568  
00002F00                          5569  
00002F00                          5570  
00002F00                          5571  
00002F00                          5572  
00002F00                          5573  
00002F00                          5574  
00002F00                          5575  
00002F00                          5576  
00002F00                          5577  
00002F00                          5578  
00002F00                          5579  
00002F00                          5580  
00002F00                          5581  
00002F00                          5582  
00002F00                          5583  
00002F00                          5584  -------------------- end include --------------------
00002F00                          5585          INCLUDE     'BCC_CHECK.X68'
00002F00                          5586  
00002F00                          5587  
00002F00                          5588  CHECK_BCC           
00002F00  4240                    5589                 CLR       D0              *Zero it
00002F02                          5590  
00002F02  3015                    5591                 MOVE.W      (A5),D0     *We'll play with it here
00002F04                          5592                 
00002F04  4241                    5593                 CLR       D1
00002F06                          5594                 
00002F06  123C 0004               5595                 MOVE.B      #4, D1
00002F0A                          5596                 
00002F0A  E368                    5597                 LSL.W       D1, D0
00002F0C                          5598  
00002F0C  123C 000C               5599                 MOVE.B      #12,D1       *Shift 12 bits to the right  
00002F10                          5600  
00002F10  E268                    5601                 LSR.W       D1,D0           *Move the bi
00002F12                          5602                 
00002F12  B03C 0004               5603                 CMP.B       #%0100, D0
00002F16                          5604                 
00002F16  6700 E220               5605                 BEQ         CHECK_PARSE_MEMORY  
00002F1A                          5606                 
00002F1A  B03C 000E               5607                 CMP.B       #%1110, D0
00002F1E                          5608                 
00002F1E  6700 E218               5609                 BEQ         CHECK_PARSE_MEMORY  
00002F22                          5610                 
00002F22  B03C 000F               5611                 CMP.B       #%1111, D0
00002F26                          5612                 
00002F26  6700 E210               5613                 BEQ         CHECK_PARSE_MEMORY
00002F2A                          5614              
00002F2A  6000 F772               5615                 BRA ERROR_HANDLE
00002F2E                          5616                                  
00002F2E                          5617                            
00002F2E                          5618  
00002F2E                          5619  
00002F2E                          5620  
00002F2E                          5621  
00002F2E                          5622  
00002F2E                          5623  
00002F2E                          5624  
00002F2E                          5625  
00002F2E                          5626  
00002F2E                          5627  
00002F2E                          5628  
00002F2E                          5629  
00002F2E                          5630  
00002F2E                          5631  
00002F2E                          5632  
00002F2E                          5633  
00002F2E                          5634  
00002F2E                          5635  -------------------- end include --------------------
00002F2E                          5636          INCLUDE     'MOVEQ_CHECK.X68'
00002F2E                          5637  
00002F2E                          5638  CHECK_MOVEQ 
00002F2E                          5639  
00002F2E                          5640                   * ADD message
00002F2E                          5641                   
00002F2E                          5642                   * print out size L
00002F2E                          5643                   
00002F2E                          5644                   * print out immediate Data
00002F2E                          5645                   
00002F2E                          5646              
00002F2E                          5647                  
00002F2E  4280                    5648                  CLR.L       D0              *Zero it
00002F30                          5649  
00002F30  3015                    5650                  MOVE.W      (A5),D0     *We'll play with it here
00002F32                          5651                 
00002F32  123C 0008               5652                  MOVE.B      #8, D1
00002F36                          5653                 
00002F36  E368                    5654                  LSL.W       D1, D0
00002F38                          5655  
00002F38  123C 0008               5656                  MOVE.B      #8,D1       *Shift 12 bits to the right  
00002F3C                          5657  
00002F3C  E268                    5658                  LSR.W       D1,D0           *Move the bits -> D0 holds DATA
00002F3E                          5659                      
00002F3E  4285                    5660                  CLR.L D5
00002F40                          5661                 
00002F40  3A00                    5662                  MOVE.W D0, D5      
00002F42                          5663          
00002F42                          5664                  
00002F42                          5665                   
00002F42                          5666                  * for the first Dn 
00002F42  4286                    5667                  CLR.L D6
00002F44                          5668                  
00002F44  4EB8 2EC4               5669                  JSR     CHECK_GET_Data_Register
00002F48                          5670                  
00002F48  1C3C 0000               5671                  MOVE.B  #%000, D6 * for mode
00002F4C                          5672                   
00002F4C  4EB8 2D24               5673                  JSR     CHECK_EA *by using jmp table
00002F50                          5674                   
00002F50  6000 E1E6               5675                  BRA CHECK_PARSE_MEMORY
00002F54                          5676          
00002F54                          5677  
00002F54                          5678  
00002F54                          5679  
00002F54                          5680  
00002F54                          5681  
00002F54                          5682  
00002F54                          5683  
00002F54                          5684  
00002F54                          5685  
00002F54                          5686  
00002F54                          5687  
00002F54                          5688  
00002F54                          5689  
00002F54                          5690  
00002F54                          5691  
00002F54                          5692  -------------------- end include --------------------
00002F54                          5693          INCLUDE     'ADDI_CHECK.X68'
00002F54                          5694    
00002F54                          5695  CHECK_ADDI           * first check the first 4 bits after the op-code
00002F54  4280                    5696                 CLR.L       D0
00002F56                          5697  
00002F56  4281                    5698                 CLR.L       D1
00002F58                          5699                 
00002F58  3015                    5700                 MOVE.W      (A5),D0
00002F5A                          5701                 
00002F5A  123C 0008               5702                 MOVE.B      #8, D1 * for shifting to the right by 8 bits
00002F5E                          5703                 
00002F5E  E268                    5704                 LSR.W       D1, D0 
00002F60                          5705                 
00002F60  B07C 0006               5706                 CMP.W       #6, D0 * checking the first 4 bits 
00002F64                          5707                 
00002F64  6600 F738               5708                 BNE         ERROR_HANDLE * go to error 
00002F68                          5709                 
00002F68                          5710                 * print the op-code 
00002F68  4280                    5711                 CLR.L       D0
00002F6A                          5712  
00002F6A  4281                    5713                 CLR.L       D1
00002F6C                          5714                 
00002F6C                          5715                                
00002F6C                          5716                 * print the size
00002F6C  4280                    5717                 CLR.L       D0
00002F6E                          5718  
00002F6E  4281                    5719                 CLR.L       D1
00002F70                          5720                 
00002F70  3015                    5721                 MOVE.W      (A5),D0
00002F72                          5722                
00002F72  E148                    5723                 LSL.W       #8, D0
00002F74                          5724  
00002F74  123C 000E               5725                 MOVE.B      #14, D1 * for shifting to the right by 8 bits
00002F78                          5726                 
00002F78  E268                    5727                 LSR.W       D1, D0
00002F7A                          5728                 
00002F7A                          5729                 * D1 holds the size
00002F7A                          5730    *             CLR.L       D1
00002F7A                          5731                 
00002F7A                          5732    *             MOVE.B      D0, D1
00002F7A                          5733                   
00002F7A  B03C 0000               5734                 CMP.B       #%00, D0
00002F7E                          5735                 
00002F7E  6700 0010               5736                 BEQ         CHECK_ADDI_B_SIZE
00002F82                          5737                 
00002F82  B03C 0001               5738                 CMP.B       #%01, D0
00002F86                          5739                 
00002F86  6700 0010               5740                 BEQ         CHECK_ADDI_W_SIZE
00002F8A                          5741                 
00002F8A                          5742                 *print size L
00002F8A                          5743                 
00002F8A                          5744                * print out pound sign and hex sign
00002F8A                          5745                 
00002F8A  4285                    5746                 CLR.L  D5
00002F8C                          5747          
00002F8C                          5748          
00002F8C                          5749                 
00002F8C  6000 0012               5750                 BRA         CHECK_ADDI_EA   
00002F90                          5751                      
00002F90                          5752  CHECK_ADDI_B_SIZE
00002F90                          5753                 
00002F90  4280                    5754                 CLR.L D0
00002F92                          5755  
00002F92                          5756                 
00002F92  1A00                    5757                 MOVE.B D0, D5
00002F94                          5758     
00002F94                          5759            *     JSR  HEX_TO_ASCII
00002F94                          5760                 
00002F94  6000 000A               5761                 BRA         CHECK_ADDI_EA 
00002F98                          5762                  
00002F98                          5763  
00002F98                          5764  CHECK_ADDI_W_SIZE
00002F98                          5765  
00002F98  4285                    5766                 CLR.L  D5
00002F9A                          5767          
00002F9A                          5768          
00002F9A                          5769          
00002F9A  4EF9 00002FA0           5770                 JMP  CHECK_ADDI_EA
00002FA0                          5771  
00002FA0                          5772  
00002FA0                          5773  CHECK_ADDI_EA      
00002FA0                          5774            *      JSR     PRINT_COMMA
00002FA0                          5775                  
00002FA0  4280                    5776                  CLR.L   D0
00002FA2                          5777                  
00002FA2  4281                    5778                  CLR.L   D1
00002FA4                          5779                  
00002FA4                          5780                  * set register
00002FA4                          5781                   
00002FA4  3015                    5782                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002FA6                          5783                 
00002FA6  123C 000D               5784                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002FAA                          5785  
00002FAA  E368                    5786                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002FAC                          5787  
00002FAC  123C 000D               5788                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00002FB0                          5789  
00002FB0  E268                    5790                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00002FB2                          5791  
00002FB2  1E00                    5792                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00002FB4                          5793                   
00002FB4                          5794                   * set mode
00002FB4  4280                    5795                   CLR.L D0                *clear D0
00002FB6                          5796                   
00002FB6  4281                    5797                   CLR.L D1                *clear D1
00002FB8                          5798                   
00002FB8  3015                    5799                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00002FBA                          5800                 
00002FBA  123C 000A               5801                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00002FBE                          5802  
00002FBE  E368                    5803                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00002FC0                          5804  
00002FC0  123C 000D               5805                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00002FC4                          5806  
00002FC4  E268                    5807                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00002FC6                          5808                   
00002FC6  4286                    5809                   CLR.L   D6
00002FC8                          5810  
00002FC8  1C00                    5811                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
00002FCA                          5812  
00002FCA                          5813   
00002FCA                          5814                 * JSR     Set_Ea
00002FCA                          5815                   
00002FCA  4EB8 2D24               5816                  JSR     CHECK_EA *by using jmp table
00002FCE                          5817                  
00002FCE  4EF8 1138               5818                  JMP     CHECK_PARSE_MEMORY
00002FD2                          5819                  
00002FD2                          5820                  
00002FD2                          5821                   
00002FD2                          5822                   
00002FD2                          5823  
00002FD2                          5824  
00002FD2                          5825                 
00002FD2                          5826  
00002FD2                          5827  
00002FD2                          5828  
00002FD2                          5829  
00002FD2                          5830  
00002FD2                          5831  
00002FD2                          5832  
00002FD2                          5833  
00002FD2                          5834  
00002FD2                          5835  
00002FD2                          5836  
00002FD2                          5837  
00002FD2                          5838  
00002FD2                          5839  
00002FD2                          5840  
00002FD2                          5841  
00002FD2                          5842  
00002FD2                          5843  
00002FD2                          5844  
00002FD2                          5845  
00002FD2                          5846  
00002FD2                          5847  
00002FD2                          5848  
00002FD2                          5849  
00002FD2                          5850  
00002FD2                          5851  
00002FD2                          5852  
00002FD2                          5853  
00002FD2                          5854  
00002FD2                          5855  
00002FD2                          5856  
00002FD2                          5857  
00002FD2                          5858  
00002FD2                          5859  -------------------- end include --------------------
00002FD2                          5860          INCLUDE     'MOVEM_CHECK.X68'
00002FD2                          5861  CHECK_MOVEM_OPCODE
00002FD2                          5862  
00002FD2  4280                    5863     CLR.L       D0               *Zero it
00002FD4                          5864     
00002FD4  4286                    5865     CLR.L       D6
00002FD6                          5866  
00002FD6  3015                    5867     MOVE.W      (A5),D0     *We'll play with it here
00002FD8                          5868  
00002FD8                          5869  
00002FD8  3015                    5870    MOVE.W     (A5), D0
00002FDA                          5871  
00002FDA  0800 0006               5872    BTST       #6,  D0      
00002FDE                          5873  
00002FDE                          5874  
00002FDE                          5875   
00002FDE  6000 0002               5876    BRA          CHECK_DR_FIELD
00002FE2                          5877      
00002FE2                          5878    * Print out size for W
00002FE2                          5879  
00002FE2                          5880  
00002FE2                          5881  CHECK_DR_FIELD
00002FE2                          5882                 
00002FE2  0800 000A               5883    BTST        #10,  D0    * BIT TEST
00002FE6                          5884  
00002FE6  6700 000C               5885    BEQ         CHECK_Regitset_Memory *if D0 holds a 1
00002FEA                          5886  
00002FEA  6000 0052               5887    BRA         CHECK_Memory_Register *If D0 hollds a 0
00002FEE                          5888  
00002FEE  4284                    5889    CLR.L D4
00002FF0                          5890  
00002FF0  183C 000F               5891    MOVE.B #15, D4
00002FF4                          5892  
00002FF4                          5893  CHECK_Regitset_Memory
00002FF4                          5894      
00002FF4                          5895      * CHECK IF PRE DECREMEMNT
00002FF4  3015                    5896      MOVE.W (A5), D0
00002FF6                          5897      
00002FF6  123C 000A               5898      MOVE.B      #10, D1
00002FFA                          5899      
00002FFA  E368                    5900      LSL.W       D1, D0
00002FFC                          5901  
00002FFC  123C 000D               5902      MOVE.B      #13, D1
00003000                          5903  
00003000  E268                    5904      LSR.W       D1, D0
00003002                          5905  
00003002  B03C 0004               5906      CMP.B       #%100, D0
00003006                          5907  
00003006  6700 0048               5908      BEQ         CHECK_OPPOSITE_LOOP 
0000300A                          5909      * NOW IT CAN BE IN REGULAR ORDER
0000300A                          5910      
0000300A  183C 000F               5911      MOVE.B      #15, D4
0000300E                          5912      
0000300E  4EB9 000031EE           5913      JSR         CHECK_LOOP_MOVEM
00003014                          5914      
00003014                          5915      
00003014  4EB9 0000301E           5916      JSR CHECK_PRINT_ADDRESS
0000301A                          5917      
0000301A  6000 E11C               5918      BRA CHECK_PARSE_MEMORY
0000301E                          5919  
0000301E                          5920  CHECK_PRINT_ADDRESS 
0000301E  3015                    5921      MOVE.W      (A5), D0
00003020                          5922  
00003020  123C 000A               5923      MOVE.B      #10, D1
00003024                          5924      
00003024  E368                    5925      LSL.W       D1, D0
00003026                          5926      
00003026  123C 000D               5927      MOVE.B      #13, D1
0000302A                          5928  
0000302A  E268                    5929      LSR.W       D1, D0
0000302C                          5930      
0000302C  1C00                    5931      MOVE.B      D0, D6
0000302E                          5932      
0000302E  3015                    5933      MOVE.W      (A5), D0
00003030                          5934      
00003030  E368                    5935      LSL.W       D1, D0
00003032                          5936      
00003032  E268                    5937      LSR.W       D1, D0
00003034                          5938      
00003034  4287                    5939      CLR.L       D7
00003036                          5940      
00003036  1E00                    5941      MOVE.B      D0, D7
00003038                          5942      
00003038  4EB8 2D24               5943      JSR CHECK_EA
0000303C                          5944      
0000303C  4E75                    5945      RTS
0000303E                          5946  
0000303E                          5947  CHECK_Memory_Register
0000303E                          5948      
0000303E  4EB8 301E               5949      JSR         CHECK_PRINT_ADDRESS
00003042                          5950      
00003042                          5951          
00003042                          5952      
00003042  183C 000F               5953      MOVE.B      #15, D4
00003046                          5954      
00003046  4EB9 000031EE           5955      JSR         CHECK_LOOP_MOVEM
0000304C                          5956      
0000304C  6000 E0EA               5957      BRA CHECK_PARSE_MEMORY
00003050                          5958  
00003050                          5959  
00003050                          5960  CHECK_OPPOSITE_LOOP
00003050  4241                    5961      CLR         D1
00003052                          5962  
00003052                          5963      *MOVE.W      (A6)+, D3
00003052                          5964      
00003052  183C 000F               5965      MOVE.B      #15, D4
00003056                          5966      
00003056  4EB9 00003064           5967      JSR CHECK_OPPOSITE_LOOP_MOVEM
0000305C                          5968      
0000305C                          5969      
0000305C  4EB8 301E               5970      JSR CHECK_PRINT_ADDRESS
00003060                          5971      
00003060  6000 E0D6               5972      BRA CHECK_PARSE_MEMORY
00003064                          5973  
00003064                          5974          
00003064                          5975  CHECK_OPPOSITE_LOOP_MOVEM
00003064                          5976          
00003064  0903                    5977      BTST        D4, D3     * BIT TEST
00003066                          5978  
00003066  6600 0020               5979      BNE         CHECK_OPPOSITE_IS_USED_FIRST
0000306A                          5980  
0000306A  5304                    5981      SUB.B       #1, D4
0000306C                          5982      
0000306C                          5983  CHECK_OPPOSITE_CHECK
0000306C  B83C 00FF               5984      CMP.B       #-1,  D4
00003070                          5985  
00003070  6700 F56E               5986      BEQ         DONE
00003074                          5987  
00003074  60EE                    5988      BRA         CHECK_OPPOSITE_LOOP_MOVEM
00003076                          5989      
00003076                          5990  CHECK_OPPOSITE_LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
00003076  0903                    5991      BTST        D4, D3     * BIT TEST
00003078                          5992  
00003078  6600 0018               5993      BNE         CHECK_OPPOSITE_IS_USED
0000307C                          5994  
0000307C  5304                    5995      SUB.B       #1, D4
0000307E                          5996      
0000307E                          5997  CHECK_OPPOSITE_CHECK_SECOND
0000307E  B83C 00FF               5998      CMP.B       #-1,  D4
00003082                          5999  
00003082  6700 F55C               6000      BEQ         DONE
00003086                          6001  
00003086  60EE                    6002      BRA         CHECK_OPPOSITE_LOOP_MOVEM_SECOND
00003088                          6003  
00003088                          6004  CHECK_OPPOSITE_IS_USED_FIRST
00003088  4EB9 0000309C           6005      JSR         CHECK_OPPOSITE_REGISTER_MOVEM
0000308E                          6006  
0000308E  5304                    6007      SUB.B       #1, D4
00003090                          6008  
00003090  60EC                    6009      BRA         CHECK_OPPOSITE_CHECK_SECOND
00003092                          6010  
00003092                          6011  
00003092                          6012  CHECK_OPPOSITE_IS_USED
00003092                          6013      
00003092  4EB9 0000309C           6014      JSR         CHECK_OPPOSITE_REGISTER_MOVEM
00003098                          6015  
00003098  5304                    6016      SUB.B       #1, D4
0000309A                          6017  
0000309A  60E2                    6018      BRA         CHECK_OPPOSITE_CHECK_SECOND
0000309C                          6019  
0000309C                          6020      
0000309C                          6021      
0000309C                          6022  CHECK_OPPOSITE_REGISTER_MOVEM
0000309C  41F9 000030AE           6023      LEA        CHECK_OPPOSITE_jmp_table_MOVEM, A0
000030A2  4242                    6024      CLR        D2
000030A4  143C 0006               6025      MOVE.B     #6, D2
000030A8  C4C4                    6026      MULU       D4, D2                           
000030AA  4EF0 2000               6027      JMP        0(A0,D2)   *Jump indirect with index
000030AE                          6028                      
000030AE                          6029  CHECK_OPPOSITE_jmp_table_MOVEM      
000030AE  4EF9 0000310E           6030      JMP         CHECK_OPPOSITE_bit0
000030B4  4EF9 0000311C           6031                 JMP         CHECK_OPPOSITE_bit1
000030BA  4EF9 0000312A           6032                 JMP         CHECK_OPPOSITE_bit2
000030C0  4EF9 00003138           6033                 JMP         CHECK_OPPOSITE_bit3
000030C6  4EF9 00003146           6034                 JMP         CHECK_OPPOSITE_bit4
000030CC  4EF9 00003154           6035                 JMP         CHECK_OPPOSITE_bit5
000030D2  4EF9 00003162           6036                 JMP         CHECK_OPPOSITE_bit6
000030D8  4EF9 00003170           6037                 JMP         CHECK_OPPOSITE_bit7
000030DE  4EF9 0000317E           6038                 JMP         CHECK_OPPOSITE_bit8
000030E4  4EF9 0000318C           6039                 JMP         CHECK_OPPOSITE_bit9
000030EA  4EF9 0000319A           6040                 JMP         CHECK_OPPOSITE_bit10
000030F0  4EF9 000031A8           6041                 JMP         CHECK_OPPOSITE_bit11
000030F6  4EF9 000031B6           6042                 JMP         CHECK_OPPOSITE_bit12
000030FC  4EF9 000031C4           6043                 JMP         CHECK_OPPOSITE_bit13
00003102  4EF9 000031D2           6044                 JMP         CHECK_OPPOSITE_bit14
00003108  4EF9 000031E0           6045                 JMP         CHECK_OPPOSITE_bit15
0000310E                          6046          
0000310E                          6047   
0000310E                          6048   
0000310E                          6049   
0000310E                          6050  CHECK_OPPOSITE_bit0    * D0
0000310E  1E3C 0007               6051      MOVE.B    #%111, D7    * REGISTER
00003112                          6052      
00003112  1C3C 0001               6053      MOVE.B    #%001, D6    * MODE
00003116                          6054  
00003116  4EB8 2D24               6055      JSR        CHECK_EA
0000311A                          6056  
0000311A  4E75                    6057      RTS    
0000311C                          6058  
0000311C                          6059  CHECK_OPPOSITE_bit1    * D1
0000311C  1E3C 0006               6060      MOVE.B    #%110, D7    * REGISTER
00003120                          6061      
00003120  1C3C 0001               6062      MOVE.B    #%001, D6    * MODE
00003124                          6063  
00003124  4EB8 2D24               6064      JSR        CHECK_EA
00003128                          6065  
00003128  4E75                    6066      RTS    
0000312A                          6067  
0000312A                          6068  CHECK_OPPOSITE_bit2    * D2
0000312A  1E3C 0005               6069      MOVE.B    #%101, D7    * REGISTER
0000312E                          6070      
0000312E  1C3C 0001               6071      MOVE.B    #%001, D6    * MODE
00003132                          6072  
00003132  4EB8 2D24               6073      JSR        CHECK_EA  
00003136                          6074  
00003136  4E75                    6075      RTS
00003138                          6076  
00003138                          6077  CHECK_OPPOSITE_bit3    * D3
00003138  1E3C 0004               6078      MOVE.B    #%100, D7    * REGISTER
0000313C                          6079      
0000313C  1C3C 0001               6080      MOVE.B    #%001, D6    * MODE
00003140                          6081  
00003140  4EB8 2D24               6082      JSR        CHECK_EA
00003144                          6083  
00003144  4E75                    6084      RTS    
00003146                          6085  
00003146                          6086  CHECK_OPPOSITE_bit4    * D4
00003146  1E3C 0003               6087      MOVE.B    #%011, D7    * REGISTER
0000314A                          6088  
0000314A  1C3C 0001               6089      MOVE.B    #%001, D6    * MODE
0000314E                          6090  
0000314E  4EB8 2D24               6091      JSR       CHECK_EA
00003152                          6092  
00003152  4E75                    6093      RTS    
00003154                          6094  
00003154                          6095  
00003154                          6096  CHECK_OPPOSITE_bit5    * D5
00003154  1E3C 0002               6097      MOVE.B    #%010, D7    * REGISTER
00003158                          6098      
00003158  1C3C 0001               6099      MOVE.B    #%001, D6    * MODE
0000315C                          6100  
0000315C  4EB8 2D24               6101      JSR       CHECK_EA
00003160                          6102  
00003160  4E75                    6103      RTS    
00003162                          6104  
00003162                          6105  CHECK_OPPOSITE_bit6    * D6
00003162  1E3C 0001               6106      MOVE.B    #%001, D7    * REGISTER
00003166                          6107      
00003166  1C3C 0001               6108      MOVE.B    #%001, D6    * MODE
0000316A                          6109  
0000316A  4EB8 2D24               6110      JSR       CHECK_EA
0000316E                          6111  
0000316E  4E75                    6112      RTS    
00003170                          6113  
00003170                          6114  CHECK_OPPOSITE_bit7    * D7
00003170  1E3C 0000               6115      MOVE.B    #%000, D7    * REGISTER
00003174                          6116      
00003174  1C3C 0001               6117      MOVE.B    #%001, D6    * MODE
00003178                          6118  
00003178  4EB8 2D24               6119      JSR        CHECK_EA
0000317C                          6120  
0000317C  4E75                    6121      RTS    
0000317E                          6122  
0000317E                          6123  CHECK_OPPOSITE_bit8    * A0
0000317E  1E3C 0007               6124      MOVE.B    #%111, D7    * REGISTER
00003182                          6125      
00003182  1C3C 0000               6126      MOVE.B    #%000, D6    * MODE
00003186                          6127  
00003186  4EB8 2D24               6128      JSR        CHECK_EA
0000318A                          6129  
0000318A  4E75                    6130      RTS    
0000318C                          6131  
0000318C                          6132  CHECK_OPPOSITE_bit9    * A1
0000318C  1E3C 0006               6133      MOVE.B    #%110, D7    * REGISTER
00003190                          6134      
00003190  1C3C 0000               6135      MOVE.B    #%000, D6    * MODE
00003194                          6136  
00003194  4EB8 2D24               6137      JSR        CHECK_EA
00003198                          6138  
00003198  4E75                    6139      RTS    
0000319A                          6140  
0000319A                          6141  CHECK_OPPOSITE_bit10    * A2
0000319A  1E3C 0005               6142      MOVE.B    #%101, D7    * REGISTER
0000319E                          6143      
0000319E  1C3C 0000               6144      MOVE.B    #%000, D6    * MODE
000031A2                          6145  
000031A2  4EB8 2D24               6146      JSR        CHECK_EA
000031A6                          6147  
000031A6  4E75                    6148      RTS    
000031A8                          6149  
000031A8                          6150  
000031A8                          6151  CHECK_OPPOSITE_bit11    * A5
000031A8  1E3C 0002               6152      MOVE.B    #%010, D7    * REGISTER
000031AC                          6153      
000031AC  1C3C 0000               6154      MOVE.B    #%000, D6    * MODE
000031B0                          6155  
000031B0  4EB8 2D24               6156      JSR       CHECK_EA
000031B4                          6157  
000031B4  4E75                    6158      RTS    
000031B6                          6159  
000031B6                          6160  CHECK_OPPOSITE_bit12    * A4
000031B6  1E3C 0003               6161      MOVE.B    #%011, D7    * REGISTER
000031BA                          6162      
000031BA  1C3C 0000               6163      MOVE.B    #%000, D6    * MODE
000031BE                          6164  
000031BE  4EB8 2D24               6165      JSR        CHECK_EA
000031C2                          6166  
000031C2  4E75                    6167      RTS    
000031C4                          6168  
000031C4                          6169  
000031C4                          6170  CHECK_OPPOSITE_bit13    * A5
000031C4  1E3C 0002               6171      MOVE.B    #%010, D7    * REGISTER
000031C8                          6172      
000031C8  1C3C 0000               6173      MOVE.B    #%000, D6    * MODE
000031CC                          6174  
000031CC  4EB8 2D24               6175      JSR        CHECK_EA
000031D0                          6176  
000031D0  4E75                    6177      RTS    
000031D2                          6178  
000031D2                          6179  
000031D2                          6180  CHECK_OPPOSITE_bit14     * A6
000031D2  1E3C 0001               6181      MOVE.B    #%001, D7    * REGISTER
000031D6                          6182      
000031D6  1C3C 0000               6183      MOVE.B    #%000, D6    * MODE
000031DA                          6184  
000031DA  4EB8 2D24               6185      JSR       CHECK_EA
000031DE                          6186  
000031DE  4E75                    6187      RTS        
000031E0                          6188  
000031E0                          6189  
000031E0                          6190  CHECK_OPPOSITE_bit15    * A7
000031E0  1E3C 0000               6191      MOVE.B    #%000, D7    * REGISTER
000031E4                          6192      
000031E4  1C3C 0000               6193      MOVE.B    #%000, D6    * MODE
000031E8                          6194  
000031E8  4EB8 2D24               6195      JSR        CHECK_EA
000031EC                          6196  
000031EC  4E75                    6197      RTS    
000031EE                          6198  
000031EE                          6199  
000031EE                          6200  
000031EE                          6201  
000031EE                          6202  
000031EE                          6203  CHECK_LOOP_MOVEM
000031EE                          6204          
000031EE  0903                    6205      BTST        D4, D3     * BIT TEST
000031F0                          6206  
000031F0  6600 0020               6207      BNE         CHECK_IS_USED_FIRST
000031F4                          6208  
000031F4  5304                    6209      SUB.B       #1, D4
000031F6                          6210      
000031F6                          6211  CHECK_CHECK
000031F6  B83C 00FF               6212      CMP.B       #-1,  D4
000031FA                          6213  
000031FA  6700 F3E4               6214      BEQ         DONE
000031FE                          6215  
000031FE  60EE                    6216      BRA         CHECK_LOOP_MOVEM
00003200                          6217      
00003200                          6218  CHECK_LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
00003200  0903                    6219      BTST        D4, D3     * BIT TEST
00003202                          6220  
00003202  6600 0018               6221      BNE         CHECK_IS_USED
00003206                          6222  
00003206  5304                    6223      SUB.B       #1, D4
00003208                          6224      
00003208                          6225  CHECK_CHECK_SECOND
00003208  B83C 00FF               6226      CMP.B       #-1,  D4
0000320C                          6227  
0000320C  6700 F3D2               6228      BEQ         DONE
00003210                          6229  
00003210  60EE                    6230      BRA         CHECK_LOOP_MOVEM_SECOND
00003212                          6231  
00003212                          6232  CHECK_IS_USED_FIRST
00003212  4EB9 00003226           6233      JSR         CHECK_PRINT_REGISTER_MOVEM
00003218                          6234  
00003218  5304                    6235      SUB.B       #1, D4
0000321A                          6236  
0000321A  60EC                    6237      BRA         CHECK_CHECK_SECOND
0000321C                          6238  
0000321C                          6239  
0000321C                          6240  CHECK_IS_USED
0000321C                          6241      
0000321C  4EB9 00003226           6242      JSR         CHECK_PRINT_REGISTER_MOVEM
00003222                          6243  
00003222  5304                    6244      SUB.B       #1, D4
00003224                          6245  
00003224  60E2                    6246      BRA         CHECK_CHECK_SECOND
00003226                          6247  
00003226                          6248  
00003226                          6249  
00003226                          6250  
00003226                          6251  
00003226                          6252  CHECK_PRINT_REGISTER_MOVEM
00003226  41F9 00003238           6253      LEA         CHECK_jmp_table_MOVEM, A0
0000322C  4242                    6254      CLR         D2
0000322E  143C 0006               6255      MOVE.B      #6, D2
00003232  C4C4                    6256      MULU        D4, D2                           
00003234  4EF0 2000               6257      JMP         0(A0,D2)   *Jump indirect with index
00003238                          6258                      
00003238                          6259  CHECK_jmp_table_MOVEM      
00003238  4EF9 00003298           6260      JMP         CHECK_bit0
0000323E  4EF9 000032A6           6261                 JMP         CHECK_bit1
00003244  4EF9 000032B4           6262                 JMP         CHECK_bit2
0000324A  4EF9 000032C2           6263                 JMP         CHECK_bit3
00003250  4EF9 000032D0           6264                 JMP         CHECK_bit4
00003256  4EF9 000032DE           6265                 JMP         CHECK_bit5
0000325C  4EF9 000032EC           6266                 JMP         CHECK_bit6
00003262  4EF9 000032FA           6267                 JMP         CHECK_bit7
00003268  4EF9 00003308           6268                 JMP         CHECK_bit8
0000326E  4EF9 00003316           6269                 JMP         CHECK_bit9
00003274  4EF9 00003324           6270                 JMP         CHECK_bit10
0000327A  4EF9 00003332           6271                 JMP         CHECK_bit11
00003280  4EF9 00003340           6272                 JMP         CHECK_bit12
00003286  4EF9 0000334E           6273                 JMP         CHECK_bit13
0000328C  4EF9 0000335C           6274                 JMP         CHECK_bit14
00003292  4EF9 0000336A           6275                 JMP         CHECK_bit15
00003298                          6276          
00003298                          6277   
00003298                          6278   
00003298                          6279   
00003298                          6280  CHECK_bit0    * D0
00003298  1E3C 0000               6281      MOVE.B    #%000, D7    * REGISTER
0000329C                          6282      
0000329C  1C3C 0000               6283      MOVE.B    #%000, D6    * MODE
000032A0                          6284  
000032A0  4EB8 2D24               6285      JSR        CHECK_EA
000032A4                          6286  
000032A4  4E75                    6287      RTS    
000032A6                          6288  
000032A6                          6289  CHECK_bit1    * D1
000032A6  1E3C 0001               6290      MOVE.B    #%001, D7    * REGISTER
000032AA                          6291      
000032AA  1C3C 0000               6292      MOVE.B    #%000, D6    * MODE
000032AE                          6293  
000032AE  4EB8 2D24               6294      JSR        CHECK_EA
000032B2                          6295  
000032B2  4E75                    6296      RTS    
000032B4                          6297  
000032B4                          6298  CHECK_bit2    * D2
000032B4  1E3C 0002               6299      MOVE.B    #%010, D7    * REGISTER
000032B8                          6300      
000032B8  1C3C 0000               6301      MOVE.B    #%000, D6    * MODE
000032BC                          6302  
000032BC  4EB8 2D24               6303      JSR        CHECK_EA   
000032C0                          6304  
000032C0  4E75                    6305      RTS
000032C2                          6306  
000032C2                          6307  CHECK_bit3    * D3
000032C2  1E3C 0003               6308      MOVE.B    #%011, D7    * REGISTER
000032C6                          6309      
000032C6  1C3C 0000               6310      MOVE.B    #%000, D6    * MODE
000032CA                          6311  
000032CA  4EB8 2D24               6312      JSR        CHECK_EA
000032CE                          6313  
000032CE  4E75                    6314      RTS    
000032D0                          6315  
000032D0                          6316  CHECK_bit4    * D4
000032D0  1E3C 0004               6317      MOVE.B    #%100, D7    * REGISTER
000032D4                          6318  
000032D4  1C3C 0000               6319      MOVE.B    #%000, D6    * MODE
000032D8                          6320  
000032D8  4EB8 2D24               6321      JSR        CHECK_EA
000032DC                          6322  
000032DC  4E75                    6323      RTS    
000032DE                          6324  
000032DE                          6325  
000032DE                          6326  CHECK_bit5    * D5
000032DE  1E3C 0005               6327      MOVE.B    #%101, D7    * REGISTER
000032E2                          6328      
000032E2  1C3C 0000               6329      MOVE.B    #%000, D6    * MODE
000032E6                          6330  
000032E6  4EB8 2D24               6331      JSR        CHECK_EA
000032EA                          6332  
000032EA  4E75                    6333      RTS    
000032EC                          6334  
000032EC                          6335  CHECK_bit6    * D6
000032EC  1E3C 0006               6336      MOVE.B    #%110, D7    * REGISTER
000032F0                          6337      
000032F0  1C3C 0000               6338      MOVE.B    #%000, D6    * MODE
000032F4                          6339  
000032F4  4EB8 2D24               6340      JSR        CHECK_EA
000032F8                          6341  
000032F8  4E75                    6342      RTS    
000032FA                          6343  
000032FA                          6344  CHECK_bit7    * D7
000032FA  1E3C 0007               6345      MOVE.B    #%111, D7    * REGISTER
000032FE                          6346      
000032FE  1C3C 0000               6347      MOVE.B    #%000, D6    * MODE
00003302                          6348  
00003302  4EB8 2D24               6349      JSR        CHECK_EA
00003306                          6350  
00003306  4E75                    6351      RTS    
00003308                          6352  
00003308                          6353  CHECK_bit8    * A0
00003308  1E3C 0000               6354      MOVE.B    #%000, D7    * REGISTER
0000330C                          6355      
0000330C  1C3C 0001               6356      MOVE.B    #%001, D6    * MODE
00003310                          6357  
00003310  4EB8 2D24               6358      JSR        CHECK_EA
00003314                          6359  
00003314  4E75                    6360      RTS    
00003316                          6361  
00003316                          6362  CHECK_bit9    * A1
00003316  1E3C 0001               6363      MOVE.B    #%001, D7    * REGISTER
0000331A                          6364      
0000331A  1C3C 0001               6365      MOVE.B    #%001, D6    * MODE
0000331E                          6366  
0000331E  4EB8 2D24               6367      JSR        CHECK_EA
00003322                          6368  
00003322  4E75                    6369      RTS    
00003324                          6370  
00003324                          6371  CHECK_bit10    * A2
00003324  1E3C 0002               6372      MOVE.B    #%010, D7    * REGISTER
00003328                          6373      
00003328  1C3C 0001               6374      MOVE.B    #%001, D6    * MODE
0000332C                          6375  
0000332C  4EB8 2D24               6376      JSR        CHECK_EA
00003330                          6377  
00003330  4E75                    6378      RTS    
00003332                          6379  
00003332                          6380  
00003332                          6381  CHECK_bit11    * A5
00003332  1E3C 0003               6382      MOVE.B    #%011, D7    * REGISTER
00003336                          6383      
00003336  1C3C 0001               6384      MOVE.B    #%001, D6    * MODE
0000333A                          6385  
0000333A  4EB8 2D24               6386      JSR        CHECK_EA
0000333E                          6387  
0000333E  4E75                    6388      RTS    
00003340                          6389  
00003340                          6390  CHECK_bit12    * A4
00003340  1E3C 0004               6391      MOVE.B    #%100, D7    * REGISTER
00003344                          6392      
00003344  1C3C 0001               6393      MOVE.B    #%001, D6    * MODE
00003348                          6394  
00003348  4EB8 2D24               6395      JSR        CHECK_EA
0000334C                          6396  
0000334C  4E75                    6397      RTS    
0000334E                          6398  
0000334E                          6399  
0000334E                          6400  CHECK_bit13    * A5
0000334E  1E3C 0005               6401      MOVE.B    #%101, D7    * REGISTER
00003352                          6402      
00003352  1C3C 0001               6403      MOVE.B    #%001, D6    * MODE
00003356                          6404  
00003356  4EB8 2D24               6405      JSR        CHECK_EA
0000335A                          6406  
0000335A  4E75                    6407      RTS    
0000335C                          6408  
0000335C                          6409  
0000335C                          6410  CHECK_bit14     * A6
0000335C  1E3C 0006               6411      MOVE.B    #%110, D7    * REGISTER
00003360                          6412      
00003360  1C3C 0001               6413      MOVE.B    #%001, D6    * MODE
00003364                          6414  
00003364  4EB8 2D24               6415      JSR        CHECK_EA
00003368                          6416  
00003368  4E75                    6417      RTS        
0000336A                          6418  
0000336A                          6419  
0000336A                          6420  CHECK_bit15    * A7
0000336A  1E3C 0007               6421      MOVE.B    #%111, D7    * REGISTER
0000336E                          6422      
0000336E  1C3C 0001               6423      MOVE.B    #%001, D6    * MODE
00003372                          6424  
00003372  4EB8 2D24               6425      JSR        CHECK_EA
00003376                          6426  
00003376  4E75                    6427      RTS    
00003378                          6428  
00003378                          6429  CHECK_DONE_MOVEM_LOOP
00003378  4E75                    6430      RTS
0000337A                          6431  
0000337A                          6432     * SIMHALT             ; halt simulator
0000337A                          6433      *INCLUDE 'MESSAGE_Data.X68'
0000337A                          6434     * INCLUDE 'JUMPTABLE EA.X68'
0000337A                          6435  
0000337A                          6436  
0000337A                          6437     * END    START        ; last line of source
0000337A                          6438  
0000337A                          6439  
0000337A                          6440  
0000337A                          6441  
0000337A                          6442  
0000337A                          6443  
0000337A                          6444  
0000337A                          6445  
0000337A                          6446  
0000337A                          6447  
0000337A                          6448  
0000337A                          6449  
0000337A                          6450  
0000337A                          6451  
0000337A                          6452  
0000337A                          6453  
0000337A                          6454  
0000337A                          6455  
0000337A                          6456  
0000337A                          6457  
0000337A                          6458  
0000337A                          6459  
0000337A                          6460  
0000337A                          6461  
0000337A                          6462  
0000337A                          6463  
0000337A                          6464  
0000337A                          6465  
0000337A                          6466  
0000337A                          6467  
0000337A                          6468  
0000337A                          6469  
0000337A                          6470  
0000337A                          6471  
0000337A                          6472  
0000337A                          6473  
0000337A                          6474  
0000337A                          6475  
0000337A                          6476  
0000337A                          6477  
0000337A                          6478  
0000337A                          6479  
0000337A                          6480  -------------------- end include --------------------
0000337A                          6481          
0000337A                          6482                      
0000337A                          6483              
0000337A                          6484  
0000337A                          6485  
0000337A                          6486  
0000337A                          6487  
0000337A                          6488  
0000337A                          6489  
0000337A                          6490  
0000337A                          6491  
0000337A                          6492  
0000337A                          6493  
0000337A                          6494  
0000337A                          6495  
0000337A                          6496  
0000337A                          6497  
0000337A                          6498  
0000337A                          6499  
0000337A                          6500  
0000337A                          6501  
0000337A                          6502  
0000337A                          6503  
0000337A                          6504  
0000337A                          6505  
0000337A                          6506  
0000337A                          6507  
0000337A                          6508  
0000337A                          6509  
0000337A                          6510  
0000337A                          6511  
0000337A                          6512  
0000337A                          6513  
0000337A                          6514  
0000337A                          6515  
0000337A                          6516  
0000337A                          6517  
0000337A                          6518  
0000337A                          6519  
0000337A                          6520  
0000337A                          6521  
0000337A                          6522  
0000337A                          6523  
0000337A                          6524  
0000337A                          6525  
0000337A                          6526  -------------------- end include --------------------
0000337A                          6527                  
0000337A  4EF8 10F0               6528                  JMP      PARSE_MEMORY
0000337E                          6529                  
0000337E                          6530  PRESS_ENTER_CONTINUE
0000337E  267C 00000000           6531                   MOVEA.L  #outputCountCurr, A3  *reset to 0
00003384  43F9 0000346D           6532                   LEA ENTER, A1
0000338A  103C 000E               6533                   MOVE.B #14, D0
0000338E  4E4F                    6534                   TRAP #15
00003390                          6535                   
00003390  103C 0005               6536                   MOVE.B #5, D0
00003394  4E4F                    6537                   TRAP #15
00003396                          6538                   
00003396  B23C 000D               6539                   CMP.B #$D, D1
0000339A                          6540  
0000339A  103C 000B               6541                   MOVE.B #11, D0   *clear display
0000339E  323C FF00               6542                   MOVE.W #$FF00, D1
000033A2  4E4F                    6543                   TRAP #15
000033A4                          6544  
000033A4  4EF8 1102               6545                   JMP CATCH_BAD_OPCODES
000033A8                          6546                  
000033A8                          6547  ASK_TO_CONTINUE
000033A8  43F9 000035A9           6548      LEA         ASK_TO_CONTINUE_M, A1
000033AE                          6549      
000033AE  103C 000E               6550      MOVE.B      #14, D0
000033B2                          6551  
000033B2  4E4F                    6552      TRAP #15
000033B4                          6553      
000033B4  3278 0100               6554      MOVEA.W     $100, A1
000033B8                          6555      
000033B8  103C 0002               6556      MOVE.B      #2, D0
000033BC                          6557  
000033BC  4E4F                    6558      TRAP #15
000033BE                          6559  
000033BE                          6560      * VALIDATE THE INPUT
000033BE                          6561  
000033BE  4240                    6562      CLR         D0
000033C0                          6563  
000033C0  1011                    6564      MOVE.B      (A1), D0  
000033C2                          6565  
000033C2  B03C 0059               6566      CMP.B       #$59, D0
000033C6                          6567  
000033C6  6700 001C               6568      BEQ         RESTART
000033CA                          6569  
000033CA  B03C 0079               6570      CMP.B       #$79, D0
000033CE                          6571  
000033CE  6700 0014               6572      BEQ         RESTART
000033D2                          6573  
000033D2  B03C 004E               6574      CMP.B       #$4E, D0
000033D6                          6575  
000033D6  6700 0012               6576      BEQ         STOP
000033DA                          6577  
000033DA  B03C 006E               6578      CMP.B       #$6E, D0
000033DE                          6579  
000033DE  6700 000A               6580      BEQ         STOP
000033E2                          6581  
000033E2  60C4                    6582      BRA         ASK_TO_CONTINUE   
000033E4                          6583      
000033E4                          6584  RESTART
000033E4  4284                    6585      CLR.L       D4
000033E6                          6586      
000033E6  6000 DC18               6587      BRA         START_OF_PROGRAM   
000033EA                          6588  
000033EA                          6589                 
000033EA                          6590  STOP
000033EA                          6591  
000033EA  43F9 000035C8           6592      LEA         TERMINATED, A1
000033F0                          6593      
000033F0  103C 000E               6594      MOVE.B      #14, D0
000033F4                          6595      
000033F4  4E4F                    6596      TRAP #15
000033F6                          6597  
000033F6                          6598  
000033F6                          6599  
000033F6                          6600  
000033F6                          6601  
000033F6                          6602  
000033F6                          6603  
000033F6                          6604  
000033F6                          6605  
000033F6                          6606  
000033F6                          6607  
000033F6                          6608  
000033F6                          6609  
000033F6                          6610  
000033F6                          6611  
000033F6                          6612  
000033F6                          6613  
000033F6                          6614  
000033F6                          6615  
000033F6                          6616  
000033F6                          6617  
000033F6                          6618  
000033F6                          6619  
000033F6                          6620  
000033F6                          6621  
000033F6                          6622  
000033F6                          6623  
000033F6                          6624  
000033F6                          6625  
000033F6                          6626  
000033F6                          6627  
000033F6                          6628  
000033F6                          6629  
000033F6                          6630  
000033F6                          6631  
000033F6                          6632  
000033F6                          6633  
000033F6                          6634  
000033F6                          6635  
000033F6                          6636  
000033F6                          6637  
000033F6                          6638  
000033F6                          6639  
000033F6                          6640  
000033F6                          6641  -------------------- end include --------------------
000033F6                          6642  
000033F6  FFFF FFFF               6643      SIMHALT             ; halt simulator
000033FA                          6644  
000033FA                          6645      INCLUDE 'DS_Data.X68' * STARTING_ADDR ** ENDING_ADDR
000033FA                          6646  
000033FA                          6647  STARTING_ADDR   DS.L 1
000033FE                          6648  
000033FE                          6649  ENDING_ADDR     DS.L 1
000033FE                          6650  -------------------- end include --------------------
00003402                          6651      INCLUDE 'MESSAGE_Data.X68' 
00003402                          6652  
00003402  =0000000D               6653  CR  EQU $0D
00003402  =0000000A               6654  LF  EQU $0A 
00003402                          6655  
00003402= 57 65 6C 63 6F 6D ...   6656  WELCOME_MESSAGE DC.B 'Welcome to our Team wild pokemon disassembly!!', CR, LF, 0
00003433= 45 6E 74 65 72 20 ...   6657  STARTING        DC.B 'Enter the starting location: ', 0
00003451= 45 6E 74 65 72 20 ...   6658  ENDING          DC.B 'Enter the ending locaiton: ', 0
0000346D= 45 6E 74 65 72 20 ...   6659  ENTER           DC.B 'Enter to continue ', 0
00003480= 49 6E 76 61 6C 69 ...   6660  ERROR_MSG       DC.B 'Invalid Input, must be 8 characters, (0-9), (A-F), re-do ',CR, LF, 0
000034BC= 0D 0A 00                6661  CR_LF           DC.B '', CR, LF, 0
000034BF                          6662      
000034BF= 41 44 44 49 2E 00       6663  ADDI_MESSAGE    DC.B 'ADDI.',0
000034C5= 4D 4F 56 45 41 2E 00    6664  MOVEA_MESSAGE   DC.B 'MOVEA.',0
000034CC= 4D 4F 56 45 2E 00       6665  MOVE_MESSAGE    DC.B 'MOVE.',0
000034D2= 4E 4F 50 00             6666  NOP_MESSAGE     DC.B 'NOP',0
000034D6= 4D 4F 56 45 4D 2E 00    6667  MOVEM_MESSAGE   DC.B 'MOVEM.',0
000034DD= 4A 53 52 00             6668  JSR_MESSAGE     DC.B 'JSR',0
000034E1= 52 54 53 00             6669  RTS_MESSAGE     DC.B 'RTS',0
000034E5= 43 4C 52 00             6670  CLR_MESSAGE     DC.B 'CLR',0
000034E9= 41 44 44 51 2E 00       6671  ADDQ_MESSAGE    DC.B 'ADDQ.',0
000034EF= 4C 45 41 00             6672  LEA_MESSAGE     DC.B 'LEA',0
000034F3                          6673  
000034F3                          6674  
000034F3= 42 43 43 00             6675  BCC_MESSAGE     DC.B 'BCC',0   *//
000034F7= 42 45 51 00             6676  BEQ_MESSAGE     DC.B 'BEQ',0   *//
000034FB= 42 4E 45 00             6677  BNE_MESSAGE     DC.B 'BNE',0   *//
000034FF= 42 43 53 00             6678  BCS_MESSAGE     DC.B 'BCS',0   *//
00003503= 42 47 45 00             6679  BGE_MESSAGE     DC.B 'BGE',0   *//
00003507= 42 47 54 00             6680  BGT_MESSAGE     DC.B 'BGT',0   *//
0000350B= 42 48 49 00             6681  BHI_MESSAGE     DC.B 'BHI',0   *//
0000350F= 42 4C 45 00             6682  BLE_MESSAGE     DC.B 'BLE',0   *//
00003513= 42 4C 53 00             6683  BLS_MESSAGE     DC.B 'BLS',0   *//
00003517= 42 4C 54 00             6684  BLT_MESSAGE     DC.B 'BLT',0   *//
0000351B= 42 4D 49 00             6685  BMI_MESSAGE     DC.B 'BMI',0   *//
0000351F= 42 50 4C 00             6686  BPL_MESSAGE     DC.B 'BPL',0   *//
00003523= 42 56 43 00             6687  BVC_MESSAGE     DC.B 'BVC',0   *//
00003527= 42 56 53 00             6688  BVS_MESSAGE     DC.B 'BVS',0   *//
0000352B                          6689  
0000352B= 4D 4F 56 45 51 2E 00    6690  MOVEQ_MESSAGE   DC.B 'MOVEQ.',0
00003532= 44 49 56 55 20 00       6691  DIVU_MESSAGE    DC.B 'DIVU ',0
00003538= 4F 52 2E 00             6692  OR_MESSAGE      DC.B 'OR.',0
0000353C= 53 55 42 2E 00          6693  SUB_MESSAGE     DC.B 'SUB.',0
00003541= 43 4D 50 2E 00          6694  CMP_MESSAGE     DC.B 'CMP.',0
00003546= 4D 55 4C 53 20 00       6695  MULS_MESSAGE    DC.B 'MULS ',0
0000354C= 41 4E 44 2E 00          6696  AND_MESSAGE     DC.B 'AND.',0
00003551= 41 44 44 2E 00          6697  ADD_MESSAGE     DC.B 'ADD.',0
00003556= 41 44 44 41 2E 00       6698  ADDA_MESSAGE    DC.B 'ADDA.',0
0000355C= 4C 53 4C 00             6699  LSL_MESSAGE     DC.B 'LSL',0 *//
00003560= 41 53 4C 00             6700  ASL_MESSAGE     DC.B 'ASL',0
00003564= 52 4F 4C 00             6701  ROL_MESSAGE     DC.B 'ROL',0
00003568= 4C 53 52 00             6702  LSR_MESSAGE     DC.B 'LSR',0 *//
0000356C= 41 53 52 00             6703  ASR_MESSAGE     DC.B 'ASR',0
00003570= 52 4F 52 00             6704  ROR_MESSAGE     DC.B 'ROR',0
00003574= 42 20 20 20 20 00       6705  SIZE_B_PRINT    DC.B 'B    ',0
0000357A= 57 20 20 20 20 00       6706  SIZE_W_PRINT    DC.B 'W    ',0
00003580= 4C 20 20 20 20 00       6707  SIZE_L_PRINT    DC.B 'L    ',0
00003586= 23 00                   6708  POUND_SIGN      DC.B '#',0
00003588= 24 00                   6709  HEX_SIGN        DC.B '$',0
0000358A= 2E 00                   6710  PERIOD          DC.B '.',0
0000358C= 20 20 00                6711  SPACE           DC.B '  ',0
0000358F= 2F 00                   6712  SLASH           DC.B '/', 0
00003591                          6713  
00003591= 44 00                   6714  D_REGISTER      DC.B 'D',0
00003593= 41 00                   6715  A_REGISTER      DC.B 'A',0
00003595= 28 41 00                6716  IA_START        DC.B '(A',0
00003598= 29 00                   6717  IA_END          DC.B ')',0
0000359A= 28 41 00                6718  A_PI_START      DC.B '(A',0
0000359D= 29 2B 00                6719  A_PI_END        DC.B ')+',0
000035A0= 2D 28 41 00             6720  A_PD_START      DC.B '-(A',0
000035A4= 29 00                   6721  A_PD_END        DC.B ')',0
000035A6= 2C 20 00                6722  COMMA           DC.B ', ',0
000035A9                          6723  
000035A9                          6724  
000035A9= 64 6F 20 79 6F 75 ...   6725  ASK_TO_CONTINUE_M     DC.B    'do you want to continue? (y/n)', 0
000035C8= 50 52 4F 47 52 41 ...   6726  TERMINATED          DC.B    'PROGRAM TERMINATED',0
000035DB                          6727  
000035DB= 44 41 54 41 20 20 ...   6728  DATA                  DC.B    'DATA     ',0
000035E5                          6729  
000035E5                          6730  
000035E5                          6731  
000035E5                          6732  
000035E5                          6733  
000035E5                          6734  
000035E5                          6735  
000035E5                          6736  
000035E5                          6737  
000035E5                          6738  
000035E5                          6739  
000035E5                          6740  
000035E5                          6741  
000035E5                          6742  
000035E5                          6743  
000035E5                          6744  
000035E5                          6745  
000035E5                          6746  
000035E5                          6747  
000035E5                          6748  -------------------- end include --------------------
000035E5                          6749          
000035E5                          6750      
000035E5                          6751  
000035E5                          6752      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_LONG       2576
ABSOLUTE_SHORT      2558
ADDA_CODE           1224
ADDA_MESSAGE        3556
ADDI                13C2
ADDI_B_SIZE         1432
ADDI_EA             1492
ADDI_MESSAGE        34BF
ADDI_W_SIZE         1462
ADDQ                14CA
ADDQB               14F8
ADDQL               1524
ADDQW               150E
ADDQ_MESSAGE        34E9
ADDRESS_PD          24DE
ADDRESS_PI          24B4
ADDRESS_REGISTER    246E
ADDRESS_W_DISPLACEMENT  2508
ADDRESS_W_INDEX     250C
ADD_ADDA            1210
ADD_CODE            1298
ADD_FIRST_EA        12EC
ADD_MESSAGE         3551
AND_CODE            1900
AND_FIRST_EA        194C
AND_MESSAGE         354C
ASD                 1F5C
ASD_MEMORY          1FB6
ASK_TO_CONTINUE     33A8
ASK_TO_CONTINUE_M   35A9
ASL                 1F72
ASL_MESSAGE         3560
ASR                 1F94
ASR_MESSAGE         356C
A_16_BIT            233A
A_32_BIT            2348
A_PD_END            35A4
A_PD_START          35A0
A_PI_END            359D
A_PI_START          359A
A_REGISTER          3593
BCC                 21AE
BCC_MESSAGE         34F3
BCS_MESSAGE         34FF
BEQ_MESSAGE         34F7
BGE_MESSAGE         3503
BGT_MESSAGE         3507
BHI_MESSAGE         350B
BIT0                1CBE
BIT1                1CCE
BIT10               1D5E
BIT11               1D6E
BIT12               1D7E
BIT13               1D8E
BIT14               1D9E
BIT15               1DAE
BIT2                1CDE
BIT3                1CEE
BIT4                1CFE
BIT5                1D0E
BIT6                1D1E
BIT7                1D2E
BIT8                1D3E
BIT9                1D4E
BLE_MESSAGE         350F
BLS_MESSAGE         3513
BLT_MESSAGE         3517
BMI_MESSAGE         351B
BNE_MESSAGE         34FB
BPL_MESSAGE         351F
BVC_MESSAGE         3523
BVS_MESSAGE         3527
CATCH_BAD_OPCODES   1102
CC                  21E0
CHAR                10A0
CHECK               1C10
CHECK_ABSOLUTE_LONG  2DEA
CHECK_ABSOLUTE_SHORT  2DE6
CHECK_ADDA_CODE     2E06
CHECK_ADDI          2F54
CHECK_ADDI_B_SIZE   2F90
CHECK_ADDI_EA       2FA0
CHECK_ADDI_W_SIZE   2F98
CHECK_ADDQ          2A62
CHECK_ADDQB         2A8C
CHECK_ADDQL         2AA0
CHECK_ADDQW         2A96
CHECK_ADDRESS_PD    2D92
CHECK_ADDRESS_PI    2D8E
CHECK_ADDRESS_REGISTER  2D86
CHECK_ADDRESS_W_DISPLACEMENT  2D96
CHECK_ADDRESS_W_INDEX  2D9A
CHECK_ADD_ADDA      2DF2
CHECK_ADD_CODE      2E52
CHECK_ADD_FIRST_EA  2E8E
CHECK_AND_CODE      2CC6
CHECK_AND_FIRST_EA  2D02
CHECK_ASD           2800
CHECK_ASD_MEMORY    2842
CHECK_ASL           2816
CHECK_ASR           282C
CHECK_BCC           2F00
CHECK_BIT0          3298
CHECK_BIT1          32A6
CHECK_BIT10         3324
CHECK_BIT11         3332
CHECK_BIT12         3340
CHECK_BIT13         334E
CHECK_BIT14         335C
CHECK_BIT15         336A
CHECK_BIT2          32B4
CHECK_BIT3          32C2
CHECK_BIT4          32D0
CHECK_BIT5          32DE
CHECK_BIT6          32EC
CHECK_BIT7          32FA
CHECK_BIT8          3308
CHECK_BIT9          3316
CHECK_CHECK         31F6
CHECK_CHECK_SECOND  3208
CHECK_CLR_OPCODE    29F4
CHECK_CMP           2C66
CHECK_CODE000       2D62
CHECK_CODE0000      265C
CHECK_CODE0001      2660
CHECK_CODE001       2D66
CHECK_CODE0010      2664
CHECK_CODE0011      2668
CHECK_CODE010       2D6A
CHECK_CODE0100      266C
CHECK_CODE0101      2670
CHECK_CODE011       2D6E
CHECK_CODE0110      2674
CHECK_CODE0111      267A
CHECK_CODE100       2D72
CHECK_CODE1000      267E
CHECK_CODE1001      2682
CHECK_CODE101       2D76
CHECK_CODE1010      2686
CHECK_CODE1011      268A
CHECK_CODE110       2D7A
CHECK_CODE1100      268E
CHECK_CODE1101      2692
CHECK_CODE111       2D7E
CHECK_CODE1110      2696
CHECK_CODE1111      269A
CHECK_COUNT         2872
CHECK_DATA_REGISTER  2D82
CHECK_DIVU_CODE     2BDE
CHECK_DIVU_OR       2BCA
CHECK_DONE_MOVEM_LOOP  3378
CHECK_DR_FIELD      2FE2
CHECK_EA            2D24
CHECK_FINISH_PRINTING_SIZE  2E2A
CHECK_GET_DATA_REGISTER  2EC4
CHECK_GET_SIZE_PURPLE  2EAC
CHECK_GROUP_0100_CODE  2AEE
CHECK_GROUP_111     2D9E
CHECK_IMMEDIATE     2DEE
CHECK_INDIRECT_ADDRESS  2D8A
CHECK_IS_USED       321C
CHECK_IS_USED_FIRST  3212
CHECK_JMP_TABLE     25FC
CHECK_JMP_TABLE_EA  2D32
CHECK_JMP_TABLE_EA_111  2DAC
CHECK_JMP_TABLE_MOVEM  3238
CHECK_JSR_OPCODE    29CA
CHECK_LEA_OPCODE    2980
CHECK_LOOP_MOVEM    31EE
CHECK_LOOP_MOVEM_SECOND  3200
CHECK_LSD           2758
CHECK_LSD_MEMORY    27A6
CHECK_LSL           277A
CHECK_LSR           2790
CHECK_MEMORY_REGISTER  303E
CHECK_MEMORY_SHIFTS  2728
CHECK_MEMORY_SHIFTS_EA  28C0
CHECK_MOVEAL        2930
CHECK_MOVEAW        2928
CHECK_MOVEB         28E4
CHECK_MOVEL         290A
CHECK_MOVEM_OPCODE  2FD2
CHECK_MOVEQ         2F2E
CHECK_MOVEW         28EC
CHECK_MOVE_EA       2938
CHECK_MULS_AND      2C8C
CHECK_MULS_CODE     2CA0
CHECK_NOP_OPCODE    29C2
CHECK_OPPOSITE_BIT0  310E
CHECK_OPPOSITE_BIT1  311C
CHECK_OPPOSITE_BIT10  319A
CHECK_OPPOSITE_BIT11  31A8
CHECK_OPPOSITE_BIT12  31B6
CHECK_OPPOSITE_BIT13  31C4
CHECK_OPPOSITE_BIT14  31D2
CHECK_OPPOSITE_BIT15  31E0
CHECK_OPPOSITE_BIT2  312A
CHECK_OPPOSITE_BIT3  3138
CHECK_OPPOSITE_BIT4  3146
CHECK_OPPOSITE_BIT5  3154
CHECK_OPPOSITE_BIT6  3162
CHECK_OPPOSITE_BIT7  3170
CHECK_OPPOSITE_BIT8  317E
CHECK_OPPOSITE_BIT9  318C
CHECK_OPPOSITE_CHECK  306C
CHECK_OPPOSITE_CHECK_SECOND  307E
CHECK_OPPOSITE_IS_USED  3092
CHECK_OPPOSITE_IS_USED_FIRST  3088
CHECK_OPPOSITE_JMP_TABLE_MOVEM  30AE
CHECK_OPPOSITE_LOOP  3050
CHECK_OPPOSITE_LOOP_MOVEM  3064
CHECK_OPPOSITE_LOOP_MOVEM_SECOND  3076
CHECK_OPPOSITE_REGISTER_MOVEM  309C
CHECK_OR_CODE       2C08
CHECK_OR_FIRST_EA   2C44
CHECK_PARSE_MEMORY  1138
CHECK_PC_W_DISPLACEMENT  2DDE
CHECK_PC_W_INDEX    2DE2
CHECK_PRINTADDQ     2AAA
CHECK_PRINTOUT_SIZE_L  2E4C
CHECK_PRINTOUT_SIZE_W  2E46
CHECK_PRINT_ADDRESS  301E
CHECK_PRINT_REGISTER_MOVEM  3226
CHECK_PRINT_SIZE    2A24
CHECK_REG000        2DD2
CHECK_REG001        2DD6
CHECK_REG010        2DCA
CHECK_REG011        2DCE
CHECK_REG100        2DDA
CHECK_REGISTER      2894
CHECK_REGISTER_SHIFTS_EA  284C
CHECK_REGITSET_MEMORY  2FF4
CHECK_ROD           27B0
CHECK_ROD_MEMORY    27F6
CHECK_ROL           27CA
CHECK_ROR           27E0
CHECK_RTS_OPCODE    29C6
CHECK_SECOND        1C22
CHECK_SET_EA        2ED6
CHECK_SHIFTS        26E6
CHECK_SIZE_B        2A56
CHECK_SIZE_L        2A5E
CHECK_SIZE_W        2A5A
CHECK_SUB           2B66
CHECK_SUB_FIRST_EA  2BA8
CLR_MESSAGE         34E5
CLR_OPCODE          170A
CMP                 15AA
CMP_MESSAGE         3541
CODE000             2432
CODE0000            11D0
CODE0001            11D4
CODE001             2436
CODE0010            11D8
CODE0011            11DC
CODE010             243A
CODE0100            11E0
CODE0101            11E4
CODE011             243E
CODE0110            11E8
CODE0111            11EC
CODE100             2442
CODE1000            11F0
CODE1001            11F4
CODE101             2446
CODE1010            11F8
CODE1011            11FC
CODE110             244A
CODE1100            1200
CODE1101            1204
CODE111             244E
CODE1110            1208
CODE1111            120C
COMMA               35A6
CONTINUE_PARSE      1130
CONTINUE_PRINTADDQ  1560
CONVERT_STRING      107E
CR                  D
CR_LF               34BC
CS                  21E4
DATA                35DB
DATA_REGISTER       2452
DIRECTION_LEFT      1
DIRECTION_RIGHT     0
DISPLACEMENT        22EC
DIVU_CODE           17B6
DIVU_MESSAGE        3532
DIVU_OR             17A4
DONE                25E0
DONE_MOVEM_LOOP     1DBE
DONE_PRINTING       1344
DR_FIELD            19A6
D_REGISTER          3591
ENDCONV             10DA
ENDING              3451
ENDING_ADDR         33FE
ENDING_MESSAGE      103C
ENTER               346D
EQ                  21EC
ERROR               10CA
ERROR_HANDLE        269E
ERROR_HANDLING      25E2
ERROR_MSG           3480
EXAMPLE             606
EXAMPLE1            DE61
FINISH_PRINTING_SIZE  124E
GE                  2200
GET_DATA_REGISTER   1386
GET_SIZE_PURPLE     1314
GO_THROUGH_MEMORY   10DC
GROUP_0100_CODE     185A
GROUP_111           2510
GT                  2208
HEX_SIGN            3588
HEX_TO_ASCII        2356
HI                  21D8
IA_END              3598
IA_START            3595
IMMEDIATE           2594
IMMEDIATE_B         25BC
IMMEDIATE_L         25D4
IMMEDIATE_W         25C8
INDIRECT_ADDRESS    248A
IS_USED             1C36
IS_USED_FIRST       1C2C
JMP_TABLE           1170
JMP_TABLE_EA        2402
JMP_TABLE_EA_111    251E
JMP_TABLE_MOVEM     1C5E
JSR_MESSAGE         34DD
JSR_OPCODE          16CC
LE                  220C
LEA_MESSAGE         34EF
LEA_OPCODE          1652
LETTER_1            2378
LETTER_1_ZERO       23BE
LF                  A
LOOP                2362
LOOP_MOVEM          1C08
LOOP_MOVEM_SECOND   1C1A
LOOP_ZERO           23A8
LS                  21DC
LSD                 1E8C
LSD_MEMORY          1EEA
LSL                 1EA6
LSL_MESSAGE         355C
LSR                 1EC8
LSR_MESSAGE         3568
LT                  2204
MAX_USER_INPUT      8
MEMORY_REGISTER     1A12
MEMORY_SHIFTS       1E60
MI                  21FC
MODE_AL             7
MODE_AN             1
MODE_AS             7
MODE_AWD            5
MODE_AWI            6
MODE_DN             0
MODE_IAN            2
MODE_ID             7
MODE_M_DN           0
MODE_M_PDAN         1
MODE_PCWD           7
MODE_PCWI           7
MODE_PDAN           4
MODE_PIAN           3
MOVEAL              213C
MOVEAW              211E
MOVEA_MESSAGE       34C5
MOVEB               2098
MOVEL               20EA
MOVEM_MESSAGE       34D6
MOVEM_OPCODE        196E
MOVEQ               1DC0
MOVEQ_MESSAGE       352B
MOVEW               20B6
MOVE_MESSAGE        34CC
MULS_AND            18BC
MULS_CODE           18CE
MULS_MESSAGE        3546
NE                  21E8
NEXT_INSTRUCTION    1138
NOP_MESSAGE         34D2
NOP_OPCODE          16AC
NUMBER              1090
NUMBER_1            2382
NUMBER_1_ZERO       23C8
OPPOSITE_BIT0       1B08
OPPOSITE_BIT1       1B18
OPPOSITE_BIT10      1BA8
OPPOSITE_BIT11      1BB8
OPPOSITE_BIT12      1BC8
OPPOSITE_BIT13      1BD8
OPPOSITE_BIT14      1BE8
OPPOSITE_BIT15      1BF8
OPPOSITE_BIT2       1B28
OPPOSITE_BIT3       1B38
OPPOSITE_BIT4       1B48
OPPOSITE_BIT5       1B58
OPPOSITE_BIT6       1B68
OPPOSITE_BIT7       1B78
OPPOSITE_BIT8       1B88
OPPOSITE_BIT9       1B98
OPPOSITE_CHECK      1A5A
OPPOSITE_CHECK_SECOND  1A6C
OPPOSITE_IS_USED    1A80
OPPOSITE_IS_USED_FIRST  1A76
OPPOSITE_JMP_TABLE_MOVEM  1AA8
OPPOSITE_LOOP       1A32
OPPOSITE_LOOP_MOVEM  1A52
OPPOSITE_LOOP_MOVEM_SECOND  1A64
OPPOSITE_PRINT_REGISTER_MOVEM  1A96
OR_CODE             17EC
OR_FIRST_EA         1838
OR_MESSAGE          3538
OUTPUTCOUNTCURR     0
OUTPUTCOUNTMAX      1F
PARSE_MEMORY        10F0
PARSE_MEMORY_FIRST  111C
PC_W_DISPLACEMENT   2550
PC_W_INDEX          2554
PERIOD              358A
PL                  21F8
POUND_SIGN          3586
PRESS_ENTER_CONTINUE  337E
PRINTADDQ           153A
PRINTOUT_COUNT      1FEE
PRINTOUT_MEMORY_SHIFTS_EA  2068
PRINTOUT_MOVE_EA    215A
PRINTOUT_NIBBLE     238C
PRINTOUT_NIBBLE_ZERO  23D2
PRINTOUT_REGISTER   2030
PRINTOUT_REGISTER_SHIFTS_EA  1FC0
PRINTOUT_SIZE_L     1286
PRINTOUT_SIZE_PURPLE  132C
PRINTOUT_SIZE_W     1274
PRINT_8             15A4
PRINT_ADDRESS       19F0
PRINT_B             1346
PRINT_BCC           2230
PRINT_BCS           2240
PRINT_BEQ           2260
PRINT_BGE           22B0
PRINT_BGT           22D0
PRINT_BHI           2210
PRINT_BLE           22E0
PRINT_BLS           2220
PRINT_BLT           22C0
PRINT_BMI           22A0
PRINT_BNE           2250
PRINT_BPL           2290
PRINT_BVC           2270
PRINT_BVS           2280
PRINT_COMMA         1376
PRINT_EA            23F4
PRINT_L             1366
PRINT_REGISTER_MOVEM  1C4C
PRINT_SIZE          174E
PRINT_SIZE_L_MOVEM  199A
PRINT_W             1356
PRINT_ZERO          23E6
REG000              2544
REG001              2548
REG010              253C
REG011              2540
REG100              254C
REGITSET_MEMORY     19B8
RESTART             33E4
ROD                 1EF4
ROD_MEMORY          1F52
ROL                 1F0E
ROL_MESSAGE         3564
ROR                 1F30
ROR_MESSAGE         3570
RO_IMMEDATE         0
RO_REGISTER         1
RTS_MESSAGE         34E1
RTS_OPCODE          16BC
SET_EA              1398
SHIFT               C
SHIFTS              1E26
SIZE_B              1786
SIZE_BYTE           0
SIZE_B_PRINT        3574
SIZE_L              179A
SIZE_LONG           3
SIZE_L_PRINT        3580
SIZE_W              1790
SIZE_WORD           1
SIZE_W_PRINT        357A
SLASH               358F
SPACE               358C
START               1000
STARTING            3433
STARTING_ADDR       33FA
STARTING_MESSAGE    100C
START_OF_PROGRAM    1000
STOP                33EA
STORE_ADDR          10B8
SUB                 15E0
SUB_FIRST_EA        1630
SUB_MESSAGE         353C
TERMINATED          35C8
VC                  21F0
VS                  21F4
WELCOME_MESSAGE     3402
XN_AL               1
XN_AS               0
XN_ID               4
XN_PCWD             2
XN_PCWI             3
