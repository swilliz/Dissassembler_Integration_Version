00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/2/16 5:29:45 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Dissassembler Integration
00000000                             3  * Written by : Samuel Williams
00000000                             4  * Date       : 5/25/2016
00000000                             5  * Description: The file which includes all files
00000000                             6  *              to create a complete dissassembler 
00000000                             7  *-----------------------------------------------------------
00001000                             8      ORG    $1000
00001000                             9  START:                  ; first instruction of program
00001000                            10      
00001000                            11      *INCLUDE 'TEST_CODE_DAMIAN.X68'
00001000                            12      INCLUDE 'EQU_Data.X68'
00001000                            13  
00001000                            14  
00001000  =00000008                 15  MAX_USER_INPUT  EQU 8 
00001000                            16  
00001000                            17  
00001000  =00000606                 18  example          EQU     %0000011000000110
00001000                            19  
00001000  =0000DE61                 20  example1         EQU     %1101111001100001    * I made up bits 0 to 11      
00001000                            21  
00001000  =0000000C                 22  shift            EQU     12                   * Shift 12 bits 
00001000                            23  
00001000  =00000000                 24  mode_dn          EQU     %000
00001000                            25  
00001000  =00000001                 26  mode_an          EQU     %001
00001000                            27  
00001000  =00000002                 28  mode_ian         EQU     %010
00001000                            29  
00001000  =00000003                 30  mode_pian        EQU     %011
00001000                            31  
00001000  =00000004                 32  mode_pdan        EQU     %100
00001000                            33  
00001000  =00000005                 34  mode_awd         EQU     %101
00001000                            35  
00001000  =00000006                 36  mode_awi         EQU     %110
00001000                            37  
00001000  =00000007                 38  mode_pcwd        EQU     %111
00001000                            39  
00001000  =00000002                 40  xn_pcwd          EQU     %010
00001000                            41  
00001000  =00000007                 42  mode_pcwi        EQU     %111
00001000                            43  
00001000  =00000003                 44  xn_pcwi          EQU     %011
00001000                            45  
00001000  =00000007                 46  mode_as          EQU     %111
00001000                            47  
00001000  =00000000                 48  xn_as            EQU     %000
00001000                            49  
00001000  =00000007                 50  mode_al          EQU     %111
00001000                            51  
00001000  =00000001                 52  xn_al            EQU     %001
00001000                            53  
00001000  =00000007                 54  mode_id          EQU     %111
00001000                            55  
00001000  =00000004                 56  xn_id            EQU     %100
00001000                            57  
00001000  =00000000                 58  size_byte        EQU     %00
00001000                            59  
00001000  =00000001                 60  size_word        EQU     %01
00001000                            61  
00001000  =00000003                 62  size_long        EQU     %11
00001000                            63  
00001000  =00000000                 64  direction_right  EQU     %0
00001000                            65  
00001000  =00000001                 66  direction_left   EQU     %1
00001000                            67  
00001000  =00000000                 68  ro_immedate      EQU     %0
00001000                            69  
00001000  =00000001                 70  ro_register      EQU     %1
00001000                            71  
00001000  =00000000                 72  mode_m_dn        EQU     %0
00001000                            73  
00001000  =00000001                 74  mode_m_pdan      EQU     %1
00001000                            75  
00001000  =0000001F                 76  outputCountMax   EQU     31
00001000                            77  
00001000  =00000000                 78  outputCountCurr  EQU     0
00001000                            79            
00001000  =0000000D                 80  CR  EQU $0D
00001000                            81  
00001000  =0000000A                 82  LF  EQU $0A
00001000                            83  
00001000                            84  
00001000                            85  
00001000                            86  
00001000                            87  
00001000                            88  
00001000                            89  -------------------- end include --------------------
00001000                            90      INCLUDE 'INPUT.X68'
00001000                            91      * I/O 
00001000                            92      
00001000                            93      * Welcome message
00001000  43F9 00002572             94          LEA WELCOME_MESSAGE, A1
00001006  103C 000E                 95          MOVE.B #14, D0
0000100A  4E4F                      96          TRAP #15
0000100C                            97          
0000100C                            98  STARTING_MESSAGE    
0000100C                            99      * Printing out the Starting address message
0000100C  43F9 000025A3            100          LEA STARTING, A1
00001012  103C 000E                101          MOVE.B #14, D0
00001016  4E4F                     102          TRAP #15
00001018                           103      
00001018                           104      * Code for input
00001018  227C 00000200            105          MOVEA.L #$200, A1 *we have to change this addr later
0000101E  103C 0002                106          MOVE.B #2, D0
00001022  4E4F                     107          TRAP #15
00001024  143C 0008                108          MOVE.B #MAX_USER_INPUT, D2
00001028                           109      
00001028                           110      * JSR to convert string function
00001028  4EB9 0000107E            111          JSR CONVERT_STRING   
0000102E                           112      * check if the address is even number
0000102E  E25C                     113          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001030  65DA                     114          BCS STARTING_MESSAGE   *if carry is set then the user typed in an odd address
00001032  E35C                     115          ROL #1, D4     *PUT D4 BACK
00001034                           116         
00001034                           117      * store hex value of inputted string 
00001034  23C4 0000256A            118          MOVE.L D4, STARTING_ADDR 
0000103A                           119      * reset the D4
0000103A  4284                     120          CLR.L  D4
0000103C                           121          
0000103C                           122  ENDING_MESSAGE
0000103C                           123      * message user to input
0000103C  43F9 000025C1            124          LEA ENDING, A1   
00001042  103C 000E                125          MOVE.B #14, D0
00001046  4E4F                     126          TRAP #15
00001048                           127      * read user input
00001048  227C 00000200            128          MOVEA.L #$200, A1 *we have to change this addr later
0000104E  103C 0002                129          MOVE.B #2, D0   
00001052  4E4F                     130          TRAP #15
00001054                           131      * counter for loop
00001054  143C 0008                132          MOVE.B #MAX_USER_INPUT, D2   
00001058                           133      * JSR to convert string function
00001058  4EB9 0000107E            134          JSR CONVERT_STRING 
0000105E                           135          
0000105E                           136      * check if the address is even number
0000105E  E25C                     137          ROR #1, D4   * C now holds 0 (if even) or 1 (if odd)
00001060  65DA                     138          BCS ENDING_MESSAGE   *if carry is set then the user typed in an odd address
00001062  E35C                     139          ROL #1, D4     *PUT D4 BACK        
00001064                           140          
00001064                           141      * Check if the starting and ending address is the same
00001064                           142         ; CMP.L #STARTING_ADDR, D4
00001064                           143         * MOVE.L #STARTING_ADDR, D5
00001064  2C39 0000256A            144          MOVE.L STARTING_ADDR, D6
0000106A  B886                     145          CMP.L  D6, D4
0000106C  6FCE                     146          BLE   ENDING_MESSAGE
0000106E                           147      * store hex value of inputted string   
0000106E  23C4 0000256E            148          MOVE.L D4, ENDING_ADDR   
00001074                           149          
00001074                           150      * clear the unused data in the data and address regisgter
00001074  4280                     151          CLR.L D0
00001076  4284                     152          CLR.L D4
00001078                           153          
00001078                           154          * Do error handling here Sam
00001078                           155          
00001078  4EF9 000010DC            156          JMP GO_THROUGH_MEMORY
0000107E                           157      
0000107E                           158      * Get each char
0000107E                           159  CONVERT_STRING 
0000107E  1219                     160          MOVE.B (A1)+, D1
00001080                           161      
00001080                           162      * Go to next instruction for converting
00001080  B23C 0039                163          CMP.B #$39, D1
00001084  6F00 000A                164          BLE NUMBER
00001088                           165          
00001088  B23C 003A                166          CMP.B #$3A, D1
0000108C  6C00 0012                167          BGE CHAR   
00001090                           168      
00001090                           169      * Convert Ascii numbers to hex
00001090                           170  NUMBER  
00001090  B23C 002F                171          CMP.B #$2F, D1
00001094                           172      * Number is out of range
00001094  6F00 0034                173          BLE ERROR       
00001098  0401 0030                174          SUB.B #48, D1
0000109C                           175          
0000109C                           176      * Need to be changed the name of label
0000109C  6000 001A                177          BRA STORE_ADDR    
000010A0                           178      
000010A0                           179      * Convert Ascii charaters to hex
000010A0                           180  CHAR    
000010A0  B27C 0040                181          CMP #$40, D1
000010A4                           182      * Number is out of range
000010A4  6F00 0024                183          BLE ERROR
000010A8                           184          
000010A8  B27C 0047                185          CMP #$47, D1
000010AC                           186      * Number is out of range
000010AC  6C00 001C                187          BGE ERROR
000010B0                           188          
000010B0  0401 0037                189          SUB.B #55, D1
000010B4  6000 0002                190          BRA STORE_ADDR
000010B8                           191          
000010B8                           192  STORE_ADDR
000010B8                           193      * Add converted nibble to overall number
000010B8  D801                     194          ADD.B D1, D4
000010BA                           195      * Clear D1 for reuse 
000010BA  4201                     196          CLR.B D1
000010BC                           197      * Subtract from counter
000010BC  5342                     198          SUB #1, D2
000010BE                           199      * If counter is 0, we compared all 8 hex numbers
000010BE  B43C 0000                200          CMP.B #0, D2
000010C2  6700 0016                201          BEQ ENDCONV
000010C6                           202      * Shift the overall number to the left by 1 nibble, so it will fit next hex number
000010C6  E98C                     203          LSL.L #4, D4
000010C8  60B4                     204          BRA CONVERT_STRING
000010CA                           205          
000010CA                           206      * Error handling
000010CA                           207  ERROR
000010CA  43F9 000025F0            208      LEA   ERROR_MSG, A1 
000010D0  103C 000E                209      MOVE.B #14, D0
000010D4  4E4F                     210      TRAP #15
000010D6  4EF8 100C                211      JMP   STARTING_MESSAGE
000010DA                           212  
000010DA                           213      
000010DA                           214  ENDCONV * Next instruction starts 
000010DA  4E75                     215          RTS
000010DC                           216         * MOVE.L D4, STARTING_ADDR 
000010DC                           217          
000010DC                           218  GO_THROUGH_MEMORY
000010DC                           219  
000010DC                           220  
000010DC                           221  
000010DC                           222  
000010DC                           223  
000010DC                           224  
000010DC                           225  
000010DC                           226  
000010DC                           227  
000010DC                           228  
000010DC                           229  
000010DC                           230  
000010DC                           231  
000010DC                           232  
000010DC                           233  
000010DC                           234  
000010DC                           235  
000010DC                           236  
000010DC                           237  
000010DC                           238  
000010DC                           239  
000010DC                           240  
000010DC                           241  
000010DC                           242  
000010DC                           243  
000010DC                           244  
000010DC                           245  -------------------- end include --------------------
000010DC                           246      INCLUDE 'MEMORY_PARSER.X68'
000010DC                           247  
000010DC  2A79 0000256A            248                  MOVEA.L   STARTING_ADDR, A5
000010E2  2C4D                     249                  MOVEA.L   A5, A6
000010E4  247C 0000001F            250                  MOVEA.L  #outputCountMax, A2
000010EA  267C 00000000            251                  MOVEA.L  #outputCountCurr, A3
000010F0                           252  PARSE_MEMORY      
000010F0  3A4E                     253                  MOVE.W   A6, A5
000010F2  43F9 0000262C            254                  LEA      CR_LF, A1
000010F8  103C 000E                255                  MOVE.B   #14, D0
000010FC  4E4F                     256                  TRAP #15  
000010FE                           257          
000010FE                           258  PARSE_MEMORY_FIRST    
000010FE  BBF9 0000256E            259                  CMPA.L   ENDING_ADDR, A5
00001104  6700 1460                260                  BEQ      STOP
00001108  301E                     261                  MOVE.W   (A6)+, D0
0000110A                           262                  
0000110A  B7FC 0000001F            263                  CMPA.L   #outputCountMax, A3
00001110  6700 142A                264                  BEQ       PRESS_ENTER_CONTINUE
00001114                           265  CONTINUE_PARSE
00001114  528B                     266                  ADDA.L    #1, A3
00001116                           267                  
00001116  4EF9 0000111C            268                  JMP      NEXT_INSTRUCTION
0000111C                           269                      
0000111C                           270  NEXT_INSTRUCTION
0000111C                           271                  INCLUDE 'JUMPTABLE DAMIAN-V1.X68'
0000111C                           272   
0000111C                           273  
0000111C  3015                     274                   MOVE.W  (A5),D0
0000111E                           275  
0000111E                           276  
0000111E                           277  
0000111E  41F9 00001136            278                   LEA     jmp_table,A0    *Index into the table
00001124                           279  
00001124  4280                     280                   CLR.L   D0              *Zero it
00001126                           281  
00001126  3015                     282                   MOVE.W  (A5),D0     *We'll play with it here
00001128                           283  
00001128  123C 000C                284                   MOVE.B  #shift,D1       *Shift 12 bits to the right  
0000112C                           285  
0000112C  E268                     286                   LSR.W   D1,D0           *Move the bits
0000112E                           287  
0000112E                           288  
0000112E                           289  
0000112E                           290  
0000112E                           291   
0000112E                           292  
0000112E  C0FC 0006                293                 MULU        #6,D0       *Form offset     
00001132                           294  
00001132  4EB0 0000                295                 JSR         0(A0,D0)   *Jump indirect with index
00001136                           296  
00001136                           297                      
00001136                           298  
00001136  4EF9 00001196            299  jmp_table      JMP         code0000
0000113C                           300  
0000113C  4EF9 0000119A            301                 JMP         code0001
00001142                           302  
00001142  4EF9 0000119E            303                 JMP         code0010
00001148                           304  
00001148  4EF9 000011A2            305                 JMP         code0011
0000114E                           306  
0000114E  4EF9 000011A6            307                 JMP         code0100
00001154                           308  
00001154  4EF9 000011AA            309                 JMP         code0101
0000115A                           310  
0000115A  4EF9 000011AE            311                 JMP         code0110
00001160                           312  
00001160  4EF9 000011B2            313                 JMP         code0111
00001166                           314  
00001166  4EF9 000011B6            315                 JMP         code1000
0000116C                           316  
0000116C  4EF9 000011BA            317                 JMP         code1001
00001172                           318  
00001172  4EF9 000011BE            319                 JMP         code1010
00001178                           320  
00001178  4EF9 000011C2            321                 JMP         code1011
0000117E                           322  
0000117E  4EF9 000011C6            323                 JMP         code1100
00001184                           324  
00001184  4EF9 000011CA            325                 JMP         code1101
0000118A                           326  
0000118A  4EF9 000011CE            327                 JMP         code1110
00001190                           328  
00001190  4EF9 000011D2            329                 JMP         code1111
00001196                           330  
00001196                           331          
00001196                           332  
00001196                           333   
00001196                           334  
00001196                           335  
00001196                           336   
00001196                           337  
00001196                           338   
00001196                           339  
00001196  6000 01D2                340  code0000       BRA         ADDI
0000119A                           341  
0000119A  6000 0E52                342  code0001       BRA         MOVEB
0000119E                           343  
0000119E  6000 0EA0                344  code0010       BRA         MOVEL
000011A2                           345  
000011A2  6000 0E68                346  code0011       BRA         MOVEW
000011A6                           347  
000011A6  6000 0612                348  code0100       BRA         GROUP_0100_CODE
000011AA                           349  
000011AA  6000 02C4                350  code0101       BRA         ADDQ   * Subroutine for ADDQ
000011AE                           351  
000011AE  6000 0F54                352  code0110       BRA         BCC
000011B2                           353  
000011B2  6000 0B62                354  code0111       BRA         MOVEQ
000011B6                           355  
000011B6  6000 0556                356  code1000       BRA         DIVU_OR
000011BA                           357  
000011BA  6000 03B2                358  code1001       BRA         SUB    * Subroutine for SUB
000011BE                           359  
000011BE  4E72 2700                360  code1010       STOP        #$2700
000011C2                           361  
000011C2                           362   
000011C2                           363  
000011C2                           364  
000011C2                           365  
000011C2                           366  
000011C2                           367   * another jump table to the 8 possible op-codes at the next level.
000011C2                           368  
000011C2                           369   
000011C2                           370  
000011C2  6000 037E                371  code1011       BRA        CMP  * Subroutuine for CMP
000011C6                           372  
000011C6  6000 0654                373  code1100       BRA        MULS_AND
000011CA                           374  
000011CA  6000 000A                375  code1101       BRA         ADD_ADDA       *#$2700
000011CE                           376  
000011CE  6000 0BAC                377  code1110       BRA         SHIFTS
000011D2                           378  
000011D2  4E72 2700                379  code1111       STOP        #$2700
000011D6                           380                   
000011D6                           381  
000011D6                           382                      
000011D6                           383              
000011D6                           384  
000011D6                           385  
000011D6                           386  
000011D6                           387  
000011D6                           388  
000011D6                           389  
000011D6                           390  
000011D6                           391  
000011D6                           392  
000011D6                           393  
000011D6                           394  
000011D6                           395  
000011D6                           396  
000011D6                           397  
000011D6                           398  
000011D6                           399  
000011D6                           400  
000011D6                           401  -------------------- end include --------------------
000011D6                           402                  INCLUDE 'ADD_ADDA.X68'
000011D6                           403    
000011D6                           404  
000011D6                           405          
000011D6                           406  
000011D6                           407                  * INCLUDE 'CMP.X68'
000011D6                           408                  * INCLUDE 'SUB.X68'
000011D6                           409                  * INCLUDE 'DIVU_OR.X68'
000011D6                           410                  * INCLUDE 'MULS_AND.X68'
000011D6                           411    
000011D6                           412  ADD_ADDA  *at this point we know the first 4 bits are 1101 -> ADD or ADDA -> compare the destination opmode
000011D6                           413                   
000011D6  4EB9 000012C0            414                   JSR      GET_SIZE_PURPLE
000011DC                           415                                              
000011DC  BA3C 0003                416                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is ADDA
000011E0                           417                   
000011E0  6700 0008                418                   BEQ      ADDA_CODE
000011E4                           419                   
000011E4  4EF9 00001258            420                   JMP      ADD_CODE
000011EA                           421                   
000011EA                           422  ADDA_CODE 
000011EA                           423                   * ADDA opcode message
000011EA  43F9 000026C6            424                   LEA ADDA_MESSAGE, A1
000011F0                           425                   
000011F0  103C 000E                426                   MOVE.B #14, D0
000011F4                           427                   
000011F4  4E4F                     428                   TRAP #15
000011F6                           429                   
000011F6  4285                     430                   CLR.L   D5         * clear for the size since this is not for the size purple
000011F8                           431                   
000011F8  4280                     432                   CLR.L D0                *clear D0
000011FA                           433                   
000011FA  4281                     434                   CLR.L D1                *clear D1
000011FC                           435                   
000011FC  3010                     436                   MOVE.W  (A0),D0     *D0 is the binary value to decode
000011FE                           437                   
000011FE  0800 0008                438                   BTST    #8, D0
00001202                           439                   
00001202  6700 0030                440                   BEQ     PRINTOUT_SIZE_W
00001206                           441                   
00001206  4EF9 00001246            442                   JMP     PRINTOUT_SIZE_L
0000120C                           443                   
0000120C                           444  FINISH_PRINTING_SIZE
0000120C                           445  
0000120C  4EB9 00001340            446                   JSR     Set_Ea
00001212                           447                   
00001212  4EB9 0000234A            448                   JSR     PRINT_EA *by using jmp table
00001218                           449                   
00001218  4EB9 00001320            450                   JSR     PRINT_COMMA
0000121E                           451                   
0000121E                           452                    * for the first Dn 
0000121E  4EB9 0000132E            453                   JSR     GET_Data_Register
00001224                           454                   
00001224  4286                     455                   CLR.L   D6
00001226                           456                   
00001226  1C3C 0001                457                   MOVE.B  #%001, D6 * for mode
0000122A                           458  
0000122A  4EB9 0000234A            459                   JSR     PRINT_EA *by using jmp table
00001230                           460  
00001230  4EF8 10F0                461                   JMP     PARSE_MEMORY
00001234                           462                   
00001234                           463  PRINTOUT_SIZE_W
00001234                           464                   
00001234  3A3C 0001                465                   MOVE    #%01, D5          
00001238                           466                   
00001238  43F9 000026F0            467                   LEA      SIZE_W_PRINT,    A1
0000123E                           468                   
0000123E  103C 000E                469                   MOVE.B   #14,             D0
00001242                           470          
00001242  4E4F                     471                   TRAP #15
00001244                           472                   
00001244  60C6                     473                   BRA     FINISH_PRINTING_SIZE
00001246                           474                   
00001246                           475  PRINTOUT_SIZE_L                           
00001246  3A3C 0002                476                   MOVE    #%10, D5          
0000124A                           477                   
0000124A  43F9 000026F6            478                   LEA      SIZE_L_PRINT,    A1
00001250                           479                   
00001250  103C 000E                480                   MOVE.B   #14,             D0 
00001254                           481         
00001254  4E4F                     482                   TRAP #15
00001256                           483                   
00001256  60B4                     484                   BRA     FINISH_PRINTING_SIZE
00001258                           485  
00001258                           486  ADD_CODE
00001258                           487                   * ADD message
00001258  43F9 000026C1            488                   LEA      ADD_MESSAGE,    A1
0000125E  103C 000E                489                   MOVE.B   #14,            D0
00001262  4E4F                     490                   TRAP #15
00001264                           491                   
00001264  4EB9 000012D6            492                   JSR     PRINTOUT_SIZE_PURPLE
0000126A                           493                   
0000126A                           494                   * check for dn and ea
0000126A  4280                     495                   CLR.L D0                *clear D0
0000126C                           496                   
0000126C  4281                     497                   CLR.L D1                *clear D1
0000126E                           498                   
0000126E  3015                     499                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001270                           500                   
00001270  0800 0008                501                   BTST    #8, D0
00001274                           502                   
00001274  6700 0028                503                   BEQ     ADD_FIRST_EA
00001278                           504                   
00001278                           505                   * for the first Dn 
00001278  4EB9 0000132E            506                   JSR     GET_Data_Register
0000127E                           507                   
0000127E  1C3C 0000                508                   MOVE.B  #%000, D6 * for mode
00001282                           509                   
00001282  4EB9 0000234A            510                   JSR     PRINT_EA *by using jmp table
00001288                           511                   
00001288  4EB9 00001320            512                   JSR     PRINT_COMMA
0000128E                           513                   
0000128E  4EB9 00001340            514                   JSR     Set_Ea
00001294                           515                   
00001294  4EB9 0000234A            516                   JSR     PRINT_EA *by using jmp table
0000129A                           517                   
0000129A  4EF8 10F0                518                   JMP     PARSE_MEMORY
0000129E                           519                   
0000129E                           520  ADD_FIRST_EA
0000129E  4EB9 00001340            521                   JSR     Set_Ea
000012A4                           522                   
000012A4  4EB9 0000234A            523                   JSR     PRINT_EA *by using jmp table
000012AA                           524                   
000012AA  4EB9 00001320            525                   JSR     PRINT_COMMA
000012B0                           526                   
000012B0                           527                    * for the first Dn 
000012B0  4EB9 0000132E            528                   JSR     GET_Data_Register
000012B6                           529                   
000012B6  1C3C 0000                530                   MOVE.B  #%000, D6 * for mode
000012BA                           531  
000012BA  4EB9 0000234A            532                   JSR     PRINT_EA *by using jmp table
000012C0                           533                   
000012C0                           534                   
000012C0                           535  GET_SIZE_PURPLE * get the op-code 
000012C0                           536  
000012C0  4280                     537                   CLR.L D0                *clear D0
000012C2                           538                   
000012C2  4281                     539                   CLR.L D1                *clear D1
000012C4                           540                   
000012C4  3015                     541                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000012C6                           542  
000012C6  123C 0008                543                   MOVE.B  #8,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000012CA                           544  
000012CA  E368                     545                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000012CC                           546                   
000012CC  123C 000E                547                   MOVE.B  #14,D1          *14 bits is the number of times to shift to hold the mode number
000012D0                           548  
000012D0  E268                     549                   LSR.W   D1,D0           *Shift the bits 14 times -> D0 now holds the mode number
000012D2                           550                   
000012D2  1A00                     551                   MOVE.B  D0, D5          *push the size to the Data register 5 for the future use
000012D4                           552                   
000012D4  4E75                     553                   RTS 
000012D6                           554  
000012D6                           555  PRINTOUT_SIZE_PURPLE * get the size for ADDI, CLR, ADDQ, OR, SUB, CMP, AND, ADD
000012D6                           556                       
000012D6  BA7C 0000                557                   CMP    #%00, D5          
000012DA                           558                   
000012DA  6700 0014                559                   BEQ    PRINT_B
000012DE                           560                   
000012DE  BA7C 0001                561                   CMP    #%01, D5          
000012E2                           562                   
000012E2  6700 001C                563                   BEQ    PRINT_W
000012E6                           564                   
000012E6  BA7C 0002                565                   CMP    #%10, D5          
000012EA                           566                   
000012EA  6700 0024                567                   BEQ    PRINT_L
000012EE                           568                   
000012EE                           569  DONE_PRINTING
000012EE  4E75                     570                   RTS 
000012F0                           571                   
000012F0                           572  PRINT_B          
000012F0  43F9 000026EA            573                   LEA      SIZE_B_PRINT,    A1
000012F6  103C 000E                574                   MOVE.B   #14,            D0          
000012FA  4E4F                     575                   TRAP #15
000012FC                           576  
000012FC  4EF8 12EE                577                   JMP      DONE_PRINTING
00001300                           578                   
00001300                           579  PRINT_W     
00001300  43F9 000026F0            580                   LEA      SIZE_W_PRINT,    A1
00001306  103C 000E                581                   MOVE.B   #14,             D0          
0000130A  4E4F                     582                   TRAP #15
0000130C                           583  
0000130C  4EF8 12EE                584                   JMP      DONE_PRINTING
00001310                           585  
00001310                           586  
00001310                           587  PRINT_L          
00001310  43F9 000026F6            588                   LEA      SIZE_L_PRINT,    A1
00001316  103C 000E                589                   MOVE.B   #14,             D0          
0000131A  4E4F                     590                   TRAP #15   
0000131C                           591                      
0000131C  4EF8 12EE                592                   JMP    DONE_PRINTING
00001320                           593                   
00001320                           594  PRINT_COMMA
00001320                           595  
00001320  43F9 0000271C            596                   LEA COMMA, A1
00001326  103C 000E                597                   MOVE.B #14, D0
0000132A  4E4F                     598                   TRAP #15
0000132C                           599                   
0000132C  4E75                     600                   RTS
0000132E                           601                   
0000132E                           602  GET_Data_Register
0000132E  4280                     603                   CLR.L D0                *clear D0
00001330                           604                   
00001330  4281                     605                   CLR.L D1                *clear D1
00001332                           606                   
00001332  3015                     607                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001334                           608  
00001334  E948                     609                   LSL.W   #4,D0           *Shift the bits 4 times -> D0 now removes the opcode & reg#
00001336                           610                   
00001336  123C 000D                611                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
0000133A                           612  
0000133A  E268                     613                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
0000133C                           614  
0000133C  1E00                     615                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
0000133E                           616                   
0000133E  4E75                     617                   RTS
00001340                           618                   
00001340                           619  Set_Ea
00001340                           620  
00001340                           621                   * set register
00001340  4280                     622                   CLR.L D0                *clear D0
00001342                           623                   
00001342  4281                     624                   CLR.L D1                *clear D1
00001344                           625                   
00001344  3015                     626                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001346                           627                 
00001346  123C 000D                628                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000134A                           629  
0000134A  E368                     630                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000134C                           631  
0000134C  123C 000D                632                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001350                           633  
00001350  E268                     634                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001352                           635  
00001352  1E00                     636                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00001354                           637                   
00001354                           638                   * set mode
00001354  4280                     639                   CLR.L D0                *clear D0
00001356                           640                   
00001356  4281                     641                   CLR.L D1                *clear D1
00001358                           642                   
00001358  3015                     643                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000135A                           644                 
0000135A  123C 000A                645                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000135E                           646  
0000135E  E368                     647                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
00001360                           648  
00001360  123C 000D                649                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001364                           650  
00001364  E268                     651                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001366                           652  
00001366  1C00                     653                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
00001368                           654                   
00001368  4E75                     655                   RTS
0000136A                           656                   
0000136A                           657                  
0000136A                           658  
0000136A                           659  
0000136A                           660  
0000136A                           661  
0000136A                           662  
0000136A                           663  
0000136A                           664  
0000136A                           665  
0000136A                           666  
0000136A                           667  
0000136A                           668  
0000136A                           669  
0000136A                           670  
0000136A                           671  
0000136A                           672  
0000136A                           673  
0000136A                           674  
0000136A                           675  
0000136A                           676  -------------------- end include --------------------
0000136A                           677                  INCLUDE 'ADDI.X68'
0000136A                           678    
0000136A                           679  ADDI           * first check the first 4 bits after the op-code
0000136A  4280                     680                 CLR.L       D0
0000136C                           681  
0000136C  4281                     682                 CLR.L       D1
0000136E                           683                 
0000136E  3015                     684                 MOVE.W      (A5),D0
00001370                           685                 
00001370  123C 0008                686                 MOVE.B      #8, D1 * for shifting to the right by 8 bits
00001374                           687                 
00001374  E268                     688                 LSR.W       D1, D0
00001376                           689                 
00001376  B07C 0006                690                 CMP.W       #6, D0 * checking the first 4 bits 
0000137A                           691                 
0000137A  6600 FD4E                692                 BNE         ERROR  * go to error 
0000137E                           693                 
0000137E                           694                 * print the op-code 
0000137E  4280                     695                 CLR.L       D0
00001380                           696  
00001380  4281                     697                 CLR.L       D1
00001382                           698                 
00001382  43F9 0000262F            699                 LEA         ADDI_MESSAGE, A1    * NOTE - how do you know this is of size B ????? 
00001388                           700                 
00001388  103C 000E                701                 MOVE.B      #14, D0
0000138C                           702                 
0000138C  4E4F                     703                 TRAP #15
0000138E                           704                                
0000138E                           705                 * print the size
0000138E  4280                     706                 CLR.L       D0
00001390                           707  
00001390  4281                     708                 CLR.L       D1
00001392                           709                 
00001392  3015                     710                 MOVE.W      (A5),D0
00001394                           711                
00001394  E148                     712                 LSL.W       #8, D0
00001396                           713  
00001396  123C 000E                714                 MOVE.B      #14, D1 * for shifting to the right by 8 bits
0000139A                           715                 
0000139A  E268                     716                 LSR.W       D1, D0
0000139C                           717                 
0000139C                           718                 * D1 holds the size
0000139C                           719    *             CLR.L       D1
0000139C                           720                 
0000139C                           721    *             MOVE.B      D0, D1
0000139C                           722                   
0000139C  B03C 0000                723                 CMP.B       #%00, D0
000013A0                           724                 
000013A0  6700 0038                725                 BEQ         ADDI_B_SIZE
000013A4                           726                 
000013A4  B03C 0001                727                 CMP.B       #%01, D0
000013A8                           728                 
000013A8  6700 0060                729                 BEQ         ADDI_W_SIZE
000013AC                           730                 
000013AC                           731                 *print size L
000013AC  43F9 000026F6            732                 LEA         SIZE_L_PRINT, A1     
000013B2                           733                 
000013B2  103C 000E                734                 MOVE.B      #14, D0
000013B6                           735                 
000013B6  4E4F                     736                 TRAP #15
000013B8                           737                 
000013B8                           738                * print out pound sign and hex sign
000013B8  43F9 000026FC            739                 LEA     POUND_SIGN, A1
000013BE                           740              
000013BE  103C 000E                741                 MOVE.B  #14, D0
000013C2                           742              
000013C2  4E4F                     743                 TRAP #15
000013C4                           744              
000013C4  43F9 000026FE            745                 LEA     HEX_SIGN, A1
000013CA                           746              
000013CA  4E4F                     747                 TRAP #15
000013CC                           748                 
000013CC  4285                     749                 CLR.L  D5
000013CE                           750          
000013CE  2A1E                     751                 MOVE.L (A6)+, D5 * we mimght change it later
000013D0                           752          
000013D0  4EB9 000022AC            753                 JSR  HEX_TO_ASCII
000013D6                           754                 
000013D6  6000 0062                755                 BRA         ADDI_EA   
000013DA                           756                      
000013DA                           757  ADDI_B_SIZE
000013DA  43F9 000026EA            758                 LEA         SIZE_B_PRINT, A1     
000013E0                           759                 
000013E0  103C 000E                760                 MOVE.B      #14, D0
000013E4                           761                 
000013E4  4E4F                     762                 TRAP #15
000013E6                           763                 
000013E6                           764                * print out pound sign and hex sign
000013E6  43F9 000026FC            765                 LEA     POUND_SIGN, A1
000013EC                           766              
000013EC  103C 000E                767                 MOVE.B  #14, D0
000013F0                           768              
000013F0  4E4F                     769                 TRAP #15
000013F2                           770              
000013F2  43F9 000026FE            771                 LEA     HEX_SIGN, A1
000013F8                           772              
000013F8  4E4F                     773                 TRAP #15
000013FA                           774                 
000013FA  4280                     775                 CLR.L D0
000013FC                           776  
000013FC  301E                     777                 MOVE.W (A6)+, D0 * we mimght change it later
000013FE                           778                 
000013FE  1A00                     779                 MOVE.B D0, D5
00001400                           780     
00001400  4EB9 000022AC            781                 JSR  HEX_TO_ASCII
00001406                           782                 
00001406  6000 0032                783                 BRA         ADDI_EA 
0000140A                           784                  
0000140A                           785  
0000140A                           786  ADDI_W_SIZE
0000140A  43F9 000026F0            787                 LEA         SIZE_W_PRINT, A1     
00001410                           788                 
00001410  103C 000E                789                 MOVE.B      #14, D0
00001414                           790                 
00001414  4E4F                     791                 TRAP #15
00001416                           792                 
00001416                           793                 * print out pound sign and hex sign
00001416  43F9 000026FC            794                 LEA     POUND_SIGN, A1
0000141C                           795              
0000141C  103C 000E                796                 MOVE.B  #14, D0
00001420                           797              
00001420  4E4F                     798                 TRAP #15
00001422                           799              
00001422  43F9 000026FE            800                 LEA     HEX_SIGN, A1
00001428                           801              
00001428  4E4F                     802                 TRAP #15
0000142A                           803  
0000142A  4285                     804                 CLR.L  D5
0000142C                           805          
0000142C  3A1E                     806                 MOVE.W (A6)+, D5
0000142E                           807          
0000142E  4EB9 000022AC            808                 JSR  HEX_TO_ASCII
00001434                           809          
00001434  4EF9 0000143A            810                 JMP  ADDI_EA
0000143A                           811  
0000143A                           812  
0000143A                           813  ADDI_EA      
0000143A  4EB8 1320                814                  JSR     PRINT_COMMA
0000143E                           815                  
0000143E  4280                     816                  CLR.L   D0
00001440                           817                  
00001440  4281                     818                  CLR.L   D1
00001442                           819                  
00001442                           820                  * set register
00001442                           821                   
00001442  3015                     822                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001444                           823                 
00001444  123C 000D                824                   MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
00001448                           825  
00001448  E368                     826                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000144A                           827  
0000144A  123C 000D                828                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
0000144E                           829  
0000144E  E268                     830                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001450                           831  
00001450  1E00                     832                   MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
00001452                           833                   
00001452                           834                   * set mode
00001452  4280                     835                   CLR.L D0                *clear D0
00001454                           836                   
00001454  4281                     837                   CLR.L D1                *clear D1
00001456                           838                   
00001456  3015                     839                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001458                           840                 
00001458  123C 000A                841                   MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
0000145C                           842  
0000145C  E368                     843                   LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
0000145E                           844  
0000145E  123C 000D                845                   MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
00001462                           846  
00001462  E268                     847                   LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
00001464                           848  
00001464  1C00                     849                   MOVE.B  D0, D6          *put D0 to data register into D7 for future printing
00001466                           850  
00001466                           851   
00001466                           852                 * JSR     Set_Ea
00001466                           853                   
00001466  4EB9 0000234A            854                  JSR     PRINT_EA *by using jmp table
0000146C                           855                  
0000146C  4EF8 10F0                856                  JMP     PARSE_MEMORY
00001470                           857                  
00001470                           858                  
00001470                           859                   
00001470                           860                   
00001470                           861  
00001470                           862  
00001470                           863                 
00001470                           864  
00001470                           865  
00001470                           866  
00001470                           867  
00001470                           868  
00001470                           869  
00001470                           870  
00001470                           871  
00001470                           872  
00001470                           873  
00001470                           874  
00001470                           875  
00001470                           876  
00001470                           877  
00001470                           878  
00001470                           879  
00001470                           880  
00001470                           881  
00001470                           882  
00001470                           883  
00001470                           884  
00001470                           885  
00001470                           886  
00001470                           887  
00001470                           888  
00001470                           889  -------------------- end include --------------------
00001470                           890                  INCLUDE 'ADDQ.X68'
00001470                           891  
00001470                           892  
00001470                           893  ADDQ
00001470                           894  
00001470  43F9 00002659            895      LEA ADDQ_MESSAGE, A1  *print ADDQ
00001476                           896                   
00001476  103C 000E                897      MOVE.B #14, D0
0000147A                           898                   
0000147A  4E4F                     899      TRAP #15
0000147C                           900      
0000147C  3015                     901      MOVE.W (A5), D0
0000147E                           902      
0000147E  123C 0008                903      MOVE.B  #8,D1     
00001482                           904  
00001482  E368                     905      LSL.W   D1,D0
00001484                           906                   
00001484  123C 000E                907      MOVE.B  #14,D1
00001488                           908  
00001488  E268                     909      LSR.W   D1,D0  *DO now holds size
0000148A                           910                                              
0000148A  B03C 0002                911      CMP.B    #$2, D0        *if D0 holds 2, size is L
0000148E                           912      
0000148E  6700 003A                913      BEQ      ADDQL
00001492                           914                   
00001492  B03C 0001                915      CMP.B    #$1, D0        *if D0 holds 1, size is W
00001496                           916                                   
00001496  6700 001C                917      BEQ      ADDQW
0000149A                           918  
0000149A  6000 0002                919      BRA      ADDQB
0000149E                           920  
0000149E                           921  ADDQB  *Print B
0000149E                           922  
0000149E  43F9 000026EA            923      LEA SIZE_B_PRINT, A1  *print B
000014A4                           924                   
000014A4  103C 000E                925      MOVE.B #14, D0
000014A8                           926                   
000014A8  4E4F                     927      TRAP #15
000014AA                           928      
000014AA  1A3C 0000                929      MOVE.B #%00, D5
000014AE                           930      
000014AE  4EF9 000014E0            931      JMP PRINTADDQ
000014B4                           932      
000014B4                           933  ADDQW  *Print W
000014B4                           934  
000014B4  43F9 000026F0            935      LEA SIZE_W_PRINT, A1  *print W
000014BA                           936                   
000014BA  103C 000E                937      MOVE.B #14, D0
000014BE                           938                                    
000014BE  4E4F                     939      TRAP #15
000014C0                           940      
000014C0  1A3C 0001                941      MOVE.B #%01, D5
000014C4                           942  
000014C4  4EF9 000014E0            943      JMP PRINTADDQ
000014CA                           944  
000014CA                           945  ADDQL   *Print L
000014CA                           946  
000014CA  43F9 000026F6            947      LEA SIZE_L_PRINT, A1  *print L
000014D0                           948                   
000014D0  103C 000E                949      MOVE.B #14, D0
000014D4                           950                   
000014D4  4E4F                     951      TRAP #15
000014D6                           952  
000014D6  1A3C 0002                953      MOVE.B #%10, D5
000014DA                           954      
000014DA  4EF9 000014E0            955      JMP PRINTADDQ
000014E0                           956      
000014E0                           957  PRINTADDQ
000014E0                           958  
000014E0  43F9 000026FC            959      LEA POUND_SIGN, A1  *print W
000014E6                           960                   
000014E6  103C 000E                961      MOVE.B #14, D0
000014EA                           962                                    
000014EA  4E4F                     963      TRAP #15
000014EC                           964      
000014EC  3015                     965      MOVE.W (A5), D0
000014EE                           966  
000014EE  123C 0004                967      MOVE.B  #4,D1     
000014F2                           968  
000014F2  E368                     969      LSL.W   D1,D0
000014F4                           970                   
000014F4  123C 000D                971      MOVE.B  #13,D1
000014F8                           972  
000014F8  E268                     973      LSR.W   D1,D0  *D0 now holds Dn
000014FA                           974      
000014FA  4281                     975      CLR.L D1
000014FC                           976                                              
000014FC  3200                     977      MOVE.W D0, D1 *D6 holds Dn   
000014FE                           978  
000014FE  103C 0003                979      MOVE.B #3, D0
00001502                           980                 
00001502  4E4F                     981      TRAP #15
00001504                           982      
00001504  43F9 0000271C            983      LEA COMMA, A1  *print W
0000150A                           984                   
0000150A  103C 000E                985      MOVE.B #14, D0
0000150E                           986                                    
0000150E  4E4F                     987      TRAP #15
00001510                           988      
00001510  4286                     989      CLR.L D6
00001512                           990      
00001512  4287                     991      CLR.L D7
00001514                           992      
00001514  3015                     993      MOVE.W (A5), D0
00001516                           994  
00001516  123C 000A                995      MOVE.B  #10,D1     
0000151A                           996  
0000151A  E368                     997      LSL.W   D1,D0
0000151C                           998                   
0000151C  123C 000D                999      MOVE.B  #13,D1
00001520                          1000  
00001520  E268                    1001      LSR.W   D1,D0  *D0 now holds MODE
00001522                          1002                                              
00001522  3C00                    1003      MOVE.W D0, D6 *D6 holds mode
00001524                          1004      
00001524  4281                    1005      CLR.L D1
00001526                          1006      
00001526  4280                    1007      CLR.L D0
00001528                          1008      
00001528  3015                    1009      MOVE.W (A5), D0
0000152A                          1010  
0000152A  123C 000D               1011      MOVE.B  #13,D1     
0000152E                          1012  
0000152E  E368                    1013      LSL.W   D1,D0
00001530                          1014                   
00001530  123C 000D               1015      MOVE.B  #13,D1
00001534                          1016  
00001534  E268                    1017      LSR.W   D1,D0  *D0 now holds MODE
00001536                          1018                                              
00001536  3E00                    1019      MOVE.W D0, D7 *D6 holds Register   
00001538                          1020      
00001538  4EB9 0000234A           1021      JSR PRINT_EA
0000153E                          1022      
0000153E  6000 FBB0               1023      BRA PARSE_MEMORY
00001542                          1024  
00001542                          1025      
00001542                          1026  
00001542                          1027  
00001542                          1028  
00001542                          1029  
00001542                          1030  
00001542                          1031  
00001542                          1032  
00001542                          1033  
00001542                          1034  
00001542                          1035  
00001542                          1036  
00001542                          1037  
00001542                          1038  
00001542                          1039  -------------------- end include --------------------
00001542                          1040                  INCLUDE 'CMP.X68'
00001542                          1041     
00001542                          1042  CMP
00001542                          1043                   * ADD message
00001542  43F9 000026B1           1044                   LEA      CMP_MESSAGE,    A1
00001548  103C 000E               1045                   MOVE.B   #14,            D0
0000154C  4E4F                    1046                   TRAP #15
0000154E                          1047                   
0000154E  4EB8 12D6               1048                   JSR     PRINTOUT_SIZE_PURPLE
00001552                          1049                   
00001552                          1050                   
00001552  4EB8 1340               1051                   JSR     Set_Ea
00001556                          1052                   
00001556  4EB9 0000234A           1053                   JSR     PRINT_EA *by using jmp table
0000155C                          1054                   
0000155C  4EB8 1320               1055                   JSR     PRINT_COMMA
00001560                          1056                   
00001560                          1057                    * for the first Dn 
00001560  4EB8 132E               1058                   JSR     GET_Data_Register
00001564                          1059                   
00001564  1C3C 0000               1060                   MOVE.B  #%000, D6 * for mode
00001568                          1061  
00001568  4EB9 0000234A           1062                   JSR     PRINT_EA *by using jmp table
0000156E                          1063                   
0000156E                          1064   *                JMP     NEXT
0000156E                          1065  
0000156E                          1066  
0000156E                          1067  
0000156E                          1068  -------------------- end include --------------------
0000156E                          1069                  INCLUDE 'SUB.X68'
0000156E                          1070  
0000156E                          1071  SUB
0000156E                          1072                   * ADD message
0000156E  43F9 000026AC           1073                   LEA      SUB_MESSAGE,    A1
00001574  103C 000E               1074                   MOVE.B   #14,            D0
00001578  4E4F                    1075                   TRAP #15
0000157A                          1076                   
0000157A  4EB8 12D6               1077                   JSR     PRINTOUT_SIZE_PURPLE
0000157E                          1078                   
0000157E                          1079                   
0000157E  4280                    1080                   CLR.L D0                *clear D0
00001580                          1081                   
00001580  4281                    1082                   CLR.L D1                *clear D1
00001582                          1083                   
00001582  3015                    1084                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001584                          1085                   
00001584  0800 0008               1086                   BTST    #8, D0
00001588                          1087                   
00001588  6700 001E               1088                   BEQ     SUB_FIRST_EA
0000158C                          1089                   
0000158C                          1090                   * for the first Dn 
0000158C  4EB8 132E               1091                   JSR     GET_Data_Register
00001590                          1092                   
00001590  1C3C 0000               1093                   MOVE.B  #%000, D6 * for mode
00001594                          1094                   
00001594  4EB9 0000234A           1095                   JSR     PRINT_EA *by using jmp table
0000159A                          1096                   
0000159A  4EB8 1320               1097                   JSR     PRINT_COMMA
0000159E                          1098                   
0000159E  4EB8 1340               1099                   JSR     Set_Ea
000015A2                          1100                   
000015A2  4EB9 0000234A           1101                   JSR     PRINT_EA *by using jmp table
000015A8                          1102                   
000015A8                          1103                   
000015A8                          1104  SUB_FIRST_EA
000015A8  4EB8 1340               1105                   JSR     Set_Ea
000015AC                          1106                   
000015AC  4EB9 0000234A           1107                   JSR     PRINT_EA *by using jmp table
000015B2                          1108                   
000015B2  4EB8 1320               1109                   JSR     PRINT_COMMA
000015B6                          1110                   
000015B6                          1111                    * for the first Dn 
000015B6  4EB8 132E               1112                   JSR     GET_Data_Register
000015BA                          1113                   
000015BA  1C3C 0000               1114                   MOVE.B  #%000, D6 * for mode
000015BE                          1115  
000015BE  4EB9 0000234A           1116                   JSR     PRINT_EA *by using jmp table
000015C4                          1117                   
000015C4                          1118  
000015C4                          1119  
000015C4                          1120  
000015C4                          1121  -------------------- end include --------------------
000015C4                          1122                  INCLUDE 'TRYING_NOP.X68'
000015C4                          1123  
000015C4                          1124      
000015C4                          1125   
000015C4                          1126      *MOVE.W  #$4E75, D2          * hardcodiing nop
000015C4                          1127  
000015C4                          1128     * CMP.L       #$4E71, D2      * has to be NOP
000015C4                          1129      *
000015C4                          1130     * BEQ         NOP_OPCODE
000015C4                          1131      
000015C4                          1132     * CMP.L       #$4E75, D2      * has to be RTS
000015C4                          1133      
000015C4                          1134    *  BEQ         RTS_OPCODE
000015C4                          1135     *BRA CLR_OPCODE  
000015C4                          1136  LEA_OPCODE
000015C4                          1137      
000015C4  43F9 0000265F           1138      LEA         LEA_MESSAGE, A1     * print out message for 'NOP'
000015CA                          1139      
000015CA  103C 000E               1140      MOVE.B      #14, D0
000015CE                          1141      
000015CE  4E4F                    1142      TRAP #15  
000015D0                          1143      
000015D0  3015                    1144      MOVE.W  (A5),D0     *D0 is the binary value to decode
000015D2                          1145      
000015D2  123C 000D               1146      MOVE.B  #13,D1     
000015D6                          1147  
000015D6  E368                    1148      LSL.W   D1,D0
000015D8                          1149                   
000015D8  123C 000D               1150      MOVE.B  #13,D1
000015DC                          1151  
000015DC  E268                    1152      LSR.W   D1,D0  *D0 now holds Register
000015DE                          1153                                              
000015DE  3E00                    1154      MOVE.W D0, D7 *D7 holds Register  
000015E0                          1155  
000015E0  3015                    1156      MOVE.W  (A5),D0     *D0 is the binary value to decode
000015E2                          1157  
000015E2  123C 000A               1158      MOVE.B  #10,D1     
000015E6                          1159  
000015E6  E368                    1160      LSL.W   D1,D0
000015E8                          1161                   
000015E8  123C 000D               1162      MOVE.B  #13,D1
000015EC                          1163  
000015EC  E268                    1164      LSR.W   D1,D0  *D0 now holds MODE
000015EE                          1165                                              
000015EE  3C00                    1166      MOVE.W D0, D6 *D6 holds MODE  
000015F0                          1167      
000015F0  4EB9 0000234A           1168      JSR PRINT_EA
000015F6                          1169  
000015F6  43F9 0000271C           1170      LEA         COMMA, A1     * print out message for 'NOP'
000015FC                          1171      
000015FC  103C 000E               1172      MOVE.B      #14, D0
00001600                          1173      
00001600  4E4F                    1174      TRAP #15 
00001602                          1175                                    
00001602  3015                    1176      MOVE.W  (A5),D0     *D0 is the binary value to decode 
00001604                          1177  
00001604  7C01                    1178      MOVE.L #%001, D6
00001606                          1179  
00001606  123C 0004               1180      MOVE.B  #4,D1     
0000160A                          1181  
0000160A  E368                    1182      LSL.W   D1,D0
0000160C                          1183                   
0000160C  123C 000D               1184      MOVE.B  #13,D1
00001610                          1185  
00001610  E268                    1186      LSR.W   D1,D0  
00001612                          1187                                              
00001612  3E00                    1188      MOVE.W D0, D7 
00001614                          1189      
00001614  4EB9 0000234A           1190      JSR PRINT_EA
0000161A                          1191      
0000161A  4EF8 10F0               1192      JMP     PARSE_MEMORY       
0000161E                          1193            
0000161E                          1194  NOP_OPCODE
0000161E  43F9 00002642           1195      LEA         NOP_MESSAGE, A1     * print out message for 'NOP'
00001624                          1196      
00001624  103C 000E               1197      MOVE.B      #14, D0
00001628                          1198      
00001628  4E4F                    1199      TRAP #15
0000162A                          1200      
0000162A  6000 FAC4               1201      BRA PARSE_MEMORY
0000162E                          1202  RTS_OPCODE 
0000162E  43F9 00002651           1203      LEA         RTS_MESSAGE, A1     * print out message for 'RTS'
00001634                          1204      
00001634  103C 000E               1205      MOVE.B      #14, D0
00001638                          1206      
00001638  4E4F                    1207      TRAP #15
0000163A                          1208      
0000163A  6000 FAB4               1209      BRA PARSE_MEMORY
0000163E                          1210      
0000163E                          1211  JSR_OPCODE 
0000163E  43F9 0000264D           1212      LEA         JSR_MESSAGE, A1     * print out message for 'JSR'
00001644                          1213      
00001644  103C 000E               1214      MOVE.B      #14, D0
00001648                          1215      
00001648  4E4F                    1216      TRAP #15
0000164A                          1217      
0000164A  2002                    1218      MOVE.L D2, D0
0000164C                          1219  
0000164C  123C 000D               1220      MOVE.B  #13,D1     
00001650                          1221  
00001650  E368                    1222      LSL.W   D1,D0
00001652                          1223                   
00001652  123C 000D               1224      MOVE.B  #13,D1
00001656                          1225  
00001656  E268                    1226      LSR.W   D1,D0  *D0 now holds Register
00001658                          1227                                              
00001658  3E00                    1228      MOVE.W D0, D7 *D7 holds Register  
0000165A                          1229  
0000165A  2002                    1230      MOVE.L D2, D0
0000165C                          1231  
0000165C  123C 000A               1232      MOVE.B  #10,D1     
00001660                          1233  
00001660  E368                    1234      LSL.W   D1,D0
00001662                          1235                   
00001662  123C 000D               1236      MOVE.B  #13,D1
00001666                          1237  
00001666  E268                    1238      LSR.W   D1,D0  *D0 now holds MODE
00001668                          1239                                              
00001668  3C00                    1240      MOVE.W D0, D6 *D6 holds MODE  
0000166A                          1241      
0000166A  4EB9 0000234A           1242      JSR PRINT_EA
00001670                          1243      
00001670  6000 FA7E               1244      BRA PARSE_MEMORY
00001674                          1245         
00001674                          1246  CLR_OPCODE 
00001674  43F9 00002655           1247      LEA         CLR_MESSAGE, A1     * print out message for 'CLR'
0000167A                          1248      
0000167A  103C 000E               1249      MOVE.B      #14, D0
0000167E                          1250      
0000167E  4E4F                    1251      TRAP #15
00001680                          1252                     
00001680  43F9 00002700           1253      LEA      PERIOD, A1
00001686                          1254      
00001686  103C 000E               1255      MOVE.B   #14, D0
0000168A                          1256      
0000168A  4E4F                    1257      TRAP #15 
0000168C                          1258                
0000168C  3015                    1259      MOVE.W      (A5), D0
0000168E                          1260               
0000168E  123C 0006               1261      MOVE.B      #6, D1
00001692                          1262                 
00001692  E268                    1263      LSR.W       D1, D0  *shift right 6 
00001694                          1264                 
00001694  123C 000E               1265      MOVE.B      #14, D1
00001698                          1266                 
00001698  E368                    1267      LSL.W       D1, D0  *shift left 15, only size is left
0000169A                          1268      
0000169A  123C 000E               1269      MOVE.B      #14, D1
0000169E                          1270                 
0000169E  E268                    1271      LSR.W       D1, D0  *shift right 15, size is left   
000016A0                          1272      
000016A0  B07C 0000               1273      CMP.W       #00, D0
000016A4                          1274  
000016A4  6700 004A               1275      BEQ         SIZE_B
000016A8                          1276      
000016A8  B07C 0001               1277      CMP.W       #01, D0
000016AC                          1278                 
000016AC  6700 004C               1279      BEQ         SIZE_W 
000016B0                          1280      
000016B0  B07C 0002               1281      CMP.W       #2, D0
000016B4                          1282                 
000016B4  6700 004E               1283      BEQ         SIZE_L
000016B8                          1284  
000016B8                          1285  PRINT_SIZE
000016B8                          1286  
000016B8  103C 000E               1287      MOVE.B      #14, D0
000016BC                          1288      
000016BC  4E4F                    1289      TRAP #15
000016BE                          1290  
000016BE  4280                    1291      CLR.L   D0
000016C0                          1292                  
000016C0  4281                    1293      CLR.L   D1
000016C2                          1294                       * set register
000016C2                          1295                   
000016C2  3015                    1296      MOVE.W  (A5),D0     *D0 is the binary value to decode
000016C4                          1297                 
000016C4  123C 000D               1298      MOVE.B  #13,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000016C8                          1299  
000016C8  E368                    1300      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000016CA                          1301  
000016CA  123C 000D               1302      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000016CE                          1303  
000016CE  E268                    1304      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000016D0                          1305  
000016D0  1E00                    1306      MOVE.B  D0, D7          *put D0 to data register into D7 for future printing
000016D2                          1307                   
000016D2                          1308                   * set mode
000016D2  4280                    1309      CLR.L D0                *clear D0
000016D4                          1310                   
000016D4  4281                    1311      CLR.L D1                *clear D1
000016D6                          1312                   
000016D6  3015                    1313      MOVE.W  (A5),D0     *D0 is the binary value to decode
000016D8                          1314                 
000016D8  123C 000A               1315      MOVE.B  #10,D1           *8 bits is the number of times to shift to the left to remove opcode & register #
000016DC                          1316  
000016DC  E368                    1317      LSL.W   D1,D0           *Shift the bits 8 times -> D0 now removes the opcode & reg#
000016DE                          1318  
000016DE  123C 000D               1319      MOVE.B  #13,D1          *14 bits is the number of times to shift to hold the mode number
000016E2                          1320  
000016E2  E268                    1321      LSR.W   D1,D0           *Shift the bits 13 times -> D0 now holds the size number
000016E4                          1322  
000016E4  2C00                    1323      MOVE.L  D0, D6          *put D0 to data register into D7 for future printing
000016E6                          1324                   
000016E6  4EB9 0000234A           1325      JSR     PRINT_EA *by using jmp table
000016EC                          1326  
000016EC  6000 FA02               1327      BRA PARSE_MEMORY
000016F0                          1328      
000016F0                          1329  SIZE_B 
000016F0                          1330                
000016F0  43F9 000026EA           1331      LEA         SIZE_B_PRINT, A1 
000016F6                          1332      
000016F6  4EF8 16B8               1333      JMP PRINT_SIZE
000016FA                          1334      
000016FA                          1335  SIZE_W 
000016FA                          1336                
000016FA  43F9 000026F0           1337      LEA         SIZE_W_PRINT, A1 
00001700                          1338      
00001700  4EF8 16B8               1339      JMP PRINT_SIZE
00001704                          1340      
00001704                          1341  SIZE_L 
00001704                          1342                
00001704  43F9 000026F6           1343      LEA         SIZE_L_PRINT, A1 
0000170A                          1344      
0000170A  4EF8 16B8               1345      JMP PRINT_SIZE
0000170E                          1346      
0000170E                          1347  
0000170E                          1348   *   END    START        ; last line of source
0000170E                          1349  
0000170E                          1350  
0000170E                          1351  
0000170E                          1352  
0000170E                          1353  
0000170E                          1354  
0000170E                          1355  
0000170E                          1356  
0000170E                          1357  
0000170E                          1358  
0000170E                          1359  
0000170E                          1360  
0000170E                          1361  
0000170E                          1362  
0000170E                          1363  -------------------- end include --------------------
0000170E                          1364                  INCLUDE 'DIVU_OR.X68'
0000170E                          1365      
0000170E  4EB8 12C0               1366  DIVU_OR          JSR      GET_SIZE_PURPLE  
00001712                          1367                                            
00001712  BA3C 0003               1368                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
00001716                          1369                   
00001716  6700 0008               1370                   BEQ      DIVU_CODE
0000171A                          1371                   
0000171A  4EF9 0000175C           1372                   JMP      OR_CODE
00001720                          1373                   
00001720                          1374  DIVU_CODE  
00001720                          1375                   * OP_CODE message
00001720  43F9 000026A2           1376                   LEA      DIVU_MESSAGE, A1
00001726  103C 000E               1377                   MOVE.B   #14, D0
0000172A  4E4F                    1378                   TRAP #15
0000172C                          1379  
0000172C  3A3C 0001               1380                   MOVE    #%01, D5          
00001730                          1381                   
00001730  43F9 000026F0           1382                   LEA      SIZE_W_PRINT,    A1
00001736                          1383                   
00001736  103C 000E               1384                   MOVE.B   #14,             D0
0000173A                          1385          
0000173A  4E4F                    1386                   TRAP #15
0000173C                          1387                   
0000173C  4EB8 1340               1388                   JSR     Set_Ea
00001740                          1389                   
00001740  4EB9 0000234A           1390                   JSR     PRINT_EA *by using jmp table
00001746                          1391                   
00001746  4EB8 1320               1392                   JSR     PRINT_COMMA
0000174A                          1393                   
0000174A                          1394                    * for the first Dn 
0000174A  4EB8 132E               1395                   JSR     GET_Data_Register
0000174E                          1396                   
0000174E  1C3C 0000               1397                   MOVE.B  #%000, D6 * for mode
00001752                          1398  
00001752  4EB9 0000234A           1399                   JSR     PRINT_EA *by using jmp table
00001758                          1400  
00001758  4EF8 10F0               1401                   JMP     PARSE_MEMORY
0000175C                          1402  
0000175C                          1403  OR_CODE    
0000175C                          1404                   * OP_CODE message
0000175C  43F9 000026A8           1405                   LEA      OR_MESSAGE, A1
00001762  103C 000E               1406                   MOVE.B   #14, D0
00001766  4E4F                    1407                   TRAP #15
00001768                          1408  
00001768  4EB8 12D6               1409                   JSR PRINTOUT_SIZE_PURPLE
0000176C                          1410                   
0000176C                          1411                     * check for dn and ea
0000176C  4280                    1412                   CLR.L D0                *clear D0
0000176E                          1413                   
0000176E  4281                    1414                   CLR.L D1                *clear D1
00001770                          1415                   
00001770  3015                    1416                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001772                          1417                   
00001772  0800 0008               1418                   BTST    #8, D0
00001776                          1419                   
00001776  6700 0022               1420                   BEQ     OR_FIRST_EA
0000177A                          1421                   
0000177A                          1422                   * for the first Dn 
0000177A  4EB8 132E               1423                   JSR     GET_Data_Register
0000177E                          1424                   
0000177E  1C3C 0000               1425                   MOVE.B  #%000, D6 * for mode
00001782                          1426                   
00001782  4EB9 0000234A           1427                   JSR     PRINT_EA *by using jmp table
00001788                          1428                   
00001788  4EB8 1320               1429                   JSR     PRINT_COMMA
0000178C                          1430                   
0000178C  4EB8 1340               1431                   JSR     Set_Ea
00001790                          1432                   
00001790  4EB9 0000234A           1433                   JSR     PRINT_EA *by using jmp table
00001796                          1434                   
00001796  4EF8 10F0               1435                   JMP     PARSE_MEMORY
0000179A                          1436                   
0000179A                          1437  OR_FIRST_EA
0000179A  4EB8 1340               1438                   JSR     Set_Ea
0000179E                          1439                   
0000179E  4EB9 0000234A           1440                   JSR     PRINT_EA *by using jmp table
000017A4                          1441                   
000017A4  4EB8 1320               1442                   JSR     PRINT_COMMA
000017A8                          1443                   
000017A8                          1444                    * for the first Dn 
000017A8  4EB8 132E               1445                   JSR     GET_Data_Register
000017AC                          1446                   
000017AC  1C3C 0000               1447                   MOVE.B  #%000, D6 * for mode
000017B0                          1448  
000017B0  4EB9 0000234A           1449                   JSR     PRINT_EA *by using jmp table
000017B6                          1450                   
000017B6  4EF8 10F0               1451                   JMP     PARSE_MEMORY
000017BA                          1452  
000017BA                          1453  
000017BA                          1454  
000017BA                          1455  
000017BA                          1456  
000017BA                          1457  
000017BA                          1458  
000017BA                          1459  
000017BA                          1460  -------------------- end include --------------------
000017BA                          1461                  INCLUDE 'GROUP_0100_CODE.X68'
000017BA                          1462  GROUP_0100_CODE          *at this point we know the first 4 bits are 0100 -> NOP, RTS, JSR,  MOVEM, CLR
000017BA                          1463  
000017BA  4280                    1464                   CLR.L D0                *clear D0
000017BC                          1465                   
000017BC  4281                    1466                   CLR.L D1                *clear D1
000017BE                          1467                   
000017BE  3015                    1468                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000017C0                          1469  
000017C0  123C 0004               1470                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
000017C4                          1471  
000017C4  E368                    1472                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
000017C6                          1473                   
000017C6  123C 0004               1474                   MOVE.B  #4,D1           *4 bits is the number of times to shift to hold everything except the opcode
000017CA                          1475  
000017CA  E268                    1476                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds everything except opcode
000017CC                          1477                   
000017CC                          1478                                              
000017CC  B07C 0E71               1479                   CMP.W    #$E71, D0      *if D0 holds E71, the opcode is NOP
000017D0                          1480                   
000017D0  6700 FE4C               1481                   BEQ      NOP_OPCODE       *Branch to NOP_CODE if the opcode is NOP
000017D4                          1482                   
000017D4                          1483                   
000017D4  B07C 0E75               1484                   CMP.W    #$E75, D0      *if D0 holds E75, the opcode is RTS
000017D8                          1485                   
000017D8  6700 FE54               1486                   BEQ      RTS_OPCODE       *Branch to RTS_CODE if the opcode is RTS
000017DC                          1487                   
000017DC                          1488                   
000017DC  4280                    1489                   CLR.L D0                *clear D0
000017DE                          1490                   
000017DE                          1491                   
000017DE  4281                    1492                   CLR.L D1                *clear D1
000017E0                          1493                   
000017E0                          1494                   
000017E0  3015                    1495                   MOVE.W  (A5),D0     *D0 is the binary value to decode
000017E2                          1496  
000017E2                          1497  
000017E2  123C 0004               1498                   MOVE.B  #4,D1           *4 bits is the number of times to shift to the left to remove opcode
000017E6                          1499  
000017E6                          1500  
000017E6  E368                    1501                   LSL.W   D1,D0           *Shift the bits 4 times -> D0 now removes the opcode
000017E8                          1502                   
000017E8  123C 000C               1503                   MOVE.B  #12,D1           *12 bits is the number of times to shift to hold the 4th-8th bits (counting left to right, non-inclusive)
000017EC                          1504  
000017EC  E268                    1505                   LSR.W   D1,D0           *Shift the bits 4 times -> D0 now holds 4th-8th bits (counting left to right, non-inclusive)
000017EE                          1506                   
000017EE  B07C 0002               1507                   CMP.W    #$2, D0        *if D0 holds #2, the opcode is CLR
000017F2                          1508                   
000017F2  6700 FE80               1509                   BEQ      CLR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
000017F6                          1510                   
000017F6                          1511          
000017F6  B07C 000E               1512                   CMP.W    #$E, D0        *if D0 holds $E = 14, the opcode is JSR
000017FA                          1513                   
000017FA  6700 FE42               1514                   BEQ      JSR_OPCODE       *Branch to NOP_CODE if the opcode is CLR
000017FE                          1515                   
000017FE  4280                    1516                   CLR.L D0                *clear D0
00001800                          1517                   
00001800  4281                    1518                   CLR.L D1                *clear D1
00001802                          1519                   
00001802  3015                    1520                   MOVE.W  (A5),D0     *D0 is the binary value to decode
00001804                          1521  
00001804  123C 0007               1522                   MOVE.B  #7,D1 
00001808                          1523  
00001808  E368                    1524                   LSL.W   D1,D0 
0000180A                          1525                   
0000180A  123C 000D               1526                   MOVE.B  #13,D1 
0000180E                          1527  
0000180E  E268                    1528                   LSR.W   D1,D0     
00001810                          1529                   
00001810  B07C 0007               1530                   CMP.W    #%111, D0  
00001814                          1531                   
00001814  6700 FDAE               1532                   BEQ LEA_OPCODE
00001818                          1533                   
00001818  6000 00AA               1534                   BRA      MOVEM_OPCODE     *else it is a MOVEM
0000181C                          1535  
0000181C                          1536      
0000181C                          1537  
0000181C                          1538  
0000181C                          1539  
0000181C                          1540  
0000181C                          1541  
0000181C                          1542  -------------------- end include --------------------
0000181C                          1543                  INCLUDE 'MULS_AND.X68'
0000181C                          1544   
0000181C  4EB8 12C0               1545  MULS_AND         JSR      GET_SIZE_PURPLE
00001820                          1546                                              
00001820  BA3C 0003               1547                   CMP.B    #$3, D5        *if D0 holds 3, the opcode is DIVU
00001824                          1548                   
00001824  6700 0008               1549                   BEQ      MULS_CODE
00001828                          1550                   
00001828  4EF9 00001866           1551                   JMP      AND_CODE
0000182E                          1552                   
0000182E                          1553  MULS_CODE
0000182E                          1554                   * OP_CODE message
0000182E  43F9 000026B6           1555                   LEA MULS_MESSAGE, A1
00001834                          1556                   
00001834  103C 000E               1557                   MOVE.B #14, D0
00001838                          1558                   
00001838  4E4F                    1559                   TRAP #15
0000183A                          1560  
0000183A  43F9 000026F0           1561                   LEA      SIZE_W_PRINT,    A1
00001840                          1562                   
00001840  103C 000E               1563                   MOVE.B   #14,             D0
00001844                          1564          
00001844  4E4F                    1565                   TRAP #15
00001846                          1566                   
00001846  4EB8 1340               1567                   JSR     Set_Ea
0000184A                          1568                   
0000184A  4EB9 0000234A           1569                   JSR     PRINT_EA *by using jmp table
00001850                          1570                   
00001850  4EB8 1320               1571                   JSR     PRINT_COMMA
00001854                          1572                   
00001854                          1573                    * for the first Dn 
00001854  4EB8 132E               1574                   JSR     GET_Data_Register
00001858                          1575                   
00001858  1C3C 0000               1576                   MOVE.B  #%000, D6 * for mode
0000185C                          1577  
0000185C  4EB9 0000234A           1578                   JSR     PRINT_EA *by using jmp table
00001862                          1579  
00001862  4EF8 10F0               1580                   JMP      PARSE_MEMORY
00001866                          1581  
00001866                          1582  AND_CODE
00001866                          1583                   * OP_CODE message
00001866  43F9 000026BC           1584                   LEA AND_MESSAGE, A1
0000186C  103C 000E               1585                   MOVE.B #14, D0
00001870  4E4F                    1586                   TRAP #15
00001872                          1587                   
00001872  4EB8 12D6               1588                   JSR PRINTOUT_SIZE_PURPLE
00001876                          1589                   
00001876                          1590                     * check for dn and ea
00001876  4280                    1591                   CLR.L D0                *clear D0
00001878                          1592                   
00001878  4281                    1593                   CLR.L D1                *clear D1
0000187A                          1594                   
0000187A  3015                    1595                   MOVE.W  (A5),D0     *D0 is the binary value to decode
0000187C                          1596                   
0000187C  0800 0008               1597                   BTST    #8, D0
00001880                          1598                   
00001880  6700 0022               1599                   BEQ     AND_FIRST_EA
00001884                          1600                   
00001884                          1601                   * for the first Dn 
00001884  4EB8 132E               1602                   JSR     GET_Data_Register
00001888                          1603                   
00001888  1C3C 0000               1604                   MOVE.B  #%000, D6 * for mode
0000188C                          1605                   
0000188C  4EB9 0000234A           1606                   JSR     PRINT_EA *by using jmp table
00001892                          1607                   
00001892  4EB8 1320               1608                   JSR     PRINT_COMMA
00001896                          1609                   
00001896  4EB8 1340               1610                   JSR     Set_Ea
0000189A                          1611                   
0000189A  4EB9 0000234A           1612                   JSR     PRINT_EA *by using jmp table
000018A0                          1613                   
000018A0  4EF8 10F0               1614                   JMP      PARSE_MEMORY
000018A4                          1615                   
000018A4                          1616  AND_FIRST_EA
000018A4  4EB8 1340               1617                   JSR     Set_Ea
000018A8                          1618                   
000018A8  4EB9 0000234A           1619                   JSR     PRINT_EA *by using jmp table
000018AE                          1620                   
000018AE  4EB8 1320               1621                   JSR     PRINT_COMMA
000018B2                          1622                   
000018B2                          1623                    * for the first Dn 
000018B2  4EB8 132E               1624                   JSR     GET_Data_Register
000018B6                          1625                   
000018B6  1C3C 0000               1626                   MOVE.B  #%000, D6 * for mode
000018BA                          1627  
000018BA  4EB9 0000234A           1628                   JSR     PRINT_EA *by using jmp table
000018C0                          1629                   
000018C0  4EF8 10F0               1630                   JMP      PARSE_MEMORY
000018C4                          1631  
000018C4                          1632  
000018C4                          1633  
000018C4                          1634  
000018C4                          1635  
000018C4                          1636  
000018C4                          1637  
000018C4                          1638  
000018C4                          1639  
000018C4                          1640  -------------------- end include --------------------
000018C4                          1641                  INCLUDE 'MOVEM.X68'
000018C4                          1642     
000018C4                          1643  
000018C4                          1644  MOVEM_OPCODE
000018C4                          1645  
000018C4  4280                    1646     CLR.L       D0               *Zero it
000018C6                          1647     
000018C6  4286                    1648     CLR.L       D6
000018C8                          1649  
000018C8  3015                    1650     MOVE.W      (A5), D0     *We'll play with it here
000018CA                          1651  
000018CA  43F9 00002646           1652     LEA MOVEM_MESSAGE, A1
000018D0                          1653            
000018D0  103C 000E               1654     MOVE.B #14, D0
000018D4                          1655                   
000018D4  4E4F                    1656     TRAP #15    
000018D6                          1657  
000018D6  3015                    1658    MOVE.W     (A5), D0
000018D8                          1659  
000018D8  0800 0006               1660    BTST       #6,  D0      
000018DC                          1661  
000018DC  6600 0012               1662    BNE        PRINT_SIZE_L_MOVEM
000018E0                          1663  
000018E0  43F9 000026F0           1664    LEA SIZE_W_PRINT, A1
000018E6                          1665            
000018E6  103C 000E               1666    MOVE.B #14, D0
000018EA                          1667                   
000018EA  4E4F                    1668    TRAP #15    
000018EC                          1669   
000018EC  6000 000E               1670    BRA          DR_FIELD
000018F0                          1671      
000018F0                          1672    * Print out size for W
000018F0                          1673  PRINT_SIZE_L_MOVEM
000018F0                          1674  
000018F0  43F9 000026F6           1675    LEA SIZE_L_PRINT, A1
000018F6                          1676            
000018F6  103C 000E               1677    MOVE.B #14, D0
000018FA                          1678                   
000018FA  4E4F                    1679    TRAP #15    
000018FC                          1680  
000018FC                          1681  DR_FIELD
000018FC                          1682                 
000018FC  0800 000A               1683    BTST        #10,  D0    * BIT TEST
00001900                          1684  
00001900  6700 000C               1685    BEQ         Regitset_Memory *if D0 holds a 1
00001904                          1686  
00001904  6000 0062               1687    BRA         Memory_Register *If D0 hollds a 0
00001908                          1688  
00001908  4284                    1689    CLR.L D4
0000190A                          1690  
0000190A  183C 000F               1691    MOVE.B #15, D4
0000190E                          1692  
0000190E                          1693  Regitset_Memory
0000190E  361E                    1694      MOVE.W      (A6)+, D3
00001910                          1695      
00001910                          1696      * CHECK IF PRE DECREMEMNT
00001910  3015                    1697      MOVE.W (A5), D0
00001912                          1698      
00001912  123C 000A               1699      MOVE.B      #10, D1
00001916                          1700      
00001916  E368                    1701      LSL.W       D1, D0
00001918                          1702  
00001918  123C 000D               1703      MOVE.B      #13, D1
0000191C                          1704  
0000191C  E268                    1705      LSR.W       D1, D0
0000191E                          1706  
0000191E  B03C 0004               1707      CMP.B       #%100, D0
00001922                          1708  
00001922  6700 0064               1709      BEQ         OPPOSITE_LOOP 
00001926                          1710      * NOW IT CAN BE IN REGULAR ORDER
00001926                          1711      
00001926  183C 000F               1712      MOVE.B      #15, D4
0000192A                          1713      
0000192A  4EB9 00001B5E           1714      JSR         LOOP_MOVEM
00001930                          1715      
00001930  43F9 0000271C           1716      LEA COMMA, A1
00001936                          1717      
00001936  103C 000E               1718      MOVE.B      #14, D0
0000193A                          1719      
0000193A  4E4F                    1720      TRAP #15
0000193C                          1721      
0000193C  4EB9 00001946           1722      JSR PRINT_ADDRESS
00001942                          1723      
00001942  6000 F7AC               1724      BRA PARSE_MEMORY
00001946                          1725  
00001946                          1726  PRINT_ADDRESS 
00001946  3015                    1727      MOVE.W      (A5), D0
00001948                          1728  
00001948  123C 000A               1729      MOVE.B      #10, D1
0000194C                          1730      
0000194C  E368                    1731      LSL.W       D1, D0
0000194E                          1732      
0000194E  123C 000D               1733      MOVE.B      #13, D1
00001952                          1734  
00001952  E268                    1735      LSR.W       D1, D0
00001954                          1736      
00001954  1C00                    1737      MOVE.B      D0, D6
00001956                          1738      
00001956  3015                    1739      MOVE.W      (A5), D0
00001958                          1740      
00001958  E368                    1741      LSL.W       D1, D0
0000195A                          1742      
0000195A  E268                    1743      LSR.W       D1, D0
0000195C                          1744      
0000195C  4287                    1745      CLR.L       D7
0000195E                          1746      
0000195E  1E00                    1747      MOVE.B      D0, D7
00001960                          1748      
00001960  4EB9 0000234A           1749      JSR PRINT_EA
00001966                          1750      
00001966  4E75                    1751      RTS
00001968                          1752  
00001968                          1753  Memory_Register
00001968  361E                    1754      MOVE.W (A6)+, D3
0000196A                          1755      
0000196A  4EB8 1946               1756      JSR         PRINT_ADDRESS
0000196E                          1757      
0000196E  43F9 0000271C           1758      LEA         COMMA, A1
00001974                          1759      
00001974  103C 000E               1760      MOVE.B      #14, D0
00001978                          1761      
00001978  4E4F                    1762      TRAP #15
0000197A                          1763          
0000197A                          1764      *MOVE.W      (A6)+, D3
0000197A                          1765      
0000197A  183C 000F               1766      MOVE.B      #15, D4
0000197E                          1767      
0000197E  4EB9 00001B5E           1768      JSR         LOOP_MOVEM
00001984                          1769      
00001984  6000 F76A               1770      BRA PARSE_MEMORY
00001988                          1771  
00001988                          1772  
00001988                          1773  OPPOSITE_LOOP
00001988  4241                    1774      CLR         D1
0000198A                          1775  
0000198A                          1776      *MOVE.W      (A6)+, D3
0000198A                          1777      
0000198A  183C 000F               1778      MOVE.B      #15, D4
0000198E                          1779      
0000198E  4EB9 000019A8           1780      JSR OPPOSITE_LOOP_MOVEM
00001994                          1781      
00001994  43F9 0000271C           1782      LEA COMMA, A1
0000199A                          1783      
0000199A  103C 000E               1784      MOVE.B      #14, D0
0000199E                          1785      
0000199E  4E4F                    1786      TRAP #15
000019A0                          1787      
000019A0  4EB8 1946               1788      JSR PRINT_ADDRESS
000019A4                          1789      
000019A4  6000 F74A               1790      BRA PARSE_MEMORY
000019A8                          1791  
000019A8                          1792          
000019A8                          1793  OPPOSITE_LOOP_MOVEM
000019A8                          1794          
000019A8  0903                    1795      BTST        D4, D3     * BIT TEST
000019AA                          1796  
000019AA  6600 0020               1797      BNE         OPPOSITE_IS_USED_FIRST
000019AE                          1798  
000019AE  5304                    1799      SUB.B       #1, D4
000019B0                          1800      
000019B0                          1801  OPPOSITE_CHECK
000019B0  B83C 00FF               1802      CMP.B       #-1,  D4
000019B4                          1803  
000019B4  6700 0B80               1804      BEQ         DONE
000019B8                          1805  
000019B8  60EE                    1806      BRA         OPPOSITE_LOOP_MOVEM
000019BA                          1807      
000019BA                          1808  OPPOSITE_LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
000019BA  0903                    1809      BTST        D4, D3     * BIT TEST
000019BC                          1810  
000019BC  6600 0018               1811      BNE         OPPOSITE_IS_USED
000019C0                          1812  
000019C0  5304                    1813      SUB.B       #1, D4
000019C2                          1814      
000019C2                          1815  OPPOSITE_CHECK_SECOND
000019C2  B83C 00FF               1816      CMP.B       #-1,  D4
000019C6                          1817  
000019C6  6700 0B6E               1818      BEQ         DONE
000019CA                          1819  
000019CA  60EE                    1820      BRA         OPPOSITE_LOOP_MOVEM_SECOND
000019CC                          1821  
000019CC                          1822  OPPOSITE_IS_USED_FIRST
000019CC  4EB9 000019EC           1823      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
000019D2                          1824  
000019D2  5304                    1825      SUB.B       #1, D4
000019D4                          1826  
000019D4  60EC                    1827      BRA         OPPOSITE_CHECK_SECOND
000019D6                          1828  
000019D6                          1829  
000019D6                          1830  OPPOSITE_IS_USED
000019D6  43F9 00002705           1831      LEA         SLASH, A1
000019DC                          1832  
000019DC  103C 000E               1833      MOVE.B      #14, D0
000019E0                          1834  
000019E0  4E4F                    1835      TRAP #15
000019E2                          1836      
000019E2  4EB9 000019EC           1837      JSR         OPPOSITE_PRINT_REGISTER_MOVEM
000019E8                          1838  
000019E8  5304                    1839      SUB.B       #1, D4
000019EA                          1840  
000019EA  60D6                    1841      BRA         OPPOSITE_CHECK_SECOND
000019EC                          1842  
000019EC                          1843      
000019EC                          1844      
000019EC                          1845  OPPOSITE_PRINT_REGISTER_MOVEM
000019EC  41F9 000019FE           1846      LEA        OPPOSITE_jmp_table_MOVEM, A0
000019F2  4242                    1847      CLR        D2
000019F4  143C 0006               1848      MOVE.B     #6, D2
000019F8  C4C4                    1849      MULU       D4, D2                           
000019FA  4EF0 2000               1850      JMP        0(A0,D2)   *Jump indirect with index
000019FE                          1851                      
000019FE                          1852  OPPOSITE_jmp_table_MOVEM      
000019FE  4EF9 00001A5E           1853      JMP         OPPOSITE_bit0
00001A04  4EF9 00001A6E           1854                 JMP         OPPOSITE_bit1
00001A0A  4EF9 00001A7E           1855                 JMP         OPPOSITE_bit2
00001A10  4EF9 00001A8E           1856                 JMP         OPPOSITE_bit3
00001A16  4EF9 00001A9E           1857                 JMP         OPPOSITE_bit4
00001A1C  4EF9 00001AAE           1858                 JMP         OPPOSITE_bit5
00001A22  4EF9 00001ABE           1859                 JMP         OPPOSITE_bit6
00001A28  4EF9 00001ACE           1860                 JMP         OPPOSITE_bit7
00001A2E  4EF9 00001ADE           1861                 JMP         OPPOSITE_bit8
00001A34  4EF9 00001AEE           1862                 JMP         OPPOSITE_bit9
00001A3A  4EF9 00001AFE           1863                 JMP         OPPOSITE_bit10
00001A40  4EF9 00001B0E           1864                 JMP         OPPOSITE_bit11
00001A46  4EF9 00001B1E           1865                 JMP         OPPOSITE_bit12
00001A4C  4EF9 00001B2E           1866                 JMP         OPPOSITE_bit13
00001A52  4EF9 00001B3E           1867                 JMP         OPPOSITE_bit14
00001A58  4EF9 00001B4E           1868                 JMP         OPPOSITE_bit15
00001A5E                          1869          
00001A5E                          1870   
00001A5E                          1871   
00001A5E                          1872   
00001A5E                          1873  OPPOSITE_bit0    * D0
00001A5E  1E3C 0007               1874      MOVE.B    #%111, D7    * REGISTER
00001A62                          1875      
00001A62  1C3C 0001               1876      MOVE.B    #%001, D6    * MODE
00001A66                          1877  
00001A66  4EB9 0000234A           1878      JSR        PRINT_EA
00001A6C                          1879  
00001A6C  4E75                    1880      RTS    
00001A6E                          1881  
00001A6E                          1882  OPPOSITE_bit1    * D1
00001A6E  1E3C 0006               1883      MOVE.B    #%110, D7    * REGISTER
00001A72                          1884      
00001A72  1C3C 0001               1885      MOVE.B    #%001, D6    * MODE
00001A76                          1886  
00001A76  4EB9 0000234A           1887      JSR        PRINT_EA
00001A7C                          1888  
00001A7C  4E75                    1889      RTS    
00001A7E                          1890  
00001A7E                          1891  OPPOSITE_bit2    * D2
00001A7E  1E3C 0005               1892      MOVE.B    #%101, D7    * REGISTER
00001A82                          1893      
00001A82  1C3C 0001               1894      MOVE.B    #%001, D6    * MODE
00001A86                          1895  
00001A86  4EB9 0000234A           1896      JSR        PRINT_EA    
00001A8C                          1897  
00001A8C  4E75                    1898      RTS
00001A8E                          1899  
00001A8E                          1900  OPPOSITE_bit3    * D3
00001A8E  1E3C 0004               1901      MOVE.B    #%100, D7    * REGISTER
00001A92                          1902      
00001A92  1C3C 0001               1903      MOVE.B    #%001, D6    * MODE
00001A96                          1904  
00001A96  4EB9 0000234A           1905      JSR        PRINT_EA
00001A9C                          1906  
00001A9C  4E75                    1907      RTS    
00001A9E                          1908  
00001A9E                          1909  OPPOSITE_bit4    * D4
00001A9E  1E3C 0003               1910      MOVE.B    #%011, D7    * REGISTER
00001AA2                          1911  
00001AA2  1C3C 0001               1912      MOVE.B    #%001, D6    * MODE
00001AA6                          1913  
00001AA6  4EB9 0000234A           1914      JSR        PRINT_EA
00001AAC                          1915  
00001AAC  4E75                    1916      RTS    
00001AAE                          1917  
00001AAE                          1918  
00001AAE                          1919  OPPOSITE_bit5    * D5
00001AAE  1E3C 0002               1920      MOVE.B    #%010, D7    * REGISTER
00001AB2                          1921      
00001AB2  1C3C 0001               1922      MOVE.B    #%001, D6    * MODE
00001AB6                          1923  
00001AB6  4EB9 0000234A           1924      JSR        PRINT_EA
00001ABC                          1925  
00001ABC  4E75                    1926      RTS    
00001ABE                          1927  
00001ABE                          1928  OPPOSITE_bit6    * D6
00001ABE  1E3C 0001               1929      MOVE.B    #%001, D7    * REGISTER
00001AC2                          1930      
00001AC2  1C3C 0001               1931      MOVE.B    #%001, D6    * MODE
00001AC6                          1932  
00001AC6  4EB9 0000234A           1933      JSR        PRINT_EA
00001ACC                          1934  
00001ACC  4E75                    1935      RTS    
00001ACE                          1936  
00001ACE                          1937  OPPOSITE_bit7    * D7
00001ACE  1E3C 0000               1938      MOVE.B    #%000, D7    * REGISTER
00001AD2                          1939      
00001AD2  1C3C 0001               1940      MOVE.B    #%001, D6    * MODE
00001AD6                          1941  
00001AD6  4EB9 0000234A           1942      JSR        PRINT_EA
00001ADC                          1943  
00001ADC  4E75                    1944      RTS    
00001ADE                          1945  
00001ADE                          1946  OPPOSITE_bit8    * A0
00001ADE  1E3C 0007               1947      MOVE.B    #%111, D7    * REGISTER
00001AE2                          1948      
00001AE2  1C3C 0000               1949      MOVE.B    #%000, D6    * MODE
00001AE6                          1950  
00001AE6  4EB9 0000234A           1951      JSR        PRINT_EA
00001AEC                          1952  
00001AEC  4E75                    1953      RTS    
00001AEE                          1954  
00001AEE                          1955  OPPOSITE_bit9    * A1
00001AEE  1E3C 0006               1956      MOVE.B    #%110, D7    * REGISTER
00001AF2                          1957      
00001AF2  1C3C 0000               1958      MOVE.B    #%000, D6    * MODE
00001AF6                          1959  
00001AF6  4EB9 0000234A           1960      JSR        PRINT_EA
00001AFC                          1961  
00001AFC  4E75                    1962      RTS    
00001AFE                          1963  
00001AFE                          1964  OPPOSITE_bit10    * A2
00001AFE  1E3C 0005               1965      MOVE.B    #%101, D7    * REGISTER
00001B02                          1966      
00001B02  1C3C 0000               1967      MOVE.B    #%000, D6    * MODE
00001B06                          1968  
00001B06  4EB9 0000234A           1969      JSR        PRINT_EA
00001B0C                          1970  
00001B0C  4E75                    1971      RTS    
00001B0E                          1972  
00001B0E                          1973  
00001B0E                          1974  OPPOSITE_bit11    * A5
00001B0E  1E3C 0002               1975      MOVE.B    #%010, D7    * REGISTER
00001B12                          1976      
00001B12  1C3C 0000               1977      MOVE.B    #%000, D6    * MODE
00001B16                          1978  
00001B16  4EB9 0000234A           1979      JSR        PRINT_EA
00001B1C                          1980  
00001B1C  4E75                    1981      RTS    
00001B1E                          1982  
00001B1E                          1983  OPPOSITE_bit12    * A4
00001B1E  1E3C 0003               1984      MOVE.B    #%011, D7    * REGISTER
00001B22                          1985      
00001B22  1C3C 0000               1986      MOVE.B    #%000, D6    * MODE
00001B26                          1987  
00001B26  4EB9 0000234A           1988      JSR        PRINT_EA
00001B2C                          1989  
00001B2C  4E75                    1990      RTS    
00001B2E                          1991  
00001B2E                          1992  
00001B2E                          1993  OPPOSITE_bit13    * A5
00001B2E  1E3C 0002               1994      MOVE.B    #%010, D7    * REGISTER
00001B32                          1995      
00001B32  1C3C 0000               1996      MOVE.B    #%000, D6    * MODE
00001B36                          1997  
00001B36  4EB9 0000234A           1998      JSR        PRINT_EA
00001B3C                          1999  
00001B3C  4E75                    2000      RTS    
00001B3E                          2001  
00001B3E                          2002  
00001B3E                          2003  OPPOSITE_bit14     * A6
00001B3E  1E3C 0001               2004      MOVE.B    #%001, D7    * REGISTER
00001B42                          2005      
00001B42  1C3C 0000               2006      MOVE.B    #%000, D6    * MODE
00001B46                          2007  
00001B46  4EB9 0000234A           2008      JSR        PRINT_EA
00001B4C                          2009  
00001B4C  4E75                    2010      RTS        
00001B4E                          2011  
00001B4E                          2012  
00001B4E                          2013  OPPOSITE_bit15    * A7
00001B4E  1E3C 0000               2014      MOVE.B    #%000, D7    * REGISTER
00001B52                          2015      
00001B52  1C3C 0000               2016      MOVE.B    #%000, D6    * MODE
00001B56                          2017  
00001B56  4EB9 0000234A           2018      JSR        PRINT_EA
00001B5C                          2019  
00001B5C  4E75                    2020      RTS    
00001B5E                          2021  
00001B5E                          2022  
00001B5E                          2023  
00001B5E                          2024  
00001B5E                          2025  
00001B5E                          2026  LOOP_MOVEM
00001B5E                          2027          
00001B5E  0903                    2028      BTST        D4, D3     * BIT TEST
00001B60                          2029  
00001B60  6600 0020               2030      BNE         IS_USED_FIRST
00001B64                          2031  
00001B64  5304                    2032      SUB.B       #1, D4
00001B66                          2033      
00001B66                          2034  CHECK
00001B66  B83C 00FF               2035      CMP.B       #-1,  D4
00001B6A                          2036  
00001B6A  6700 09CA               2037      BEQ         DONE
00001B6E                          2038  
00001B6E  60EE                    2039      BRA         LOOP_MOVEM
00001B70                          2040      
00001B70                          2041  LOOP_MOVEM_SECOND               * FOR ALL REGISTERS PRINTED AFTER THE FIRST
00001B70  0903                    2042      BTST        D4, D3     * BIT TEST
00001B72                          2043  
00001B72  6600 0018               2044      BNE         IS_USED
00001B76                          2045  
00001B76  5304                    2046      SUB.B       #1, D4
00001B78                          2047      
00001B78                          2048  CHECK_SECOND
00001B78  B83C 00FF               2049      CMP.B       #-1,  D4
00001B7C                          2050  
00001B7C  6700 09B8               2051      BEQ         DONE
00001B80                          2052  
00001B80  60EE                    2053      BRA         LOOP_MOVEM_SECOND
00001B82                          2054  
00001B82                          2055  IS_USED_FIRST
00001B82  4EB9 00001BA2           2056      JSR         PRINT_REGISTER_MOVEM
00001B88                          2057  
00001B88  5304                    2058      SUB.B       #1, D4
00001B8A                          2059  
00001B8A  60EC                    2060      BRA         CHECK_SECOND
00001B8C                          2061  
00001B8C                          2062  
00001B8C                          2063  IS_USED
00001B8C  43F9 00002705           2064      LEA         SLASH, A1
00001B92                          2065  
00001B92  103C 000E               2066      MOVE.B      #14, D0
00001B96                          2067  
00001B96  4E4F                    2068      TRAP #15
00001B98                          2069      
00001B98  4EB9 00001BA2           2070      JSR         PRINT_REGISTER_MOVEM
00001B9E                          2071  
00001B9E  5304                    2072      SUB.B       #1, D4
00001BA0                          2073  
00001BA0  60D6                    2074      BRA         CHECK_SECOND
00001BA2                          2075  
00001BA2                          2076  
00001BA2                          2077  
00001BA2                          2078  
00001BA2                          2079  
00001BA2                          2080  PRINT_REGISTER_MOVEM
00001BA2  41F9 00001BB4           2081      LEA         jmp_table_MOVEM, A0
00001BA8  4242                    2082      CLR         D2
00001BAA  143C 0006               2083      MOVE.B      #6, D2
00001BAE  C4C4                    2084      MULU        D4, D2                           
00001BB0  4EF0 2000               2085      JMP         0(A0,D2)   *Jump indirect with index
00001BB4                          2086                      
00001BB4                          2087  jmp_table_MOVEM      
00001BB4  4EF9 00001C14           2088      JMP         bit0
00001BBA  4EF9 00001C24           2089                 JMP         bit1
00001BC0  4EF9 00001C34           2090                 JMP         bit2
00001BC6  4EF9 00001C44           2091                 JMP         bit3
00001BCC  4EF9 00001C54           2092                 JMP         bit4
00001BD2  4EF9 00001C64           2093                 JMP         bit5
00001BD8  4EF9 00001C74           2094                 JMP         bit6
00001BDE  4EF9 00001C84           2095                 JMP         bit7
00001BE4  4EF9 00001C94           2096                 JMP         bit8
00001BEA  4EF9 00001CA4           2097                 JMP         bit9
00001BF0  4EF9 00001CB4           2098                 JMP         bit10
00001BF6  4EF9 00001CC4           2099                 JMP         bit11
00001BFC  4EF9 00001CD4           2100                 JMP         bit12
00001C02  4EF9 00001CE4           2101                 JMP         bit13
00001C08  4EF9 00001CF4           2102                 JMP         bit14
00001C0E  4EF9 00001D04           2103                 JMP         bit15
00001C14                          2104          
00001C14                          2105   
00001C14                          2106   
00001C14                          2107   
00001C14                          2108  bit0    * D0
00001C14  1E3C 0000               2109      MOVE.B    #%000, D7    * REGISTER
00001C18                          2110      
00001C18  1C3C 0000               2111      MOVE.B    #%000, D6    * MODE
00001C1C                          2112  
00001C1C  4EB9 0000234A           2113      JSR        PRINT_EA
00001C22                          2114  
00001C22  4E75                    2115      RTS    
00001C24                          2116  
00001C24                          2117  bit1    * D1
00001C24  1E3C 0001               2118      MOVE.B    #%001, D7    * REGISTER
00001C28                          2119      
00001C28  1C3C 0000               2120      MOVE.B    #%000, D6    * MODE
00001C2C                          2121  
00001C2C  4EB9 0000234A           2122      JSR        PRINT_EA
00001C32                          2123  
00001C32  4E75                    2124      RTS    
00001C34                          2125  
00001C34                          2126  bit2    * D2
00001C34  1E3C 0002               2127      MOVE.B    #%010, D7    * REGISTER
00001C38                          2128      
00001C38  1C3C 0000               2129      MOVE.B    #%000, D6    * MODE
00001C3C                          2130  
00001C3C  4EB9 0000234A           2131      JSR        PRINT_EA    
00001C42                          2132  
00001C42  4E75                    2133      RTS
00001C44                          2134  
00001C44                          2135  bit3    * D3
00001C44  1E3C 0003               2136      MOVE.B    #%011, D7    * REGISTER
00001C48                          2137      
00001C48  1C3C 0000               2138      MOVE.B    #%000, D6    * MODE
00001C4C                          2139  
00001C4C  4EB9 0000234A           2140      JSR        PRINT_EA
00001C52                          2141  
00001C52  4E75                    2142      RTS    
00001C54                          2143  
00001C54                          2144  bit4    * D4
00001C54  1E3C 0004               2145      MOVE.B    #%100, D7    * REGISTER
00001C58                          2146  
00001C58  1C3C 0000               2147      MOVE.B    #%000, D6    * MODE
00001C5C                          2148  
00001C5C  4EB9 0000234A           2149      JSR        PRINT_EA
00001C62                          2150  
00001C62  4E75                    2151      RTS    
00001C64                          2152  
00001C64                          2153  
00001C64                          2154  bit5    * D5
00001C64  1E3C 0005               2155      MOVE.B    #%101, D7    * REGISTER
00001C68                          2156      
00001C68  1C3C 0000               2157      MOVE.B    #%000, D6    * MODE
00001C6C                          2158  
00001C6C  4EB9 0000234A           2159      JSR        PRINT_EA
00001C72                          2160  
00001C72  4E75                    2161      RTS    
00001C74                          2162  
00001C74                          2163  bit6    * D6
00001C74  1E3C 0006               2164      MOVE.B    #%110, D7    * REGISTER
00001C78                          2165      
00001C78  1C3C 0000               2166      MOVE.B    #%000, D6    * MODE
00001C7C                          2167  
00001C7C  4EB9 0000234A           2168      JSR        PRINT_EA
00001C82                          2169  
00001C82  4E75                    2170      RTS    
00001C84                          2171  
00001C84                          2172  bit7    * D7
00001C84  1E3C 0007               2173      MOVE.B    #%111, D7    * REGISTER
00001C88                          2174      
00001C88  1C3C 0000               2175      MOVE.B    #%000, D6    * MODE
00001C8C                          2176  
00001C8C  4EB9 0000234A           2177      JSR        PRINT_EA
00001C92                          2178  
00001C92  4E75                    2179      RTS    
00001C94                          2180  
00001C94                          2181  bit8    * A0
00001C94  1E3C 0000               2182      MOVE.B    #%000, D7    * REGISTER
00001C98                          2183      
00001C98  1C3C 0001               2184      MOVE.B    #%001, D6    * MODE
00001C9C                          2185  
00001C9C  4EB9 0000234A           2186      JSR        PRINT_EA
00001CA2                          2187  
00001CA2  4E75                    2188      RTS    
00001CA4                          2189  
00001CA4                          2190  bit9    * A1
00001CA4  1E3C 0001               2191      MOVE.B    #%001, D7    * REGISTER
00001CA8                          2192      
00001CA8  1C3C 0001               2193      MOVE.B    #%001, D6    * MODE
00001CAC                          2194  
00001CAC  4EB9 0000234A           2195      JSR        PRINT_EA
00001CB2                          2196  
00001CB2  4E75                    2197      RTS    
00001CB4                          2198  
00001CB4                          2199  bit10    * A2
00001CB4  1E3C 0002               2200      MOVE.B    #%010, D7    * REGISTER
00001CB8                          2201      
00001CB8  1C3C 0001               2202      MOVE.B    #%001, D6    * MODE
00001CBC                          2203  
00001CBC  4EB9 0000234A           2204      JSR        PRINT_EA
00001CC2                          2205  
00001CC2  4E75                    2206      RTS    
00001CC4                          2207  
00001CC4                          2208  
00001CC4                          2209  bit11    * A5
00001CC4  1E3C 0003               2210      MOVE.B    #%011, D7    * REGISTER
00001CC8                          2211      
00001CC8  1C3C 0001               2212      MOVE.B    #%001, D6    * MODE
00001CCC                          2213  
00001CCC  4EB9 0000234A           2214      JSR        PRINT_EA
00001CD2                          2215  
00001CD2  4E75                    2216      RTS    
00001CD4                          2217  
00001CD4                          2218  bit12    * A4
00001CD4  1E3C 0004               2219      MOVE.B    #%100, D7    * REGISTER
00001CD8                          2220      
00001CD8  1C3C 0001               2221      MOVE.B    #%001, D6    * MODE
00001CDC                          2222  
00001CDC  4EB9 0000234A           2223      JSR        PRINT_EA
00001CE2                          2224  
00001CE2  4E75                    2225      RTS    
00001CE4                          2226  
00001CE4                          2227  
00001CE4                          2228  bit13    * A5
00001CE4  1E3C 0005               2229      MOVE.B    #%101, D7    * REGISTER
00001CE8                          2230      
00001CE8  1C3C 0001               2231      MOVE.B    #%001, D6    * MODE
00001CEC                          2232  
00001CEC  4EB9 0000234A           2233      JSR        PRINT_EA
00001CF2                          2234  
00001CF2  4E75                    2235      RTS    
00001CF4                          2236  
00001CF4                          2237  
00001CF4                          2238  bit14     * A6
00001CF4  1E3C 0006               2239      MOVE.B    #%110, D7    * REGISTER
00001CF8                          2240      
00001CF8  1C3C 0001               2241      MOVE.B    #%001, D6    * MODE
00001CFC                          2242  
00001CFC  4EB9 0000234A           2243      JSR        PRINT_EA
00001D02                          2244  
00001D02  4E75                    2245      RTS        
00001D04                          2246  
00001D04                          2247  
00001D04                          2248  bit15    * A7
00001D04  1E3C 0007               2249      MOVE.B    #%111, D7    * REGISTER
00001D08                          2250      
00001D08  1C3C 0001               2251      MOVE.B    #%001, D6    * MODE
00001D0C                          2252  
00001D0C  4EB9 0000234A           2253      JSR        PRINT_EA
00001D12                          2254  
00001D12  4E75                    2255      RTS    
00001D14                          2256  
00001D14                          2257  DONE_MOVEM_LOOP
00001D14  4E75                    2258      RTS
00001D16                          2259  
00001D16                          2260     * SIMHALT             ; halt simulator
00001D16                          2261      *INCLUDE 'MESSAGE_Data.X68'
00001D16                          2262     * INCLUDE 'JUMPTABLE EA.X68'
00001D16                          2263  
00001D16                          2264  
00001D16                          2265     * END    START        ; last line of source
00001D16                          2266  
00001D16                          2267  
00001D16                          2268  
00001D16                          2269  
00001D16                          2270  
00001D16                          2271  
00001D16                          2272  
00001D16                          2273  
00001D16                          2274  
00001D16                          2275  
00001D16                          2276  
00001D16                          2277  
00001D16                          2278  
00001D16                          2279  
00001D16                          2280  
00001D16                          2281  
00001D16                          2282  
00001D16                          2283  
00001D16                          2284  
00001D16                          2285  
00001D16                          2286  
00001D16                          2287  
00001D16                          2288  
00001D16                          2289  
00001D16                          2290  
00001D16                          2291  
00001D16                          2292  
00001D16                          2293  
00001D16                          2294  
00001D16                          2295  
00001D16                          2296  
00001D16                          2297  
00001D16                          2298  
00001D16                          2299  
00001D16                          2300  
00001D16                          2301  
00001D16                          2302  
00001D16                          2303  
00001D16                          2304  -------------------- end include --------------------
00001D16                          2305                  INCLUDE 'MOVEQ.X68'
00001D16                          2306  
00001D16                          2307  MOVEQ 
00001D16                          2308  
00001D16                          2309                   * ADD message
00001D16  43F9 0000269B           2310                   LEA      MOVEQ_MESSAGE,    A1
00001D1C  103C 000E               2311                   MOVE.B   #14,            D0
00001D20  4E4F                    2312                   TRAP #15
00001D22                          2313                   
00001D22                          2314                   * print out size L
00001D22  43F9 000026F6           2315                   LEA      SIZE_L_PRINT,    A1
00001D28  103C 000E               2316                   MOVE.B   #14,             D0          
00001D2C  4E4F                    2317                   TRAP #15   
00001D2E                          2318                   
00001D2E                          2319                   * print out immediate Data
00001D2E                          2320                   
00001D2E  43F9 000026FC           2321                  LEA     POUND_SIGN, A1
00001D34                          2322              
00001D34  103C 000E               2323                  MOVE.B  #14, D0
00001D38                          2324              
00001D38  4E4F                    2325                  TRAP #15
00001D3A                          2326              
00001D3A  43F9 000026FE           2327                  LEA     HEX_SIGN, A1
00001D40                          2328              
00001D40  4E4F                    2329                  TRAP #15
00001D42                          2330                  
00001D42  4280                    2331                  CLR.L       D0              *Zero it
00001D44                          2332  
00001D44  3015                    2333                  MOVE.W      (A5),D0     *We'll play with it here
00001D46                          2334                 
00001D46  123C 0008               2335                  MOVE.B      #8, D1
00001D4A                          2336                 
00001D4A  E368                    2337                  LSL.W       D1, D0
00001D4C                          2338  
00001D4C  123C 0008               2339                  MOVE.B      #8,D1       *Shift 12 bits to the right  
00001D50                          2340  
00001D50  E268                    2341                  LSR.W       D1,D0           *Move the bits -> D0 holds DATA
00001D52                          2342                      
00001D52  4285                    2343                  CLR.L D5
00001D54                          2344                 
00001D54  3A00                    2345                  MOVE.W D0, D5      
00001D56                          2346          
00001D56  4EB9 000022AC           2347                  JSR         HEX_TO_ASCII
00001D5C                          2348                  
00001D5C  43F9 0000271C           2349                  LEA      COMMA,    A1
00001D62  103C 000E               2350                  MOVE.B   #14,            D0
00001D66  4E4F                    2351                  TRAP #15
00001D68                          2352                   
00001D68                          2353                  * for the first Dn 
00001D68  4286                    2354                  CLR.L D6
00001D6A                          2355                  
00001D6A  4EB8 132E               2356                  JSR     GET_Data_Register
00001D6E                          2357                  
00001D6E  1C3C 0000               2358                  MOVE.B  #%000, D6 * for mode
00001D72                          2359                   
00001D72  4EB9 0000234A           2360                  JSR     PRINT_EA *by using jmp table
00001D78                          2361                   
00001D78  6000 F376               2362                  BRA PARSE_MEMORY
00001D7C                          2363          
00001D7C                          2364  
00001D7C                          2365  
00001D7C                          2366  
00001D7C                          2367  
00001D7C                          2368  
00001D7C                          2369  
00001D7C                          2370  
00001D7C                          2371  
00001D7C                          2372  
00001D7C                          2373  
00001D7C                          2374  
00001D7C                          2375  
00001D7C                          2376  -------------------- end include --------------------
00001D7C                          2377                  INCLUDE 'DAMIAN_OP_CODE.X68'
00001D7C  4280                    2378  SHIFTS           CLR.L D0
00001D7E                          2379                      
00001D7E  4286                    2380                   CLR.L D6
00001D80                          2381  
00001D80  4281                    2382                   CLR.L D1
00001D82                          2383                   
00001D82  3015                    2384                   MOVE.W (A5), D0
00001D84                          2385                   
00001D84  E148                    2386                   LSL.W #8, D0
00001D86                          2387                   
00001D86  123C 000E               2388                   MOVE.B #14, D1
00001D8A                          2389                   
00001D8A  E268                    2390                   LSR.W D1, D0
00001D8C                          2391                   
00001D8C  B03C 0003               2392                   CMP.B  #%11, D0            * check to see if its memory shift
00001D90                          2393                   
00001D90  6700 0024               2394                   BEQ MEMORY_SHIFTS
00001D94                          2395                   
00001D94  3015                    2396                   MOVE.W     (A5), D0
00001D96                          2397                   
00001D96  123C 000B               2398                   MOVE.B     #11, D1
00001D9A                          2399                   
00001D9A  E368                    2400                   LSL.W      D1, D0
00001D9C                          2401                   
00001D9C  123C 000E               2402                   MOVE.B     #14, D1
00001DA0                          2403                   
00001DA0  E268                    2404                   LSR.W      D1, D0
00001DA2                          2405                   
00001DA2  B03C 0000               2406                   CMP.B      #%00, D0
00001DA6                          2407                   
00001DA6  6700 010A               2408                   BEQ        ASD
00001DAA                          2409                   
00001DAA  B03C 0001               2410                   CMP.B      #%01, D0
00001DAE                          2411                   
00001DAE  6700 0032               2412                   BEQ        LSD
00001DB2                          2413                   
00001DB2  6000 0096               2414                   BRA        ROD
00001DB6                          2415                   
00001DB6                          2416                   
00001DB6                          2417  MEMORY_SHIFTS
00001DB6  3015                    2418                   MOVE.W (A5),D0
00001DB8                          2419                   
00001DB8  E948                    2420                   LSL.W #4,D0            *shift out the opcode
00001DBA                          2421                   
00001DBA  123C 000D               2422                   MOVE.B #13,D1          
00001DBE                          2423                   
00001DBE  E268                    2424                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there
00001DC0                          2425                   
00001DC0  B03C 0001               2426                   CMP.B #1,D0            
00001DC4                          2427                   
00001DC4  6700 001C               2428                   BEQ LSD                *if the bits are 1, it is a logical shift
00001DC8                          2429                   
00001DC8  B03C 0003               2430                   CMP.B #3,D0
00001DCC                          2431                   
00001DCC  6700 007C               2432                   BEQ ROD                *if the bits are 3, it is a rotation
00001DD0                          2433                   
00001DD0  3015                    2434                   MOVE.W (A5),D0
00001DD2                          2435                   
00001DD2  E948                    2436                   LSL.W #4,D0            *shift out the opcode
00001DD4                          2437                   
00001DD4  123C 000D               2438                   MOVE.B #13,D1          
00001DD8                          2439                   
00001DD8  E268                    2440                   LSR.W D1,D0            *shift out everything, so only three bits after opcode are there   
00001DDA                          2441                      
00001DDA  B03C 0000               2442                   CMP.B  #0, D0
00001DDE                          2443                   
00001DDE  6700 00D2               2444                   BEQ    ASD
00001DE2                          2445                   
00001DE2                          2446  
00001DE2  4280                    2447  LSD              CLR.L D0               *still need to do checks, since an asd shift could still be a possibility
00001DE4                          2448                   
00001DE4  4281                    2449                   CLR.L D1
00001DE6                          2450                                                 
00001DE6  3015                    2451                   MOVE.W (A5), D0
00001DE8                          2452                   
00001DE8  EF48                    2453                   LSL.W  #7, D0
00001DEA                          2454                   
00001DEA  123C 000F               2455                   MOVE.B #15, D1
00001DEE                          2456                   
00001DEE  E268                    2457                   LSR.W  D1, D0
00001DF0                          2458                   
00001DF0  B03C 0001               2459                   CMP.B  #1, D0
00001DF4                          2460                   
00001DF4  6700 0006               2461                   BEQ LSL
00001DF8                          2462                   
00001DF8  6000 0024               2463                   BRA LSR
00001DFC                          2464                   
00001DFC                          2465  
00001DFC                          2466  LSL
00001DFC  43F9 000026CC           2467                   LEA LSL_MESSAGE, A1    * print message
00001E02                          2468                   
00001E02  103C 000E               2469                   MOVE.B #14, D0
00001E06                          2470                   
00001E06  4E4F                    2471                   TRAP #15
00001E08                          2472              
00001E08  3015                    2473                   MOVE.W (A5), D0
00001E0A                          2474                   
00001E0A  E148                    2475                   LSL.W #8, D0
00001E0C                          2476                   
00001E0C  123C 000E               2477                   MOVE.B #14, D1
00001E10                          2478                   
00001E10  E268                    2479                   LSR.W D1, D0
00001E12                          2480                   
00001E12  B03C 0003               2481                   CMP.B  #%11, D0        * check to see if it is memory and not register shift
00001E16                          2482                   
00001E16  6700 0028               2483                   BEQ LSD_MEMORY
00001E1A                          2484                   
00001E1A  6000 00FA               2485                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001E1E                          2486  
00001E1E                          2487  LSR              
00001E1E  43F9 000026DB           2488                   LEA LSR_MESSAGE, A1            * print message
00001E24                          2489                   
00001E24  103C 000E               2490                   MOVE.B #14, D0
00001E28                          2491                   
00001E28  4E4F                    2492                   TRAP #15
00001E2A                          2493          
00001E2A  3015                    2494                   MOVE.W (A5), D0
00001E2C                          2495                   
00001E2C  E148                    2496                   LSL.W #8, D0
00001E2E                          2497                   
00001E2E  123C 000E               2498                   MOVE.B #14, D1
00001E32                          2499                   
00001E32  E268                    2500                   LSR.W D1, D0
00001E34                          2501                   
00001E34  B03C 0003               2502                   CMP.B  #%11, D0            * check to see if memory shift
00001E38                          2503                   
00001E38  6700 0006               2504                   BEQ LSD_MEMORY
00001E3C                          2505                   
00001E3C  6000 00D8               2506                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001E40                          2507                   
00001E40                          2508  LSD_MEMORY
00001E40  4EB9 00001FBE           2509                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001E46                          2510                   
00001E46  6000 F2A8               2511                   BRA PARSE_MEMORY
00001E4A                          2512              
00001E4A                          2513  
00001E4A  4280                    2514  ROD              CLR.L D0               *same check as logical shift, since an arithmetic shift could still be possible
00001E4C                          2515                   
00001E4C  4281                    2516                   CLR.L D1
00001E4E                          2517                   
00001E4E  3015                    2518                   MOVE.W (A5), D0
00001E50                          2519                   
00001E50  EF48                    2520                   LSL.W  #7, D0
00001E52                          2521                   
00001E52  123C 000F               2522                   MOVE.B #15, D1
00001E56                          2523                   
00001E56  E268                    2524                   LSR.W  D1, D0
00001E58                          2525                   
00001E58  B03C 0001               2526                   CMP.B  #1, D0
00001E5C                          2527                   
00001E5C  6700 0006               2528                   BEQ ROL
00001E60                          2529                   
00001E60  6000 0024               2530                   BRA ROR
00001E64                          2531  
00001E64                          2532  ROL              
00001E64  43F9 000026D6           2533                   LEA ROL_MESSAGE, A1
00001E6A                          2534                   
00001E6A  103C 000E               2535                   MOVE.B #14, D0
00001E6E                          2536                   
00001E6E  4E4F                    2537                   TRAP #15
00001E70                          2538  
00001E70  3015                    2539                   MOVE.W (A5), D0
00001E72                          2540                   
00001E72  E148                    2541                   LSL.W #8, D0
00001E74                          2542                   
00001E74  123C 000E               2543                   MOVE.B #14, D1
00001E78                          2544                   
00001E78  E268                    2545                   LSR.W D1, D0
00001E7A                          2546                   
00001E7A  B03C 0003               2547                   CMP.B  #%11, D0            * check to see if its memory shift
00001E7E                          2548                   
00001E7E  6700 0028               2549                   BEQ ROD_MEMORY
00001E82                          2550                   
00001E82  6000 0092               2551                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001E86                          2552  
00001E86                          2553  ROR       
00001E86  43F9 000026E5           2554                   LEA ROR_MESSAGE, A1
00001E8C                          2555                   
00001E8C  103C 000E               2556                   MOVE.B #14, D0
00001E90                          2557                   
00001E90  4E4F                    2558                   TRAP #15
00001E92                          2559                   
00001E92  3015                    2560                   MOVE.W (A5), D0
00001E94                          2561                   
00001E94  E148                    2562                   LSL.W #8, D0
00001E96                          2563                   
00001E96  123C 000E               2564                   MOVE.B #14, D1
00001E9A                          2565                   
00001E9A  E268                    2566                   LSR.W D1, D0
00001E9C                          2567                   
00001E9C  B03C 0003               2568                   CMP.B  #%11, D0            * check to see if its memory shift
00001EA0                          2569                   
00001EA0  6700 0006               2570                   BEQ ROD_MEMORY
00001EA4                          2571                   
00001EA4  6000 0070               2572                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001EA8                          2573  
00001EA8                          2574  ROD_MEMORY       
00001EA8  4EB9 00001FBE           2575                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001EAE                          2576                   
00001EAE  6000 F240               2577                   BRA PARSE_MEMORY
00001EB2                          2578                   
00001EB2                          2579                   
00001EB2  3015                    2580  ASD              MOVE.W (A5), D0
00001EB4                          2581                   
00001EB4  EF48                    2582                   LSL.W  #7, D0
00001EB6                          2583                   
00001EB6  123C 000F               2584                   MOVE.B #15, D1
00001EBA                          2585                   
00001EBA  E268                    2586                   LSR.W  D1, D0
00001EBC                          2587                   
00001EBC  B03C 0001               2588                   CMP.B  #1, D0
00001EC0                          2589                   
00001EC0  6700 0006               2590                   BEQ ASL
00001EC4                          2591                   
00001EC4  6000 0024               2592                   BRA ASR
00001EC8                          2593                   
00001EC8                          2594  ASL
00001EC8  43F9 000026D1           2595                   LEA ASL_MESSAGE, A1
00001ECE                          2596                   
00001ECE  103C 000E               2597                   MOVE.B #14, D0
00001ED2                          2598                   
00001ED2  4E4F                    2599                   TRAP #15
00001ED4                          2600                   
00001ED4  3015                    2601                   MOVE.W (A5), D0
00001ED6                          2602                   
00001ED6  E148                    2603                   LSL.W #8, D0
00001ED8                          2604                   
00001ED8  123C 000E               2605                   MOVE.B #14, D1
00001EDC                          2606                   
00001EDC  E268                    2607                   LSR.W D1, D0
00001EDE                          2608                   
00001EDE  B03C 0003               2609                   CMP.B  #%11, D0            * check to see if its memory shift
00001EE2                          2610                   
00001EE2  6700 0028               2611                   BEQ ASD_MEMORY
00001EE6                          2612                   
00001EE6  6000 002E               2613                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001EEA                          2614                                    
00001EEA                          2615  
00001EEA                          2616  ASR              
00001EEA  43F9 000026E0           2617                   LEA ASR_MESSAGE, A1
00001EF0                          2618                   
00001EF0  103C 000E               2619                   MOVE.B #14, D0
00001EF4                          2620                   
00001EF4  4E4F                    2621                   TRAP #15
00001EF6                          2622                   
00001EF6  3015                    2623                   MOVE.W (A5), D0
00001EF8                          2624                   
00001EF8  E148                    2625                   LSL.W #8, D0
00001EFA                          2626                   
00001EFA  123C 000E               2627                   MOVE.B #14, D1
00001EFE                          2628                   
00001EFE  E268                    2629                   LSR.W D1, D0
00001F00                          2630                   
00001F00  B03C 0003               2631                   CMP.B  #%11, D0            * check to see if its memory shift
00001F04                          2632                   
00001F04  6700 0006               2633                   BEQ ASD_MEMORY
00001F08                          2634                   
00001F08  6000 000C               2635                   BRA PRINTOUT_REGISTER_SHIFTS_EA
00001F0C                          2636  
00001F0C                          2637  ASD_MEMORY
00001F0C  4EB9 00001FBE           2638                   JSR    PRINTOUT_MEMORY_SHIFTS_EA
00001F12                          2639                   
00001F12  6000 F1DC               2640                   BRA PARSE_MEMORY
00001F16                          2641                   
00001F16                          2642  PRINTOUT_REGISTER_SHIFTS_EA
00001F16  43F9 00002700           2643                   LEA PERIOD, A1
00001F1C                          2644                   
00001F1C  103C 000E               2645                   MOVE.B #14, D0
00001F20                          2646                   
00001F20  4E4F                    2647                   TRAP #15
00001F22                          2648                  
00001F22  4EB8 12C0               2649                   JSR GET_SIZE_PURPLE
00001F26                          2650                   
00001F26  4EB8 12D6               2651                   JSR PRINTOUT_SIZE_PURPLE
00001F2A                          2652  
00001F2A  3015                    2653                   MOVE.W (A5), D0
00001F2C                          2654                   
00001F2C  123C 000A               2655                   MOVE.B #10, D1
00001F30                          2656                   
00001F30  E368                    2657                   LSL.W D1, D0
00001F32                          2658                   
00001F32  123C 000F               2659                   MOVE.B #15, D1
00001F36                          2660                   
00001F36  E268                    2661                   LSR.W D1, D0
00001F38                          2662                   
00001F38  B03C 0001               2663                   CMP.B #1, D0
00001F3C                          2664                   
00001F3C  6700 0048               2665                   BEQ PRINTOUT_REGISTER
00001F40                          2666                   
00001F40  6000 0002               2667                   BRA PRINTOUT_COUNT
00001F44                          2668  
00001F44                          2669                   
00001F44                          2670  PRINTOUT_COUNT
00001F44  43F9 000026FC           2671                   LEA POUND_SIGN, A1
00001F4A                          2672  
00001F4A  103C 000E               2673                   MOVE.B #14, D0
00001F4E                          2674  
00001F4E  4E4F                    2675                   TRAP #15     
00001F50                          2676                 
00001F50  3015                    2677                   MOVE.W (A5), D0
00001F52                          2678                   
00001F52  E948                    2679                   LSL.W #4, D0
00001F54                          2680                   
00001F54  123C 000D               2681                   MOVE.B #13, D1
00001F58                          2682                   
00001F58  E268                    2683                   LSR.W D1, D0
00001F5A                          2684                   
00001F5A  1200                    2685                   MOVE.B D0, D1
00001F5C                          2686                   
00001F5C  103C 0003               2687                   MOVE.B #3, D0
00001F60                          2688                   
00001F60  4E4F                    2689                   TRAP #15                  * print out the amount that the ea is being shifted by
00001F62                          2690                   
00001F62  43F9 0000271C           2691                   LEA COMMA, A1
00001F68                          2692                   
00001F68  103C 000E               2693                   MOVE.B #14, D0
00001F6C                          2694                   
00001F6C  4E4F                    2695                   TRAP #15
00001F6E                          2696                   
00001F6E  3015                    2697                   MOVE.W (A5), D0
00001F70                          2698                   
00001F70  123C 000D               2699                   MOVE.B #13, D1                * to print out the ea that is being shifted
00001F74                          2700                   
00001F74  E368                    2701                   LSL.W D1, D0
00001F76                          2702                   
00001F76  E268                    2703                   LSR.W D1, D0
00001F78                          2704                   
00001F78  1E00                    2705                   MOVE.B D0, D7
00001F7A                          2706                   
00001F7A  7C00                    2707                   MOVE.L #%000, D6              * we know it is a data register
00001F7C                          2708                   
00001F7C  4EB9 0000234A           2709                   JSR PRINT_EA
00001F82                          2710                   
00001F82  6000 F16C               2711                   BRA PARSE_MEMORY
00001F86                          2712                   
00001F86                          2713  
00001F86                          2714  PRINTOUT_REGISTER
00001F86  3015                    2715                   MOVE.W (A5), D0
00001F88                          2716                   
00001F88  E948                    2717                   LSL.W #4, D0
00001F8A                          2718                   
00001F8A  123C 000D               2719                   MOVE.B #13, D1
00001F8E                          2720                   
00001F8E  E268                    2721                   LSR.W D1, D0
00001F90                          2722                   
00001F90  1E00                    2723                   MOVE.B D0, D7
00001F92                          2724                   
00001F92  7C00                    2725                   MOVE.L #%000, D6
00001F94                          2726                   
00001F94  4EB9 0000234A           2727                   JSR PRINT_EA                  * to print out the data register
00001F9A                          2728                   
00001F9A  43F9 0000271C           2729                   LEA COMMA, A1
00001FA0                          2730                   
00001FA0  103C 000E               2731                   MOVE.B #14, D0
00001FA4                          2732                   
00001FA4  4E4F                    2733                   TRAP #15
00001FA6                          2734                   
00001FA6  3015                    2735                   MOVE.W (A5), D0
00001FA8                          2736                   
00001FA8  123C 000D               2737                   MOVE.B #13, D1                * to print out the ea that is being shifted
00001FAC                          2738                   
00001FAC  E368                    2739                   LSL.W D1, D0
00001FAE                          2740                   
00001FAE  E268                    2741                   LSR.W D1, D0
00001FB0                          2742                   
00001FB0  1E00                    2743                   MOVE.B D0, D7
00001FB2                          2744                   
00001FB2  7C00                    2745                   MOVE.L #%000, D6              * we know it is a data register
00001FB4                          2746                   
00001FB4  4EB9 0000234A           2747                   JSR PRINT_EA
00001FBA                          2748                   
00001FBA  6000 F134               2749                   BRA PARSE_MEMORY
00001FBE                          2750                                   
00001FBE                          2751  
00001FBE                          2752  PRINTOUT_MEMORY_SHIFTS_EA   * gets the mode and register of the memory ea, and prints it out
00001FBE                          2753                   *JSR GET_SIZE_PURPLE
00001FBE                          2754                   
00001FBE                          2755                   *JSR PRINTOUT_SIZE_PURPLE
00001FBE                          2756                   
00001FBE  43F9 00002702           2757                   LEA SPACE, A1
00001FC4                          2758                   
00001FC4  103C 000E               2759                   MOVE.B #14, D0
00001FC8                          2760                   
00001FC8  4E4F                    2761                   TRAP #15
00001FCA                          2762  
00001FCA  3015                    2763                   MOVE.W (A5), D0
00001FCC                          2764                   
00001FCC  123C 000A               2765                   MOVE.B #10, D1
00001FD0                          2766                   
00001FD0  E368                    2767                   LSL.W D1, D0
00001FD2                          2768                   
00001FD2  123C 000D               2769                   MOVE.B #13, D1
00001FD6                          2770                   
00001FD6  E268                    2771                   LSR.W D1, D0
00001FD8                          2772                   
00001FD8  2C00                    2773                   MOVE.L D0, D6
00001FDA                          2774                   
00001FDA  3015                    2775                   MOVE.W (A5), D0
00001FDC                          2776                   
00001FDC  123C 000D               2777                   MOVE.B #13, D1
00001FE0                          2778                   
00001FE0  E368                    2779                   LSL.W D1, D0
00001FE2                          2780                   
00001FE2  E268                    2781                   LSR.W D1, D0
00001FE4                          2782                   
00001FE4  2E00                    2783                   MOVE.L D0, D7
00001FE6                          2784                   
00001FE6  4EB9 0000234A           2785                   JSR PRINT_EA
00001FEC                          2786                   
00001FEC  4E75                    2787                   RTS
00001FEE                          2788                                   
00001FEE                          2789                
00001FEE  43F9 0000263C           2790  MOVEB            LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00001FF4                          2791  
00001FF4  4280                    2792                   CLR.L  D0
00001FF6                          2793                   
00001FF6  103C 000E               2794                   MOVE.B #14, D0
00001FFA                          2795                   
00001FFA  4E4F                    2796                   TRAP #15
00001FFC                          2797                   
00001FFC  43F9 000026EA           2798                   LEA SIZE_B_PRINT, A1
00002002                          2799                   
00002002  4E4F                    2800                   TRAP #15               * done printing opcode and size
00002004                          2801                   
00002004  1A3C 0000               2802                   MOVE.B     #%00, D5
00002008                          2803                   
00002008  6000 00A6               2804                   BRA PRINTOUT_MOVE_EA
0000200C                          2805  
0000200C  4280                    2806  MOVEW            CLR.L D0
0000200E                          2807                   
0000200E  4281                    2808                   CLR.L D1
00002010                          2809                   
00002010  3015                    2810                   MOVE.W (A5),D0
00002012                          2811                   
00002012  EF48                    2812                   LSL.W #7,D0
00002014                          2813                   
00002014  123C 000D               2814                   MOVE.B #13,D1
00002018                          2815                   
00002018  E268                    2816                   LSR.W D1,D0
0000201A                          2817                   
0000201A  B03C 0001               2818                   CMP.B #1,D0            *check to see if the mode of the destination is an address register
0000201E                          2819                   
0000201E  6700 0054               2820                   BEQ MOVEAW             *if the destination is an address, it is MOVEA
00002022                          2821                   
00002022  43F9 0000263C           2822                   LEA MOVE_MESSAGE, A1   * printing out the opcode and size
00002028                          2823                   
00002028  4280                    2824                   CLR.L D0
0000202A                          2825                   
0000202A  103C 000E               2826                   MOVE.B #14, D0
0000202E                          2827                   
0000202E  4E4F                    2828                   TRAP #15
00002030                          2829                   
00002030  43F9 000026F0           2830                   LEA SIZE_W_PRINT, A1
00002036                          2831                   
00002036  4E4F                    2832                   TRAP #15               * done printing opcode and size
00002038                          2833                   
00002038  1A3C 0001               2834                   MOVE.B     #%01, D5
0000203C                          2835                      
0000203C  6000 0072               2836                   BRA PRINTOUT_MOVE_EA
00002040                          2837                
00002040                          2838  
00002040  4280                    2839  MOVEL            CLR.L D0
00002042                          2840                   
00002042  4281                    2841                   CLR.L D1
00002044                          2842                   
00002044  3015                    2843                   MOVE.W (A5),D0
00002046                          2844                   
00002046  EF48                    2845                   LSL.W #7,D0
00002048                          2846                   
00002048  123C 000D               2847                   MOVE.B #13,D1
0000204C                          2848                   
0000204C  E268                    2849                   LSR.W D1,D0
0000204E                          2850                   
0000204E  B03C 0001               2851                   CMP.B #1,D0            *check to see if the mode of the destination is equal to 1
00002052                          2852                   
00002052  6700 003E               2853                   BEQ MOVEAL             *if the mode is 1, then it is an address register, and the opcode is MOVEA
00002056                          2854                   
00002056  43F9 0000263C           2855                   LEA MOVE_MESSAGE, A1   * printing out opcode and size
0000205C                          2856                   
0000205C  4280                    2857                   CLR.L D0
0000205E                          2858                   
0000205E  103C 000E               2859                   MOVE.B #14, D0
00002062                          2860                   
00002062  4E4F                    2861                   TRAP #15
00002064                          2862                   
00002064  43F9 000026F6           2863                   LEA SIZE_L_PRINT, A1
0000206A                          2864                   
0000206A  4E4F                    2865                   TRAP #15               * done printing opcode and size
0000206C                          2866                   
0000206C  1A3C 0002               2867                   MOVE.B     #%10, D5
00002070                          2868                   
00002070  6000 003E               2869                   BRA PRINTOUT_MOVE_EA
00002074                          2870                   
00002074                          2871                   
00002074  43F9 00002635           2872  MOVEAW           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
0000207A                          2873  
0000207A  4280                    2874                   CLR.L D0
0000207C                          2875                   
0000207C  103C 000E               2876                   MOVE.B #14, D0
00002080                          2877                   
00002080  4E4F                    2878                   TRAP #15
00002082                          2879                   
00002082  43F9 000026F0           2880                   LEA SIZE_W_PRINT, A1
00002088                          2881                   
00002088  4E4F                    2882                   TRAP #15               * done printing out opcode and size
0000208A                          2883                   
0000208A  1A3C 0001               2884                   MOVE.B     #%01, D5
0000208E                          2885                   
0000208E  6000 0020               2886                   BRA PRINTOUT_MOVE_EA
00002092                          2887  
00002092  43F9 00002635           2888  MOVEAL           LEA MOVEA_MESSAGE, A1  * start printing out opcode and size
00002098                          2889  
00002098  4280                    2890                   CLR.L D0
0000209A                          2891                   
0000209A  103C 000E               2892                   MOVE.B #14, D0
0000209E                          2893                   
0000209E  4E4F                    2894                   TRAP #15
000020A0                          2895                   
000020A0  43F9 000026F6           2896                   LEA SIZE_L_PRINT, A1
000020A6                          2897                   
000020A6  4E4F                    2898                   TRAP #15               * done printing out opcode and size
000020A8                          2899                   
000020A8  1A3C 0002               2900                   MOVE.B     #%10, D5
000020AC                          2901                   
000020AC  6000 0002               2902                   BRA PRINTOUT_MOVE_EA
000020B0                          2903  
000020B0                          2904  PRINTOUT_MOVE_EA
000020B0  4247                    2905                   CLR    D7 
000020B2                          2906                   
000020B2  4246                    2907                   CLR    D6               
000020B4                          2908                   
000020B4  3015                    2909                   MOVE.W (A5), D0
000020B6                          2910                   
000020B6  123C 000A               2911                   MOVE.B #10, D1
000020BA                          2912                   
000020BA  E368                    2913                   LSL.W D1, D0
000020BC                          2914                   
000020BC  123C 000D               2915                   MOVE.B #13, D1
000020C0                          2916                   
000020C0  E268                    2917                   LSR.W D1, D0
000020C2                          2918                   
000020C2  1C00                    2919                   MOVE.B D0, D6          * getting the mode of the second ea
000020C4                          2920                   
000020C4  3015                    2921                   MOVE.W (A5), D0
000020C6                          2922                   
000020C6  123C 000D               2923                   MOVE.B #13, D1
000020CA                          2924                   
000020CA  E368                    2925                   LSL.W D1, D0
000020CC                          2926                   
000020CC  E268                    2927                   LSR.W D1, D0
000020CE                          2928                   
000020CE  1E00                    2929                   MOVE.B D0, D7          * getting the register of the second ea
000020D0                          2930                   
000020D0  4EB9 0000234A           2931                   JSR PRINT_EA
000020D6                          2932                   
000020D6  43F9 0000271C           2933                   LEA COMMA, A1
000020DC                          2934                   
000020DC  103C 000E               2935                   MOVE.B #14, D0
000020E0                          2936                   
000020E0  4E4F                    2937                   TRAP #15
000020E2                          2938                   
000020E2  3015                    2939                   MOVE.W (A5), D0
000020E4                          2940                   
000020E4  E948                    2941                   LSL.W #4, D0
000020E6                          2942                   
000020E6  123C 000D               2943                   MOVE.B #13, D1
000020EA                          2944                   
000020EA  E268                    2945                   LSR.W D1, D0
000020EC                          2946                   
000020EC  1E00                    2947                   MOVE.B D0, D7          * getting the register of the first ea
000020EE                          2948                   
000020EE  3015                    2949                   MOVE.W (A5), D0
000020F0                          2950                   
000020F0  EF48                    2951                   LSL.W #7, D0
000020F2                          2952                   
000020F2  123C 000D               2953                   MOVE.B #13, D1
000020F6                          2954                   
000020F6  E268                    2955                   LSR.W D1, D0
000020F8                          2956                   
000020F8  1C00                    2957                   MOVE.B D0, D6          * getting the mode of the first ea
000020FA                          2958                   
000020FA  4EB9 0000234A           2959                   JSR PRINT_EA
00002100                          2960                   
00002100  6000 EFEE               2961                   BRA PARSE_MEMORY
00002104                          2962  
00002104                          2963  
00002104                          2964  
00002104                          2965  
00002104                          2966  
00002104                          2967  
00002104                          2968  -------------------- end include --------------------
00002104                          2969                  INCLUDE 'BCC.X68'
00002104                          2970  
00002104                          2971  
00002104                          2972  BCC           
00002104  4240                    2973                 CLR       D0              *Zero it
00002106                          2974  
00002106  3015                    2975                 MOVE.W      (A5),D0     *We'll play with it here
00002108                          2976                 
00002108  4241                    2977                 CLR       D1
0000210A                          2978  
0000210A                          2979                 
0000210A  123C 0004               2980                 MOVE.B      #4, D1
0000210E                          2981                 
0000210E  E368                    2982                 LSL.W       D1, D0
00002110                          2983  
00002110  123C 000C               2984                 MOVE.B      #12,D1       *Shift 12 bits to the right  
00002114                          2985  
00002114  E268                    2986                 LSR.W       D1,D0           *Move the bi
00002116                          2987                 
00002116  B03C 0004               2988                 CMP.B       #%0100, D0
0000211A                          2989                 
0000211A  6700 001A               2990                 BEQ         CC
0000211E                          2991                 
0000211E  B03C 000E               2992                 CMP.B       #%1110, D0
00002122                          2993                 
00002122  6700 003A               2994                 BEQ         GT
00002126                          2995                 
00002126  B03C 000F               2996                 CMP.B       #%1111, D0
0000212A                          2997                 
0000212A  6700 0036               2998                 BEQ         LE
0000212E                          2999                 
0000212E                          3000  
0000212E                          3001                      
0000212E                          3002  
0000212E  6000 0036               3003  HI             BRA         PRINT_BHI 
00002132                          3004  
00002132  6000 0042               3005  LS             BRA         PRINT_BLS  
00002136                          3006  
00002136  6000 004E               3007  CC             BRA         PRINT_BCC
0000213A                          3008  
0000213A  6000 005A               3009  CS             BRA         PRINT_BCS 
0000213E                          3010  
0000213E  6000 0066               3011  NE             BRA         PRINT_BNE 
00002142                          3012  
00002142  6000 0072               3013  EQ             BRA         PRINT_BEQ
00002146                          3014  
00002146  6000 007E               3015  VC             BRA         PRINT_BVC
0000214A                          3016  
0000214A  6000 008A               3017  VS             BRA         PRINT_BVS
0000214E                          3018  
0000214E  6000 0096               3019  PL             BRA         PRINT_BPL
00002152                          3020  
00002152  6000 00A2               3021  MI             BRA         PRINT_BMI 
00002156                          3022  
00002156  6000 00AE               3023  GE             BRA         PRINT_BGE 
0000215A                          3024  
0000215A  6000 00BA               3025  LT             BRA         PRINT_BLT
0000215E                          3026  
0000215E  6000 00C6               3027  GT             BRA         PRINT_BGT      
00002162                          3028  
00002162  6000 00D2               3029  LE             BRA         PRINT_BLE 
00002166                          3030  
00002166                          3031  
00002166                          3032  PRINT_BHI      
00002166  43F9 0000267B           3033                 LEA BHI_MESSAGE, A1
0000216C                          3034            
0000216C  103C 000E               3035                 MOVE.B #14, D0
00002170                          3036                   
00002170  4E4F                    3037                 TRAP #15    
00002172                          3038                 
00002172  6000 00CE               3039                 BRA DISPLACEMENT
00002176                          3040                 
00002176                          3041  PRINT_BLS
00002176  43F9 00002683           3042                 LEA BLS_MESSAGE, A1
0000217C                          3043                   
0000217C  103C 000E               3044                 MOVE.B #14, D0
00002180                          3045                   
00002180  4E4F                    3046                 TRAP #15
00002182                          3047                 
00002182  6000 00BE               3048                 BRA DISPLACEMENT
00002186                          3049  PRINT_BCC
00002186  43F9 00002663           3050                 LEA BCC_MESSAGE, A1
0000218C                          3051                   
0000218C  103C 000E               3052                 MOVE.B #14, D0
00002190                          3053                   
00002190  4E4F                    3054                 TRAP #15
00002192                          3055                 
00002192  6000 00AE               3056                 BRA DISPLACEMENT
00002196                          3057  PRINT_BCS
00002196  43F9 0000266F           3058                 LEA BCS_MESSAGE, A1
0000219C                          3059                   
0000219C  103C 000E               3060                 MOVE.B #14, D0
000021A0                          3061                   
000021A0  4E4F                    3062                 TRAP #15
000021A2                          3063                 
000021A2  6000 009E               3064                 BRA DISPLACEMENT
000021A6                          3065  PRINT_BNE
000021A6  43F9 0000266B           3066                 LEA BNE_MESSAGE, A1
000021AC                          3067                   
000021AC  103C 000E               3068                 MOVE.B #14, D0
000021B0                          3069                   
000021B0  4E4F                    3070                 TRAP #15
000021B2                          3071                 
000021B2  6000 008E               3072                 BRA DISPLACEMENT
000021B6                          3073  PRINT_BEQ
000021B6  43F9 00002667           3074                 LEA BEQ_MESSAGE, A1
000021BC                          3075                   
000021BC  103C 000E               3076                 MOVE.B #14, D0
000021C0                          3077                   
000021C0  4E4F                    3078                 TRAP #15
000021C2                          3079                 
000021C2  6000 007E               3080                 BRA DISPLACEMENT
000021C6                          3081  PRINT_BVC
000021C6  43F9 00002693           3082                 LEA BVC_MESSAGE, A1
000021CC                          3083                   
000021CC  103C 000E               3084                 MOVE.B #14, D0
000021D0                          3085                   
000021D0  4E4F                    3086                 TRAP #15     
000021D2                          3087                 
000021D2  6000 006E               3088                 BRA DISPLACEMENT
000021D6                          3089  PRINT_BVS
000021D6  43F9 00002697           3090                 LEA BVS_MESSAGE, A1
000021DC                          3091                   
000021DC  103C 000E               3092                 MOVE.B #14, D0
000021E0                          3093                   
000021E0  4E4F                    3094                 TRAP #15
000021E2                          3095                 
000021E2  6000 005E               3096                 BRA DISPLACEMENT
000021E6                          3097  PRINT_BPL
000021E6  43F9 0000268F           3098                 LEA BPL_MESSAGE, A1
000021EC                          3099                   
000021EC  103C 000E               3100                 MOVE.B #14, D0
000021F0                          3101                   
000021F0  4E4F                    3102                 TRAP #15
000021F2                          3103                 
000021F2  6000 004E               3104                 BRA DISPLACEMENT
000021F6                          3105  PRINT_BMI
000021F6  43F9 0000268B           3106                 LEA BMI_MESSAGE, A1
000021FC                          3107                   
000021FC  103C 000E               3108                 MOVE.B #14, D0
00002200                          3109                   
00002200  4E4F                    3110                 TRAP #15
00002202                          3111                 
00002202  6000 003E               3112                 BRA DISPLACEMENT
00002206                          3113  PRINT_BGE
00002206  43F9 00002673           3114                 LEA BGE_MESSAGE, A1
0000220C                          3115                   
0000220C  103C 000E               3116                 MOVE.B #14, D0
00002210                          3117                   
00002210  4E4F                    3118                 TRAP #15
00002212                          3119                 
00002212  6000 002E               3120                 BRA DISPLACEMENT
00002216                          3121  PRINT_BLT
00002216  43F9 00002687           3122                 LEA BLT_MESSAGE, A1
0000221C                          3123                   
0000221C  103C 000E               3124                 MOVE.B #14, D0
00002220                          3125                   
00002220  4E4F                    3126                 TRAP #15
00002222                          3127                 
00002222  6000 001E               3128                 BRA DISPLACEMENT
00002226                          3129  PRINT_BGT
00002226  43F9 00002677           3130                 LEA BGT_MESSAGE, A1
0000222C                          3131                   
0000222C  103C 000E               3132                 MOVE.B #14, D0
00002230                          3133                   
00002230  4E4F                    3134                 TRAP #15
00002232                          3135                 
00002232  6000 000E               3136                 BRA DISPLACEMENT
00002236                          3137  PRINT_BLE
00002236  43F9 0000267F           3138                 LEA BLE_MESSAGE, A1
0000223C                          3139                   
0000223C  103C 000E               3140                 MOVE.B #14, D0
00002240                          3141                   
00002240  4E4F                    3142                 TRAP #15
00002242                          3143                 
00002242                          3144  DISPLACEMENT   
00002242                          3145  
00002242  43F9 00002702           3146                 LEA     SPACE, A1
00002248                          3147  
00002248  103C 000E               3148                 MOVE.B #14, D0
0000224C                          3149  
0000224C  4E4F                    3150                 TRAP #15 
0000224E                          3151  
0000224E  43F9 000026FC           3152                 LEA     POUND_SIGN, A1
00002254                          3153              
00002254  103C 000E               3154                 MOVE.B  #14, D0
00002258                          3155              
00002258  4E4F                    3156                 TRAP #15
0000225A                          3157              
0000225A  43F9 000026FE           3158                 LEA     HEX_SIGN, A1
00002260                          3159              
00002260  4E4F                    3160                 TRAP #15
00002262                          3161  
00002262  4280                    3162                 CLR.L       D0              *Zero it
00002264                          3163  
00002264  3015                    3164                 MOVE.W      (A5),D0     *We'll play with it here
00002266                          3165                 
00002266  123C 0008               3166                 MOVE.B      #8, D1
0000226A                          3167                 
0000226A  E368                    3168                 LSL.W       D1, D0
0000226C                          3169  
0000226C  123C 0008               3170                 MOVE.B      #8,D1       *Shift 12 bits to the right  
00002270                          3171  
00002270  E268                    3172                 LSR.W       D1,D0           *Move the bits
00002272                          3173                 
00002272                          3174                 *chk the D0 for 8, 16, or 32 but displacement
00002272                          3175                  
00002272  B03C 0000               3176                 CMP.B  #$00, D0
00002276                          3177  
00002276  6700 0018               3178                 BEQ  a_16_BIT 
0000227A                          3179  
0000227A  B03C 00FF               3180                 CMP.B #$FF, D0   
0000227E                          3181  
0000227E  6700 001E               3182                 BEQ  a_32_BIT
00002282                          3183                  
00002282                          3184                  *else 
00002282                          3185                  
00002282  4285                    3186                 CLR.L D5
00002284                          3187                 
00002284  3A00                    3188                 MOVE.W D0, D5      
00002286                          3189          
00002286  4EB9 000022AC           3190                 JSR  HEX_TO_ASCII
0000228C                          3191                 
0000228C  4EF8 10F0               3192                 JMP PARSE_MEMORY
00002290                          3193                            
00002290                          3194  a_16_BIT
00002290  4285                    3195          CLR.L  D5
00002292                          3196          
00002292  3A1E                    3197          MOVE.W (A6)+, D5
00002294                          3198          
00002294  4EB9 000022AC           3199          JSR  HEX_TO_ASCII
0000229A                          3200          
0000229A  4EF8 10F0               3201          JMP PARSE_MEMORY
0000229E                          3202  a_32_BIT
0000229E                          3203  
0000229E  4285                    3204          CLR.L  D5
000022A0                          3205          
000022A0  2A1E                    3206          MOVE.L (A6)+, D5
000022A2                          3207          
000022A2  4EB9 000022AC           3208          JSR  HEX_TO_ASCII
000022A8                          3209          
000022A8  4EF8 10F0               3210          JMP PARSE_MEMORY
000022AC                          3211            
000022AC                          3212  
000022AC                          3213  
000022AC                          3214  
000022AC                          3215  
000022AC                          3216  
000022AC                          3217  
000022AC                          3218  
000022AC                          3219  
000022AC                          3220  
000022AC                          3221  
000022AC                          3222  
000022AC                          3223  -------------------- end include --------------------
000022AC                          3224                  INCLUDE 'HEX_TO_ASCII_V1.X68'
000022AC                          3225      *ORG    $5000
000022AC                          3226  
000022AC                          3227  
000022AC                          3228  HEX_TO_ASCII      
000022AC  4283                    3229       CLR.L      D3
000022AE                          3230       
000022AE  BABC 00000000           3231       CMP.L       #0, D5
000022B4                          3232       
000022B4  6700 0086               3233       BEQ         PRINT_ZERO
000022B8                          3234      
000022B8                          3235       *MOVE.L     #$ABCDEF, D5
000022B8                          3236       
000022B8                          3237  LOOP     
000022B8  2C05                    3238       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
000022BA                          3239       
000022BA  4282                    3240       CLR.L      D2
000022BC                          3241       
000022BC  143C 001C               3242       MOVE.B     #28, D2
000022C0                          3243  
000022C0  E4AE                    3244       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
000022C2                          3245       
000022C2  BC3C 000A               3246       CMP.B      #10, D6
000022C6                          3247       
000022C6  6C00 0006               3248       BGE        LETTER_1                  * determine if a letter or a number
000022CA                          3249       
000022CA  6000 000C               3250       BRA        NUMBER_1
000022CE                          3251       
000022CE                          3252  LETTER_1
000022CE  0606 0037               3253       ADD.B      #55, D6
000022D2                          3254       
000022D2  1206                    3255       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000022D4                          3256       
000022D4  6000 000C               3257       BRA        PRINTOUT_NIBBLE
000022D8                          3258  
000022D8                          3259  NUMBER_1     
000022D8  0606 0030               3260       ADD.B      #48, D6
000022DC                          3261       
000022DC  1206                    3262       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
000022DE                          3263       
000022DE  6000 0002               3264       BRA        PRINTOUT_NIBBLE
000022E2                          3265  
000022E2                          3266  
000022E2                          3267  PRINTOUT_NIBBLE
000022E2  E98D                    3268      LSL.L      #4, D5                   * shift out the nibble you just read from the source
000022E4                          3269      
000022E4  5203                    3270      ADD.B      #1, D3
000022E6                          3271      
000022E6  BC3C 0030               3272      CMP.B      #$30, D6
000022EA                          3273  
000022EA  67CC                    3274      BEQ        LOOP             
000022EC                          3275      
000022EC  103C 0006               3276      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
000022F0                          3277      
000022F0  4E4F                    3278      TRAP #15
000022F2                          3279       
000022F2  B63C 0008               3280      CMP.B      #8, D3                   * compare to the counter to check if you are done
000022F6                          3281       
000022F6  6700 023E               3282      BEQ        DONE
000022FA                          3283          
000022FA  6000 0002               3284      BRA LOOP_ZERO                            * continue the loop and print next nibble
000022FE                          3285      
000022FE                          3286      
000022FE                          3287  LOOP_ZERO    
000022FE  2C05                    3288       MOVE.L     D5, D6                  * put the data in a register so we can manipulate it
00002300                          3289       
00002300  4282                    3290       CLR.L      D2
00002302                          3291       
00002302  143C 001C               3292       MOVE.B     #28, D2
00002306                          3293  
00002306  E4AE                    3294       LSR.L      D2, D6                  * shift out everything to the right of the last nibble, we print backwards so it shows up the correct order in the console
00002308                          3295       
00002308  BC3C 000A               3296       CMP.B      #10, D6
0000230C                          3297       
0000230C  6C00 0006               3298       BGE        LETTER_1_ZERO                  * determine if a letter or a number
00002310                          3299       
00002310  6000 000C               3300       BRA        NUMBER_1_ZERO
00002314                          3301       
00002314                          3302  LETTER_1_ZERO
00002314  0606 0037               3303       ADD.B      #55, D6
00002318                          3304       
00002318  1206                    3305       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
0000231A                          3306       
0000231A  6000 000C               3307       BRA        PRINTOUT_NIBBLE_ZERO
0000231E                          3308  
0000231E                          3309  NUMBER_1_ZERO    
0000231E  0606 0030               3310       ADD.B      #48, D6
00002322                          3311       
00002322  1206                    3312       MOVE.B     D6, D1                  * add the amount to change to ascii and move to D1 to prepare for printing
00002324                          3313       
00002324  6000 0002               3314       BRA        PRINTOUT_NIBBLE_ZERO
00002328                          3315  
00002328                          3316  
00002328                          3317  PRINTOUT_NIBBLE_ZERO
00002328  E98D                    3318      LSL.L      #4, D5                   * shift out the nibble you just read from the source
0000232A                          3319      
0000232A  5203                    3320      ADD.B      #1, D3            
0000232C                          3321      
0000232C  103C 0006               3322      MOVE.B     #6, D0                      * use TRAP task #6 to print a single character from D1  
00002330                          3323      
00002330  4E4F                    3324      TRAP #15
00002332                          3325       
00002332  B63C 0008               3326      CMP.B      #8, D3                   * compare to the counter to check if you are done
00002336                          3327       
00002336  6700 01FE               3328      BEQ        DONE
0000233A                          3329      
0000233A  60C2                    3330      BRA LOOP_ZERO                            * continue the loop and print next nibble
0000233C                          3331          
0000233C                          3332  
0000233C                          3333       
0000233C                          3334  PRINT_ZERO
0000233C  123C 0030               3335      MOVE.B      #$30, D1
00002340                          3336  
00002340  103C 0006               3337      MOVE.B      #6, D0  
00002344                          3338  
00002344  4E4F                    3339      TRAP #15 
00002346                          3340  
00002346  6000 01EE               3341      BRA DONE  
0000234A                          3342  
0000234A                          3343  
0000234A                          3344      *SIMHALT             ; halt simulator
0000234A                          3345  
0000234A                          3346  
0000234A                          3347      *END    START       ; last line of source
0000234A                          3348  -------------------- end include --------------------
0000234A                          3349                  INCLUDE 'JUMPTABLE-EA.X68'
0000234A                          3350   *ORG     $400
0000234A                          3351  
0000234A                          3352  
0000234A                          3353  
0000234A                          3354  
0000234A                          3355  
0000234A                          3356                 *MOVE.B       #%00, D5         *SIZE
0000234A                          3357                
0000234A                          3358                 *MOVE.B       #%111,D6         *MODE
0000234A                          3359                 
0000234A                          3360                 *MOVE.B       #%100,D7         *REGISTER
0000234A                          3361                 
0000234A                          3362                 *MOVE.L       #$4000, A5
0000234A                          3363  
0000234A                          3364                 *MOVE.B       #$0040, (A5)  
0000234A                          3365  PRINT_EA 
0000234A                          3366                 
0000234A  41F9 00002358           3367                 LEA     jmp_table_ea,A0      *Index into the table
00002350                          3368  
00002350  CCFC 0006               3369                 MULU        #6,D6            *Form offset     
00002354                          3370  
00002354  4EF0 6000               3371                 JMP         0(A0,D6)         *Jump indirect with index
00002358                          3372   
00002358  4EF9 00002388           3373  jmp_table_ea   JMP         code000
0000235E                          3374  
0000235E  4EF9 0000238C           3375                 JMP         code001
00002364                          3376  
00002364  4EF9 00002390           3377                 JMP         code010
0000236A                          3378  
0000236A  4EF9 00002394           3379                 JMP         code011
00002370                          3380  
00002370  4EF9 00002398           3381                 JMP         code100
00002376                          3382  
00002376  4EF9 0000239C           3383                 JMP         code101
0000237C                          3384  
0000237C  4EF9 000023A0           3385                 JMP         code110
00002382                          3386  
00002382  4EF9 000023A4           3387                 JMP         code111
00002388                          3388          
00002388                          3389  
00002388                          3390   
00002388                          3391  
00002388                          3392  
00002388                          3393   
00002388                          3394  
00002388                          3395   
00002388                          3396  
00002388  6000 001E               3397  code000       BRA         DATA_REGISTER
0000238C                          3398  
0000238C  6000 0036               3399  code001       BRA         ADDRESS_REGISTER
00002390                          3400  
00002390  6000 004E               3401  code010       BRA         INDIRECT_ADDRESS
00002394                          3402  
00002394  6000 0074               3403  code011       BRA         ADDRESS_PI    * post increment
00002398                          3404  
00002398  6000 009A               3405  code100       BRA         ADDRESS_PD    * pre decrement
0000239C                          3406  
0000239C  6000 00C0               3407  code101       BRA         ADDRESS_W_DISPLACEMENT
000023A0                          3408  
000023A0  6000 00C0               3409  code110       BRA         ADDRESS_W_INDEX
000023A4                          3410  
000023A4  6000 00C0               3411  code111       BRA         GROUP_111
000023A8                          3412  
000023A8                          3413   
000023A8                          3414  DATA_REGISTER
000023A8                          3415  
000023A8  43F9 00002707           3416              LEA D_REGISTER, A1
000023AE                          3417              
000023AE  4280                    3418              CLR.L D0
000023B0                          3419              
000023B0  103C 000E               3420              MOVE.B #14, D0
000023B4                          3421              
000023B4  4E4F                    3422              TRAP #15                * print out 'D' for data register
000023B6                          3423              
000023B6  4281                    3424              CLR.L D1
000023B8                          3425              
000023B8  1207                    3426              MOVE.B D7, D1
000023BA                          3427              
000023BA  103C 0003               3428              MOVE.B #3, D0           * print out the number in the register
000023BE                          3429              
000023BE  4E4F                    3430              TRAP #15
000023C0                          3431              
000023C0  6000 0174               3432              BRA DONE
000023C4                          3433              
000023C4                          3434  
000023C4                          3435  ADDRESS_REGISTER
000023C4  43F9 00002709           3436              LEA A_REGISTER, A1
000023CA                          3437              
000023CA  4280                    3438              CLR.L D0
000023CC                          3439              
000023CC  103C 000E               3440              MOVE.B #14, D0          * print out the 'A' for address register
000023D0                          3441              
000023D0  4E4F                    3442              TRAP #15
000023D2                          3443              
000023D2  4281                    3444              CLR.L D1
000023D4                          3445              
000023D4  1207                    3446              MOVE.B D7, D1
000023D6                          3447              
000023D6  103C 0003               3448              MOVE.B #3, D0
000023DA                          3449              
000023DA  4E4F                    3450              TRAP #15                * print out the value in the data register
000023DC                          3451  
000023DC  6000 0158               3452              BRA DONE
000023E0                          3453              
000023E0                          3454  INDIRECT_ADDRESS
000023E0  43F9 0000270B           3455              LEA IA_START, A1
000023E6                          3456              
000023E6  4280                    3457              CLR.L D0
000023E8                          3458              
000023E8  103C 000E               3459              MOVE.B #14, D0          * print out the '(A' for start of indirect address register
000023EC                          3460              
000023EC  4E4F                    3461              TRAP #15
000023EE                          3462              
000023EE  4281                    3463              CLR.L D1
000023F0                          3464              
000023F0  1207                    3465              MOVE.B D7, D1
000023F2                          3466              
000023F2  103C 0003               3467              MOVE.B #3, D0
000023F6                          3468              
000023F6  4E4F                    3469              TRAP #15                * print out the value in the data register
000023F8                          3470              
000023F8  43F9 0000270E           3471              LEA IA_END, A1
000023FE                          3472  
000023FE  4280                    3473              CLR.L D0
00002400                          3474              
00002400  103C 000E               3475              MOVE.B #14, D0          * print out the ')' for end of post increment address register
00002404                          3476              
00002404  4E4F                    3477              TRAP #15
00002406                          3478              
00002406  6000 012E               3479              BRA DONE
0000240A                          3480  
0000240A                          3481  ADDRESS_PI
0000240A  43F9 00002710           3482              LEA A_PI_START, A1
00002410                          3483              
00002410  4280                    3484              CLR.L D0
00002412                          3485              
00002412  103C 000E               3486              MOVE.B #14, D0          * print out the '(A' for start of post increment address register
00002416                          3487              
00002416  4E4F                    3488              TRAP #15
00002418                          3489              
00002418  4281                    3490              CLR.L D1
0000241A                          3491              
0000241A  1207                    3492              MOVE.B D7, D1
0000241C                          3493              
0000241C  103C 0003               3494              MOVE.B #3, D0
00002420                          3495              
00002420  4E4F                    3496              TRAP #15                * print out the value in the data register
00002422                          3497              
00002422  43F9 00002713           3498              LEA A_PI_END, A1
00002428                          3499  
00002428  4280                    3500              CLR.L D0
0000242A                          3501              
0000242A  103C 000E               3502              MOVE.B #14, D0          * print out the ')+' for end of post increment address register
0000242E                          3503     
0000242E  4E4F                    3504              TRAP #15
00002430                          3505              
00002430  6000 0104               3506              BRA DONE  
00002434                          3507         
00002434                          3508  ADDRESS_PD
00002434                          3509  
00002434  43F9 00002716           3510              LEA A_PD_START, A1
0000243A                          3511              
0000243A  4280                    3512              CLR.L D0
0000243C                          3513              
0000243C  103C 000E               3514              MOVE.B #14, D0          * print out the '-(A' for start of pre decrement address register
00002440                          3515              
00002440  4E4F                    3516              TRAP #15
00002442                          3517              
00002442  4281                    3518              CLR.L D1
00002444                          3519              
00002444  1207                    3520              MOVE.B D7, D1
00002446                          3521              
00002446  103C 0003               3522              MOVE.B #3, D0
0000244A                          3523              
0000244A  4E4F                    3524              TRAP #15                * print out the value in the data register
0000244C                          3525              
0000244C  43F9 0000271A           3526              LEA A_PD_END, A1
00002452                          3527  
00002452  4280                    3528              CLR.L D0
00002454                          3529              
00002454  103C 000E               3530              MOVE.B #14, D0          * print out the ')-' for end of pre decrement
00002458                          3531  
00002458  4E4F                    3532              TRAP #15
0000245A                          3533              
0000245A  6000 00DA               3534              BRA DONE
0000245E                          3535              
0000245E                          3536  ADDRESS_W_DISPLACEMENT
0000245E  6000 00D6               3537              BRA DONE
00002462                          3538  
00002462                          3539  ADDRESS_W_INDEX
00002462  6000 00D2               3540              BRA DONE
00002466                          3541  
00002466                          3542  GROUP_111
00002466                          3543  
00002466  41F9 00002474           3544                 LEA         jmp_table_ea_111,A0    *Index into the table
0000246C                          3545  
0000246C  CEFC 0006               3546                 MULU        #6,D7       *Form offset     
00002470                          3547  
00002470  4EF0 7000               3548                 JMP         0(A0,D7)   *Jump indirect with index
00002474                          3549                 
00002474                          3550  jmp_table_ea_111   
00002474  4EF9 0000249A           3551                 JMP         reg000
0000247A                          3552  
0000247A  4EF9 0000249E           3553                 JMP         reg001
00002480                          3554  
00002480  4EF9 00002492           3555                 JMP         reg010
00002486                          3556  
00002486  4EF9 00002496           3557                 JMP         reg011
0000248C                          3558  
0000248C  4EF9 000024A2           3559                 JMP         reg100
00002492                          3560          
00002492                          3561  
00002492  6000 0012               3562  reg010       BRA         PC_W_DISPLACEMENT
00002496                          3563  
00002496  6000 0012               3564  reg011       BRA         PC_W_INDEX
0000249A                          3565  
0000249A  6000 0012               3566  reg000       BRA         ABSOLUTE_SHORT
0000249E                          3567  
0000249E  6000 002C               3568  reg001       BRA         ABSOLUTE_LONG
000024A2                          3569  
000024A2  6000 0046               3570  reg100       BRA         IMMEDIATE
000024A6                          3571  
000024A6                          3572  
000024A6                          3573  PC_W_DISPLACEMENT
000024A6  6000 008E               3574              BRA DONE
000024AA                          3575  
000024AA                          3576  PC_W_INDEX
000024AA  6000 008A               3577              BRA DONE
000024AE                          3578  
000024AE                          3579  ABSOLUTE_SHORT
000024AE  43F9 000026FE           3580              LEA         HEX_SIGN, A1
000024B4                          3581              
000024B4  103C 000E               3582              MOVE.B      #14, D0
000024B8                          3583              
000024B8  4E4F                    3584              TRAP #15
000024BA                          3585              
000024BA  4281                    3586              CLR.L       D1
000024BC                          3587              
000024BC  321E                    3588              MOVE.W      (A6)+, D1
000024BE                          3589              
000024BE  103C 000F               3590              MOVE.B      #15, D0
000024C2                          3591              
000024C2  143C 0010               3592              MOVE.B      #16, D2
000024C6                          3593              
000024C6  4E4F                    3594              TRAP #15
000024C8                          3595              
000024C8  6000 006C               3596              BRA DONE  
000024CC                          3597  
000024CC                          3598  
000024CC                          3599  ABSOLUTE_LONG
000024CC  43F9 000026FE           3600              LEA         HEX_SIGN, A1
000024D2                          3601              
000024D2  103C 000E               3602              MOVE.B      #14, D0
000024D6                          3603              
000024D6  4E4F                    3604              TRAP #15
000024D8                          3605              
000024D8  4281                    3606              CLR.L       D1
000024DA                          3607              
000024DA  221E                    3608              MOVE.L      (A6)+, D1
000024DC                          3609              
000024DC  103C 000F               3610              MOVE.B      #15, D0
000024E0                          3611              
000024E0  143C 0010               3612              MOVE.B      #16, D2
000024E4                          3613              
000024E4  4E4F                    3614              TRAP #15
000024E6                          3615                          
000024E6  6000 004E               3616              BRA DONE  
000024EA                          3617  
000024EA                          3618  
000024EA                          3619  IMMEDIATE
000024EA  43F9 000026FC           3620              LEA     POUND_SIGN, A1
000024F0                          3621              
000024F0  103C 000E               3622              MOVE.B  #14, D0
000024F4                          3623              
000024F4  4E4F                    3624              TRAP #15
000024F6                          3625              
000024F6  43F9 000026FE           3626              LEA     HEX_SIGN, A1
000024FC                          3627              
000024FC  4E4F                    3628              TRAP #15
000024FE                          3629              
000024FE  BA3C 0000               3630              CMP.B   #%00, D5
00002502                          3631              
00002502  6700 000E               3632              BEQ     IMMEDIATE_B
00002506                          3633              
00002506  BA3C 0001               3634              CMP.B   #%01, D5
0000250A                          3635              
0000250A  6700 0012               3636              BEQ     IMMEDIATE_W
0000250E                          3637              
0000250E  6000 001A               3638              BRA     IMMEDIATE_L
00002512                          3639              
00002512                          3640  IMMEDIATE_B
00002512  4285                    3641              CLR.L       D5
00002514                          3642     
00002514  3A1E                    3643              MOVE.W      (A6)+, D5
00002516                          3644              
00002516  4EB8 22AC               3645              JSR         HEX_TO_ASCII
0000251A                          3646              
0000251A  6000 001A               3647              BRA DONE
0000251E                          3648  
0000251E                          3649  IMMEDIATE_W
0000251E  4285                    3650              CLR.L       D5
00002520                          3651  
00002520  3A1E                    3652              MOVE.W      (A6)+, D5
00002522                          3653              
00002522  4EB8 22AC               3654              JSR         HEX_TO_ASCII
00002526                          3655              
00002526                          3656              *MOVE.B      #15, D0
00002526                          3657              
00002526                          3658              *MOVE.B      #16, D2
00002526                          3659              
00002526                          3660              *TRAP #15 
00002526                          3661              
00002526  6000 000E               3662              BRA DONE        
0000252A                          3663  
0000252A                          3664  IMMEDIATE_L 
0000252A  4285                    3665              CLR.L       D5
0000252C                          3666              
0000252C  2A1E                    3667              MOVE.L      (A6)+, D5
0000252E                          3668      
0000252E  4EB8 22AC               3669              JSR         HEX_TO_ASCII
00002532                          3670              
00002532  6000 0002               3671              BRA DONE
00002536                          3672              
00002536                          3673  DONE 
00002536  4E75                    3674      RTS
00002538                          3675      
00002538                          3676   * INCLUDE 'MESSAGE_Data.X68'
00002538                          3677   * INCLUDE 'HEX_TO_ASCII_V1.X68'
00002538                          3678       
00002538                          3679          
00002538                          3680  
00002538                          3681  
00002538                          3682  
00002538                          3683  
00002538                          3684  
00002538                          3685  
00002538                          3686  
00002538                          3687  
00002538                          3688  -------------------- end include --------------------
00002538                          3689                  
00002538  4EF8 10F0               3690                  JMP      PARSE_MEMORY
0000253C                          3691                  
0000253C                          3692  PRESS_ENTER_CONTINUE
0000253C  267C 00000000           3693                   MOVEA.L  #outputCountCurr, A3  *reset to 0
00002542  43F9 000025DD           3694                   LEA ENTER, A1
00002548  103C 000E               3695                   MOVE.B #14, D0
0000254C  4E4F                    3696                   TRAP #15
0000254E                          3697                   
0000254E  103C 0005               3698                   MOVE.B #5, D0
00002552  4E4F                    3699                   TRAP #15
00002554                          3700                   
00002554  B23C 000D               3701                   CMP.B #$D, D1
00002558                          3702  
00002558  103C 000B               3703                   MOVE.B #11, D0   *clear display
0000255C  323C FF00               3704                   MOVE.W #$FF00, D1
00002560  4E4F                    3705                   TRAP #15
00002562                          3706  
00002562  4EF8 1114               3707                   JMP CONTINUE_PARSE
00002566                          3708                  
00002566                          3709                 
00002566                          3710                  
00002566                          3711  STOP
00002566                          3712  
00002566                          3713  
00002566                          3714  
00002566                          3715  
00002566                          3716  
00002566                          3717  
00002566                          3718  
00002566                          3719  
00002566                          3720  
00002566                          3721  
00002566                          3722  
00002566                          3723  
00002566                          3724  
00002566                          3725  
00002566                          3726  
00002566                          3727  
00002566                          3728  
00002566                          3729  
00002566                          3730  
00002566                          3731  
00002566                          3732  
00002566                          3733  
00002566                          3734  
00002566                          3735  
00002566                          3736  
00002566                          3737  
00002566                          3738  
00002566                          3739  -------------------- end include --------------------
00002566                          3740  
00002566  FFFF FFFF               3741      SIMHALT             ; halt simulator
0000256A                          3742  
0000256A                          3743      INCLUDE 'DS_Data.X68' * STARTING_ADDR ** ENDING_ADDR
0000256A                          3744  
0000256A                          3745  STARTING_ADDR   DS.L 1
0000256E                          3746  
0000256E                          3747  ENDING_ADDR     DS.L 1
0000256E                          3748  -------------------- end include --------------------
00002572                          3749      INCLUDE 'MESSAGE_Data.X68' 
00002572                          3750  
00002572  =0000000D               3751  CR  EQU $0D
00002572  =0000000A               3752  LF  EQU $0A 
00002572                          3753  
00002572= 57 65 6C 63 6F 6D ...   3754  WELCOME_MESSAGE DC.B 'Welcome to our Team wild pokemon disassembly!!', CR, LF, 0
000025A3= 45 6E 74 65 72 20 ...   3755  STARTING        DC.B 'Enter the starting location: ', 0
000025C1= 45 6E 74 65 72 20 ...   3756  ENDING          DC.B 'Enter the ending locaiton: ', 0
000025DD= 45 6E 74 65 72 20 ...   3757  ENTER           DC.B 'Enter to continue ', 0
000025F0= 49 6E 76 61 6C 69 ...   3758  ERROR_MSG       DC.B 'Invalid Input, must be 8 characters, (0-9), (A-F), re-do ',CR, LF, 0
0000262C= 0D 0A 00                3759  CR_LF           DC.B '', CR, LF, 0
0000262F                          3760      
0000262F= 41 44 44 49 2E 00       3761  ADDI_MESSAGE    DC.B 'ADDI.',0
00002635= 4D 4F 56 45 41 2E 00    3762  MOVEA_MESSAGE   DC.B 'MOVEA.',0
0000263C= 4D 4F 56 45 2E 00       3763  MOVE_MESSAGE    DC.B 'MOVE.',0
00002642= 4E 4F 50 00             3764  NOP_MESSAGE     DC.B 'NOP',0
00002646= 4D 4F 56 45 4D 2E 00    3765  MOVEM_MESSAGE   DC.B 'MOVEM.',0
0000264D= 4A 53 52 00             3766  JSR_MESSAGE     DC.B 'JSR',0
00002651= 52 54 53 00             3767  RTS_MESSAGE     DC.B 'RTS',0
00002655= 43 4C 52 00             3768  CLR_MESSAGE     DC.B 'CLR',0
00002659= 41 44 44 51 2E 00       3769  ADDQ_MESSAGE    DC.B 'ADDQ.',0
0000265F= 4C 45 41 00             3770  LEA_MESSAGE     DC.B 'LEA',0
00002663                          3771  
00002663                          3772  
00002663= 42 43 43 00             3773  BCC_MESSAGE     DC.B 'BCC',0   *//
00002667= 42 45 51 00             3774  BEQ_MESSAGE     DC.B 'BEQ',0   *//
0000266B= 42 4E 45 00             3775  BNE_MESSAGE     DC.B 'BNE',0   *//
0000266F= 42 43 53 00             3776  BCS_MESSAGE     DC.B 'BCS',0   *//
00002673= 42 47 45 00             3777  BGE_MESSAGE     DC.B 'BGE',0   *//
00002677= 42 47 54 00             3778  BGT_MESSAGE     DC.B 'BGT',0   *//
0000267B= 42 48 49 00             3779  BHI_MESSAGE     DC.B 'BHI',0   *//
0000267F= 42 4C 45 00             3780  BLE_MESSAGE     DC.B 'BLE',0   *//
00002683= 42 4C 53 00             3781  BLS_MESSAGE     DC.B 'BLS',0   *//
00002687= 42 4C 54 00             3782  BLT_MESSAGE     DC.B 'BLT',0   *//
0000268B= 42 4D 49 00             3783  BMI_MESSAGE     DC.B 'BMI',0   *//
0000268F= 42 50 4C 00             3784  BPL_MESSAGE     DC.B 'BPL',0   *//
00002693= 42 56 43 00             3785  BVC_MESSAGE     DC.B 'BVC',0   *//
00002697= 42 56 53 00             3786  BVS_MESSAGE     DC.B 'BVS',0   *//
0000269B                          3787  
0000269B= 4D 4F 56 45 51 2E 00    3788  MOVEQ_MESSAGE   DC.B 'MOVEQ.',0
000026A2= 44 49 56 55 2E 00       3789  DIVU_MESSAGE    DC.B 'DIVU.',0
000026A8= 4F 52 2E 00             3790  OR_MESSAGE      DC.B 'OR.',0
000026AC= 53 55 42 2E 00          3791  SUB_MESSAGE     DC.B 'SUB.',0
000026B1= 43 4D 50 2E 00          3792  CMP_MESSAGE     DC.B 'CMP.',0
000026B6= 4D 55 4C 53 2E 00       3793  MULS_MESSAGE    DC.B 'MULS.',0
000026BC= 41 4E 44 2E 00          3794  AND_MESSAGE     DC.B 'AND.',0
000026C1= 41 44 44 2E 00          3795  ADD_MESSAGE     DC.B 'ADD.',0
000026C6= 41 44 44 41 2E 00       3796  ADDA_MESSAGE    DC.B 'ADDA.',0
000026CC= 4C 53 4C 2E 00          3797  LSL_MESSAGE     DC.B 'LSL.',0 *//
000026D1= 41 53 4C 2E 00          3798  ASL_MESSAGE     DC.B 'ASL.',0
000026D6= 52 4F 4C 2E 00          3799  ROL_MESSAGE     DC.B 'ROL.',0
000026DB= 4C 53 52 2E 00          3800  LSR_MESSAGE     DC.B 'LSR.',0 *//
000026E0= 41 53 52 2E 00          3801  ASR_MESSAGE     DC.B 'ASR.',0
000026E5= 52 4F 52 2E 00          3802  ROR_MESSAGE     DC.B 'ROR.',0
000026EA= 42 20 20 20 20 00       3803  SIZE_B_PRINT    DC.B 'B    ',0
000026F0= 57 20 20 20 20 00       3804  SIZE_W_PRINT    DC.B 'W    ',0
000026F6= 4C 20 20 20 20 00       3805  SIZE_L_PRINT    DC.B 'L    ',0
000026FC= 23 00                   3806  POUND_SIGN      DC.B '#',0
000026FE= 24 00                   3807  HEX_SIGN        DC.B '$',0
00002700= 2E 00                   3808  PERIOD          DC.B '.',0
00002702= 20 20 00                3809  SPACE           DC.B '  ',0
00002705= 2F 00                   3810  SLASH           DC.B '/', 0
00002707                          3811  
00002707= 44 00                   3812  D_REGISTER      DC.B 'D',0
00002709= 41 00                   3813  A_REGISTER      DC.B 'A',0
0000270B= 28 41 00                3814  IA_START        DC.B '(A',0
0000270E= 29 00                   3815  IA_END          DC.B ')',0
00002710= 28 41 00                3816  A_PI_START      DC.B '(A',0
00002713= 29 2B 00                3817  A_PI_END        DC.B ')+',0
00002716= 2D 28 41 00             3818  A_PD_START      DC.B '-(A',0
0000271A= 29 00                   3819  A_PD_END        DC.B ')',0
0000271C= 2C 20 00                3820  COMMA           DC.B ', ',0
0000271F                          3821  
0000271F                          3822  
0000271F                          3823  
0000271F                          3824  
0000271F                          3825  
0000271F                          3826  
0000271F                          3827  
0000271F                          3828  
0000271F                          3829  
0000271F                          3830  
0000271F                          3831  
0000271F                          3832  
0000271F                          3833  
0000271F                          3834  
0000271F                          3835  
0000271F                          3836  
0000271F                          3837  
0000271F                          3838  
0000271F                          3839  
0000271F                          3840  -------------------- end include --------------------
0000271F                          3841      *MOVE.B    #3, D2
0000271F                          3842      *MOVE.B    #0, D5
00002720  307C 0400               3843      MOVEA.W   #$400, A0
00002724                          3844      
00002724                          3845      
00002724                          3846      
00002724                          3847  
00002724                          3848      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE_LONG       24CC
ABSOLUTE_SHORT      24AE
ADDA_CODE           11EA
ADDA_MESSAGE        26C6
ADDI                136A
ADDI_B_SIZE         13DA
ADDI_EA             143A
ADDI_MESSAGE        262F
ADDI_W_SIZE         140A
ADDQ                1470
ADDQB               149E
ADDQL               14CA
ADDQW               14B4
ADDQ_MESSAGE        2659
ADDRESS_PD          2434
ADDRESS_PI          240A
ADDRESS_REGISTER    23C4
ADDRESS_W_DISPLACEMENT  245E
ADDRESS_W_INDEX     2462
ADD_ADDA            11D6
ADD_CODE            1258
ADD_FIRST_EA        129E
ADD_MESSAGE         26C1
AND_CODE            1866
AND_FIRST_EA        18A4
AND_MESSAGE         26BC
ASD                 1EB2
ASD_MEMORY          1F0C
ASL                 1EC8
ASL_MESSAGE         26D1
ASR                 1EEA
ASR_MESSAGE         26E0
A_16_BIT            2290
A_32_BIT            229E
A_PD_END            271A
A_PD_START          2716
A_PI_END            2713
A_PI_START          2710
A_REGISTER          2709
BCC                 2104
BCC_MESSAGE         2663
BCS_MESSAGE         266F
BEQ_MESSAGE         2667
BGE_MESSAGE         2673
BGT_MESSAGE         2677
BHI_MESSAGE         267B
BIT0                1C14
BIT1                1C24
BIT10               1CB4
BIT11               1CC4
BIT12               1CD4
BIT13               1CE4
BIT14               1CF4
BIT15               1D04
BIT2                1C34
BIT3                1C44
BIT4                1C54
BIT5                1C64
BIT6                1C74
BIT7                1C84
BIT8                1C94
BIT9                1CA4
BLE_MESSAGE         267F
BLS_MESSAGE         2683
BLT_MESSAGE         2687
BMI_MESSAGE         268B
BNE_MESSAGE         266B
BPL_MESSAGE         268F
BVC_MESSAGE         2693
BVS_MESSAGE         2697
CC                  2136
CHAR                10A0
CHECK               1B66
CHECK_SECOND        1B78
CLR_MESSAGE         2655
CLR_OPCODE          1674
CMP                 1542
CMP_MESSAGE         26B1
CODE000             2388
CODE0000            1196
CODE0001            119A
CODE001             238C
CODE0010            119E
CODE0011            11A2
CODE010             2390
CODE0100            11A6
CODE0101            11AA
CODE011             2394
CODE0110            11AE
CODE0111            11B2
CODE100             2398
CODE1000            11B6
CODE1001            11BA
CODE101             239C
CODE1010            11BE
CODE1011            11C2
CODE110             23A0
CODE1100            11C6
CODE1101            11CA
CODE111             23A4
CODE1110            11CE
CODE1111            11D2
COMMA               271C
CONTINUE_PARSE      1114
CONVERT_STRING      107E
CR                  D
CR_LF               262C
CS                  213A
DATA_REGISTER       23A8
DIRECTION_LEFT      1
DIRECTION_RIGHT     0
DISPLACEMENT        2242
DIVU_CODE           1720
DIVU_MESSAGE        26A2
DIVU_OR             170E
DONE                2536
DONE_MOVEM_LOOP     1D14
DONE_PRINTING       12EE
DR_FIELD            18FC
D_REGISTER          2707
ENDCONV             10DA
ENDING              25C1
ENDING_ADDR         256E
ENDING_MESSAGE      103C
ENTER               25DD
EQ                  2142
ERROR               10CA
ERROR_MSG           25F0
EXAMPLE             606
EXAMPLE1            DE61
FINISH_PRINTING_SIZE  120C
GE                  2156
GET_DATA_REGISTER   132E
GET_SIZE_PURPLE     12C0
GO_THROUGH_MEMORY   10DC
GROUP_0100_CODE     17BA
GROUP_111           2466
GT                  215E
HEX_SIGN            26FE
HEX_TO_ASCII        22AC
HI                  212E
IA_END              270E
IA_START            270B
IMMEDIATE           24EA
IMMEDIATE_B         2512
IMMEDIATE_L         252A
IMMEDIATE_W         251E
INDIRECT_ADDRESS    23E0
IS_USED             1B8C
IS_USED_FIRST       1B82
JMP_TABLE           1136
JMP_TABLE_EA        2358
JMP_TABLE_EA_111    2474
JMP_TABLE_MOVEM     1BB4
JSR_MESSAGE         264D
JSR_OPCODE          163E
LE                  2162
LEA_MESSAGE         265F
LEA_OPCODE          15C4
LETTER_1            22CE
LETTER_1_ZERO       2314
LF                  A
LOOP                22B8
LOOP_MOVEM          1B5E
LOOP_MOVEM_SECOND   1B70
LOOP_ZERO           22FE
LS                  2132
LSD                 1DE2
LSD_MEMORY          1E40
LSL                 1DFC
LSL_MESSAGE         26CC
LSR                 1E1E
LSR_MESSAGE         26DB
LT                  215A
MAX_USER_INPUT      8
MEMORY_REGISTER     1968
MEMORY_SHIFTS       1DB6
MI                  2152
MODE_AL             7
MODE_AN             1
MODE_AS             7
MODE_AWD            5
MODE_AWI            6
MODE_DN             0
MODE_IAN            2
MODE_ID             7
MODE_M_DN           0
MODE_M_PDAN         1
MODE_PCWD           7
MODE_PCWI           7
MODE_PDAN           4
MODE_PIAN           3
MOVEAL              2092
MOVEAW              2074
MOVEA_MESSAGE       2635
MOVEB               1FEE
MOVEL               2040
MOVEM_MESSAGE       2646
MOVEM_OPCODE        18C4
MOVEQ               1D16
MOVEQ_MESSAGE       269B
MOVEW               200C
MOVE_MESSAGE        263C
MULS_AND            181C
MULS_CODE           182E
MULS_MESSAGE        26B6
NE                  213E
NEXT_INSTRUCTION    111C
NOP_MESSAGE         2642
NOP_OPCODE          161E
NUMBER              1090
NUMBER_1            22D8
NUMBER_1_ZERO       231E
OPPOSITE_BIT0       1A5E
OPPOSITE_BIT1       1A6E
OPPOSITE_BIT10      1AFE
OPPOSITE_BIT11      1B0E
OPPOSITE_BIT12      1B1E
OPPOSITE_BIT13      1B2E
OPPOSITE_BIT14      1B3E
OPPOSITE_BIT15      1B4E
OPPOSITE_BIT2       1A7E
OPPOSITE_BIT3       1A8E
OPPOSITE_BIT4       1A9E
OPPOSITE_BIT5       1AAE
OPPOSITE_BIT6       1ABE
OPPOSITE_BIT7       1ACE
OPPOSITE_BIT8       1ADE
OPPOSITE_BIT9       1AEE
OPPOSITE_CHECK      19B0
OPPOSITE_CHECK_SECOND  19C2
OPPOSITE_IS_USED    19D6
OPPOSITE_IS_USED_FIRST  19CC
OPPOSITE_JMP_TABLE_MOVEM  19FE
OPPOSITE_LOOP       1988
OPPOSITE_LOOP_MOVEM  19A8
OPPOSITE_LOOP_MOVEM_SECOND  19BA
OPPOSITE_PRINT_REGISTER_MOVEM  19EC
OR_CODE             175C
OR_FIRST_EA         179A
OR_MESSAGE          26A8
OUTPUTCOUNTCURR     0
OUTPUTCOUNTMAX      1F
PARSE_MEMORY        10F0
PARSE_MEMORY_FIRST  10FE
PC_W_DISPLACEMENT   24A6
PC_W_INDEX          24AA
PERIOD              2700
PL                  214E
POUND_SIGN          26FC
PRESS_ENTER_CONTINUE  253C
PRINTADDQ           14E0
PRINTOUT_COUNT      1F44
PRINTOUT_MEMORY_SHIFTS_EA  1FBE
PRINTOUT_MOVE_EA    20B0
PRINTOUT_NIBBLE     22E2
PRINTOUT_NIBBLE_ZERO  2328
PRINTOUT_REGISTER   1F86
PRINTOUT_REGISTER_SHIFTS_EA  1F16
PRINTOUT_SIZE_L     1246
PRINTOUT_SIZE_PURPLE  12D6
PRINTOUT_SIZE_W     1234
PRINT_ADDRESS       1946
PRINT_B             12F0
PRINT_BCC           2186
PRINT_BCS           2196
PRINT_BEQ           21B6
PRINT_BGE           2206
PRINT_BGT           2226
PRINT_BHI           2166
PRINT_BLE           2236
PRINT_BLS           2176
PRINT_BLT           2216
PRINT_BMI           21F6
PRINT_BNE           21A6
PRINT_BPL           21E6
PRINT_BVC           21C6
PRINT_BVS           21D6
PRINT_COMMA         1320
PRINT_EA            234A
PRINT_L             1310
PRINT_REGISTER_MOVEM  1BA2
PRINT_SIZE          16B8
PRINT_SIZE_L_MOVEM  18F0
PRINT_W             1300
PRINT_ZERO          233C
REG000              249A
REG001              249E
REG010              2492
REG011              2496
REG100              24A2
REGITSET_MEMORY     190E
ROD                 1E4A
ROD_MEMORY          1EA8
ROL                 1E64
ROL_MESSAGE         26D6
ROR                 1E86
ROR_MESSAGE         26E5
RO_IMMEDATE         0
RO_REGISTER         1
RTS_MESSAGE         2651
RTS_OPCODE          162E
SET_EA              1340
SHIFT               C
SHIFTS              1D7C
SIZE_B              16F0
SIZE_BYTE           0
SIZE_B_PRINT        26EA
SIZE_L              1704
SIZE_LONG           3
SIZE_L_PRINT        26F6
SIZE_W              16FA
SIZE_WORD           1
SIZE_W_PRINT        26F0
SLASH               2705
SPACE               2702
START               1000
STARTING            25A3
STARTING_ADDR       256A
STARTING_MESSAGE    100C
STOP                2566
STORE_ADDR          10B8
SUB                 156E
SUB_FIRST_EA        15A8
SUB_MESSAGE         26AC
VC                  2146
VS                  214A
WELCOME_MESSAGE     2572
XN_AL               1
XN_AS               0
XN_ID               4
XN_PCWD             2
XN_PCWI             3
