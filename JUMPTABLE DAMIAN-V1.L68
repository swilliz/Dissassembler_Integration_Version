00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 6/3/2016 1:17:36 AM

00000000                             1  CHECK_PARSE_MEMORY
00000000                             2  * Program starts here               
00000000                             3  *                                  
Line 4 ERROR: Undefined symbol
00000000  43F9 004DBB8E              4                    LEA       HEX_SIGN, A1
00000006  103C 000E                  5                    MOVE.B    #14, D0
0000000A  4E4F                       6                    TRAP #15                 
0000000C  3A0D                       7                    MOVE.W   A5, D5
Line 8 ERROR: Undefined symbol
0000000E  4EB9 004DBB8E              8                    JSR        HEX_TO_ASCII
Line 9 ERROR: Undefined symbol
00000014  43F9 004DBB8E              9                    LEA       SPACE, A1
0000001A  103C 000E                 10                    MOVE.B    #14, D0
0000001E  4E4F                      11                    TRAP #15
00000020                            12  
00000020                            13  *                 ORG     $400
00000020                            14  
00000020                            15  *start            LEA     stack,SP        *Load the SP
00000020                            16  
00000020  41F9 00000038             17                   LEA     jmp_table,A0    *Index into the table
00000026                            18  
00000026  4280                      19                   CLR.L   D0              *Zero it
00000028                            20  
00000028  3015                      21                   MOVE.W  (A5),D0     *We'll play with it here
0000002A                            22  
Line 23 ERROR: Undefined symbol
0000002A  123C 008E                 23                   MOVE.B  #shift,D1       *Shift 12 bits to the right  
0000002E                            24  
0000002E  E268                      25                   LSR.W   D1,D0           *Move the bits
00000030                            26  
00000030                            27  *
00000030                            28  
00000030                            29  * Consider the next instruction. Why do we have to multiply the index 
00000030                            30  
00000030                            31  * by 6? How many bytes does a single jump table entry require? 
00000030                            32  
00000030                            33   
00000030                            34  
00000030  C0FC 0006                 35                 MULU        #6,D0       *Form offset     
00000034                            36  
00000034  4EB0 0000                 37                 JSR         0(A0,D0)   *Jump indirect with index
00000038                            38  
00000038                            39                      
00000038                            40  
00000038  4EF9 00000098             41  jmp_table      JMP         code0000
0000003E                            42  
0000003E  4EF9 0000009C             43                 JMP         code0001
00000044                            44  
00000044  4EF9 000000A0             45                 JMP         code0010
0000004A                            46  
0000004A  4EF9 000000A4             47                 JMP         code0011
00000050                            48  
00000050  4EF9 000000A8             49                 JMP         code0100
00000056                            50  
00000056  4EF9 000000AC             51                 JMP         code0101
0000005C                            52  
0000005C  4EF9 000000B0             53                 JMP         code0110
00000062                            54  
00000062  4EF9 000000B4             55                 JMP         code0111
00000068                            56  
00000068  4EF9 000000B8             57                 JMP         code1000
0000006E                            58  
0000006E  4EF9 000000BC             59                 JMP         code1001
00000074                            60  
00000074  4EF9 000000C0             61                 JMP         code1010
0000007A                            62  
0000007A  4EF9 000000C4             63                 JMP         code1011
00000080                            64  
00000080  4EF9 000000C8             65                 JMP         code1100
00000086                            66  
00000086  4EF9 000000CC             67                 JMP         code1101
0000008C                            68  
0000008C  4EF9 000000D0             69                 JMP         code1110
00000092                            70  
00000092  4EF9 000000D4             71                 JMP         code1111
00000098                            72  
00000098                            73          
00000098                            74  
00000098                            75   
00000098                            76  
00000098                            77  *The following subroutines will get filled in as you decode the instructions . For *now, just exit gracefully.
00000098                            78  
00000098                            79   
00000098                            80  
00000098                            81   
00000098                            82  
Line 83 ERROR: Undefined symbol
00000098  6000 BAF4                 83  code0000       BRA         ADDI
0000009C                            84  
Line 85 ERROR: Undefined symbol
0000009C  6000 BAF0                 85  code0001       BRA         MOVEB
000000A0                            86  
Line 87 ERROR: Undefined symbol
000000A0  6000 BAEC                 87  code0010       BRA         MOVEL
000000A4                            88  
Line 89 ERROR: Undefined symbol
000000A4  6000 BAE8                 89  code0011       BRA         MOVEW
000000A8                            90  
Line 91 ERROR: Undefined symbol
000000A8  6000 BAE4                 91  code0100       BRA         GROUP_0100_CODE
000000AC                            92  
Line 93 ERROR: Undefined symbol
000000AC  6000 BAE0                 93  code0101       BRA         ADDQ   * Subroutine for ADDQ
000000B0                            94  
Line 95 ERROR: Undefined symbol
000000B0  6000 BADC                 95  code0110       BRA         BCC
000000B4                            96  
Line 97 ERROR: Undefined symbol
000000B4  6000 BAD8                 97  code0111       BRA         MOVEQ
000000B8                            98  
Line 99 ERROR: Undefined symbol
000000B8  6000 BAD4                 99  code1000       BRA         DIVU_OR
000000BC                           100  
Line 101 ERROR: Undefined symbol
000000BC  6000 BAD0                101  code1001       BRA         SUB    * Subroutine for SUB
000000C0                           102  
000000C0  4E72 2700                103  code1010       STOP        #$2700
000000C4                           104  
000000C4                           105   
000000C4                           106  
000000C4                           107  * Next we put in the next level of decoding. I just stuck this BRA
000000C4                           108  
000000C4                           109  * instruction here so it would look different. If this was your real
000000C4                           110  
000000C4                           111  * code, you would decode to the next level. Perhaps this would be
000000C4                           112  
000000C4                           113   * another jump table to the 8 possible op-codes at the next level.
000000C4                           114  
000000C4                           115   
000000C4                           116  
Line 117 ERROR: Undefined symbol
000000C4  6000 BAC8                117  code1011       BRA        CMP  * Subroutuine for CMP
000000C8                           118  
Line 119 ERROR: Undefined symbol
000000C8  6000 BAC4                119  code1100       BRA        MULS_AND
000000CC                           120  
Line 121 ERROR: Undefined symbol
000000CC  6000 BAC0                121  code1101       BRA         ADD_ADDA       *#$2700
000000D0                           122  
Line 123 ERROR: Undefined symbol
000000D0  6000 BABC                123  code1110       BRA         SHIFTS
000000D4                           124  
000000D4  4E72 2700                125  code1111       STOP        #$2700
000000D8                           126                   
000000D8                           127  
000000D8                           128                      
000000D8                           129              
000000D8                           130  
000000D8                           131  *            *INCLUDE 'MESSAGE_Data.X68'
000000D8                           132  *            INCLUDE 'JUMPTABLE EA.X68'
000000D8                           133  *               END   $400 
000000D8                           134  
000000D8                           135  
000000D8                           136  
000000D8                           137  
000000D8                           138  
000000D8                           139  
000000D8                           140  
000000D8                           141  
000000D8                           142  
000000D8                           143  
000000D8                           144  
000000D8                           145  
000000D8                           146  
000000D8                           147  
000000D8                           148  
000000D8                           149  
000000D8                           150  
000000D8                           151  
000000D8                           152  
000000D8                           153  
000000D8                           154  
Line 155 WARNING: END directive missing, starting address not set

18 errors detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
CHECK_PARSE_MEMORY  0
CODE0000            98
CODE0001            9C
CODE0010            A0
CODE0011            A4
CODE0100            A8
CODE0101            AC
CODE0110            B0
CODE0111            B4
CODE1000            B8
CODE1001            BC
CODE1010            C0
CODE1011            C4
CODE1100            C8
CODE1101            CC
CODE1110            D0
CODE1111            D4
JMP_TABLE           38
